{
  "documents": [
    "[{\n  \"url\": \"https://docs.mantle.xyz/network\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network\",\n    \"loadedTime\": \"2025-02-15T20:30:40.288Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 0,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network\",\n    \"title\": \"Overviews | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Overviews | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/TQqhQCjyixjwZ5DGBjGS\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTkyZjk2OWItMDE2My00MWQxLTkzODQtNGVkYWYxZTRmOTMz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=1PGqB2Bf04aOUGnnjxZgpJwip0nDJy5NyktXZT%2BIwpqjt%2Fyo2HUxQT%2BNR9qCsRI8AlQ5iB4BOCM36MDO1AT3NtwNexFbdxZ%2BmiTSJNv20qhNpSiQCy7LifbPC3Hj4m7XgJKF%2BfmRPgRgyu%2BxNMyj\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280e6bdfb1f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Overviews | Network\\nMantle Network is dedicated to building an EVM-compatible scaling solution for Ethereum. This means that all contracts and tools running on Ethereum can operate on the Mantle Network with minimal modifications. Taking advantage of its modular architecture, Mantle Network combines an optimistic rollup with various innovative data availability solutions, providing cheaper and more accessible data availability while inheriting the security of Ethereum.\\nOur protocol design philosophy aims to offer users a less costly and more user-friendly experience, provide developers with a simpler and more flexible development environment, and deliver a comprehensive set of infrastructure for the next wave of mass-adopted dApps.\\nKey Features of Mantle Network\\nBuilt as a Rollup\\nUtilizes Ethereum validators and consensus protocols to significantly reduce gas fees, decrease latency, and increase throughput. Users can customize transaction confirmation requirements to provide near real-time confirmation latency with minimal security settings.\\nModular Architecture\\nUnlike traditional monolithic chains that execute transaction execution, consensus, settlement, and storage at the same network layer, Mantle separates these functions into individual modules as a modular chain. These include an EVM-compatible execution layer developed by Mantle for transaction execution, a consensus layer and settlement layer completed on Ethereum, and an external DA component (currently Mantle DA powered by EigenDA technology; we will switch to EigenDA upon its mainnet stable launch).\\nSecured by Ethereum\\nL2 state transitions are verified by Ethereum validators, undergoing the same consensus and settlement processes as L1 transactions.\\nModular Data Availability\\nIndependent DA modules, such as Mantle DA powered by EigenLayer's EigenDA technology. According to internal assessments, this translates to potential cost savings of more than 90% compared to on-chain L1.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Overviews | Network\\n\\nMantle Network is dedicated to building an EVM-compatible scaling solution for Ethereum. This means that all contracts and tools running on Ethereum can operate on the Mantle Network with minimal modifications. Taking advantage of its modular architecture, Mantle Network combines an optimistic rollup with various innovative data availability solutions, providing cheaper and more accessible data availability while inheriting the security of Ethereum.\\n\\nOur protocol design philosophy aims to offer users a less costly and more user-friendly experience, provide developers with a simpler and more flexible development environment, and deliver a comprehensive set of infrastructure for the next wave of mass-adopted dApps.\\n\\n## \\n\\nKey Features of Mantle Network\\n\\n*   **Built as a Rollup**\\n    \\n    *   Utilizes Ethereum validators and consensus protocols to significantly reduce gas fees, decrease latency, and increase throughput. Users can customize transaction confirmation requirements to provide near real-time confirmation latency with minimal security settings.\\n        \\n    \\n*   **Modular Architecture**\\n    \\n    *   Unlike traditional [monolithic chains](https://docs.mantle.xyz/network/more/glossary#monolithic-chains) that execute transaction execution, consensus, settlement, and storage at the same network layer, Mantle separates these functions into individual modules as a [modular chain](https://docs.mantle.xyz/network/more/glossary#modular-chains). These include an EVM-compatible execution layer developed by Mantle for transaction execution, a consensus layer and settlement layer completed on Ethereum, and an external DA component (currently Mantle DA powered by EigenDA technology; we will switch to EigenDA upon its mainnet stable launch).\\n        \\n    \\n*   **Secured by Ethereum**\\n    \\n    *   L2 state transitions are verified by Ethereum validators, undergoing the same consensus and settlement processes as L1 transactions.\\n        \\n    \\n*   **Modular Data Availability**\\n    \\n    *   Independent DA modules, such as Mantle DA powered by EigenLayer's EigenDA technology. According to internal assessments, this translates to potential cost savings of more than **90%** compared to on-chain L1.\\n        \\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/updated-notices/eigenda-migration-for-mantle-sepolia\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/eigenda-migration-for-mantle-sepolia\",\n    \"loadedTime\": \"2025-02-15T20:30:40.288Z\",\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/eigenda-migration-for-mantle-sepolia\",\n    \"title\": \"EigenDA Migration for Mantle Sepolia | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"EigenDA Migration for Mantle Sepolia | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/pGoJIJRxRDln6HW4FSV5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:36 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-N2M4ZGExMTYtMzA4NS00ZWFhLWI3OGEtMjVlOWUyNTYxODg3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=d8dUGH05QWmRl6yAT5hf2xKikc63r%2FO2tE6TKxMoaBojQ4qv4%2FdDUDZzPNOj6HDqbb7yjb5GpNVitA%2FDTDhdL3E5CQUF57pAuXSfXUbcdy8kocaA%2BFXTBPKWYkDupd2Z8AJyjjlEsFxsXqSqE7ni\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280e86285cf0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"EigenDA Migration for Mantle Sepolia\\nThis hardfork upgrade is currently only happening on the Mantle Sepolia test network.\\nWelcome to the upgrade guide for migrating your node and applications from v1.0.0 to v1.0.1. Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\nWhat's New in This Upgrade?​\\nIn this hardfork upgrade we will include the following upgrades:\\nMigrate Mantle DA to EigenDA - With the launch of EigenDA, we will switch Mantle DA powered by EigenDA to EigenDA for a better and more stable DA service!\\nFix some bugs of MetaTX service - MetaTX, as a gasless service for Mantle, was found to have a few bugs, which we've modified.\\nFor Node Operators​\\nNode operators should restart their nodes using the new version of Mantle v2 Tectonic (v1.0.1). Please follow the node running tutorial we provide, which contains the running environment requirements and the corresponding steps.\\nChangelogs corresponding to this hardfork upgrade is available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\nFor Developers​\\nIn this upgrade, we have addressed and optimized a series of bugs and issues that were occurring with the MetaTX service. These improvements are aimed at enhancing the overall stability and performance of MetaTX, ensuring a smoother and more reliable experience for developers utilizing this service.\\nWhile upgrade operations may cause temporary inconvenience, we believe that with your support and cooperation, we can smoothly finish this upgrade.\\nIf you have any questions or need further assistance regarding to this upgrade, feel free to contact our support team.\\nHappy upgrading! 🎉🎉🎉\\nLast updated 3 months ago\",\n  \"markdown\": \"# EigenDA Migration for Mantle Sepolia\\n\\nThis hardfork upgrade is currently only happening on the Mantle Sepolia test network.\\n\\nWelcome to the upgrade guide for migrating your node and applications from v1.0.0 to v1.0.1. Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\n\\n## \\n\\nWhat's New in This Upgrade?[​](https://docs-v2.mantle.xyz/intro/migration-guides-sepolia#whats-new-in-this-upgrade)\\n\\nIn this hardfork upgrade we will include the following upgrades:\\n\\n*   **Migrate Mantle DA to EigenDA** - With the launch of EigenDA, we will switch Mantle DA powered by EigenDA to EigenDA for a better and more stable DA service!\\n    \\n*   **Fix some bugs of MetaTX service** - MetaTX, as a gasless service for Mantle, was found to have a few bugs, which we've modified.\\n    \\n\\n## \\n\\nFor Node Operators[​](https://docs-v2.mantle.xyz/intro/migration-guides-sepolia#for-node-operators)\\n\\n**Node operators should restart their nodes using the new version of Mantle v2 Tectonic (v1.0.1).** Please follow the node running [tutorial](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker) we provide, which contains the running environment requirements and the corresponding steps.\\n\\n[Changelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2) corresponding to this hardfork upgrade is available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\n\\n## \\n\\nFor Developers[​](https://docs-v2.mantle.xyz/intro/migration-guides-sepolia#for-developers)\\n\\nIn this upgrade, we have addressed and optimized a series of bugs and issues that were occurring with the MetaTX service. These improvements are aimed at enhancing the overall stability and performance of MetaTX, ensuring a smoother and more reliable experience for developers utilizing this service.\\n\\n* * *\\n\\nWhile upgrade operations may cause temporary inconvenience, we believe that with your support and cooperation, we can smoothly finish this upgrade.\\n\\nIf you have any questions or need further assistance regarding to this upgrade, feel free to contact our support team.\\n\\nHappy upgrading! 🎉🎉🎉\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/updated-notices\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices\",\n    \"loadedTime\": \"2025-02-15T20:30:40.078Z\",\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices\",\n    \"title\": \"Updated Notices | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Updated Notices | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/qZc1p7pVfA1hjogEYqRo\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWMyZWJkZDktNDgyOS00ZDg4LTgxZTQtNThkM2E1ZDA4ZWJl' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=vCu%2FixkcKeKOQwJrCHqpopuzRQzt1%2BJWEvoOhqQfKkwB%2FDR4GGkSQN9Alk0jsKnybN1V%2BiiyAjIjVT8Gld7%2FHAGnb4f79Un9IPwVQnOkqp3e8CjQlknG2%2B2L91iQwJbTcWA3jwWf6RuYMLrRryI%2B\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280e6c8cb2474c-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Updated Notices | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Updated Notices | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/updated-notices?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/updated-notices?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:30:48.483Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n    \"depth\": 0,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n    \"title\": \"Use Remix to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Remix to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/OFzjOgnLlK7O6i5cJxGT\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-N2RmODgwY2MtY2ZjOC00MTA4LWFlZTMtOGVjNGMyMmM0NTZh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=r2YVBaav8vh5hIGYggVVawT1FF6iIpOFuZWgQ7tNlNhYuL2SjEGHAtmGJvDGrjikIDFjPoCjK88DMCqQZBFG76sJ4OcXx%2BZC2ey0ZOlNEVe0uogJcWgJ82fXgBRqSCoQmT1mRb79L%2Bjjz1pYByMq\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ec49815f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Remix to Deploy Smart Contracts\\nRemix's web-based IDE supports writing, testing, debugging, and deploying smart contracts written in Solidity, Yul, and other popular contract development languages.\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Faucet page\\nDeploy your contract​\\nStart by opening Remix in your browser. Create a new .sol file under the \\\"Contracts\\\" folder and start writing your code. This tutorial will use the initial example contract Storage.sol.\\nOnce ready, you can proceed with compiling the contract by either clicking the Compile button on the top, or clicking on the blue button that says \\\"Compile <file_name>\\\", which you can access by navigating to the \\\"Solidity Compiler\\\" tab by clicking on the left.\\nIf the compilation was successful (A green checkmark will appear on the left side), you'll be able to deploy the contract from the \\\"Deploy & run transactions\\\" tab, which can be accessed by clicking on the left.\\nSwitch to Mantle Network in your MetaMask wallet and select \\\"Injected Provider - MetaMask\\\" from the \\\"Environment\\\" dropdown list and select a wallet account that will be used to pay the gas fees. Remix will automatically connect to the network that the wallet is currently connected to. Click on the Deploy button to send the deploy transaction.\\nUpon successful deployment, you'll be able to see the transaction and contract info in the terminal at the bottom, like so:\\nNow you can head over to Mantle blockchain explorer to check the contract details.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Remix to Deploy Smart Contracts\\n\\n[Remix's web-based IDE](https://remix.ethereum.org/) supports writing, testing, debugging, and deploying smart contracts written in Solidity, Yul, and other popular contract development languages.\\n\\n## \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/remix#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nDeploy your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/remix#deploy-your-contract)\\n\\nStart by opening Remix in your browser. Create a new `.sol` file under the **\\\"Contracts\\\"** folder and start writing your code. This tutorial will use the initial example contract `Storage.sol`.\\n\\nOnce ready, you can proceed with compiling the contract by either clicking the **Compile** button on the top, or clicking on the blue button that says **\\\"Compile <file\\\\_name>\\\"**, which you can access by navigating to the **\\\"Solidity Compiler\\\"** tab by clicking on the left.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3885809119-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FQliZlRNwHhmzesDU1Ksq%252Fuploads%252FOmnGd1wlX6XOvi7GCPQE%252Fimage.png%3Falt%3Dmedia%26token%3Db42de9e2-e010-4f95-bbd4-cdb2e88b5956&width=300&dpr=4&quality=100&sign=d9d7a656&sv=2)\\n\\nIf the compilation was successful (A green checkmark will appear on the left side), you'll be able to deploy the contract from the **\\\"Deploy & run transactions\\\"** tab, which can be accessed by clicking on the left.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fremix-2-f6db30a606a1a715ab07e0e3f18bedb8.png&width=300&dpr=4&quality=100&sign=dba8aa0a&sv=2)\\n\\nSwitch to Mantle Network in your MetaMask wallet and select **\\\"Injected Provider - MetaMask\\\"** from the **\\\"Environment\\\"** dropdown list and select a wallet account that will be used to pay the gas fees. Remix will automatically connect to the network that the wallet is currently connected to. Click on the **Deploy** button to send the deploy transaction.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fremix-3-1206181ef7742e278ee23c494c3e69a6.png&width=300&dpr=4&quality=100&sign=4d2f94f2&sv=2)\\n\\nUpon successful deployment, you'll be able to see the transaction and contract info in the terminal at the bottom, like so:\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fremix-4-04e1ed4b15f163c32d2853c9fe5f2219.png&width=300&dpr=4&quality=100&sign=5df2951c&sv=2)\\n\\nNow you can head over to [Mantle blockchain explorer](https://mantlescan.xyz/) to check the contract details.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:30:48.692Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n    \"depth\": 0,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n    \"title\": \"Use Explorer to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Explorer to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/0xfWnUEm04NnZpyFwty5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZGMwMWM4NzktYWJhZC00MGI5LWEwYTAtNzkzMGUxN2EwYmEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=vUaMjppHAo7PAuRpPkGj3FH8z8PgfFFbCDbulRnoZoRFC80GT0a4kMYfsBdl6Vp2SNp3JUziJ51r%2BWWhtCCZwVZla%2BhARoQY2YKkGmW2xMIV9MY5awP2AqmgzgSitqIujoa66eI%2FT2sGwAzPIkvJ\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ec06d83f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Explorer to Verify Smart Contracts\\nThere are multiple methods of verification available via Mantle Explorer.\\nVia Source Code​\\nPlugging Code Into Explorer​\\nOnce you have obtained the source code, fill in the contract address, contract name, the flattened code, and other fields on Mantle Explorer and proceed with verifying your contract.\\nMake sure to select the correct compiler for your contract, the proper EVM version and the optimization number.\\nVia Standard Input JSON​\\nGet JSON file​\\nThe file can be found under the \\\"Solidity Compiler\\\" tab that can be accessed by clicking on the left navigate bar.\\nClick on the Compilation Details button to bring up a menu from where you can copy the COMPILERINPUT code, as shown below.\\nImporting JSON file to Explorer​\\nOnce you've obtained the standard input JSON values in a file, you can import it to the explorer, as shown below.\\nChoose \\\"Solidity (Standard-Json-Input)\\\" as the compiler type. \\nUpload the json file and verify it.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Explorer to Verify Smart Contracts\\n\\nThere are multiple methods of verification available via [Mantle Explorer](https://mantlescan.xyz/verifyContract).\\n\\n## \\n\\nVia Source Code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#via-source-code)\\n\\n### \\n\\nPlugging Code Into Explorer[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#plugging-code-into-explorer)\\n\\nOnce you have obtained the source code, fill in the contract address, contract name, the flattened code, and other fields on [Mantle Explorer](https://mantlescan.xyz/verifyContract) and proceed with verifying your contract.\\n\\nMake sure to select the correct compiler for your contract, the proper EVM version and the optimization number.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-3-9893936ecddd85016c449f96b7f3a985.png&width=768&dpr=4&quality=100&sign=1dfae141&sv=2)\\n\\n## \\n\\nVia Standard Input JSON[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#via-standard-input-json)\\n\\n### \\n\\nGet JSON file[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#get-json-file)\\n\\n1.  The file can be found under the **\\\"Solidity Compiler\\\"** tab that can be accessed by clicking on the left navigate bar.\\n    \\n    ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-4-eb99e50581b67f4a3c7f2ce943b096cf.png&width=768&dpr=4&quality=100&sign=8e647521&sv=2)\\n    \\n2.  Click on the **Compilation Details** button to bring up a menu from where you can copy the `COMPILERINPUT` code, as shown below.\\n    \\n    ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-5-7a9fd705b6a549cba5041f677a8835b7.png&width=768&dpr=4&quality=100&sign=74c36abc&sv=2)\\n    \\n\\n### \\n\\nImporting JSON file to Explorer[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#importing-json-file-to-explorer)\\n\\nOnce you've obtained the standard input JSON values in a file, you can import it to the explorer, as shown below.\\n\\nChoose \\\"Solidity (Standard-Json-Input)\\\" as the compiler type.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-11-b97590c291ac8713469c3111eab3eea4.png&width=768&dpr=4&quality=100&sign=4af0d611&sv=2)\\n\\nUpload the json file and verify it.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3885809119-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FQliZlRNwHhmzesDU1Ksq%252Fuploads%252Fbe0yiM6g7sAxKzT9zlUx%252Fimage.png%3Falt%3Dmedia%26token%3Dbe4f6c42-4711-408a-a5b6-05c57b2d72ea&width=768&dpr=4&quality=100&sign=23d2e0ba&sv=2)\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"loadedTime\": \"2025-02-15T20:30:53.256Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network\",\n    \"title\": \"Overview | Network\",\n    \"description\": \"Your one-stop guide to understanding the different modules that make up Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Overview | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Your one-stop guide to understanding the different modules that make up Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/smaoJ5knZHPOtFm81Vkg\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MjlmZDgzY2UtODE3Yy00MDUwLWIxMjEtZDI0MGRkMTllNDY3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lRBXJvCnQPG5D1fHJX%2BIYd%2FbMkc%2BDHCTTEEXzrBlwDsMnrrasqGPfjykRMCaTGrs3snys6kMxl76nYCj3AIC0EtgvyRT%2BQJlkOlbP6%2FYFk%2B0iGaJQL0aY9P%2B0MraBUJNg%2BYxOdFQeFQAZ2OXfcqF\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ecf4b72f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Overview | Network\\nYour one-stop guide to understanding the different modules that make up Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nMantle Network is a technology stack for scaling Ethereum, and we strive to be EVM-compatible while doing so. Being EVM-compatible means all the contracts and tools that work on Ethereum also work on Mantle Network with minimal modifications. Users can experiment with exciting web3 apps, and developers can deploy smart contracts in an efficient, low-fee environment. \\nAt its core, Mantle Network has been built with a modular architecture that combines an optimistic rollup protocol with an innovative data availability solution. This allows Mantle Network to inherit security from Ethereum AND offer cheaper and more accessible data availability. \\nIf you find any of these terms unfamiliar, we encourage you to visit Optimistic Rollups and the pages that follow where we go over blockchain, rollups, and Mantle's key innovations in a more approachable way. \\nOn the other hand, if these terms make you excited for the future of blockchain scaling we encourage you to keep reading! \\nMantle Network vs. Non-Rollup Chains\\nEthereum rollups, including Mantle Network, leverage the Ethereum validator set and consensus protocol, which is widely regarded as more secure compared to other layer-1 (L1) validator sets. This grants Mantle Network several advantages, such as:\\nCanonical bridging without relying on third-party bridges\\nCensorship resistance\\nFund recovery options even in the event of critical issues on layer-2 (L2)\\nSecured by Ethereum\\nMantle Network is an L2 scalability solution built on top of Ethereum. The validator nodes collect transactions from users and commit them to Ethereum in the form of a \\\"compressed block\\\". This compression saves users expensive gas fees and increases the total possible throughput for transactions. \\nBy building on top of Ethereum, Mantle Network inherits desirable features like-\\nSecured by Ethereum: L2 state transitions are verified by Ethereum validators, going through the same consensus and settlement process as L1 transactions.\\nCommon developer infrastructure: Smart contract development frameworks like Truffle, Hardhat, Foundry, Remix, etc., languages like Solidity, Vyper, Yul, etc., and libraries like Web3.js and ethers.js, etc. can all be used on Mantle.\\nAt the same time, Mantle Network offers a superior user experience with multiple other benefits as compared to L1, such as-\\nSignificantly lower gas fees: Users enjoy over 80% reduction in gas fees which are achieved through data compression and modular data availability.\\nReduced latency and improved throughput: Users can customize transaction confirmation requirements, with the lowest security setting providing near real-time confirmation latencies (~10 milliseconds versus Ethereum's ~12 seconds). Additionally, Mantle Network achieves a transaction throughput some 20 times greater than Ethereum (500 TPS versus Ethereum's ~25 TPS)\\nModular Architecture\\nMantle Network takes a modular approach with chain design. While monolithic chains perform transaction execution, consensus, settlement, and storage at the same network layer, these processes are handled by separate modules on Mantle Network. In its initial Mainnet version, Mantle Network functions as a Smart Contract Rollup with modular data availability. Hence,\\nMantle's execution layer provides an EVM-compatible environment for transaction execution where the sequencer produces blocks on L2 and sends state root data to L1\\nConsensus and settlement take place on L1 Ethereum\\nData availability services are provided to network actors through Mantle DA powered by EigenDA technology that stores callback data that would be published to L1 in traditional rollups\\nSequencer Properties\\nThe centralized sequencer on Mantle Network produces L2 blocks by including transactions in them in the order they are received by the nodes. It also publishes updated state roots to L1.\\nWe include can additional sequencer module referred to as Threshold Signature Scheme(TSS). This module consists of a set of whitelisted node operators who sign blocks and contribute to multi-party signatures that help improve the correctness of off-chain transaction execution results. In the event that an N of M threshold is not met, the sequencer may re-sequence a batch of L2 blocks, or transition to a backup sequencer.\\nThe transition to a backup sequencer is controlled by the core DevOps team, with measures in place to minimize downtime.\\nFraud Proofs\\nOptimistic Rollups execute transactions that result in state transitions, and updated state data are published to L1 Ethereum assuming their validity and without providing any direct proofs for the same. Mantle Network sends updated state data to a State Commitment Chain (SCC) contract on L1, where network actors can challenge its validity within a challenge period (currently set to 7 days). If the state data goes unchallenged, it is considered valid and final and withdrawal requests that rely on this state data can be processed by other smart contracts.\\nIf a commitment gets challenged, a verifier interacts with the challenger to narrow down the invalidity to a single state transition, at which point its validity is established by executing it. In case of a successful challenge, the state transition is discarded and the contract accepts the valid version of the updated state submitted by the challenger.\\nTo learn more about the advantages of this mechanism, check out the Fraud Proofs page talking about it in detail.\\nData Availability\\nData availability (of L2 batch data) is a critical aspect of Ethereum rollups, such that L1 validators can verify the L2 state. DA is generally the most expensive component of rollups, as it requires Ethereum L1 block space. Common industry approaches to data availability include:\\nOn-Chain L1: All data that is needed for proof construction is available on L1.\\nCentralized DA Committees: Data for proof construction is not available on L1. There exists a committee tasked with supplying the data. This approach presents significant cost savings to the rollup, at the risk that data becomes unavailable.\\nModular Data Availability**: Standalone DA modules, like Mantle DA powered by EigenLayer's EigenDA technology. Data availability is enabled via DA economic game theory involving rewards and stake slashing. Based on internal evaluations, this translates to a 30-70% cost savings compared to on-chain L1.\\n** denotes approach of the initial Mantle Network Mainnet version\\nCheck out the page on Data Availability to learn more about how modular Data Availability is implemented on Mantle Network.\\nWhere do I get started?\\nMantle Network's L2 rollup infrastructure is being developed to meet the needs of the growing $MNT ecosystem. \\nGet in touch with our growth team here for support.\\nYou can find essential info on how to link your wallet to Mantle Network, acquiring testnet tokens, dev tutorials, and more in the How-to Guides section. If you're a developer, the Developing on Mantle page is a great place to start.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Overview | Network\\n\\nYour one-stop guide to understanding the different modules that make up Mantle Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nMantle Network is a technology stack for scaling Ethereum, and we strive to be EVM-compatible while doing so. Being EVM-compatible means all the contracts and tools that work on Ethereum also work on Mantle Network with minimal modifications. Users can experiment with exciting web3 apps, and developers can deploy smart contracts in an efficient, low-fee environment.\\n\\nAt its core, Mantle Network has been built with a modular architecture that combines an optimistic rollup protocol with an innovative data availability solution. This allows Mantle Network to inherit security from Ethereum AND offer cheaper and more accessible data availability.\\n\\nIf you find any of these terms unfamiliar, we encourage you to visit [Optimistic Rollups](https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups) and the pages that follow where we go over blockchain, rollups, and Mantle's key innovations in a more approachable way.\\n\\nOn the other hand, if these terms make you excited for the future of blockchain scaling we encourage you to keep reading!\\n\\n## \\n\\nMantle Network vs. Non-Rollup Chains\\n\\nEthereum rollups, including Mantle Network, leverage the Ethereum validator set and consensus protocol, which is widely regarded as more secure compared to other layer-1 (L1) validator sets. This grants Mantle Network several advantages, such as:\\n\\n*   Canonical bridging without relying on third-party bridges\\n    \\n*   Censorship resistance\\n    \\n*   Fund recovery options even in the event of critical issues on layer-2 (L2)\\n    \\n\\n## \\n\\nSecured by Ethereum\\n\\nMantle Network is an L2 scalability solution built on top of Ethereum. The validator nodes collect transactions from users and commit them to Ethereum in the form of a \\\"compressed block\\\". This compression saves users expensive gas fees and increases the total possible throughput for transactions.\\n\\nBy building on top of Ethereum, Mantle Network inherits desirable features like-\\n\\n*   **Secured by Ethereum:** L2 state transitions are verified by Ethereum validators, going through the same consensus and settlement process as L1 transactions.\\n    \\n*   **Common developer infrastructure:** Smart contract development frameworks like Truffle, Hardhat, Foundry, Remix, etc., languages like Solidity, Vyper, Yul, etc., and libraries like Web3.js and ethers.js, etc. can all be used on Mantle.\\n    \\n\\nAt the same time, Mantle Network offers a superior user experience with multiple other benefits as compared to L1, such as-\\n\\n*   **Significantly lower gas fees:** Users enjoy over 80% reduction in gas fees which are achieved through data compression and modular data availability.\\n    \\n*   **Reduced latency and improved throughput:** Users can customize transaction confirmation requirements, with the lowest security setting providing near real-time confirmation latencies (~10 milliseconds versus Ethereum's ~12 seconds). Additionally, Mantle Network achieves a transaction throughput some 20 times greater than Ethereum (500 TPS versus Ethereum's ~25 TPS)\\n    \\n\\n## \\n\\nModular Architecture\\n\\nMantle Network takes a modular approach with chain design. While monolithic chains perform transaction execution, consensus, settlement, and storage at the same network layer, these processes are handled by separate modules on Mantle Network. In its initial Mainnet version, Mantle Network functions as a Smart Contract Rollup with modular data availability. Hence,\\n\\n*   Mantle's execution layer provides an EVM-compatible environment for transaction execution where the sequencer produces blocks on L2 and sends state root data to L1\\n    \\n*   Consensus and settlement take place on L1 Ethereum\\n    \\n*   Data availability services are provided to network actors through Mantle DA powered by [EigenDA](https://eigenlayer.xyz/) technology that stores callback data that would be published to L1 in traditional rollups\\n    \\n\\n## \\n\\nSequencer Properties\\n\\nThe centralized sequencer on Mantle Network produces L2 blocks by including transactions in them in the order they are received by the nodes. It also publishes updated state roots to L1.\\n\\nWe include can additional sequencer module referred to as [Threshold Signature Scheme](https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme)(TSS). This module consists of a set of whitelisted node operators who sign blocks and contribute to multi-party signatures that help improve the correctness of off-chain transaction execution results. In the event that an _N of M_ threshold is not met, the sequencer may re-sequence a batch of L2 blocks, or transition to a backup sequencer.\\n\\nThe transition to a backup sequencer is controlled by the core DevOps team, with measures in place to minimize downtime.\\n\\n## \\n\\nFraud Proofs\\n\\nOptimistic Rollups execute transactions that result in state transitions, and updated state data are published to L1 Ethereum assuming their validity and without providing any direct proofs for the same. Mantle Network sends updated state data to a State Commitment Chain (SCC) contract on L1, where network actors can challenge its validity within a challenge period (currently set to 7 days). If the state data goes unchallenged, it is considered valid and final and withdrawal requests that rely on this state data can be processed by other smart contracts.\\n\\nIf a commitment gets challenged, a verifier interacts with the challenger to narrow down the invalidity to a single state transition, at which point its validity is established by executing it. In case of a successful challenge, the state transition is discarded and the contract accepts the valid version of the updated state submitted by the challenger.\\n\\nTo learn more about the advantages of this mechanism, check out the [Fraud Proofs](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs) page talking about it in detail.\\n\\n## \\n\\nData Availability\\n\\nData availability (of L2 batch data) is a critical aspect of Ethereum rollups, such that L1 validators can verify the L2 state. DA is generally the most expensive component of rollups, as it requires Ethereum L1 block space. Common industry approaches to data availability include:\\n\\n*   **On-Chain L1:** All data that is needed for proof construction is available on L1.\\n    \\n*   **Centralized DA Committees:** Data for proof construction is not available on L1. There exists a committee tasked with supplying the data. This approach presents significant cost savings to the rollup, at the risk that data becomes unavailable.\\n    \\n*   **Modular Data Availability\\\\*\\\\*:** Standalone DA modules, like Mantle DA powered by [EigenLayer's](https://www.eigenlayer.xyz/) EigenDA technology. Data availability is enabled via DA economic game theory involving rewards and stake slashing. Based on internal evaluations, this translates to a 30-70% cost savings compared to on-chain L1.\\n    \\n\\n_\\\\*\\\\* denotes approach of the initial Mantle Network Mainnet version_\\n\\nCheck out the page on [Data Availability](https://docs.mantle.xyz/network/network/introduction/concepts/data-availability) to learn more about how modular Data Availability is implemented on Mantle Network.\\n\\n## \\n\\nWhere do I get started?\\n\\nMantle Network's L2 rollup infrastructure is being developed to meet the needs of the growing [**$MNT** ecosystem](https://mantle.xyz/).\\n\\nGet in touch with our growth team [**here**](https://airtable.com/shr9ATBlHZXCKDbPV) for support.\\n\\nYou can find essential info on how to link your wallet to Mantle Network, acquiring testnet tokens, dev tutorials, and more in the [How-to Guides](https://docs.mantle.xyz/network/network/introduction/how-to-guides) section. If you're a developer, the [Developing on Mantle](https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle) page is a great place to start.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-20-tokens-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-20-tokens-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:30:58.576Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-20-tokens-with-the-mantle-sdk\",\n    \"title\": \"Bridging ERC-20 tokens with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging ERC-20 tokens with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/wI0OA3mE5WgUMBU1uO00\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGFhZGFkNzUtMjUwYi00MDA5LTljMjQtNWVlNzQxYTg5ZGY4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=EbtGgD3cDN9HnBvHBuuoz32d0RFCoifF80IZYq8vh9X8pz%2Fce%2BD%2BnYgWX%2FE0fuezvXd5tVoK%2BQ32HPAzG7napnIN6pJ12NgyCuQkJaEyp3%2FK93ENwY4TN9dPHIhZiDPdS8O2uhsx0Ssfbyv%2FferB\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f04cd22f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging ERC-20 tokens with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial teaches you how to use the Mantle SDK to transfer ERC-20 tokens between layer 1 (L1) and layer 2 (L2). While you could use the bridge contracts directly. Check the complete code here.\\nSetup​\\nEnsure your computer has:\\nStart L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC here and replace the L1 RPC URL in the .env file.\\nClone this repository and enter it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-erc20\\nInstall the necessary packages.\\nRun the sample code​\\nThe sample code is in index.js, the whole execution flow will automatically start after running it.\\nNode Environment​\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file .env.local.tmp then use yarn local to execute index.js.\\nIf you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow does it work?​\\nImport the Necessary Libraries​\\nconst ethers = require('ethers'); const mantleSDK = require('@mantleio/sdk'); const fs = require('fs');\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nfs: The Node.js fs module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\nNetwork Configuration and Wallet Setup​\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the .env file.\\nconst l1bridge = process.env.L1_BRIDGE; const l2bridge = process.env.L2_BRIDGE; const key = process.env.PRIV_KEY;\\nl1bridge and l2bridge: Environment variables representing the addresses of the layer 1 (L1) and layer 2 (L2) bridges.\\nkey: The private key retrieved from the environment variables.\\nWe need to deploy the ERC-20 token by ourselves, so we need to create a factory contract at first.\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('L1TestERC20.json')); const L2StandardERC20 = JSON.parse(fs.readFileSync('L2StandardERC20.json')); const factory__L1_ERC20 = new ethers.ContractFactory( L1TestERC20.abi, L1TestERC20.bytecode, ); const factory__L2_ERC20 = new ethers.ContractFactory( L2StandardERC20.abi, L2StandardERC20.bytecode, );\\nThe configuration parameters required for transfers.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let l1ERC20, l2ERC20; let ourAddr;\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wallet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nSetup CrossChainMessenger Object​\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\nourAddr = l1Wallet.address; crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, });\\nDeploy the ERC-20 token on L1.\\nconsole.log('#################### Deploy ERC20 ####################'); console.log('Deploying L1 ERC20...'); const L1_ERC20 = await factory__L1_ERC20 .connect(l1Wallet) .deploy('L1 TEST TOKEN', 'LTT'); await L1_ERC20.deployTransaction.wait(); console.log('L1 ERC20 Contract ExampleToken Address: ', L1_ERC20.address);\\nMint the ERC-20 token on L1.\\nlet amount = ethers.utils.parseEther('10'); await L1_ERC20.connect(l1Wallet).mint(amount); balance = ( await L1_ERC20.connect(l1Wallet).balanceOf(l1Wallet.address) ).toString(); console.log('mint to ', l1Wallet.address, balance, ' success');\\nApprove the ERC-20 token on L1.\\nawait L1_ERC20.connect(l1Wallet).approve(l1bridge, amount); let allowance = await L1_ERC20.connect(l1Wallet).allowance( l1Wallet.address, l1bridge, ); console.log('allowance: ', allowance.toString());\\nDeploy the ERC-20 token on L2.\\nconsole.log('Deploying L2 ERC20...'); const L2_ERC20 = await factory__L2_ERC20 .connect(l2Wallet) .deploy(L1_ERC20.address); await L2_ERC20.deployTransaction.wait(); console.log( 'L2 ERC20 Contract BVM_L2DepositedERC20 Address: ', L2_ERC20.address, '\\\\n', ); l1ERC20 = L1_ERC20; l2ERC20 = L2_ERC20;\\nReport the Balances​\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\nconst reportERC20Balances = async () => { const l1Balance = await l1ERC20.balanceOf(ourAddr); const l2Balance = await l2ERC20.balanceOf(ourAddr); console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`); };\\nDeposit​\\nThe depositERC20 function deposits 1 ERC-20 token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated LTT balance on L1 and L2.\\nTo show that the deposit actually happened we show before and after balances.\\nconsole.log('#################### Deposit ERC20 ####################'); await reportERC20Balances();\\nTo enable the bridge to transfer ERC-20 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-20 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, there is a custom bridge contract that needs to get the allowance.\\nconst start = new Date(); // Need the l2 address to know which bridge is responsible const allowanceResponse = await crossChainMessenger.approveERC20( l1ERC20.address, l2ERC20.address, oneToken, );\\nWait until the allowance transaction is processed and then report the time it took and the hash.\\nawait allowanceResponse.wait(); console.log(`Allowance given by tx ${allowanceResponse.hash}`); console.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\ncrossChainMessenger.depositERC20() creates and sends the deposit transaction on L1.\\nconst response = await crossChainMessenger.depositERC20( l1ERC20.address, l2ERC20.address, oneToken, );\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`); await response.wait();\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed. The waitForMessageStatus function does this for us.\\nconsole.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.RELAYED, );\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\nawait reportERC20Balances(); console.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`);\\nWithdraw​\\nThis function shows how to withdraw ERC-20 from L2 to L1.\\nTo show that the withdrawal actually happened we show before and after balances.\\nconsole.log('#################### Withdraw ERC20 ####################'); const start = new Date(); await reportERC20Balances();\\ncrossChainMessenger.withdrawERC20() creates and sends the withdraw transaction on L2.\\nconst response = await crossChainMessenger.withdrawERC20( l1ERC20.address, l2ERC20.address, oneToken, ); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\nWe need to wait until the message is ready to prove.\\nconsole.log('Waiting for status to be READY_TO_PROVE'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE, );\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log('Waiting for status to change to IN_CHALLENGE_PERIOD'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD, ); console.log('In the challenge period, waiting for status READY_FOR_RELAY'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY, );\\nFinalizing the message also takes a bit of time.\\nconsole.log('Ready for relay, finalizing message now'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash); console.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nInvoke deposit and withdraw functions​\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nconst main = async () => { await setup(); await depositERC20(); await withdrawERC20(); }; main() .then(() => process.exit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion​\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-20 assets between L1 and L2.\",\n  \"markdown\": \"# Bridging ERC-20 tokens with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial teaches you how to use the Mantle SDK to transfer ERC-20 tokens between layer 1 (L1) and layer 2 (L2). While you _could_ use [the bridge contracts](https://github.com/mantlenetworkio/mantle-v2/blob/develop/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol) directly. Check the complete code [here](https://github.com/mantlenetworkio/mantle-tutorial/blob/main/cross-dom-bridge-erc20/index.js).\\n\\n## \\n\\nSetup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#setup)\\n\\n1.  Ensure your computer has:\\n    \\n2.  Start L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # check status\\n    make ps\\n    ```\\n    \\n    **We highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and enter it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-erc20\\n    ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the sample code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#run-the-sample-code)\\n\\nThe sample code is in `index.js`, the whole execution flow will automatically start after running it.\\n\\n### \\n\\nNode Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#node-environment)\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execute `index.js`.\\n\\nIf you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow does it work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#how-does-it-work)\\n\\n### \\n\\nImport the Necessary Libraries[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#import-the-necessary-libraries)\\n\\n```\\nconst ethers = require('ethers');\\nconst mantleSDK = require('@mantleio/sdk');\\nconst fs = require('fs');\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\n    \\n*   `fs`: The Node.js `fs` module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\n    \\n\\n### \\n\\nNetwork Configuration and Wallet Setup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#network-configuration-and-wallet-setup)\\n\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the `.env` file.\\n\\n```\\nconst l1bridge = process.env.L1_BRIDGE;\\nconst l2bridge = process.env.L2_BRIDGE;\\nconst key = process.env.PRIV_KEY;\\n```\\n\\n*   `l1bridge` and `l2bridge`: Environment variables representing the addresses of the layer 1 (L1) and layer 2 (L2) bridges.\\n    \\n*   `key`: The private key retrieved from the environment variables.\\n    \\n\\nWe need to deploy the ERC-20 token by ourselves, so we need to create a factory contract at first.\\n\\n```\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('L1TestERC20.json'));\\nconst L2StandardERC20 = JSON.parse(fs.readFileSync('L2StandardERC20.json'));\\n\\nconst factory__L1_ERC20 = new ethers.ContractFactory(\\n  L1TestERC20.abi,\\n  L1TestERC20.bytecode,\\n);\\nconst factory__L2_ERC20 = new ethers.ContractFactory(\\n  L2StandardERC20.abi,\\n  L2StandardERC20.bytecode,\\n);\\n```\\n\\nThe configuration parameters required for transfers.\\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet l1ERC20, l2ERC20;\\nlet ourAddr;\\n```\\n\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\nSetup CrossChainMessenger Object[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#setup-crosschainmessenger-object)\\n\\nThe `CrossChainMessenger` object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n```\\nourAddr = l1Wallet.address;\\ncrossChainMessenger = new mantleSDK.CrossChainMessenger({\\n  l1ChainId: process.env.L1_CHAINID,\\n  l2ChainId: process.env.L2_CHAINID,\\n  l1SignerOrProvider: l1Wallet,\\n  l2SignerOrProvider: l2Wallet,\\n  bedrock: true,\\n});\\n```\\n\\nDeploy the ERC-20 token on L1.\\n\\n```\\nconsole.log('#################### Deploy ERC20 ####################');\\nconsole.log('Deploying L1 ERC20...');\\nconst L1_ERC20 = await factory__L1_ERC20\\n  .connect(l1Wallet)\\n  .deploy('L1 TEST TOKEN', 'LTT');\\nawait L1_ERC20.deployTransaction.wait();\\nconsole.log('L1 ERC20 Contract ExampleToken Address: ', L1_ERC20.address);\\n```\\n\\nMint the ERC-20 token on L1.\\n\\n```\\nlet amount = ethers.utils.parseEther('10');\\nawait L1_ERC20.connect(l1Wallet).mint(amount);\\nbalance = (\\n  await L1_ERC20.connect(l1Wallet).balanceOf(l1Wallet.address)\\n).toString();\\nconsole.log('mint to ', l1Wallet.address, balance, ' success');\\n```\\n\\nApprove the ERC-20 token on L1.\\n\\n```\\nawait L1_ERC20.connect(l1Wallet).approve(l1bridge, amount);\\nlet allowance = await L1_ERC20.connect(l1Wallet).allowance(\\n  l1Wallet.address,\\n  l1bridge,\\n);\\nconsole.log('allowance: ', allowance.toString());\\n```\\n\\nDeploy the ERC-20 token on L2.\\n\\n```\\nconsole.log('Deploying L2 ERC20...');\\nconst L2_ERC20 = await factory__L2_ERC20\\n  .connect(l2Wallet)\\n  .deploy(L1_ERC20.address);\\nawait L2_ERC20.deployTransaction.wait();\\nconsole.log(\\n  'L2 ERC20 Contract BVM_L2DepositedERC20 Address: ',\\n  L2_ERC20.address,\\n  '\\\\n',\\n);\\n\\nl1ERC20 = L1_ERC20;\\nl2ERC20 = L2_ERC20;\\n```\\n\\n### \\n\\nReport the Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#report-the-balances)\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n```\\nconst reportERC20Balances = async () => {\\n  const l1Balance = await l1ERC20.balanceOf(ourAddr);\\n  const l2Balance = await l2ERC20.balanceOf(ourAddr);\\n  console.log(`Token on L1:${l1Balance}     Token on L2:${l2Balance}`);\\n};\\n```\\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#deposit)\\n\\nThe `depositERC20` function deposits 1 ERC-20 token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated LTT balance on L1 and L2.\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Deposit ERC20 ####################');\\nawait reportERC20Balances();\\n```\\n\\nTo enable the bridge to transfer ERC-20 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-20 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, there is a custom bridge contract that needs to get the allowance.\\n\\n```\\nconst start = new Date();\\n\\n// Need the l2 address to know which bridge is responsible\\nconst allowanceResponse = await crossChainMessenger.approveERC20(\\n  l1ERC20.address,\\n  l2ERC20.address,\\n  oneToken,\\n);\\n```\\n\\nWait until the allowance transaction is processed and then report the time it took and the hash.\\n\\n```\\nawait allowanceResponse.wait();\\nconsole.log(`Allowance given by tx ${allowanceResponse.hash}`);\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\n```\\n\\n`crossChainMessenger.depositERC20()` creates and sends the deposit transaction on L1.\\n\\n```\\nconst response = await crossChainMessenger.depositERC20(\\n  l1ERC20.address,\\n  l2ERC20.address,\\n  oneToken,\\n);\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed. The `waitForMessageStatus` function does this for us.\\n\\n```\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\n\\n```\\nawait reportERC20Balances();\\nconsole.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`);\\n```\\n\\n### \\n\\nWithdraw[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#withdraw)\\n\\nThis function shows how to withdraw ERC-20 from L2 to L1.\\n\\nTo show that the withdrawal actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Withdraw ERC20 ####################');\\nconst start = new Date();\\nawait reportERC20Balances();\\n```\\n\\n`crossChainMessenger.withdrawERC20()` creates and sends the withdraw transaction on L2.\\n\\n```\\nconst response = await crossChainMessenger.withdrawERC20(\\n  l1ERC20.address,\\n  l2ERC20.address,\\n  oneToken,\\n);\\nconsole.log(`Transaction hash (on L2): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nWe need to wait until the message is ready to prove.\\n\\n```\\nconsole.log('Waiting for status to be READY_TO_PROVE');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE,\\n);\\n```\\n\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to IN_CHALLENGE_PERIOD');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD,\\n);\\n\\nconsole.log('In the challenge period, waiting for status READY_FOR_RELAY');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY,\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n```\\nconsole.log('Ready for relay, finalizing message now');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.finalizeMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\n### \\n\\nInvoke deposit and withdraw functions[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#invoke-deposit-and-withdraw-functions)\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n```\\nconst main = async () => {\\n  await setup();\\n  await depositERC20();\\n  await withdrawERC20();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#conclusion)\\n\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-20 assets between L1 and L2.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-721-tokens-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-721-tokens-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:31:00.460Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-721-tokens-with-the-mantle-sdk\",\n    \"title\": \"Bridging ERC-721 tokens with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging ERC-721 tokens with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/dIzLeBsyB0Jsjmas2UDP\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDc2OTg5NTItMGQ4Yi00YjhkLThiODYtMmE2NmY5YzRjNmZm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IsT8PAsQQDPRGJ%2BvZRl%2FbxfBtHtBMCf9FrF6LkwvB61a1xcYrgvAEp2db3qg%2FgAG8s8GlKA10ibdv%2FHLtZyCK5V3GeCKpJwdNYf2elaBzvquIe2w52zzv39wYpcGnjMwF89KJAQI2E3glBqthryo\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f072b44f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging ERC-721 tokens with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial teaches you how to use the Mantlenetwork SDK to transfer ERC-721 token between layer 1 (L1) and layer 2 (L2). While you could use the bridge contracts directly\\nSetup\\nEnsure your computer has:\\nStart L1 and L2. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, you can apply your own L1 RPC here and replace the L1 RPC URL in the .env file.\\nClone this repository and enter it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-erc721\\nInstall the necessary packages.\\nRun the sample code\\nThe sample code is in index.js, execute it. This transaction should execute immediately after execution.\\nNode Environment\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file .env.local.tmp then use yarn local to execute index.js. If you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow does it work?\\n#! /usr/local/bin/node const ethers = require(\\\"ethers\\\"); const mantleSDK = require(\\\"@mantleio/sdk\\\"); const fs = require(\\\"fs\\\");\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nfs: The Node.js fs module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\nNext, the code defines some configuration parameters:\\nconst key = process.env.PRIV_KEY;\\nkey: The private key retrieved from the environment variables.\\nconst L1TestERC721 = JSON.parse(fs.readFileSync(\\\"L1TestERC721.json\\\")); const L2TestERC721 = JSON.parse(fs.readFileSync(\\\"L2TestERC721.json\\\")); const L2ERC721Factory = JSON.parse( fs.readFileSync(\\\"OptimismMintableERC721.json\\\") ); const factory__L1_ERC721 = new ethers.ContractFactory( L1TestERC721.abi, L1TestERC721.bytecode );\\nThe factory of the ERC-721 token on L1.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let l1ERC721, l2ERC721; let tokenId; let ourAddr;\\nThe configuration parameters required for transfers.\\nCreateWallet\\nInitialize the signers of L1 and L2\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wallet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nsetup\\nThis function sets up the parameters we need for transfers and then deploys ERC20 on L1 and L2.\\nourAddr = l1Wallet.address; crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, });\\nCreate the CrossChainMessenger object that we use to transfer assets.\\nconsole.log(\\\"#################### Deploy ERC721 ####################\\\"); console.log(\\\"Deploying L1 ERC721...\\\"); const tokenName = \\\"TEST NFT FOR SDK0\\\"; const tokenSymbol = \\\"TESTNFT0\\\"; const L1_ERC721 = await factory__L1_ERC721 .connect(l1Wallet) .deploy(tokenName, tokenSymbol); await L1_ERC721.deployTransaction.wait(); console.log(\\\"L1 ERC721 Contract ExampleToken Address: \\\", L1_ERC721.address);\\nDeploy the ERC-721 token on L1.\\nconst awardTx = await L1_ERC721.connect(l1Wallet).awardItem(l1Wallet.address, ''); tokenId = (await awardTx.wait()).events[0].args[2].toNumber(); console.log(\\\"award NFT\\\", l1Wallet.address, tokenId, \\\" success\\\");\\nAward the ERC-721 token on L1.\\nconsole.log(\\\"Deploying L2 ERC721...\\\"); const OptimismMintableERC721Factory = new ethers.Contract( L2_OPTIMISM_MINT_FACTORY_ADDRESS, L2ERC721Factory.abi, l2RpcProvider ); const tx = await OptimismMintableERC721Factory.connect( l2Wallet ).createOptimismMintableERC721(L1_ERC721.address, tokenName, tokenSymbol); await tx.wait(); console.log(\\\"depoly l2 erc721 tx hash\\\", tx.hash); const receipt = await l2RpcProvider.getTransactionReceipt(tx.hash); if (!receipt) { console.log(\\\"Transaction not found or not confirmed yet\\\"); return; } const iface = new ethers.utils.Interface(L2ERC721Factory.abi); const log = receipt.logs.find( (log) => log.address.toLowerCase() === L2_OPTIMISM_MINT_FACTORY_ADDRESS.toLowerCase() ); if (!log) { console.log(\\\"Could not find the event log for the new contract creation\\\"); return; } const parsedLog = iface.parseLog(log); console.log(\\\"New ERC721 contract address:\\\", parsedLog.args[0]); const L2_ERC721 = new ethers.Contract( parsedLog.args[0], L2TestERC721.abi, l2RpcProvider ); l1ERC721 = L1_ERC721; l2ERC721 = L2_ERC721;\\nDeploy the ERC-721 token on L2.\\nreportERC721Balances\\nThis function reports the ERC-20 balances of the address on both layers.\\nconst reportERC721Balances = async () => { const l1Balance = await l1ERC721.balanceOf(ourAddr); const l2Balance = await l2ERC721.balanceOf(ourAddr); console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`); };\\ndepositERC721\\nThis function shows how to deposit an ERC-721 token from L1 to L2.\\nconsole.log(\\\"#################### Deposit ERC721 ####################\\\"); await reportERC721Balances();\\nTo show that the deposit actually happened we show before and after balances.\\nconst start = new Date(); // Need the l2 address to know which bridge is responsible const start = new Date(); const isApproved = await crossChainMessenger.approval( l1ERC721.address, l2ERC721.address ); if (!isApproved) { const approveTx = await crossChainMessenger.approveERC721( l1ERC721.address, l2ERC721.address ); await approveTx.wait(); console.log(`approval given by tx ${approveTx.hash}`); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); }\\nTo enable the bridge to transfer ERC-721 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-721 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, there is a custom bridge contract that needs to get the allowance.\\nconst response = await crossChainMessenger.depositERC721( l1ERC721.address, l2ERC721.address, tokenId, { overrides: { gasLimit: 400000, }, } );\\ncrossChainMessenger.depositERC721() creates and sends the deposit transaction on L1.\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`); await response.wait();\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(\\\"Waiting for status to change to RELAYED\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.RELAYED );\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed. The waitForMessageStatus function does this for us.\\nawait reportERC721Balances() console.log(`depositERC721 took ${(new Date() - start) / 1000} seconds\\\\n`); // depositERC721()\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\nwithdrawERC721\\nThis function shows how to withdraw ERC-721 from L2 to L1.\\nconsole.log(\\\"#################### Withdraw ERC721 ####################\\\"); const start = new Date(); await reportERC721Balances(); const response = await crossChainMessenger.withdrawERC721( l1ERC721.address, l2ERC721.address, tokenId ); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\ncrossChainMessenger.withdrawERC721() creates and sends the withdraw transaction on L2.\\nconsole.log(\\\"Waiting for status to be READY_TO_PROVE\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE ); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY );\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction.\\nconsole.log(\\\"Ready for relay, finalizing message now\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash,{ overrides: { gasLimit: 470000, }, }); console.log(\\\"Waiting for status to change to RELAYED\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED );\\nFinalizing the message also takes a bit of time.\\nmain\\nA main to run the setup followed by both operations.\\nconst main = async () => { await setup(); await depositERC721(); await withdrawERC721(); }; main() .then(() => process.exit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-721 assets between L1 and L2.\",\n  \"markdown\": \"# Bridging ERC-721 tokens with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial teaches you how to use the Mantlenetwork SDK to transfer ERC-721 token between layer 1 (L1) and layer 2 (L2). While you _could_ use [the bridge contracts](https://github.com/mantlenetworkio/mantle-v2/blob/5f86db304a9dff61510297223fa27317130d3c5d/packages/contracts-bedrock/contracts/L1/L1ERC721Bridge.sol#L4) directly\\n\\n## \\n\\nSetup\\n\\n1.  Ensure your computer has:\\n    \\n2.  Start L1 and L2. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # check status\\n    make ps\\n    ```\\n    \\n    **We highly recommend using the testnet environment, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and enter it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-erc721\\n    ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the sample code\\n\\nThe sample code is in `index.js`, execute it. This transaction should execute immediately after execution.\\n\\n### \\n\\nNode Environment\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execute `index.js`. If you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow does it work?\\n\\n```\\n#! /usr/local/bin/node\\n\\nconst ethers = require(\\\"ethers\\\");\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\");\\nconst fs = require(\\\"fs\\\");\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\n    \\n*   `fs`: The Node.js `fs` module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\n    \\n\\nNext, the code defines some configuration parameters:\\n\\n```\\nconst key = process.env.PRIV_KEY;\\n```\\n\\n*   `key`: The private key retrieved from the environment variables.\\n    \\n\\n```\\nconst L1TestERC721 = JSON.parse(fs.readFileSync(\\\"L1TestERC721.json\\\"));\\nconst L2TestERC721 = JSON.parse(fs.readFileSync(\\\"L2TestERC721.json\\\"));\\nconst L2ERC721Factory = JSON.parse(\\n  fs.readFileSync(\\\"OptimismMintableERC721.json\\\")\\n);\\n\\n\\nconst factory__L1_ERC721 = new ethers.ContractFactory(\\n  L1TestERC721.abi,\\n  L1TestERC721.bytecode\\n);\\n```\\n\\nThe factory of the ERC-721 token on L1.\\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet l1ERC721, l2ERC721;\\nlet tokenId;\\nlet ourAddr;\\n```\\n\\nThe configuration parameters required for transfers.\\n\\n### \\n\\n`CreateWallet`\\n\\nInitialize the signers of L1 and L2\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\n`setup`\\n\\nThis function sets up the parameters we need for transfers and then deploys ERC20 on L1 and L2.\\n\\n```\\nourAddr = l1Wallet.address;\\ncrossChainMessenger = new mantleSDK.CrossChainMessenger({\\n  l1ChainId: process.env.L1_CHAINID,\\n  l2ChainId: process.env.L2_CHAINID,\\n  l1SignerOrProvider: l1Wallet,\\n  l2SignerOrProvider: l2Wallet,\\n  bedrock: true,\\n});\\n```\\n\\nCreate the `CrossChainMessenger` object that we use to transfer assets.\\n\\n```\\nconsole.log(\\\"#################### Deploy ERC721 ####################\\\");\\nconsole.log(\\\"Deploying L1 ERC721...\\\");\\nconst tokenName = \\\"TEST NFT FOR SDK0\\\";\\nconst tokenSymbol = \\\"TESTNFT0\\\";\\nconst L1_ERC721 = await factory__L1_ERC721\\n  .connect(l1Wallet)\\n  .deploy(tokenName, tokenSymbol);\\nawait L1_ERC721.deployTransaction.wait();\\nconsole.log(\\\"L1 ERC721 Contract ExampleToken Address: \\\", L1_ERC721.address);\\n```\\n\\nDeploy the ERC-721 token on L1.\\n\\n```\\nconst awardTx = await L1_ERC721.connect(l1Wallet).awardItem(l1Wallet.address, '');\\ntokenId = (await awardTx.wait()).events[0].args[2].toNumber();\\nconsole.log(\\\"award NFT\\\", l1Wallet.address, tokenId, \\\" success\\\");\\n```\\n\\nAward the ERC-721 token on L1.\\n\\n```\\nconsole.log(\\\"Deploying L2 ERC721...\\\");\\nconst OptimismMintableERC721Factory = new ethers.Contract(\\n  L2_OPTIMISM_MINT_FACTORY_ADDRESS,\\n  L2ERC721Factory.abi,\\n  l2RpcProvider\\n);\\n\\nconst tx = await OptimismMintableERC721Factory.connect(\\n  l2Wallet\\n).createOptimismMintableERC721(L1_ERC721.address, tokenName, tokenSymbol);\\nawait tx.wait();\\nconsole.log(\\\"depoly l2 erc721 tx hash\\\", tx.hash);\\nconst receipt = await l2RpcProvider.getTransactionReceipt(tx.hash);\\nif (!receipt) {\\n  console.log(\\\"Transaction not found or not confirmed yet\\\");\\n  return;\\n}\\nconst iface = new ethers.utils.Interface(L2ERC721Factory.abi);\\nconst log = receipt.logs.find(\\n  (log) =>\\n    log.address.toLowerCase() ===\\n    L2_OPTIMISM_MINT_FACTORY_ADDRESS.toLowerCase()\\n);\\nif (!log) {\\n  console.log(\\\"Could not find the event log for the new contract creation\\\");\\n  return;\\n}\\n\\nconst parsedLog = iface.parseLog(log);\\nconsole.log(\\\"New ERC721 contract address:\\\", parsedLog.args[0]);\\nconst L2_ERC721 = new ethers.Contract(\\n  parsedLog.args[0],\\n  L2TestERC721.abi,\\n  l2RpcProvider\\n);\\nl1ERC721 = L1_ERC721;\\nl2ERC721 = L2_ERC721;\\n```\\n\\nDeploy the ERC-721 token on L2.\\n\\n### \\n\\n`reportERC721Balances`\\n\\nThis function reports the ERC-20 balances of the address on both layers.\\n\\n```\\nconst reportERC721Balances = async () => {\\n  const l1Balance = await l1ERC721.balanceOf(ourAddr);\\n  const l2Balance = await l2ERC721.balanceOf(ourAddr);\\n  console.log(`Token on L1:${l1Balance}    Token on L2:${l2Balance}`);\\n};\\n```\\n\\n### \\n\\n`depositERC721`\\n\\nThis function shows how to deposit an ERC-721 token from L1 to L2.\\n\\n```\\nconsole.log(\\\"#################### Deposit ERC721 ####################\\\");\\nawait reportERC721Balances();\\n```\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n```\\nconst start = new Date();\\n\\n// Need the l2 address to know which bridge is responsible\\nconst start = new Date();\\n\\nconst isApproved = await crossChainMessenger.approval(\\n  l1ERC721.address,\\n  l2ERC721.address\\n);\\nif (!isApproved) {\\n  const approveTx = await crossChainMessenger.approveERC721(\\n    l1ERC721.address,\\n    l2ERC721.address\\n  );\\n  await approveTx.wait();\\n  console.log(`approval given by tx ${approveTx.hash}`);\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\n}\\n```\\n\\nTo enable the bridge to transfer ERC-721 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-721 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, there is a custom bridge contract that needs to get the allowance.\\n\\n```\\nconst response = await crossChainMessenger.depositERC721(\\n  l1ERC721.address,\\n  l2ERC721.address,\\n  tokenId,\\n  {\\n    overrides: {\\n      gasLimit: 400000,\\n    },\\n  }\\n);\\n```\\n\\n[`crossChainMessenger.depositERC721()`](https://github.com/mantlenetworkio/mantle/blob/main/packages/sdk/src/cross-chain-messenger.ts#L986) creates and sends the deposit transaction on L1.\\n\\n```\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(\\\"Waiting for status to change to RELAYED\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.RELAYED\\n);\\n```\\n\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed. The [`waitForMessageStatus`](https://github.com/mantlenetworkio/mantle/blob/4e2e3fe64fc0ba62a473235ec617b4ac2fefd89c/packages/sdk/src/cross-chain-messenger.ts#L508) function does this for us.\\n\\n```\\nawait reportERC721Balances()\\nconsole.log(`depositERC721 took ${(new Date() - start) / 1000} seconds\\\\n`);\\n// depositERC721()\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\n\\n### \\n\\n`withdrawERC721`\\n\\nThis function shows how to withdraw ERC-721 from L2 to L1.\\n\\n```\\nconsole.log(\\\"#################### Withdraw ERC721 ####################\\\");\\nconst start = new Date();\\nawait reportERC721Balances();\\n\\nconst response = await crossChainMessenger.withdrawERC721(\\n  l1ERC721.address,\\n  l2ERC721.address,\\n  tokenId\\n);\\nconsole.log(`Transaction hash (on L2): ${response.hash}`);\\nawait response.wait();\\n```\\n\\n[`crossChainMessenger.withdrawERC721()`](https://github.com/mantlenetworkio/mantle/blob/main/packages/sdk/src/cross-chain-messenger.ts#L1015) creates and sends the withdraw transaction on L2.\\n\\n```\\nconsole.log(\\\"Waiting for status to be READY_TO_PROVE\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE\\n);\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY\\n);\\n```\\n\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction.\\n\\n```\\nconsole.log(\\\"Ready for relay, finalizing message now\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.finalizeMessage(response.hash,{\\n    overrides: {\\n      gasLimit: 470000,\\n    },\\n  });\\n\\nconsole.log(\\\"Waiting for status to change to RELAYED\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n### \\n\\n`main`\\n\\nA `main` to run the setup followed by both operations.\\n\\n```\\nconst main = async () => {\\n  await setup();\\n  await depositERC721();\\n  await withdrawERC721();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion\\n\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-721 assets between L1 and L2.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/updated-notices/mantle-network-mainnet-v2-tectonic-upgrade-guide\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/mantle-network-mainnet-v2-tectonic-upgrade-guide\",\n    \"loadedTime\": \"2025-02-15T20:31:08.200Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/mantle-network-mainnet-v2-tectonic-upgrade-guide\",\n    \"title\": \"Mantle Network Mainnet v2 Tectonic Upgrade Guide | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Network Mainnet v2 Tectonic Upgrade Guide | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Gf9SJflg5yLNf5zZQw5Q\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2JlMDI5ZWMtNDI2Ny00NTQ5LTg2MTUtZWIwNTFiNmVmZjNm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RyWB3bhZJ8EMkFaZRZMEq7GdEM46B8aIDtpJmCj%2FMWb6%2BkAf%2FYXIgJM346QSrSvUwAGuK0aj4hFvt94wt0wAVbRjjttLU3pAwKfkKOxYZvfmNGgLQ0zGKt1wK8SiRHjdLtgfZ2W%2Fu8U5PVIia93U\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f3c9ad42ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Network Mainnet v2 Tectonic Upgrade Guide\\nWelcome to the upgrade guide for migrating your node and applications from Mantle Network Mainnet Alpha v1 (Mantle v1) to Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic). Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\nFor Node Operators​\\nNode operators should restart their nodes using the new version of Mantle v2 Tectonic. Please follow the node running tutorial we provide, which contains the running environment requirements and the corresponding steps.\\nChangelogs corresponding to Mantle v2 Tectonic versions are available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\nFor Developers​\\nDevelopers should ensure your contracts adapt to new features and updates introduced in Mantle v2 Tectonic, such as gas estimation. Mantle v2 Tectonic supports multiple contract deployment tools, for more information please check here.\\nMantle v2 has modified and optimized fee mechanisms. When constructing transactions, remember to call the estimateGas interface to ensure your transactions execute smoothly and receive appropriate fees. More details here.\\nOur Goerli testnet has been upgraded to Mantle v2 Tectonic. Developers are advised to check the status of your contracts on this testnet. If any issues arise, it's essential to address and fix them to avoid potential problems on the mainnet and redeploy your contracts.\\nMantle v2 Tectonic introduces a new fee collection which will minimize your transaction fees, for information on optimizing gas fees, please check here.\\nFor Users​\\nUsers should suspend the use of on-chain products related to Mantle Netork during the upgrade process to avoid assets loss. For the new features of Mantle v2, please check here.\\nBridge Assets​\\nDuring the upgrade process, we will suspend the use of the bridge, so after the upgrade, you may face the following issues:\\nIf you have already applied to withdraw your assets on the mainnet and have completed the 7-days challenge period before the upgrade, please withdraw as soon as possible.\\nIf you haven't withdrawn your assets before the upgrade (no matter if you have completed your challenge period), you will need to prove your withdraw request after the upgrade and then wait for another 7 days.\\nIn Mantle v2 Tectonic, if you need to withdraw your assets via bridge, we have introduced a new two-step withdrawal process. Before entering the 7-days challenge period, you will also need to perform the \\\"prove\\\" operation. For more details, please refer to this.\\nIf you want to experience the ultimate trading experience and low transaction fees on Mantle v2 Tectonic, please configure your wallet, for more information please check here!\\nWhile upgrade operations may cause temporary inconvenience, we believe that with your support and cooperation, we can smoothly transition from Mantle v1 to v2.\\nIf you have any questions or need further assistance regarding Mantle v2 Tectonic, feel free to contact our support team.\\nHappy upgrading! 🎉🎉🎉\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle Network Mainnet v2 Tectonic Upgrade Guide\\n\\nWelcome to the upgrade guide for migrating your node and applications from Mantle Network Mainnet Alpha v1 (Mantle v1) to Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic). Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\n\\n## \\n\\nFor Node Operators[​](https://docs-v2.mantle.xyz/intro/migration-guides#for-node-operators)\\n\\n**Node operators should restart their nodes using the new version of Mantle v2 Tectonic.** Please follow the node running [tutorial](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker) we provide, which contains the running environment requirements and the corresponding steps.\\n\\n[Changelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.0) corresponding to Mantle v2 Tectonic versions are available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\n\\n## \\n\\nFor Developers[​](https://docs-v2.mantle.xyz/intro/migration-guides#for-developers)\\n\\n**Developers should ensure your contracts adapt to new features and updates introduced in Mantle v2 Tectonic, such as** [**gas estimation**](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees#why-we-need-to-use-estimategas)**.** Mantle v2 Tectonic supports multiple contract deployment tools, for more information please check [here](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts).\\n\\n*   Mantle v2 has modified and optimized fee mechanisms. When constructing transactions, remember to call the `estimateGas` interface to ensure your transactions execute smoothly and receive appropriate fees. More details [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees).\\n    \\n*   Our Goerli testnet has been upgraded to Mantle v2 Tectonic. Developers are advised to check the status of your contracts on this testnet. If any issues arise, it's essential to address and fix them to avoid potential problems on the mainnet and redeploy your contracts.\\n    \\n*   Mantle v2 Tectonic introduces a new fee collection which will minimize your transaction fees, for information on optimizing gas fees, please check [here](https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees).\\n    \\n\\n## \\n\\nFor Users[​](https://docs-v2.mantle.xyz/intro/migration-guides#for-users)\\n\\n**Users should suspend the use of on-chain products related to Mantle Netork during the upgrade process to avoid assets loss.** For the new features of Mantle v2, please check [here](https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic).\\n\\n#### \\n\\nBridge Assets[​](https://docs-v2.mantle.xyz/intro/migration-guides#bridge-assets)\\n\\nDuring the upgrade process, we will suspend the use of the bridge, so after the upgrade, you may face the following issues:\\n\\n*   If you have already applied to withdraw your assets on the mainnet and have completed the 7-days challenge period before the upgrade, please withdraw as soon as possible.\\n    \\n*   If you haven't withdrawn your assets before the upgrade (no matter if you have completed your challenge period), you will need to prove your withdraw request after the upgrade and then wait for another 7 days.\\n    \\n\\n*   In Mantle v2 Tectonic, if you need to withdraw your assets via bridge, we have introduced a new two-step withdrawal process. Before entering the 7-days challenge period, you will also need to perform the \\\"prove\\\" operation. For more details, please refer to [this](https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge#withdraw-mnt).\\n    \\n*   If you want to experience the ultimate trading experience and low transaction fees on Mantle v2 Tectonic, please configure your wallet, for more information please check [here](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network)!\\n    \\n\\nWhile upgrade operations may cause temporary inconvenience, we believe that with your support and cooperation, we can smoothly transition from Mantle v1 to v2.\\n\\nIf you have any questions or need further assistance regarding Mantle v2 Tectonic, feel free to contact our support team.\\n\\nHappy upgrading! 🎉🎉🎉\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/troubleshooting\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/troubleshooting\",\n    \"loadedTime\": \"2025-02-15T20:31:10.358Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/troubleshooting\",\n    \"title\": \"Troubleshooting | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Troubleshooting | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/670ddQ5vacA3R3nOu551\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGJjMWUwMTEtNTNmNy00MmFiLWI2MjgtYjhlZjcyNzBkZDRh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=73fO60yhftJzMb9lnyLzfPswXWHAQqIrmu%2BfRintGwsFnhw7wktOhlGUpTuftlfW3%2BG6B0BdwGflQO4sPZIWOIF475ssszfxTpHhfhsTwHdhzxiT3aaF%2BW4jcj93Ckwql%2F7tbam4aJFFnALCrucg\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f46ae9f2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Troubleshooting | Network\\nGeneral​\\nStatus code: 429 {\\\"error\\\": \\\"API rate limit exceeded\\\"}\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers here.\\nRPC call Error: timeout\\nWhile calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\nSo under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set higher timeout parameter accordingly to solve the timeout issue.\\nError: intrinsic gas too low\\nThis is due to your gaslimit being set too low. The gaslimit setting needs to be taken seriously, and we explain why you need the right gaslimit here!\\nError: replacement transaction underpriced\\nThis error usually occurs when you need to replace a transaction with the same nonce. Note that if you need to replace an old transaction with a new transaction with the same nonce, you need to set the gasprice by 1.1x!\\nSmart Contracts​\\nDeployment Issues​\\nContract deploy error: \\\"max code size exceeded.\\\"\\nSet optimizer bigger. Such as:\\nmodule.exports = { solidity: { version: '0.8.4', settings: { optimizer: { enabled: true, runs: 10000, }, }, }, };\\n\\\"insufficient gas for l1Cost. Please use estimateGas to get gasLimit.\\\"\\nThe reason for this error is that Mantle's gas model is different from Ethereum, and the forge script command broadcasts the transaction without estimating the gas using the provided mantle rpc. You can fix this error by these 2 ways:\\nUpgrade your Foundry tools version to the latest.\\nAdd --skip-simulation to the forge script command.\\nVerification Issues​\\nContract verification error: Hardhat found multiple contracts in the project (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode\\nIf you see this error, try verifying the contract again by specifying the name of the contract that you're looking to verify. You can do this using the --contract option. Here's an example:\\nnpx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\nContracts Call Issues\\nError: Failed to send transaction. Context: (code: -32000, message: failed to forward tx to sequencer, please try again. Error message: 'intrinsic gas too low', data: None)\\nThe reason for this error is that Mantle's gas model is different from Ethereum, and the forge script command broadcasts the transaction without estimating the gas using the provided mantle rpc. Two things should be noted when using it:\\nSet the priority-gas-price to 0.\\nUpgrade your Foundry tools version to the latest or add --skip-simulation to the forge script command.\\nStandard Bridge​\\nError when withdrawing: no bridge found for token pair\\nTry switching to a different RPC provider.\\nExplorer​\\nError: Awaiting internal transactions for reason\\nYou may encounter this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\",\n  \"markdown\": \"# Troubleshooting | Network\\n\\n## \\n\\nGeneral[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#general)\\n\\n*   **Status code: 429 {\\\"error\\\": \\\"API rate limit exceeded\\\"}**\\n    \\n    The official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n*   **RPC call Error: timeout**\\n    \\n    While calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\n    \\n    So under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set higher timeout parameter accordingly to solve the timeout issue.\\n    \\n*   **Error: intrinsic gas too low**\\n    \\n    This is due to your `gaslimit` being set too low. The `gaslimit` setting needs to be taken seriously, and we explain why you need the right `gaslimit` [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees#estimate-fees-in-mantle-v2-tectonic)!\\n    \\n*   **Error: replacement transaction underpriced**\\n    \\n    This error usually occurs when you need to replace a transaction with the same nonce. Note that if you need to replace an old transaction with a new transaction with the same nonce, you need to set the `gasprice` by **1.1x**!\\n    \\n\\n## \\n\\nSmart Contracts[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#smart-contracts)\\n\\n### \\n\\nDeployment Issues[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#deployment-issues)\\n\\n*   **Contract deploy error: \\\"max code size exceeded.\\\"**\\n    \\n    Set `optimizer` bigger. Such as:\\n    \\n    ```\\n    module.exports = {\\n      solidity: {\\n        version: '0.8.4',\\n        settings: {\\n          optimizer: {\\n            enabled: true,\\n            runs: 10000,\\n          },\\n        },\\n      },\\n    };\\n    ```\\n    \\n\\n*   **\\\"insufficient gas for l1Cost. Please use estimateGas to get gasLimit.\\\"**\\n    \\n    The reason for this error is that Mantle's gas model is different from Ethereum, and the `forge script` command broadcasts the transaction without estimating the gas using the provided mantle rpc. You can fix this error by these 2 ways:\\n    \\n    1.  Upgrade your Foundry tools version to the latest.\\n        \\n    2.  Add `--skip-simulation` to the `forge script` command.\\n        \\n    \\n\\n### \\n\\nVerification Issues[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#verification-issues)\\n\\n*   **Contract verification error: Hardhat found multiple contracts in the project (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode**\\n    \\n    If you see this error, try verifying the contract again by specifying the name of the contract that you're looking to verify. You can do this using the --contract option. Here's an example:\\n    \\n    ```\\n    npx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\n    ```\\n    \\n\\n### \\n\\nContracts Call Issues\\n\\n*   **Error: Failed to send transaction. Context: (code: -32000, message: failed to forward tx to sequencer, please try again. Error message: 'intrinsic gas too low', data: None)**\\n    \\n    The reason for this error is that Mantle's gas model is different from Ethereum, and the `forge script` command broadcasts the transaction without estimating the gas using the provided mantle rpc. Two things should be noted when using it:\\n    \\n    1.  Set the `priority-gas-price` to 0.\\n        \\n    2.  Upgrade your Foundry tools version to the latest or add `--skip-simulation` to the `forge script` command.\\n        \\n    \\n\\n## \\n\\nStandard Bridge[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#standard-bridge)\\n\\n*   **Error when withdrawing: no bridge found for token pair**\\n    \\n    Try switching to a different [RPC provider](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n\\n## \\n\\nExplorer[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#explorer)\\n\\n*   **Error: Awaiting internal transactions for reason**\\n    \\n    You may encounter this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/faqs\",\n    \"loadedTime\": \"2025-02-15T20:31:11.554Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/g5QMQeZ8bJiVgvdLpggK\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmI0ZTJjMGMtYmZmNC00ZDBlLTliMzUtZjcwNjQ4ZTBjYWEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7dzWrLYB%2F%2Brcqy3r5adXoWF9UOICFfSaRTlYNy3Q65qf0ekcmMjnpgtFdyHbP8I8TghgaP7GBublqnA8%2F7YVzt6THyAM1blXlwXcXda2YlnuxDWGr%2FDTuKtGURgFeGNfgGtuksSq73ey%2Fs8u4vHU\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f4ea8d72ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nGeneral​\\nDoes Mantle Network support EIP-1559?\\nMantle Network supports EIP-1559. EIP-1559 is a new transaction method that will be introduced after the Bedrock upgrade of the OP Stack, and will allow transactions on Mantle Network to be executed in a more stable and controlled manner. See here for more information.\\nWhy is the gas fee very high for my transaction?\\nMantle v2 Tectonic introduces EIP-1559 type transactions and also to further reduce gas fees, the FIFO transaction ordering method is chosen to minimize the impact of the priorityfee, so you will need additional settings to optimize your handling fees, for more information check here.\\nWhy is the gas usage so high for my transaction?\\nUnlike most OP Stack-based chains, Mantle chooses to use the MNT native token as the fee for L2 transactions and covers the whole transaction cost (L1 + L2) when calculating the gas usage. Mantle introduces the tokenRatio parameter which helps regulate the price fluctuations between ETH and MNT, when calculating the gas fee, Mantle will multiply with the tokenRatio compared to the other L2s' gasUsed (based on ETH). For example, if tokenRatio is 3000, the gas usage will be calculated as L2GasUsed * 3000 + L1GasUsed * 3000 * scalar.\\nMeanwhile, the gas usage can't reflect the level of gas fees, Mantle still has one of the cheapest fees compared to other L2s.\\nWhy did I get an error when I tried to send a transaction on Mantle Network?\\nThere are various possibilities for transaction failures. Here, we kindly ask you to ensure that your transaction construction has not been affected by any modifications to fees in Mantle v2 Tectonic. For more details, please refer to this page.\\nWhy is the value I get by calling the contract's getL1fee method so much smaller than the actual L1 fee?\\nThis is due to the fact that MNT is used as the native gas fee token in Mantle, and you need to use the tokenRatio parameter to convert between MNT and ETH when calculating the L1 fee, for more information, please check here!\\nDev Tools​\\nCan I use Truffle, Hardhat, and Remix to deploy contracts on Mantle Network?\\nYes. All the EVM-compatible Web3 libraries, IDEs, development frameworks can be used to deploy on and connect to Mantle Network. This includes, but isn't limited to, popular tools such as:\\nYou can check more tutorials here.\\nCan I fetch DA transaction details with an API?\\nCurrently, the only way to see DA transaction history is via the Explorer frontend. Here's the link for Mantle DA data storage: https://mantlescan.xyz/batches\\nDoes the RPC rate limit affect Explorer API usage too?\\nYes. Once the RPC rate limit is reached, access to Explorer API will also be limited.\\nAre there any limits set for batch transaction size?\\nThe maximum batch transaction size is derived from the target gas configuration. Mantle Network is the same as other OP Stack-based chains in this regard.\\nAre there any limits set on return log size for eth_getLogs RPC call?\\nYes, it's best practice to limit the range of blocks you are querying in a single request to prevent issues such as timeout errors or overly large responses, in Mantle Network — 10,000 blocks.\\nDoes Mantle explorer support proxy contracts？\\nIf the contract is detected as a proxy implementation, it can be supported.\\nHow to set the token image on Mantlescan?\\nYou can submit token update via https://mantlescan.xyz/tokenupdate/ or https://mantlescan.xyz/tokenupdate/<address> (append token contract address).\\nHow to add tokens on Mantle's official bridge？\\nYou'll need to make a pull request against the Mantle token list repository. After PR is approved, you need to wait a few minutes before you can check the tokens on the bridge. Check more details here.\\nDoes OpenZeppelin defender support EIP1559 transactions?\\nYes, OpenZeppelin defender support sending EIP1559 transactions now.\\nWhy do I get the error \\\"0x5e not defined\\\" when compiling contracts？\\nThis error occurs because Mantle's op-geth is not up to date, which doesn't support the MCOPY(0x5e) bytecode. To resolve this, specify the compiler version as 0.8.23 or below. And refer this to get more unsupported opcodes.\\nWhy do I get the error \\\"Missing etherscan key for chain 5000/5003\\\" when verifying contracts on Mantlescan by using Foundry?\\nThis error occurs because Foundry had some bugs on this, we encourage developers to verify contracts via Mantlescan explorer rather than using forge, check this for more details.\\nIs the Opcode PUSH0 supported in Mantle?\\nYes, the PUSH0 opcode is supported in Mantle.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n## \\n\\nGeneral[​](https://docs-v2.mantle.xyz/devs/dev-guides/faqs#general)\\n\\n*   **Does Mantle Network support EIP-1559?**\\n    \\n    **Mantle Network supports EIP-1559.** EIP-1559 is a new transaction method that will be introduced after the Bedrock upgrade of the OP Stack, and will allow transactions on Mantle Network to be executed in a more stable and controlled manner. See [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support) for more information.\\n    \\n*   **Why is the gas fee very high for my transaction?**\\n    \\n    Mantle v2 Tectonic introduces EIP-1559 type transactions and also to further reduce gas fees, the FIFO transaction ordering method is chosen to minimize the impact of the `priorityfee`, so you will need additional settings to optimize your handling fees, for more information check [here](https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees).\\n    \\n*   **Why is the gas usage so high for my transaction?**\\n    \\n    Unlike most OP Stack-based chains, Mantle chooses to use the MNT native token as the fee for L2 transactions and covers the whole transaction cost (L1 + L2) when calculating the gas usage. Mantle introduces the [tokenRatio](https://docs.mantle.xyz/network/system-information/fee-mechanism#control-of-tokenratio) parameter which helps regulate the price fluctuations between ETH and MNT, when calculating the gas fee, Mantle will multiply with the `tokenRatio` compared to the other L2s' gasUsed (based on ETH). For example, if `tokenRatio` is `3000`, the gas usage will be calculated as `L2GasUsed * 3000 + L1GasUsed * 3000 * scalar`.\\n    \\n    Meanwhile, the gas usage can't reflect the level of gas fees, Mantle still has one of the [cheapest fees](https://docs.mantle.xyz/network/system-information/fee-mechanism#mantle-v2-tectonic-fee-showcase) compared to other L2s.\\n    \\n*   **Why did I get an error when I tried to send a transaction on Mantle Network?**\\n    \\n    There are various possibilities for transaction failures. Here, we kindly ask you to ensure that your transaction construction has not been affected by any modifications to fees in Mantle v2 Tectonic. For more details, please refer to [this page](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees).\\n    \\n*   **Why is the value I get by calling the contract's** `**getL1fee**` **method so much smaller than the actual L1 fee?**\\n    \\n    This is due to the fact that `MNT` is used as the native gas fee token in Mantle, and you need to use the `tokenRatio` parameter to convert between `MNT` and `ETH` when calculating the L1 fee, for more information, please check [here](https://docs.mantle.xyz/network/system-information/fee-mechanism#understanding-fees-on-mantle-v2-tectonic)!\\n    \\n\\n## \\n\\nDev Tools[​](https://docs-v2.mantle.xyz/devs/dev-guides/faqs#dev-tools)\\n\\n*   **Can I use Truffle, Hardhat, and Remix to deploy contracts on Mantle Network?**\\n    \\n    Yes. All the EVM-compatible Web3 libraries, IDEs, development frameworks can be used to deploy on and connect to Mantle Network. This includes, but isn't limited to, popular tools such as:\\n    \\n    You can check more tutorials [here](https://docs.mantle.xyz/network/for-node-operators/deployment-guides).\\n    \\n*   **Can I fetch DA transaction details with an API?**\\n    \\n    Currently, the only way to see DA transaction history is via the Explorer frontend. Here's the link for Mantle DA data storage: [https://mantlescan.xyz/batches](https://mantlescan.xyz/batches)\\n    \\n*   **Does the RPC rate limit affect Explorer API usage too?**\\n    \\n    Yes. Once the RPC rate limit is reached, access to Explorer API will also be limited.\\n    \\n*   **Are there any limits set for batch transaction size?**\\n    \\n    The maximum batch transaction size is derived from the target gas configuration. Mantle Network is the same as other OP Stack-based chains in this regard.\\n    \\n*   **Are there any limits set on return log size for** `**eth_getLogs**` **RPC call?**\\n    \\n    Yes, it's best practice to limit the range of blocks you are querying in a single request to prevent issues such as timeout errors or overly large responses, in Mantle Network — 10,000 blocks.\\n    \\n*   **Does Mantle explorer support proxy contracts？**\\n    \\n    If the contract is detected as a proxy implementation, it can be supported.\\n    \\n*   **How to set the token image on Mantlescan?**\\n    \\n    You can submit token update via `https://mantlescan.xyz/tokenupdate/` or `https://mantlescan.xyz/tokenupdate/<address>` (append token contract address).\\n    \\n*   **How to add tokens on Mantle's official bridge？**\\n    \\n    You'll need to make a pull request against the Mantle token list repository. After PR is approved, you need to wait a few minutes before you can check the tokens on the bridge. Check more details [here](https://docs.mantle.xyz/network/for-developers/quick-access#adding-a-token-to-the-list).\\n    \\n*   **Does OpenZeppelin defender support EIP1559 transactions?**\\n    \\n    Yes, OpenZeppelin defender support sending EIP1559 transactions now.\\n    \\n*   **Why do I get the error \\\"0x5e not defined\\\" when compiling contracts？**\\n    \\n    This error occurs because Mantle's op-geth is not up to date, which doesn't support the `MCOPY(0x5e)` bytecode. To resolve this, specify the compiler version as **0.8.23** or below. And refer [this](https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle#unsupported-opcodes) to get more unsupported opcodes.\\n    \\n*   **Why do I get the error \\\"Missing etherscan key for chain 5000/5003\\\" when verifying contracts on Mantlescan by using Foundry?**\\n    \\n    This error occurs because Foundry had [some bugs](https://github.com/foundry-rs/foundry/issues/7466) on this, we encourage developers to verify contracts via Mantlescan explorer rather than using forge, check [this](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts#compiled-using-foundry) for more details.\\n    \\n*   **Is the Opcode** `**PUSH0**` **supported in Mantle?**\\n    \\n    Yes, the `PUSH0` opcode is supported in Mantle.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic\",\n    \"loadedTime\": \"2025-02-15T20:31:12.165Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic\",\n    \"title\": \"What's New in Mantle v2 Tectonic | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"What's New in Mantle v2 Tectonic | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/zvzCELEP7EG1xZzE1Vjl\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDdiNzk3M2UtZTY5MC00YmQ2LTk5MTktZDY1Y2I3MzZmN2Qw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=6rosz9oUnNHeJDVYXdKbn8UXSf9I9QXWuPXW6U0RmBSyQpU%2FBoWxipECozqeIcG6wEfqjhTvgjWpCCwhljVl1iyUGedUm1fuewW8M3Hb5I2Fsk561w5lSHA4EhuMwlYf2JEkVjWMJrpSUqoKWKTz\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f5a8eab2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"What's New in Mantle v2 Tectonic\\nThe development of Mantle Network Mainnet Alpha v1 (Mantle v1) began in late 2022, utilizing the OVM codebase, and predated the introduction of the OP Stack. It brought forth a novel concept of modularity, presenting diverse solutions across various system components. This modular approach aimed to offer flexibility and adaptability within the ecosystem.\\nHowever, with the release of OP Stack, Mantle chose to upgrade its network to a version based on the OP Stack Bedrock in order to better embrace the OP Stack ecosystem and lower the threshold of composability and interoperability, which is Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic).\\nEnhancements in Mantle v2 Tectonic Compared to Mantle v1​\\nEIP-1559 Support​\\nEIP-1559 was not supported in Mantle v1 and is supported in Mantle v2 Tectonic. By introducing EIP-1559, Mantle v2 Tectonic gains more efficient transaction fee price auctions while stabilizing block utilization and enhancing network security. For more details, please check here.\\nRemoval of Redundant Components​\\nMantle v2 Tectonic has eliminated redundant components such as the Data Transport Layer and Threshold Signature Scheme, which were present in Mantle v1. These removals were made possible by the existence of similar functionalities in the new OP Stack architecture. For more details, please check here.\\nStable Block Time​\\nIn the design of Mantle v1, the block generation of layer 2 (L2) is transaction-dependent, and each block contains only one transaction, which causes the block time generated by L2 to become variable. In Mantle v2 Tectonic, the block generation of L2 is transaction-independent, and has a fixed time (2s) to generate blocks, so each block will contain multiple transactions.\\nBlock State Tagging​\\nDue to the change in the way blocks are generated, Mantle v2 Tectonic adopts the same tagging of blocks and block header states as OP Stack-based chains, including unsafe, safe, finalized.\\nDistinctions between Mantle v2 Tectonic and OP Stack Bedrock​\\nIndependent Data Availability (DA)​\\nTo mitigate high transaction fees associated with using Ethereum as the DA layer and considering the ongoing development of EIP-4844, Mantle v2 Tectonic adopts Mantle DA, powered by EigenLayer's EigenDA technology. This significantly reduces transaction fees while making minimal compromises on security guarantees. For more details, please check here.\\nMigration of Native Tokens in L2​\\nIn Mantle v2 Tectonic, we introduce a highly anticipated feature — the migration of native tokens in L2. In Mantle v2 Tectonic, the flow of MNT tokens in L2 will no longer use the ERC-20 contract. Instead, MNT will be a native Mantle Network L2 asset, instead of a bridged version of its Ethereum ERC-20 counterpart. For more details, please check here.\\nFee Optimization Strategy​\\nMantle v2 Tectonic implements a fee optimization strategy using the tokenRatio parameter to adjust the impact of using $MNT as transaction fees. Additionally, we have optimized the estimateGas function to directly provide an estimate of the total cost of a transaction. For more details, please check here.\\nLast updated 2 months ago\",\n  \"markdown\": \"# What's New in Mantle v2 Tectonic\\n\\nThe development of Mantle Network Mainnet Alpha v1 (Mantle v1) began in late 2022, utilizing the OVM codebase, and predated the introduction of the OP Stack. It brought forth a novel concept of modularity, presenting diverse solutions across various system components. This modular approach aimed to offer flexibility and adaptability within the ecosystem.\\n\\nHowever, with the release of OP Stack, Mantle chose to upgrade its network to a version based on the OP Stack Bedrock in order to better embrace the OP Stack ecosystem and lower the threshold of composability and interoperability, which is Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic).\\n\\n## \\n\\nEnhancements in Mantle v2 Tectonic Compared to Mantle v1[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#enhancements-in-mantle-v2-tectonic-compared-to-mantle-v1)\\n\\n### \\n\\nEIP-1559 Support[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#eip-1559-support)\\n\\nEIP-1559 was not supported in Mantle v1 and is supported in Mantle v2 Tectonic. By introducing EIP-1559, Mantle v2 Tectonic gains more efficient transaction fee price auctions while stabilizing block utilization and enhancing network security. For more details, please check [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support).\\n\\n### \\n\\nRemoval of Redundant Components[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#removal-of-redundant-components)\\n\\nMantle v2 Tectonic has eliminated redundant components such as the Data Transport Layer and Threshold Signature Scheme, which were present in Mantle v1. These removals were made possible by the existence of similar functionalities in the new OP Stack architecture. For more details, please check [here](https://docs.mantle.xyz/network/system-information/architecture).\\n\\n### \\n\\nStable Block Time[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#stable-block-time)\\n\\nIn the design of Mantle v1, the block generation of layer 2 (L2) is transaction-dependent, and each block contains only one transaction, which causes the block time generated by L2 to become variable. In Mantle v2 Tectonic, the block generation of L2 is transaction-independent, and has a fixed time (2s) to generate blocks, so each block will contain multiple transactions.\\n\\n### \\n\\nBlock State Tagging[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#block-state-tagging)\\n\\nDue to the change in the way blocks are generated, Mantle v2 Tectonic adopts the same tagging of blocks and block header states as OP Stack-based chains, including `unsafe`, `safe`, `finalized`.\\n\\n## \\n\\nDistinctions between Mantle v2 Tectonic and OP Stack Bedrock[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#distinctions-between-mantle-v2-tectonic-and-op-stack-bedrock)\\n\\n### \\n\\nIndependent Data Availability (DA)[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#independent-data-availability-da)\\n\\nTo mitigate high transaction fees associated with using Ethereum as the DA layer and considering the ongoing development of EIP-4844, Mantle v2 Tectonic adopts Mantle DA, powered by EigenLayer's EigenDA technology. This significantly reduces transaction fees while making minimal compromises on security guarantees. For more details, please check [here](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da).\\n\\n### \\n\\nMigration of Native Tokens in L2[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#migration-of-native-tokens-in-l2)\\n\\nIn Mantle v2 Tectonic, we introduce a highly anticipated feature — the migration of native tokens in L2. In Mantle v2 Tectonic, the flow of MNT tokens in L2 will no longer use the ERC-20 contract. Instead, MNT will be a native Mantle Network L2 asset, instead of a bridged version of its Ethereum ERC-20 counterpart. For more details, please check [here](https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic#migration-of-native-tokens-in-l2).\\n\\n### \\n\\nFee Optimization Strategy[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#fee-optimization-strategy)\\n\\nMantle v2 Tectonic implements a fee optimization strategy using the tokenRatio parameter to adjust the impact of using $MNT as transaction fees. Additionally, we have optimized the `estimateGas` function to directly provide an estimate of the total cost of a transaction. For more details, please check [here](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/transaction-lifecycle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/transaction-lifecycle\",\n    \"loadedTime\": \"2025-02-15T20:31:19.184Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/transaction-lifecycle\",\n    \"title\": \"Transaction Lifecycle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Transaction Lifecycle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/jCmCRKf6MuGbqsB0KvrU\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWFhODYzZjItYTE0Zi00NjRkLWE1ZDMtMDJmMTMyOThlODRm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7JnniuJesh5iGp%2BE7upwoLX5EKd4Jrb7axus30SXYe25bl4Fmf8iAy1och4%2B2F9ctmko13aQEGAJ9jxg8LoidFbQ16sriUulrDY4S%2Fsz1Vhcoe0HdoujuwgW0SMAX1%2FUlaMTdf%2Bdcn6b%2FqFp90q9\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f800e552ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Transaction Lifecycle | Network\\nL2 -> L1 Workflow​\\n1. The Initiation​\\nWallet users, dApps, or some scripts may wish to utilize a blockchain-based system to transfer funds or execute tasks.\\nFor users, they have connected to Mantle network by adding the sequencer node's RPC endpoint to their wallet.\\nOn the other hand, dApps have integrated the Mantle SDK and instantiated it to communicate with Mantle network. They are ready to send requests containing the recipient's address and the amount they want to transfer.\\nAs with any other service, this operation requires payment. It is not just for the transfer itself, but also for maintaining a permanent, immutable public record that anyone can verify. Their wallet or dApp must ensure there is a sufficient balance to execute this operation.\\nFor wallets, things are simpler; as it is easier to calculate the required fee.\\ndApps need to do more detailed calculations; for more information, please refer to this section.\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle Network where a sequencer is ready to process it. This is where the transaction first enters Mantle. More details here.\\n2. The Handling​\\nThe transaction triggers the standard state verification process, executed by the Ethereum Virtual Machine (EVM) software (op-geth) running on these nodes. This is to ensure that the transaction is fundamentally valid, the necessary fees have been paid, and nothing exceptional has occurred. After completing the state transition, the op-proposer proposes a new state's Merkle root and submits it to the corresponding L1 contract.\\nIt's important to note that state submission doesn't need to be executed after every transaction, but can be chosen to be submitted after a tx-batch.\\nThe transaction updates the local state (ledger) and waits for further processing as part of a pending block. So far, this process is particularly fast. Many such pending blocks are combined to form batches, which are encoded and compressed by op-batcher and sent to Ethereum for final settlement. L2 achieves low transaction fees by spreading fixed costs across multiple transactions in a batch.\\nFor details on the encoding and compression process of op-batcher, please refer to this spec.\\n3. The Storage​\\nUnlike typical Rollups, Mantle Network aims for more efficient and cost-effective Data Availability (DA) guarantees. Therefore, it opts for Mantle DA, developed based on a third-party DA component. op-batcher needs to submit all transaction data (not raw transactions) to Mantle DA to ensure the integrity and effectiveness of the L2 network. DA nodes synchronize block data and ensure access to it at any given time in exchange for $MNT rewards for providing this service. For more detailed information, please see this section.\\nMantle DA supports data storage and reverse derivation, ensuring data availability. In addition to data storage, state storage is also crucial.\\nOn Ethereum, there is a complete trust network ready to verify the updated state root stored in the contract. Once a block passes Ethereum's consensus mechanism, it is recorded on the secure chain. The state transition is considered valid once the uploaded state root passes the challenge period (typically 7 days).\\nLast updated 3 months ago\",\n  \"markdown\": \"# Transaction Lifecycle | Network\\n\\n## \\n\\nL2 -> L1 Workflow[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#l2---l1-workflow)\\n\\n### \\n\\n1\\\\. The Initiation[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#1-the-initiation)\\n\\nWallet users, dApps, or some scripts may wish to utilize a blockchain-based system to transfer funds or execute tasks.\\n\\n*   For users, they have connected to Mantle network by adding the sequencer node's RPC endpoint to their wallet.\\n    \\n*   On the other hand, dApps have integrated the [Mantle SDK](https://sdk.mantle.xyz/index.html) and instantiated it to communicate with Mantle network. They are ready to send requests containing the recipient's address and the amount they want to transfer.\\n    \\n\\nAs with any other service, this operation requires payment. It is not just for the transfer itself, but also for maintaining a permanent, immutable public record that anyone can verify. Their wallet or dApp must ensure there is a sufficient balance to execute this operation.\\n\\n*   For wallets, things are simpler; as it is easier to calculate the required fee.\\n    \\n*   dApps need to do more detailed calculations; for more information, please refer to this [section](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n    \\n\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle Network where a sequencer is ready to process it. This is where the transaction first enters Mantle. More details [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#sequencer).\\n\\n### \\n\\n2\\\\. The Handling[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#2-the-handling)\\n\\nThe transaction triggers the standard state verification process, executed by the Ethereum Virtual Machine (EVM) software ([`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth)) running on these nodes. This is to ensure that the transaction is fundamentally valid, the necessary fees have been paid, and nothing exceptional has occurred. After completing the state transition, the [`op-proposer`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer) proposes a new state's Merkle root and submits it to the corresponding L1 contract.\\n\\nIt's important to note that state submission doesn't need to be executed after every transaction, but can be chosen to be submitted after a tx-batch.\\n\\nThe transaction updates the local state (ledger) and waits for further processing as part of a pending block. So far, this process is particularly fast. Many such pending blocks are combined to form batches, which are encoded and compressed by [`op-batcher`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) and sent to Ethereum for final settlement. L2 achieves low transaction fees by spreading fixed costs across multiple transactions in a batch.\\n\\nFor details on the encoding and compression process of op-batcher, please refer to this [spec](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/derivation.md#batch-submission).\\n\\n### \\n\\n3\\\\. The Storage[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#3-the-storage)\\n\\nUnlike typical Rollups, Mantle Network aims for more efficient and cost-effective Data Availability (DA) guarantees. Therefore, it opts for Mantle DA, developed based on a third-party DA component. `op-batcher` needs to submit all transaction data (not raw transactions) to Mantle DA to ensure the integrity and effectiveness of the L2 network. DA nodes synchronize block data and ensure access to it at any given time in exchange for $MNT rewards for providing this service. For more detailed information, please see this section.\\n\\nMantle DA supports data storage and reverse derivation, ensuring data availability. In addition to data storage, state storage is also crucial.\\n\\nOn Ethereum, there is a complete trust network ready to verify the updated state root stored in the contract. Once a block passes Ethereum's consensus mechanism, it is recorded on the secure chain. The state transition is considered valid once the uploaded state root passes the challenge period (typically 7 days).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/how-to-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides\",\n    \"loadedTime\": \"2025-02-15T20:31:17.675Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides\",\n    \"title\": \"How-to Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How-to Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Lo5IHMerGjX8tRDSx6kA\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:15 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWE1MGUwNGYtYWVmMy00MDJjLTk3MzEtN2Y4MjIzZWNmODBh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=NslhtTSEohT9JPamDpgj9SVWYFEewlm%2BrfJsqwwaF0L%2BiZVHZGSlvGOGzb1WP4vSm6Aq0sDlR9T7FR5IqwSsph8RrG2ymt7a98mNXaNsoWblU4aeQRW0iOwg8XvgLx0p1TgcJo8OWPhk8CHAGdzQ\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f79ee542ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How-to Guides | Network\\nConnecting Wallet to Mantle NetworkFetching Test TokensUsing Mantle Bridge\\nPreviousFAQsNextConnecting Wallet to Mantle Network\\nWas this helpful?\",\n  \"markdown\": \"# How-to Guides | Network\\n\\n[Connecting Wallet to Mantle Network](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network)[Fetching Test Tokens](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)[Using Mantle Bridge](https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge)\\n\\n[PreviousFAQs](https://docs.mantle.xyz/network/for-developers/faqs)[NextConnecting Wallet to Mantle Network](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/architecture\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/architecture\",\n    \"loadedTime\": \"2025-02-15T20:31:19.254Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/architecture\",\n    \"title\": \"Architecture | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Architecture | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/VSKulsqMa6vFZXJRotZj\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTA1NDVmYzktZmVhYS00MjA1LTkzMjQtZTUxZDJlZTU1ZGE3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=W9BuHuWe2lja2T42rKrmkbdYTCpZUG9UGlpxi%2BIzm8HIxLSeAIBWgX7YzDBfX%2FKq%2FEO1tn4%2BDGDhj3KuXpmF79ed7UYD%2FEEuot1xJ0Dc3Vf6o1H7VqGdDNamz8vLczCWbiRu43b2hSTB6BP%2Bdd8h\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f7d8b0e2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Architecture | Network\\nArchitecture Overviews​\\nThis diagram illustrates how different network modules and components interact through transaction execution in Mantle v2 Tectonic. It depicts the process of interacting with EigenDA-supported Mantle Data Availability (DA) to store Rollup data and eventually publish updated state data to the Ethereum L1.\\nLet's review the transaction processing process to better understand the functioning of each module.\\nUsers send signed transactions through available RPC nodes.\\nThe sequencer receives transactions and packs them into blocks. op-batcher obtains data from the sequencer, performs encoding and compression, sends it to the DA module, and submits data validity information to the L1 contract.\\nSimilarly, op-proposer obtains the state root of packed blocks through the sequencer and sends it to the relevant contract L2OutputOracle on L1.\\nRollup transaction data is stored on Mantle DA. Verifiers can retrieve this data at any time and verify its validity, a process executed when issuing fraud-proof challenges.\\nTransaction Pool in Mantle​\\nIn Mantle v2 Tectonic, a transaction pool structure similar to Ethereum's mempool is introduced for the temporary storage of transactions until they are included in a block. The introduction of the transaction pool in L2 is aimed at improving transaction packing. With Mantle v2 Tectonic's support for EIP-1559 transaction types, users can control the transaction packing speed by manipulating the priority fee in transactions. The transaction pool is used to temporarily store those unpacked transactions.\\nHowever, the introduction of the transaction pool also brings certain challenges, such as the impact of Miner Extractable Value (MEV). Therefore, in Mantle v2 Tectonic, the tx pool is designed to be private. If you want to submit a transaction, you need to configure op-geth to send the transaction to the sequencer. The sequencer will then process transactions in the transaction pool in the order of their base fee and priority fee.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Architecture | Network\\n\\n## \\n\\nArchitecture Overviews[​](https://docs-v2.mantle.xyz/intro/system-components/architecture#architecture-overviews)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/architecture-aab357575d8dca71a38e2a4cc78cd4d8.svg)\\n\\nThis diagram illustrates how different network modules and components interact through transaction execution in Mantle v2 Tectonic. It depicts the process of interacting with EigenDA-supported Mantle Data Availability (DA) to store Rollup data and eventually publish updated state data to the Ethereum L1.\\n\\nLet's review the transaction processing process to better understand the functioning of each module.\\n\\n1.  Users send signed transactions through available RPC nodes.\\n    \\n2.  The sequencer receives transactions and packs them into blocks. op-batcher obtains data from the sequencer, performs encoding and compression, sends it to the DA module, and submits data validity information to the L1 contract.\\n    \\n3.  Similarly, [`op-proposer`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer) obtains the state root of packed blocks through the sequencer and sends it to the relevant contract [`L2OutputOracle`](https://sepolia.etherscan.io/address/0x7DC1E47F1a367B6750802077632787181e70Bf8C) on L1.\\n    \\n4.  Rollup transaction data is stored on Mantle DA. Verifiers can retrieve this data at any time and verify its validity, a process executed when issuing fraud-proof challenges.\\n    \\n\\n## \\n\\nTransaction Pool in Mantle[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#transaction-pool-in-mantle)\\n\\nIn Mantle v2 Tectonic, a transaction pool structure similar to Ethereum's mempool is introduced for the temporary storage of transactions until they are included in a block. The introduction of the transaction pool in L2 is aimed at improving transaction packing. With Mantle v2 Tectonic's support for [EIP-1559 transaction types](https://docs.mantle.xyz/network/more/glossary#eip-1559-transaction), users can control the transaction packing speed by manipulating the priority fee in transactions. The transaction pool is used to temporarily store those unpacked transactions.\\n\\nHowever, the introduction of the transaction pool also brings certain challenges, such as the impact of Miner Extractable Value (MEV). Therefore, in Mantle v2 Tectonic, the tx pool is designed to be private. If you want to submit a transaction, you need to configure [`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) to send the transaction to the sequencer. The sequencer will then process transactions in the transaction pool in the order of their base fee and priority fee.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"loadedTime\": \"2025-02-15T20:31:19.885Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"title\": \"Connecting Wallet to Mantle Network | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Connecting Wallet to Mantle Network | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/oQVLjGt16FhnlA3UTw9v\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:18 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWYxYjkwNjEtNjcwNC00OGM0LTg0ZGEtOGU4ZDkwYzNkYzg0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=T91GEsceh7BHL6gKzX4m6GTMzz4hDtYxUk5Ybei9AuKV2eNnv1a63mIbdmr9nnH5soggoZuw1d2g%2BhWIMFIBM1r9UVPpzjU7qnycx9SkaMhjES88TOiS7xLdGDXfFfvcEDyWZNqiMosz92AHk8L9\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f87b8122ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Connecting Wallet to Mantle Network\\nYou can connect your wallet to the Mantle Network in different ways, here we present you the following two ways:\\nAdd by Using Chainlist​\\nYou can automatically add Mantle Network to your wallet with one click using Chainlist by navigating to the following pages:\\nSimply connect your wallet to the web page, click on the 'Add to Metamask' button that shows up, and approve the action in your wallet.\\nAdd Network Manually​\\nLaunch Metamask\\nLaunch MetaMask and login to your wallet.\\nAdd Network\\nThe default network setting for the wallet is generally 'Ethereum Mainnet'. Click on the button in the top-left to bring up a dropdown menu. Click on 'Add Network' at the bottom of the dropdown menu.\\nChoose Manually\\nThis will take you the 'Add a network' page where you'll see multiple popular networks. Click on 'Add a network manually' to bring up a form\\nConfigure Network Infomation\\nFill in the following info and click 'Save' to finish. The network option will appear in the network setting dropdown menu once you're done.\\nAdd $MNT to Your Wallet​\\nPrepare To Import Tokens\\nNavigate to your wallet, switch to the Sepolia Testnet and click on the 'Import tokens' button at the bottom to bring up a form.\\nEnter the Token Address\\nEnter the $MNT token contract address 0x65e37B558F64E2Be5768DB46DF22F93d85741A9E , and as you do that the other two fields will get populated automatically.\\nFinish Importing\\nNext, click on the 'Next' button at the bottom, and then click 'Import' in the next window to finish. You should be able to see your current balance.\\nConfigure Your wallet​\\nMantle v2 Tectonic has the ultimate user experience by optimizing the fee mechanism. Users can set up basefee and priorityfee in MetaMask to greatly reduce the fee for transfers. Here is a detailed guide on how to configure your wallet.\\nCreate a Transaction\\nWhen you are ready to send a transaction using MetaMask, construct the transaction first, at which point we can see that the Estimated fee before it is set is a higher value.\\nPrepare Your Transaction Configuration\\nClick the Next button, and then click the red box to enter the setting interface.\\nConfigure the Gas Fee\\nSelect the Advanced button and we can see that we can set the Max base fee and Priority Fee, see here for the meaning of these two items. Here we set them to the lowest values, i.e. Max base fee is 0.02 gwei and Priority Fee is 0. Check the box below \\\"Save these values as my default for the Mantle sepolia network. \\\", and then click the ❌ button in the upper right corner.\\nConfirm thr Transaction\\nOnce the settings are complete, when you reconstruct the transaction, you will see that the Estimated fee will be very low, click Confirm to send the transaction.\\nWith this setup, you will enjoy extreamely high speed and low cost transaction processing in Mantle v2 Tectonic.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Connecting Wallet to Mantle Network\\n\\nYou can connect your wallet to the Mantle Network in different ways, here we present you the following two ways:\\n\\n## \\n\\nAdd by Using Chainlist[​](https://docs-v2.mantle.xyz/users/how-to/wallet#add-by-using-chainlist)\\n\\nYou can automatically add Mantle Network to your wallet with one click using **Chainlist** by navigating to the following pages:\\n\\nSimply connect your wallet to the web page, click on the '**Add to Metamask**' button that shows up, and approve the action in your wallet.\\n\\n## \\n\\nAdd Network Manually[​](https://docs-v2.mantle.xyz/users/how-to/wallet#add-network-manually)\\n\\n### \\n\\nLaunch Metamask\\n\\nLaunch [MetaMask](https://metamask.io/download/) and login to your wallet.\\n\\n### \\n\\nAdd Network\\n\\nThe default network setting for the wallet is generally '**Ethereum Mainnet**'. Click on the button in the top-left to bring up a dropdown menu. Click on '**Add Network**' at the bottom of the dropdown menu.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-1-4c343f717ee5c76ceb3174cff4ff2daf.png&width=300&dpr=4&quality=100&sign=9b29829c&sv=2)\\n\\n### \\n\\nChoose Manually\\n\\nThis will take you the '**Add a network**' page where you'll see multiple popular networks. Click on '**Add a network manually**' to bring up a form\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-2-58c012d71feff3ce45912a680768ec70.png&width=300&dpr=4&quality=100&sign=2ec6366c&sv=2)\\n\\n### \\n\\nConfigure Network Infomation\\n\\nFill in the following info and click '**Save**' to finish. The network option will appear in the network setting dropdown menu once you're done.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fadd-network-79b0d03f9e1209fd05311a364f12c958.png&width=300&dpr=4&quality=100&sign=16abb77c&sv=2)\\n\\n## \\n\\nAdd $MNT to Your Wallet[​](https://docs-v2.mantle.xyz/users/how-to/wallet#add-mnt-to-your-wallet)\\n\\n### \\n\\nPrepare To Import Tokens\\n\\nNavigate to your wallet, switch to the **Sepolia Testnet** and click on the '**Import tokens**' button at the bottom to bring up a form.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3885809119-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FQliZlRNwHhmzesDU1Ksq%252Fuploads%252FF4rJSqHzv9WZ0FJUUReJ%252Fimage.png%3Falt%3Dmedia%26token%3D4602cd23-72ac-4a62-9aef-60f57f5159a4&width=300&dpr=4&quality=100&sign=112c2ebb&sv=2)\\n\\n### \\n\\nEnter the Token Address\\n\\nEnter the `$MNT` token contract address `0x65e37B558F64E2Be5768DB46DF22F93d85741A9E` , and as you do that the other two fields will get populated automatically.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fadd-custom-token-73776306b75c79729773510acad6d39a.png&width=300&dpr=4&quality=100&sign=a7077687&sv=2)\\n\\n### \\n\\nFinish Importing\\n\\nNext, click on the '**Next**' button at the bottom, and then click '**Import**' in the next window to finish. You should be able to see your current balance.\\n\\n## \\n\\nConfigure Your wallet[​](https://docs-v2.mantle.xyz/users/how-to/wallet#configure-your-wallet)\\n\\nMantle v2 Tectonic has the ultimate user experience by optimizing the fee mechanism. Users can set up `basefee` and `priorityfee` in MetaMask to greatly reduce the fee for transfers. Here is a detailed guide on how to configure your wallet.\\n\\n### \\n\\nCreate a Transaction\\n\\nWhen you are ready to send a transaction using MetaMask, construct the transaction first, at which point we can see that the `Estimated fee` before it is set is a higher value.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-5-307e0865a654cff6b32d0e0cbdf1f048.png&width=300&dpr=4&quality=100&sign=8a026053&sv=2)\\n\\n### \\n\\nPrepare Your Transaction Configuration\\n\\nClick the `Next` button, and then click the red box to enter the setting interface.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-6-c23111cc33bb16d7b70595aa341f73b7.png&width=300&dpr=4&quality=100&sign=6aa7777b&sv=2)\\n\\n### \\n\\nConfigure the Gas Fee\\n\\nSelect the `Advanced` button and we can see that we can set the `Max base fee` and `Priority Fee`, see [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support#application-of-eip-1559-in-mantle-v2-tectonic) for the meaning of these two items. Here we set them to the lowest values, i.e. `Max base fee` is 0.02 gwei and `Priority Fee` is 0. Check the box below \\\"Save these values as my default for the Mantle sepolia network. \\\", and then click the ❌ button in the upper right corner.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-7-fa653c4a460d25d11d9fca15501c1452.png&width=300&dpr=4&quality=100&sign=66d97766&sv=2)\\n\\n### \\n\\nConfirm thr Transaction\\n\\nOnce the settings are complete, when you reconstruct the transaction, you will see that the `Estimated fee` will be very low, click `Confirm` to send the transaction.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-8-c9fe29570f11a7151d1c723fb1a90919.png&width=300&dpr=4&quality=100&sign=d014e8a6&sv=2)\\n\\nWith this setup, you will enjoy extreamely high speed and low cost transaction processing in Mantle v2 Tectonic.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens\",\n    \"loadedTime\": \"2025-02-15T20:31:24.864Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens\",\n    \"title\": \"Fetching Test Tokens | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fetching Test Tokens | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Ln7Ytu6SOSlGOziKHHA8\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:23 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDI0ZDk1YmItMWY5MS00MmZmLTg4NWQtNTFlMWQ4NzM2MWNm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dH%2BhvbCbyJlES4RbBvNFbDGcGEl%2F2vp4BZIi5dzom5b9DdEVOqFQGuXFHA8I47N7x%2F9qcdqf8JaQppNi32%2BXU7NkSpwR7HhL62KmLDmkBr9bQRFceBIDgvcI2M1j79dkbUb2xWN0KdOh03PCIdgG\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fa82a562ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fetching Test Tokens | Network\\nFaucets​\\nTo begin transacting on Mantle v2 Tectonic Testnet, you must acquire Sepolia $ETH and testnet $MNT and bridge it across. You can obtain Sepolia $ETH from the following faucets:\\nPlease get Sepolia $ETH at first, the following steps need it to be the gas for the transactions. You can receive testnet $MNT tokens from the Mantle faucet.\\nMake sure to import the $MNT token to your Sepolia wallet to see the current balance. The contract address is 0x65e37B558F64E2Be5768DB46DF22F93d85741A9E. How to import tokens can be found here.\\nMint $MNT on Sepolia via Etherscan​\\nThis guide is not available on the Mantle v2 Tectonic Testnet right now. If you want to fetch test tokens, please check our faucet.\\nMake sure your wallet has enough Sepolia ETH to perform the mint action before moving forward.\\nNavigate to the Contract\\nFirst, you'll need to look up the test $MNT contract on Etherscan and navigate to the 'Write as Proxy' section under the 'contract' tab. You can follow this link to get there directly.\\nImport MNT Token\\nNext, switch your wallet network to Sepolia, and import (if you haven't already) the $MNT token.\\nConnect Your Wallet\\nNow connect your wallet to Etherscan using the 'Connect to Web3' button.\\nChoose the Mint Function\\nFind and click on the mint() function in the list on the Etherscan page. It's on no.9.\\nEnter Your Address and Value\\nEnter the address of your wallet in the address field. Click on the '+' button next to the function name to input a value. The mint amount needs to be entered in wei units, so 1 $MNT token is represented as 10^18. Select 10^18 from the drop-down list, and click on the 'Add' button. That'll automatically enter 10^18 (1 followed by 18 zeroes) in the amount field.\\nMint\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\nFinish Minting\\nFinally, click on the 'Write' button to send a transaction. Confirm the action in your wallet, and after a few seconds your $MNT will show up there.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Fetching Test Tokens | Network\\n\\n## \\n\\nFaucets[​](https://docs-v2.mantle.xyz/users/how-to/faucet#faucets)\\n\\nTo begin transacting on Mantle v2 Tectonic Testnet, you must acquire Sepolia `$ETH` and testnet `$MNT` and bridge it across. You can obtain Sepolia `$ETH` from the following faucets:\\n\\n**Please get Sepolia** `**$ETH**` **at first, the following steps need it to be the gas for the transactions.** You can receive testnet `$MNT` tokens from the [Mantle faucet](https://faucet.sepolia.mantle.xyz/).\\n\\nMake sure to import the `$MNT` token to your Sepolia wallet to see the current balance. The contract address is `0x65e37B558F64E2Be5768DB46DF22F93d85741A9E`. How to import tokens can be found [here](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network#add-mnt-to-your-wallet).\\n\\n## \\n\\nMint $MNT on Sepolia via Etherscan[​](https://docs-v2.mantle.xyz/users/how-to/faucet#mint-mnt-on-sepolia-via-etherscan)\\n\\nThis guide is not available on the Mantle v2 Tectonic Testnet right now. If you want to fetch test tokens, please check our [faucet](https://faucet.sepolia.mantle.xyz/).\\n\\nMake sure your wallet has enough Sepolia ETH to perform the mint action before moving forward.\\n\\n### \\n\\nNavigate to the Contract\\n\\nFirst, you'll need to look up the test `$MNT` contract on Etherscan and navigate to the '**Write as Proxy**' section under the '**contract**' tab. You can follow [this link](https://sepolia.etherscan.io/address/0x65e37B558F64E2Be5768DB46DF22F93d85741A9E#writeProxyContract) to get there directly.\\n\\n### \\n\\nImport MNT Token\\n\\nNext, switch your wallet network to Sepolia, and [import](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network#add-mnt-to-your-wallet) (if you haven't already) the `$MNT` token.\\n\\n### \\n\\nConnect Your Wallet\\n\\nNow connect your wallet to Etherscan using the '**Connect to Web3**' button.\\n\\n### \\n\\nChoose the Mint Function\\n\\nFind and click on the `mint()` function in the list on the Etherscan page. It's on no.9.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Ffaucet-4-b426051a807fa7c86c020634b043434f.png&width=300&dpr=4&quality=100&sign=500c3dcb&sv=2)\\n\\n### \\n\\nEnter Your Address and Value\\n\\nEnter the address of your wallet in the `address` field. Click on the '**+**' button next to the function name to input a value. The mint amount needs to be entered in _wei_ units, so 1 `$MNT` token is represented as 10^18. Select 10^18 from the drop-down list, and click on the '**Add**' button. That'll automatically enter 10^18 (1 followed by 18 zeroes) in the amount field.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Ffaucet-2-97cba3a14570abc851f81c0068f6e8a3.png&width=300&dpr=4&quality=100&sign=a588e3a2&sv=2)\\n\\n### \\n\\nMint\\n\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 `$MNT`, and so on.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Ffaucet-3-0f50cf2719283b5f35828a73be4738f3.png&width=300&dpr=4&quality=100&sign=ead3cec9&sv=2)\\n\\n### \\n\\nFinish Minting\\n\\nFinally, click on the '**Write**' button to send a transaction. Confirm the action in your wallet, and after a few seconds your `$MNT` will show up there.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/on-chain-system\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system\",\n    \"loadedTime\": \"2025-02-15T20:31:28.837Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system\",\n    \"title\": \"On-Chain System | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"On-Chain System | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/5mWCq9zj7fuqbluIZOi9\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:28 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGVlNjM4ZWUtM2ViNC00ODNjLWFlMmMtNjdkZTQ1NGY1OTAz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=GWIBpv4QxPWJy%2FqA%2FFlsLLhjH9P8OqSW4jd0Dh9PiclN%2FP5CCWEwlasrXYBc%2FVcO8nrImyulglRsAyy7vVET2Wq9PUMOsrzFrtqcZecMrLwWleAl0r4BIMgp7iCGqAcBEM%2BovyYnC7vSz57RUYQt\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fcaeb9bc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"On-Chain System | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# On-Chain System | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction\",\n    \"loadedTime\": \"2025-02-15T20:31:29.160Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction\",\n    \"title\": \"Contract Introduction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Contract Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/lNCcBBrAWYuuq8bLXL7H\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTI5ZDY3MzgtNGY3OS00N2FkLTk2ZGYtNTZiNDg2ZWM1YjNk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=8j12jqpG2ylGpr7JCpL%2FMQYNGcrauwdGJ8rLAJoJ1aLJqJueF9lOcSW6you1XVblW%2B3BAoNwIa2E792Ge0GZxjWkJjdRQM6TJo5iTeXd7rDvxa5AL4OK0jEfFP3Ct%2FjAOD3pRpfC35KNzZbG6Lga\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fcafa01a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Contract Introduction | Network\\nMantle Network's on-chain module contains a series of smart contracts that run on the blockchain to ensure decentralized and reliable execution. These contracts are responsible for handling the logic of various dApps interacting with the blockchain, as well as the interaction of the off-chain system with the on-chain system, including asset transfers, asset swaps, and so on.\\nContract Explained\\nL1CrossDomainMessengerProxy​\\nThis contract is a proxy for the L1CrossDomainMessenger contract on the L2, which can be used to the interaction with the L2 contract from L1.\\nThe L1CrossDomainMessenger contract is a high-level interface for sending messages to and receiving messages from Mantle Network (from L1 to L2).\\nL1StandardBridgeProxy​\\nThis contract is a proxy for the L1StandardBridge contract on the L2, which can be used to the interaction with the L2 bridge from L1.\\nThe L1StandardBridge is a standardized contract for transferring ERC20 tokens to/from Mantle Network\\nL1ERC721BridgeProxy​\\nThe proxy contract for transferring ERC721 tokens to/from Mantle Network.\\nL2OutputOracleProxy​\\nThe proxy contract of stores commitments to the state of Mantle Network, which can be used by contracts on L1 to access the L2 state\\nOptimismMintableERC20FactoryProxy​\\nThe proxy contract of factory contract for minting ERC20 tokens.\\nOptimismPortalProxy​\\nThe proxy contract of low-level message-passing interface.\\nProxyAdmin​\\nAdmin contract for the contracts, is the owner of all the proxy contracts. It can be used to upgrade the most system contracts in Mantle.\\nSystemConfigProxy​\\nThis is a proxy contract of the system contract that stores the configuration values for the on-chain system.\\nAddressManager​\\nAddressManager is a legacy contract that was used in the old version of the Mantle system to manage a registry of string names to addresses.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Contract Introduction | Network\\n\\nMantle Network's on-chain module contains a series of smart contracts that run on the blockchain to ensure decentralized and reliable execution. These contracts are responsible for handling the logic of various dApps interacting with the blockchain, as well as the interaction of the off-chain system with the on-chain system, including asset transfers, asset swaps, and so on.\\n\\n## \\n\\nContract Explained\\n\\n### \\n\\nL1CrossDomainMessengerProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l1crossdomainmessengerproxy)\\n\\nThis contract is a proxy for the L1CrossDomainMessenger contract on the L2, which can be used to the interaction with the L2 contract from L1.\\n\\nThe L1CrossDomainMessenger contract is a high-level interface for sending messages to and receiving messages from Mantle Network (from L1 to L2).\\n\\n### \\n\\nL1StandardBridgeProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l1standardbridgeproxy)\\n\\nThis contract is a proxy for the L1StandardBridge contract on the L2, which can be used to the interaction with the L2 bridge from L1.\\n\\nThe L1StandardBridge is a standardized contract for transferring ERC20 tokens to/from Mantle Network\\n\\n### \\n\\nL1ERC721BridgeProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l1erc721bridgeproxy)\\n\\nThe proxy contract for transferring ERC721 tokens to/from Mantle Network.\\n\\n### \\n\\nL2OutputOracleProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l2outputoracleproxy)\\n\\nThe proxy contract of stores commitments to the state of Mantle Network, which can be used by contracts on L1 to access the L2 state\\n\\n### \\n\\nOptimismMintableERC20FactoryProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#optimismmintableerc20factoryproxy)\\n\\nThe proxy contract of factory contract for minting ERC20 tokens.\\n\\n### \\n\\nOptimismPortalProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#optimismportalproxy)\\n\\nThe proxy contract of low-level message-passing interface.\\n\\n### \\n\\nProxyAdmin[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#proxyadmin)\\n\\nAdmin contract for the contracts, is the owner of all the proxy contracts. It can be used to upgrade the most system contracts in Mantle.\\n\\n### \\n\\nSystemConfigProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#systemconfigproxy)\\n\\nThis is a proxy contract of the system contract that stores the configuration values for the on-chain system.\\n\\n### \\n\\nAddressManager[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#addressmanager)\\n\\nAddressManager is a legacy contract that was used in the old version of the Mantle system to manage a registry of string names to addresses.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/key-l1-contract-address\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/key-l1-contract-address\",\n    \"loadedTime\": \"2025-02-15T20:31:31.911Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/key-l1-contract-address\",\n    \"title\": \"Key L1 Contract Address | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Key L1 Contract Address | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/9D2ZmwqE5FSDfwAv1Vcb\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:31 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGVlYTAxYjgtZDNlMC00ODgwLWE4NWEtM2VmYzdkNmQ1YzU0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=rDsWLJOtIpKgSaUQg6mmPuqFH5u3YVye%2FouiLeYrygsgC5pHhObFI%2BvY%2BYuMZtZzxlEwRpdK7vS72D3YZMdEN0AxbTxmesWdfNlC650FnZ0nPtYcEUZd0JFZz4vQPuFHprEMeRY3%2FbgxHtlpKPZO\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fdd0c9da5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Key L1 Contract Address | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Key L1 Contract Address | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system\",\n    \"loadedTime\": \"2025-02-15T20:31:34.460Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system\",\n    \"title\": \"Off-Chain System | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Off-Chain System | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/cCPKPNIIsH60A58Dr3xo\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:34 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWFmNmVmOTgtZmQxNi00NTM1LTkxYzItZmJhZDExNDNlNzQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=4YiID5nm7Sld6l%2BRUZWlrVMIkzJCTcp4q63wSjPnE%2BtyDkig1KZZwz9cGU3w%2FOOFIDf%2B6foKBkcVJeVmWpC7lcd5mpy3ZKmILuq7EZqqfE63o%2BPJvmw4vsn8ulYYBREMWbGJSGIOG4IseplXeerz\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280feebd9ba5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Off-Chain System | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Off-Chain System | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/system-information/off-chain-system?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/system-information/off-chain-system?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/contract-introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/contract-introduction\",\n    \"loadedTime\": \"2025-02-15T20:31:37.126Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/contract-introduction\",\n    \"title\": \"Contract Introduction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Contract Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/3tUF0SB94Npwr2Jc0RuH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:37 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MTY5ZDdiOTYtYThkNy00MzFmLWJkZTUtOGU0MzkxMDE0MTg1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=K%2FawDtFY%2BCxSjWBcNWo6Xay2Dx1OIynsDhbjGjAqGLqKRuCFD00IG0IhFVLNY9IKSEDKwWIS2adfHbaRVXKzUxOv5NrFIr8EHuhsmiyty9U%2BcxIrK7CVLRvPFZn44Z%2BjvYf93Q0dB%2B0Bd5khKXzP\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ffe3f84a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Contract Introduction | Network\\nThe off-chain System is another key module of the Mantle Network. It is responsible for executing specific tasks and logic in an environment outside of the blockchain, which is key to Layer 2's ability to scale L1 and provide more efficient and faster response and execution.\\nContract ​Explained\\nBVM_GasPriceOracle​\\nStores L2 gas price configuration values. Provide the tokenRatio parameter to keep the gas fees more stable.\\nL1_BLOCK_NUMBER​\\nStores L1 block context information (e.g., latest known L1 block hash)\\nL2CrossDomainMessenger​\\nHigh-level interface for sending messages to and receiving messages from L1\\nL2StandardBridge​\\nStandardized system for transferring ERC20 tokens to/from L1\\nL2_TO_L1_MESSAGE_PASSER​\\nLow-level message-passing interface\\nBaseFeeVault​\\nVault for L2 BaseFee transaction fees, more details here.\\nBVM_SequencerFeeVault​\\nVault for L2 transaction fees except for BaseFee, more details here.\\nL1Block​\\nThe L1Block gives users access to information about the last known L1 block.\\nOptimismMintableERC20Factory​\\nOptimismMintableERC20Factory is a factory contract that generates OptimismMintableERC20 contracts on the network it's deployed to.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Contract Introduction | Network\\n\\nThe off-chain System is another key module of the Mantle Network. It is responsible for executing specific tasks and logic in an environment outside of the blockchain, which is key to Layer 2's ability to scale L1 and provide more efficient and faster response and execution.\\n\\n## \\n\\nContract [​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#introduction)Explained\\n\\n### \\n\\nBVM\\\\_GasPriceOracle[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#bvm_gaspriceoracle)\\n\\nStores L2 gas price configuration values. Provide the tokenRatio parameter to keep the gas fees more stable.\\n\\n### \\n\\nL1\\\\_BLOCK\\\\_NUMBER[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l1_block_number)\\n\\nStores L1 block context information (e.g., latest known L1 block hash)\\n\\n### \\n\\nL2CrossDomainMessenger[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l2crossdomainmessenger)\\n\\nHigh-level interface for sending messages to and receiving messages from L1\\n\\n### \\n\\nL2StandardBridge[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l2standardbridge)\\n\\nStandardized system for transferring ERC20 tokens to/from L1\\n\\n### \\n\\nL2\\\\_TO\\\\_L1\\\\_MESSAGE\\\\_PASSER[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l2_to_l1_message_passer)\\n\\nLow-level message-passing interface\\n\\n### \\n\\nBaseFeeVault[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#basefeevault)\\n\\nVault for L2 BaseFee transaction fees, more details [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support#application-of-eip-1559-in-mantle-v2-tectonic).\\n\\n### \\n\\nBVM\\\\_SequencerFeeVault[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#bvm_sequencerfeevault)\\n\\nVault for L2 transaction fees except for BaseFee, more details [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support#application-of-eip-1559-in-mantle-v2-tectonic).\\n\\n### \\n\\nL1Block[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l1block)\\n\\nThe L1Block gives users access to information about the last known L1 block.\\n\\n### \\n\\nOptimismMintableERC20Factory[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#optimismmintableerc20factory)\\n\\nOptimismMintableERC20Factory is a factory contract that generates OptimismMintableERC20 contracts on the network it's deployed to.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge\",\n    \"loadedTime\": \"2025-02-15T20:31:29.582Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge\",\n    \"title\": \"Using Mantle Bridge | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Using Mantle Bridge | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/xw61oCcgBCNbNGB0JshN\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:28 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGZmOGQzY2YtMWMyNC00NjFjLWFlMWQtODExNmY5NTNjZmVl' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=oq%2B6UIK7oyM%2F6xS2GHb0GyRoKOPMn8MkGft7Hmtkninf3YEuojRsPDspQ09HCRd0ct12utLB%2Bo23%2B1at20NX5DT11TqHVja7CIYvRUy%2FTvvgIOp%2Bh3xYrfENiMOllnbkOFLwdowa7H4jjEABf48G\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fcbdd6e2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Using Mantle Bridge | Network\\nYou can use the testnet bridge to get acquainted with the UI of the official Mantle bridge. The official Mantle Bridge on Mainnet operates in exactly the same way connecting to Ethereum Mainnet.\\nDeposit $MNT​\\nFollow the steps below to deposit your tokens from Sepolia to Mantle Testnet:\\nNavigate to the Bridge\\nNavigate to the testnet bridge and connect your wallet by clicking on the 'Connect Wallet' button in the top-right.\\nAllocate Allowance\\nSelect the 'Deposit' tab and enter the amount of $MNT you want to bridge over to Mantle Testnet, and then click on the button at the bottom to proceed with token approval.\\nEnter the Allowance Amount\\nEnter an amount to approve to the contract. You can choose an amount you're comfortable with, but make sure its equal to or greater than the amount you're depositing. Then click on the 'Next' button.\\nApprove Your Allowance\\nClick on the 'Approve' button to approve the amount you entered. Approval may take some time, about 10 seconds or so.\\nDeposit Your Tokens\\nOnce approval is successful, you'll see the 'Deposit Tokens to L2' button. Click on it to proceed to confirmation.\\nConfirmation\\nHere you'll be able to see the deposit amount and approximate time it'll take to complete the deposit operation. Finally, click on the 'Confirm' button to send a deposit transaction. You'll need to confirm the transaction in your wallet too.\\nFinish Your Deposit\\nFeel free to check the transaction status by click on the 'Sepolia Explorer' button. Once complete the balance will be reflected in your L2 testnet wallet.\\nWithdraw $MNT​\\nFollow the steps below to withdraw your tokens from Mantle Testnet to Sepolia:\\nNavigate to the Bridge\\nNavigate to the testnet bridge and connect your wallet by clicking on the 'Connect Wallet' button in the top-right.\\nWithdraw Your Tokens\\nSelect the 'Withdraw' tab and enter the amount of $MNT you want to bridge over to Sepolia, and then click on the 'Withdraw Tokens from L2' button at the bottom.\\nConfirm Your Withdrawal\\nYou'll be able to see the withdraw amount and an approximation for the amount of time it will take for the token transfer. Note that once complete, the amount still needs to be claimed on L1 for it to land in your wallet. Check the checkboxes, and click on the 'Confirm' button to send a withdraw transaction.\\nSubmit Your Proof\\nAfter we sign the transaction, which means you've initiated the withdrawal transaction, now we need to wait around 30 minutes for the transaction status to be ready to prove. Once the transaction is ready, you'll be able to submit prove the withdrawal.\\nClaim Your Withdrawal\\nThen we have to wait another 30 minutes for the transaction status to be ready to claim. Click on the 'claim' button and confirm the transaction in your wallet.\\nFinish Your Withdrawal\\nThe $MNT will show up in your Sepolia wallet once the transaction is successfully sent.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Using Mantle Bridge | Network\\n\\nYou can use the [testnet bridge](https://app.mantle.xyz/bridge) to get acquainted with the UI of the official Mantle bridge. The [official Mantle Bridge](https://app.mantle.xyz/bridge) on Mainnet operates in exactly the same way connecting to Ethereum Mainnet.\\n\\n## \\n\\nDeposit $MNT[​](https://docs-v2.mantle.xyz/users/how-to/bridge#deposit-mnt)\\n\\nFollow the steps below to deposit your tokens from Sepolia to Mantle Testnet:\\n\\n### \\n\\nNavigate to the Bridge\\n\\nNavigate to the [testnet bridge](https://app.mantle.xyz/bridge) and connect your wallet by clicking on the '**Connect Wallet**' button in the top-right.\\n\\n### \\n\\nAllocate Allowance\\n\\nSelect the '**Deposit**' tab and enter the amount of `$MNT` you want to bridge over to Mantle Testnet, and then click on the button at the bottom to proceed with token approval.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-1-6a8e5a915f0626a3f218d96848ab077d.png&width=300&dpr=4&quality=100&sign=9cb8b61c&sv=2)\\n\\n### \\n\\nEnter the Allowance Amount\\n\\nEnter an amount to approve to the contract. You can choose an amount you're comfortable with, but **make sure its equal to or greater than the amount you're depositing**. Then click on the '**Next**' button.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-2-a61890dd5534946c8a905e2a9de8b12c.png&width=300&dpr=4&quality=100&sign=828fb28e&sv=2)\\n\\n### \\n\\nApprove Your Allowance\\n\\nClick on the '**Approve**' button to approve the amount you entered. Approval may take some time, about 10 seconds or so.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-3-f8f82a02302593ef90089af14146e3e6.png&width=300&dpr=4&quality=100&sign=5b248e5a&sv=2)\\n\\n### \\n\\nDeposit Your Tokens\\n\\nOnce approval is successful, you'll see the '**Deposit Tokens to L2**' button. Click on it to proceed to confirmation.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-4-29cd71373214e7cd92d731d5cd8ca49d.png&width=300&dpr=4&quality=100&sign=475192c1&sv=2)\\n\\n### \\n\\nConfirmation\\n\\nHere you'll be able to see the deposit amount and approximate time it'll take to complete the deposit operation. Finally, click on the '**Confirm**' button to send a deposit transaction. You'll need to confirm the transaction in your wallet too.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-5-78a7e9f81dad621fcc6e481cc005b988.png&width=300&dpr=4&quality=100&sign=53833f8&sv=2)\\n\\n### \\n\\nFinish Your Deposit\\n\\nFeel free to check the transaction status by click on the '**Sepolia Explorer**' button. Once complete the balance will be reflected in your L2 testnet wallet.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-6-e0947037465a743f2aaa229d7025f758.png&width=300&dpr=4&quality=100&sign=eabf0a44&sv=2)\\n\\n## \\n\\nWithdraw $MNT[​](https://docs-v2.mantle.xyz/users/how-to/bridge#withdraw-mnt)\\n\\nFollow the steps below to withdraw your tokens from Mantle Testnet to Sepolia:\\n\\n### \\n\\nNavigate to the Bridge\\n\\nNavigate to the [testnet bridge](https://app.mantle.xyz/bridge) and connect your wallet by clicking on the '**Connect Wallet**' button in the top-right.\\n\\n### \\n\\nWithdraw Your Tokens\\n\\nSelect the '**Withdraw**' tab and enter the amount of `$MNT` you want to bridge over to Sepolia, and then click on the '**Withdraw Tokens from L2**' button at the bottom.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-7-c0a2fb06d2d69b772902ee36803cf7d9.png&width=300&dpr=4&quality=100&sign=1664813b&sv=2)\\n\\n### \\n\\nConfirm Your Withdrawal\\n\\nYou'll be able to see the withdraw amount and an approximation for the amount of time it will take for the token transfer. **Note that once complete, the amount still needs to be claimed on L1 for it to land in your wallet**. Check the checkboxes, and click on the '**Confirm**' button to send a withdraw transaction.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-8-cc1b21f365dcd8b64ef4d3e0d905f68b.png&width=300&dpr=4&quality=100&sign=395dd1dd&sv=2)\\n\\n### \\n\\nSubmit Your Proof\\n\\nAfter we sign the transaction, which means you've initiated the withdrawal transaction, now we need to wait around 30 minutes for the transaction status to be ready to prove. Once the transaction is ready, you'll be able to submit prove the withdrawal.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-9-fe6c7585097d541472fabf36c993b0b7.png&width=300&dpr=4&quality=100&sign=661e4c69&sv=2)\\n\\n### \\n\\nClaim Your Withdrawal\\n\\nThen we have to wait another 30 minutes for the transaction status to be ready to claim. Click on the '**claim**' button and confirm the transaction in your wallet.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-10-6a149c7afff3f2f76ada08426a7646ae.png&width=300&dpr=4&quality=100&sign=78d0b968&sv=2)\\n\\n### \\n\\nFinish Your Withdrawal\\n\\nThe `$MNT` will show up in your Sepolia wallet once the transaction is successfully sent.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-11-6ba2980c91ec9e0e5e124073a48b3f4b.png&width=300&dpr=4&quality=100&sign=ffe3c056&sv=2)\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/ecosystem\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/ecosystem\",\n    \"loadedTime\": \"2025-02-15T20:31:33.263Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/ecosystem\",\n    \"title\": \"Ecosystem | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Ecosystem | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/3Et6MR94ZZY9IgFV9HqV\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:31 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTkwZDI2YWItZGU2Yy00NjI5LTk1NzUtZjU0NWRiZDE3OTQ1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=s%2F0CnXCwlQNF5sR5ng999oUAsC54sadHGs4bg%2BRzz0v%2BP8Y1Al9HMIbPyNrlGsRGGfNoANded7gGI8el5nqhJBKX8p38AruW90BO6aMyZW%2BXWPG%2FlRM9Ej6hlT5mwVUaTG8OZ12Co3z3ALvybs5O\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fde7d9c2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Ecosystem | Network\\nSupported Wallets\\nPreviousUsing Mantle BridgeNextSupported Wallets\\nWas this helpful?\",\n  \"markdown\": \"# Ecosystem | Network\\n\\n[Supported Wallets](https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets)\\n\\n[PreviousUsing Mantle Bridge](https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge)[NextSupported Wallets](https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling\",\n    \"loadedTime\": \"2025-02-15T20:31:33.563Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling\",\n    \"title\": \"Resources & Tooling | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Resources & Tooling | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/mkdszHk74AxjmGyq3uJu\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:31 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGMzMjYxY2EtMjlkZi00NDgyLWI0NDAtMTg2ZGZmYzFiZTQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pPo7x86G1Rnhry0JkT0Qppz9V0hFUv1UDTp6nWu6WPzgq3343irgHJUu2pjcBm1t4X1OYWWC6uqgzGWZZcV84l%2BdMK79CzVhIczVJ0VaPg0GOPLQsX10defBVcuBwHgGYDOsoQm3%2Fd2bXFxaaSCo\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fdfbef72ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Resources & Tooling | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Resources & Tooling | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/resources-and-tooling?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/resources-and-tooling?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets\",\n    \"loadedTime\": \"2025-02-15T20:31:39.506Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets\",\n    \"title\": \"Supported Wallets | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Supported Wallets | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/9SPYH64Z0C4wQQLigO7Y\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:36 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MmNkZGM2MjYtZGQ3My00ZWM0LTllY2MtY2JjMTMzODUzYzZi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=mSmuom67PQrWHo6T5vBDNmSG0wgnEW87SUlpiyV3%2Fr%2F2jd6GfaEZ9ilJq6%2FTY0dwyB%2BB7bgXJcejd6zpKhd92m3dCZi%2BqANMEYGg%2BihV3VIPKCH8qBxqsdpbzzdA%2BeGJ3LxvP578igCn%2FfrcT494\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ffd7aa02ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Supported Wallets | Network\\nMultisig Wallets​\\nA multisig wallet (multi-signature wallet) is a cryptocurrency wallet that requires multiple signatures from different private keys to authorize a transaction. This adds an extra layer of security, making it ideal for joint accounts or situations where multiple parties need to approve a transaction.\\nSafe{Wallet} is the most trusted decentralized custody protocol and collective asset management platform.\\nMPC Wallets​\\nAn MPC (Multi-Party Computation) wallet is a type of cryptocurrency wallet that employs advanced cryptographic techniques to enhance security. Instead of storing a single private key in one location, MPC wallets distribute the private key into multiple shares, each held by different parties. This distributed nature makes it extremely difficult for hackers to compromise the wallet, as they would need to gain access to all the shares simultaneously. Even if one share is compromised, the remaining shares remain secure, safeguarding your funds. MPC wallets offer a significant improvement in security compared to traditional wallets, making them an increasingly popular choice for both individuals and institutions.\\nFireblocks Wallet is a digital asset custody service for organisations and businesses that allows users to securely store, transfer and distribute cryptocurrencies and other blockchain assets.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Supported Wallets | Network\\n\\n### \\n\\nMultisig Wallets[​](https://docs-v2.mantle.xyz/users/ecosystem/wallet#multisig-wallets)\\n\\nA multisig wallet (multi-signature wallet) is a cryptocurrency wallet that requires multiple signatures from different private keys to authorize a transaction. This adds an extra layer of security, making it ideal for joint accounts or situations where multiple parties need to approve a transaction.\\n\\nSafe{Wallet} is the most trusted decentralized custody protocol and collective asset management platform.\\n\\n### \\n\\nMPC Wallets[​](https://docs-v2.mantle.xyz/users/ecosystem/wallet#mpc-wallets)\\n\\nAn MPC (Multi-Party Computation) wallet is a type of cryptocurrency wallet that employs advanced cryptographic techniques to enhance security. Instead of storing a single private key in one location, MPC wallets distribute the private key into multiple shares, each held by different parties. This distributed nature makes it extremely difficult for hackers to compromise the wallet, as they would need to gain access to all the shares simultaneously. Even if one share is compromised, the remaining shares remain secure, safeguarding your funds. MPC wallets offer a significant improvement in security compared to traditional wallets, making them an increasingly popular choice for both individuals and institutions.\\n\\nFireblocks Wallet is a digital asset custody service for organisations and businesses that allows users to securely store, transfer and distribute cryptocurrencies and other blockchain assets.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/faqs\",\n    \"loadedTime\": \"2025-02-15T20:31:40.480Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ogM0kRPytJaAmFVVgnAI\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGQ5ZTRkODMtMzlkMS00Y2JjLWEwNzQtNTNhNGY4OTg0YTY3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=HJX5UFdwnnnTZleaByGdIwgdF%2BzScDSkZflVBOGlaYGE48kYHVsmingVR%2FFDzJNcGwYcn%2Fquf8RhnCm4FVcwD4TcK5cT1s2LqGVi%2FlcqHnMbbIx0briKAXTiXG9EdXYyuclOGkcfFLW9UrDQch0b\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128100d5d812ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nIs there an option for a test drive?​\\nYou can experience the deposit and withdraw flow by using our simulated testnet. It provides a safe environment to try out the bridge functionality without any real token transactions.\\nWhat is L1/L2, and what are the required gas fees for deposit and withdrawal?​\\nMantle Network is a Layer-2 (L2) scalability solution built on Ethereum which is the Layer-1 (L1).\\nDeposit: You need ETH on L1 as gas fees to initiate the deposit. After depositing, you'll need MNT on L2 as gas fees to transact on Mantle Network.\\nWithdraw: You need MNT on L2 as gas fees to initiate the withdrawal and ETH on L1 as gas fees to claim the tokens on Ethereum Mainnet.\\nHow can I view my bridged token balances on Mantle Network in my wallet?​\\nIf the auto-detection of your bridged balances doesn't work, you can manually import the tokens to your wallet using the following contract addresses:\\n0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\nFor other token contract addresses, you can access the bridge token mapping by visiting the following link.\\nWhat is the typical duration for deposits and withdrawals?​\\nInitiating a deposit typically completes in around ~12 minutes.\\nConversely, withdrawals, due to the intricacies of Optimistic Rollups, have a challenge period to detect and address any discrepancies in the Mantle Mainnet transaction. This ensures the highest security, but means withdrawals to Ethereum Mainnet can take up to a week.\\nWhy is the estimated fee on Metamask not the same as the actual transaction fee?​\\nMetamask ensures that the transaction is successful by displaying the estimated fee higher than the actual cost consumed, and the actual fee cost is much lower. You can check the actual cost on explorer after the transaction is confirmed.\\nHow are withdrawals fees determined?​\\nThe cost to claim on the bridge is dependent on the gas costs, measured in Gwei, at the time of your transaction. The estimated formula to determine this cost is:\\nCost(ETH)=600,000×GweiCost(ETH)=600,000×Gwei\\nFor example:\\nAt 15 Gwei, the cost is approximately 0.009 ETH.\\nAt 30 Gwei, the cost is approximately 0.018 ETH.\\nTo minimize your costs, you can opt to claim during a period when the Gwei is low. For current gas prices, you can check the Etherscan Gas Tracker.\\nWhere can I find the bridge token mapping?​\\nYou can view the bridge token mapping by visiting this link. It provides comprehensive details on the token list and other related information.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n### \\n\\nIs there an option for a test drive?[​](https://docs-v2.mantle.xyz/users/faqs#is-there-an-option-for-a-test-drive)\\n\\n*   You can experience the deposit and withdraw flow by using our simulated testnet. It provides a safe environment to try out the bridge functionality without any real token transactions.\\n    \\n\\n### \\n\\nWhat is L1/L2, and what are the required gas fees for deposit and withdrawal?[​](https://docs-v2.mantle.xyz/users/faqs#what-is-l1l2-and-what-are-the-required-gas-fees-for-deposit-and-withdrawal)\\n\\n*   Mantle Network is a Layer-2 (L2) scalability solution built on Ethereum which is the Layer-1 (L1).\\n    \\n    *   Deposit: You need ETH on L1 as gas fees to initiate the deposit. After depositing, you'll need MNT on L2 as gas fees to transact on Mantle Network.\\n        \\n    *   Withdraw: You need MNT on L2 as gas fees to initiate the withdrawal and ETH on L1 as gas fees to claim the tokens on Ethereum Mainnet.\\n        \\n    \\n\\n### \\n\\nHow can I view my bridged token balances on Mantle Network in my wallet?[​](https://docs-v2.mantle.xyz/users/faqs#how-can-i-view-my-bridged-token-balances-on-mantle-network-in-my-wallet)\\n\\n*   If the auto-detection of your bridged balances doesn't work, you can manually import the tokens to your wallet using the following contract addresses:\\n    \\n    0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\n    \\n\\nFor other token contract addresses, you can access the bridge token mapping by visiting the following [link](https://docs.mantle.xyz/network/for-developers/quick-access#token-list).\\n\\n### \\n\\nWhat is the typical duration for deposits and withdrawals?[​](https://docs-v2.mantle.xyz/users/faqs#what-is-the-typical-duration-for-deposits-and-withdrawals)\\n\\n*   Initiating a deposit typically completes in around ~12 minutes.\\n    \\n    Conversely, withdrawals, due to the intricacies of Optimistic Rollups, have a challenge period to detect and address any discrepancies in the Mantle Mainnet transaction. This ensures the highest security, but means withdrawals to Ethereum Mainnet can take up to a week.\\n    \\n\\n### \\n\\nWhy is the estimated fee on Metamask not the same as the actual transaction fee?[​](https://docs-v2.mantle.xyz/users/faqs#why-is-the-estimated-fee-on-metamask-not-the-same-as-the-actual-transaction-fee)\\n\\nMetamask ensures that the transaction is successful by displaying the estimated fee higher than the actual cost consumed, and the actual fee cost is much lower. You can check the actual cost on explorer after the transaction is confirmed.\\n\\n### \\n\\nHow are withdrawals fees determined?[​](https://docs-v2.mantle.xyz/users/faqs#how-are-withdrawals-fees-determined)\\n\\n*   The cost to claim on the bridge is dependent on the gas costs, measured in Gwei, at the time of your transaction. The estimated formula to determine this cost is:\\n    \\n    Cost(ETH)=600,000×GweiCost(ETH)=600,000×Gwei\\n    \\n    For example:\\n    \\n    *   At 15 Gwei, the cost is approximately 0.009 ETH.\\n        \\n    *   At 30 Gwei, the cost is approximately 0.018 ETH.\\n        \\n    \\n    To minimize your costs, you can opt to claim during a period when the Gwei is low. For current gas prices, you can check the [Etherscan Gas Tracker](https://etherscan.io/gastracker).\\n    \\n\\n### \\n\\nWhere can I find the bridge token mapping?[​](https://docs-v2.mantle.xyz/users/faqs#where-can-i-find-the-bridge-token-mapping)\\n\\n*   You can view the bridge token mapping by visiting [this link](https://token-list.mantle.xyz/mantle.tokenlist.json). It provides comprehensive details on the token list and other related information.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers\",\n    \"loadedTime\": \"2025-02-15T20:31:43.361Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers\",\n    \"title\": \"Node Endpoints and Providers | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Node Endpoints and Providers | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/gxFuzeCMQ38MpNxcxnjP\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDJlM2U3ZGUtZmY1OS00MDA1LWEzYWMtOTM2NTM0MTVmNTQz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=76weWOq%2BKlvx%2FQ7H5sPCfbYbkdPuFTHNp9gE0aVlVtMNHvxWoGi%2FwQz11eUFxk8pg8%2FZbdys1gWoNUQAIj%2FiTgFt%2F6wCUi2oxCCPnSrDxn9IszAOGQScl%2FanZg0C6SOXxd5ac7V5wHfkDINirgiW\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810213c862ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Node Endpoints and Providers | Network\\nMantle provides powerful RPC Endpoints to programmatically interact with the web. Whether you are operating on a Mainnet or testing on a Testnet, Mantle provides accessible URLs for easy integration.\\nOfficial Network Endpoints​\\nCurrently, Mantle Network supports both https and WSS endpoints.\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes\\nThe WebSocket supports an access method equivalent to the https interface, along with event subscription and cancellation. See here for reference.\\nThird-Party Providers​\\nWe're working with popular node providers that you can use to connect your dApps or games to the Mantle network. They enable convenient and scalable API access to Mantle nodes, so you can focus on building without having to worry about the underlying infrastructure.\\nThe public third-party RPC endpoints listed below are intended for test environments only. For production environments, please use their premium services to ensure stability and reliability.\\nName\\nHttps Url\\nWebSocket Url\\nwss://mantle-rpc.publicnode.com\\n* If you have a higher demand for RPC endpoints, QuickNode has launched a series of discounts for Mantle users, check out the details here.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Node Endpoints and Providers | Network\\n\\nMantle provides powerful RPC Endpoints to programmatically interact with the web. Whether you are operating on a Mainnet or testing on a Testnet, Mantle provides accessible URLs for easy integration.\\n\\n## \\n\\nOfficial Network Endpoints[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/endpoints#official-network-endpoints)\\n\\nCurrently, Mantle Network supports both `https` and `WSS` endpoints.\\n\\n*   The official Mantle RPC employs rate limiting to ensure stability during traffic spikes\\n    \\n*   The WebSocket supports an access method equivalent to the https interface, along with event subscription and cancellation. See [here](https://ethereum.org/en/developers/tutorials/using-websockets/) for reference.\\n    \\n\\n## \\n\\nThird-Party Providers[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/endpoints#third-party-providers)\\n\\nWe're working with popular node providers that you can use to connect your dApps or games to the Mantle network. They enable convenient and scalable API access to Mantle nodes, so you can focus on building without having to worry about the underlying infrastructure.\\n\\nThe public third-party RPC endpoints listed below are intended for test environments only. For production environments, please use their premium services to ensure stability and reliability.\\n\\nName\\n\\nHttps Url\\n\\nWebSocket Url\\n\\nwss://mantle-rpc.publicnode.com\\n\\n\\\\* If you have a higher demand for RPC endpoints, QuickNode has launched a series of discounts for Mantle users, check out the details [here](https://quicknode.notion.site/QuickNode-Benefits-for-Mantle-Developers-94c0992b87a24858b22f5e4a21a44bd1?pvs=4).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api\",\n    \"loadedTime\": \"2025-02-15T20:31:45.967Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api\",\n    \"title\": \"Mantle API | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle API | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Vq3cQZP5OzQRDWJPI5Jz\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:44 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2EwZWFmNDctNDViYi00MThmLWE4OTEtOGU5Yzc2ZWYyNGJi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=OLqOv1FwgWn0QdlG9o9XMZrdvRiiX1F%2BTsWN93nmtoanoGwRTzI3b3fCDhgUsy3g%2F5pEKHQj2LONlxPvXl2XtcfJGZkxGLuslt3IIhesv7S0HQquYRLvlF83xUYAjM5uqdY3830Vl7phkyHJrswW\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128102f5e732ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle API | Network\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Network shares the same JSON-RPC API implementation as Ethereum.\\nYou can refer to the common methods here.\\nIf you want to get the L2 gas price, you can either use eth_gasPrice or get it from GasPriceOracle 's gasPrice function. If you want to get the L1 gas price, you can get it from GasPriceOracle 's l1BaseFee function.\\nWe've also introduced custom methods to simplify certain Mantle-specific interactions. All methods can be accessed via https and websocket, endpoints can be found here.\\nReturns block info for multiple blocks, takes a block range as parameter\\nReturns the block info in the form of an array of block objects for multiple blocks within a specified range. (See eth_getBlockByHash for the structure of a block object)\\nIf true, returns full transaction objects If false, returns transaction hashes only\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\": \\\"2.0\\\", \\\"id\\\": 1, \\\"result\\\": [ { \\\"difficulty\\\": \\\"0x2\\\", \\\"extraData\\\": \\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\", \\\"gasLimit\\\": \\\"0xe4e1c0\\\", \\\"gasUsed\\\": \\\"0x3183d\\\", \\\"hash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"logsBloom\\\": \\\"0xminer\\\": \\\"0x0000000000000000000000000000000000000000\\\", \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\": \\\"0x0000000000000000\\\", \\\"number\\\": \\\"0x1\\\", \\\"parentHash\\\": \\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\", \\\"receiptsRoot\\\": \\\"0xf4c97b1186b690ad3318f907c0cdaf46f4598f27f711a5609064b2690a767287\\\", \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\": \\\"0x30c\\\", \\\"stateRoot\\\": \\\"0xd3ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\", \\\"timestamp\\\": \\\"0x618d4769\\\", \\\"totalDifficulty\\\": \\\"0x3\\\", \\\"transactions\\\": [ \\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\" ], \\\"transactionsRoot\\\": \\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\", \\\"uncles\\\": [] }, { \\\"difficulty\\\": \\\"0x2\\\", \\\"extraData\\\": \\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a5e2910fe64b41801\\\", \\\"gasLimit\\\": \\\"0xe4e1c0\\\", \\\"gasUsed\\\": \\\"0x1c60d\\\", \\\"hash\\\": \\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\", \\\"logsBloom\\\": \\\"0xminer\\\": \\\"0x0000000000000000000000000000000000000000\\\", \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\": \\\"0x0000000000000000\\\", \\\"number\\\": \\\"0x2\\\", \\\"parentHash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"receiptsRoot\\\": \\\"0x2057c8fb79c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\", \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\": \\\"0x30c\\\", \\\"stateRoot\\\": \\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\", \\\"timestamp\\\": \\\"0x618d8837\\\", \\\"totalDifficulty\\\": \\\"0x5\\\", \\\"transactions\\\": [ \\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\" ], \\\"transactionsRoot\\\": \\\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f4c5ca6f56a7d9a45b9904ea1c69\\\", \\\"uncles\\\": [] } ] }\\nReturns various pieces of information in the form of an Object for a specified node. The response Object structure is as follows:\\nNode's mode of operation - \\\"sequencer\\\" or \\\"verifier\\\"\\ntrue if the node is currently syncing false otherwise\\nNested object. Contains blockNumber and timestamp\\nBlock no. of the latest known L1 block\\nTimestamp of the latest known L1 block\\nNested object. Contains queueIndex, index, and verifiedIndex\\nIndex within the CTC of the last L1 to L2 message ingested\\nIndex of the last L2 transaction processed\\nIndex of the last transaction that was ingested from a batch that was posted to L1\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\": \\\"2.0\\\", \\\"id\\\": 1, \\\"result\\\": { \\\"mode\\\": \\\"verifier\\\", \\\"syncing\\\": false, \\\"ethContext\\\": { \\\"blockNumber\\\": 10743302, \\\"timestamp\\\": 1957082793 }, \\\"rollupContext\\\": { \\\"index\\\": 11287, \\\"queueIndex\\\": 14362, \\\"verifiedIndex\\\": 0 } } }\\nUsed to fetch the list of addresses owned by a user. Mantle nodes do not expose internal wallets for security reasons, and thus block the eth_getAccounts method. You can use an external wallet service as an alternative.\\nMantle nodes block eth_sendTransaction for security reasons as well. This is different from eth_sendRawTransaction which takes a signed transaction as input, and is supported by Mantle nodes.\",\n  \"markdown\": \"# Mantle API | Network\\n\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Network shares the same JSON-RPC API implementation as Ethereum.\\n\\nYou can refer to the common methods [here](https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods).\\n\\nIf you want to get the L2 gas price, you can either use [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice) or get it from `GasPriceOracle` 's [`gasPrice`](https://mantlescan.xyz/address/0x420000000000000000000000000000000000000F#readProxyContract#F4) function. If you want to get the L1 gas price, you can get it from `GasPriceOracle` 's [`l1BaseFee`](https://mantlescan.xyz/address/0x420000000000000000000000000000000000000F#readProxyContract#F7) function.\\n\\nWe've also introduced custom methods to simplify certain Mantle-specific interactions. All methods can be accessed via `https` and `websocket`, endpoints can be found [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n\\nReturns block info for multiple blocks, takes a block range as parameter\\n\\nReturns the block info in the form of an array of block objects for multiple blocks within a specified range. (See [`eth_getBlockByHash`](https://eth.wiki/json-rpc/API#eth_getblockbyhash) for the structure of a block object)\\n\\nIf `true`, returns full transaction objects If `false`, returns transaction hashes only\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1,\\n  \\\"result\\\": [\\n    {\\n      \\\"difficulty\\\": \\\"0x2\\\",\\n      \\\"extraData\\\": \\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\",\\n      \\\"gasLimit\\\": \\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\": \\\"0x3183d\\\",\\n      \\\"hash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"logsBloom\\\": \\\"0x00000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000400000000000100000000000000200000000002000000000000001000000000000000000004000000000000000000000000000040000400000100400000000000000100000000000000000000000000000020000000000000000000000000000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000088000000080000000000010000000000000000000000000000800008000120000000000000000000000000000000002000\\\",\\n      \\\"miner\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\": \\\"0x0000000000000000\\\",\\n      \\\"number\\\": \\\"0x1\\\",\\n      \\\"parentHash\\\": \\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\",\\n      \\\"receiptsRoot\\\": \\\"0xf4c97b1186b690ad3318f907c0cdaf46f4598f27f711a5609064b2690a767287\\\",\\n      \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\": \\\"0x30c\\\",\\n      \\\"stateRoot\\\": \\\"0xd3ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\",\\n      \\\"timestamp\\\": \\\"0x618d4769\\\",\\n      \\\"totalDifficulty\\\": \\\"0x3\\\",\\n      \\\"transactions\\\": [\\n        \\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\"\\n      ],\\n      \\\"transactionsRoot\\\": \\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\",\\n      \\\"uncles\\\": []\\n    },\\n    {\\n      \\\"difficulty\\\": \\\"0x2\\\",\\n      \\\"extraData\\\": \\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a5e2910fe64b41801\\\",\\n      \\\"gasLimit\\\": \\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\": \\\"0x1c60d\\\",\\n      \\\"hash\\\": \\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\",\\n      \\\"logsBloom\\\": \\\"0x00080000000200000000000000000008000000000000000000000100008000000000000000000000000000000000000000000000000000000000400000000000100000000000000000000000020000000000000000000000000000000000004000000000000000000000000000000000400000000400000000000000100000000000000000000000000000020000000000000000000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008400000000000000000010000000000000000020000000020000000000000000000000000000000000000000000002000\\\",\\n      \\\"miner\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\": \\\"0x0000000000000000\\\",\\n      \\\"number\\\": \\\"0x2\\\",\\n      \\\"parentHash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"receiptsRoot\\\": \\\"0x2057c8fb79c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\",\\n      \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\": \\\"0x30c\\\",\\n      \\\"stateRoot\\\": \\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\",\\n      \\\"timestamp\\\": \\\"0x618d8837\\\",\\n      \\\"totalDifficulty\\\": \\\"0x5\\\",\\n      \\\"transactions\\\": [\\n        \\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\"\\n      ],\\n      \\\"transactionsRoot\\\": \\\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f4c5ca6f56a7d9a45b9904ea1c69\\\",\\n      \\\"uncles\\\": []\\n    }\\n  ]\\n}\\n```\\n\\nReturns various pieces of information in the form of an Object for a specified node. The response Object structure is as follows:\\n\\nNode's mode of operation - `\\\"sequencer\\\"` or `\\\"verifier\\\"`\\n\\n`true` if the node is currently syncing `false` otherwise\\n\\nNested object. Contains `blockNumber` and `timestamp`\\n\\nBlock no. of the latest known L1 block\\n\\nTimestamp of the latest known L1 block\\n\\nNested object. Contains `queueIndex`, `index`, and `verifiedIndex`\\n\\nIndex within the CTC of the last L1 to L2 message ingested\\n\\nIndex of the last L2 transaction processed\\n\\nIndex of the last transaction that was ingested from a batch that was posted to L1\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1,\\n  \\\"result\\\": {\\n    \\\"mode\\\": \\\"verifier\\\",\\n    \\\"syncing\\\": false,\\n    \\\"ethContext\\\": {\\n      \\\"blockNumber\\\": 10743302,\\n      \\\"timestamp\\\": 1957082793\\n    },\\n    \\\"rollupContext\\\": {\\n      \\\"index\\\": 11287,\\n      \\\"queueIndex\\\": 14362,\\n      \\\"verifiedIndex\\\": 0\\n    }\\n  }\\n}\\n```\\n\\nUsed to fetch the list of addresses owned by a user. Mantle nodes do not expose internal wallets for security reasons, and thus block the `eth_getAccounts` method. You can use an external wallet service as an alternative.\\n\\nMantle nodes block `eth_sendTransaction` for security reasons as well. This is different from `eth_sendRawTransaction` which takes a signed transaction as input, and is supported by Mantle nodes.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/oracles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/oracles\",\n    \"loadedTime\": \"2025-02-15T20:31:51.079Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/oracles\",\n    \"title\": \"Oracles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Oracles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/wQY8RJMos3LZ49dB7yfi\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MTcyMjk3MWUtNGMwNC00NTYyLTljMWMtNmM4YTI1YzNiZWFh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3Zrueq0ljAM8RKeW3Y4b%2B4kFWosAtzvYMoW5VTRE1tgd9uhwW1qMHh1jGE%2B42Us1gXzG0njc0i4v3L01y6vkDT0YVgj6bdW8S7425xycpXjGh3wLCvix3IEzfxPDZipIcCy0jseMlOyHWTS2XakH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281054fda9a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Oracles | Network\\nOracles enable access to reliable off-chain data and information that might be necessary for for smart contracts to enable specific use cases.\\nThe most common requirement is token prices for different token pairs. There are more complex use cases as well, for example:\\nDynamic NFTs that have variable properties that can change based on events that happen in the real world\\nSome dApps require access to a reliable source of random numbers\\nOracles are essentially API services that smart contracts can use to fetch off-chain data.\\nAPI3​\\nThe API3 Market provides access to 200+ price feeds on Mantle. The price feeds are delivered by an aggregate of first-party oracles using signed data and support OEV recapture.\\nApart from data feeds, API3 also provides Quantum Random Number Generation on Mantle. QRNG is a free-to-use service that provides quantum randomness on-chain. It is powered by Airnode, the first-party oracle that is directly operated by the QRNG API providers.\\nRead more\\nChronicle​\\nThe first Oracle on Ethereum, Chronicle’s decentralized Oracle network was originally built within MakerDAO for the development of DAI. Trusted and utilized by leading DeFi protocols such as Spark, MakerDAO, and Morpho, Chronicle Protocol is now available to builders on Mantle testnet and mainnet.\\nRead more\\nData Feeds: Builders can choose from 65+ data feeds, including crypto assets, yield rates, and RWAs. Chronicle’s data is sourced via custom-built data models, only utilizing Tier 1 Primary Sources, such as the markets where tokens are actively traded, including Coinbase, Binance, Uniswap, and Curve.\\nTransparency & Integrity: Chronicle’s Oracle network is fully transparent and verifiable. Via The Chronicle, the data supply chain for any Oracle can be viewed in real-time and historically, including data sources and the identity of all Validators/Signers. Users can cryptographically challenge the integrity of every Oracle update using the ‘verify’ feature. Data is independently sourced by a community of Validators, including Gitcoin, Etherscan, Infura, DeFi Saver, and MakerDAO.\\nGas Efficiency: Pioneering the Schnorr-based Oracle architecture, Chronicle’s Oracles use 60-80% less gas per update than other Oracle providers. This lowest cost per update allows Push Oracle updates to be made more regularly, ensuring more accurate and granular data reporting.\\nORA is Ethereum's Trustless AI. ORA is the verifiable oracle protocol that brings AI and complex compute onchain.\\nORA’s main product, Onchain AI Oracle (OAO), brings AI onchain.\\nRead more\\nSome useful links to build with OAO on Mantle:\\nThe best way to contact our team, ORA Discord\\nPyth Network​\\nPyth network is an oracle that publishes financial market data to multiple blockchains. They aggregate price data and provide price feeds for different asset types such as US equities, commodities, and other cryptocurrencies.\\nRedStone​\\nRedStone is a data ecosystem that delivers frequently updated, reliable and diverse data for your dApp and smart contracts.\\nSupraOracles​\\nSupraOracles provides access to reliable price feeds on multiple chains, and Verifiable Random Function (VRF).\\nLast updated 3 months ago\",\n  \"markdown\": \"# Oracles | Network\\n\\nOracles enable access to reliable off-chain data and information that might be necessary for for smart contracts to enable specific use cases.\\n\\nThe most common requirement is token prices for different token pairs. There are more complex use cases as well, for example:\\n\\n*   Dynamic NFTs that have variable properties that can change based on events that happen in the real world\\n    \\n*   Some dApps require access to a reliable source of random numbers\\n    \\n\\nOracles are essentially API services that smart contracts can use to fetch off-chain data.\\n\\n## \\n\\nAPI3[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#api3)\\n\\nThe [API3 Market](https://market.api3.org/mantle) provides access to 200+ price feeds on [Mantle](https://market.api3.org/mantle). The price feeds are delivered by an aggregate of [first-party oracles](https://docs.api3.org/explore/airnode/why-first-party-oracles.html) using signed data and support [OEV recapture](https://docs.api3.org/explore/introduction/oracle-extractable-value.html).\\n\\nApart from data feeds, API3 also provides [Quantum Random Number Generation](https://docs.api3.org/explore/qrng/) on Mantle. QRNG is a free-to-use service that provides quantum randomness on-chain. It is powered by [Airnode](https://docs.api3.org/reference/airnode/latest/understand/), the first-party oracle that is directly operated by the [QRNG API providers](https://docs.api3.org/reference/qrng/providers.html).\\n\\n`Read more`[](#read-more)\\n\\n## \\n\\nChronicle[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#chronicle)\\n\\nThe first Oracle on Ethereum, Chronicle’s decentralized Oracle network was originally built within MakerDAO for the development of DAI. Trusted and utilized by leading DeFi protocols such as Spark, MakerDAO, and Morpho, [Chronicle Protocol](https://chroniclelabs.org/) is now available to builders on Mantle testnet and mainnet.\\n\\n`Read more`[](#read-more-1)\\n\\n*   **Data Feeds:** Builders can choose from 65+ data feeds, including crypto assets, yield rates, and RWAs. Chronicle’s data is sourced via custom-built data models, only utilizing Tier 1 Primary Sources, such as the markets where tokens are actively traded, including Coinbase, Binance, Uniswap, and Curve.\\n    \\n*   **Transparency & Integrity:** Chronicle’s Oracle network is fully transparent and verifiable. Via [The Chronicle](https://chroniclelabs.org/dashboard/oracle/METH/ETH?blockchain=MANTLE&txn=0x009c561afd8320ffd1627691583f215463b5ae63aaf55d4662fceccb2e9170b5&contract=0xBFE568Ea8f6bDFFe7c03F83dC8348517f8E7010A), the data supply chain for any Oracle can be viewed in real-time and historically, including data sources and the identity of all Validators/Signers. Users can cryptographically challenge the integrity of every Oracle update using the ‘verify’ feature. Data is independently sourced by a [community of Validators](https://chroniclelabs.org/validators), including Gitcoin, Etherscan, Infura, DeFi Saver, and MakerDAO.\\n    \\n*   **Gas Efficiency:** Pioneering the Schnorr-based Oracle architecture, Chronicle’s Oracles use 60-80% less gas per update than other Oracle providers. This lowest cost per update allows Push Oracle updates to be made more regularly, ensuring more accurate and granular data reporting.\\n    \\n\\n[ORA](https://www.ora.io/) is Ethereum's Trustless AI. ORA is the verifiable oracle protocol that brings AI and complex compute onchain.\\n\\nORA’s main product, **Onchain AI Oracle (OAO)**, brings AI onchain.\\n\\n`Read more`[](#read-more-2)\\n\\nSome useful links to build with OAO on Mantle:\\n\\n*   The best way to contact our team, ORA [Discord](https://discord.gg/ora-io)\\n    \\n\\n## \\n\\nPyth Network[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#pyth-network)\\n\\n[Pyth network](https://docs.pyth.network/) is an oracle that publishes financial market data to multiple blockchains. They aggregate price data and provide price feeds for different asset types such as US equities, commodities, and other cryptocurrencies.\\n\\n## \\n\\nRedStone[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#redstone)\\n\\n[RedStone](https://docs.redstone.finance/docs/introduction) is a data ecosystem that delivers frequently updated, reliable and diverse data for your dApp and smart contracts.\\n\\n## \\n\\nSupraOracles[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#supraoracles)\\n\\n[SupraOracles](https://supraoracles.com/docs) provides access to reliable price feeds on multiple chains, and Verifiable Random Function (VRF).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/more/glossary\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/more/glossary\",\n    \"loadedTime\": \"2025-02-15T20:31:51.176Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/more/glossary\",\n    \"title\": \"Glossary | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Glossary | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/THp9h7YrhnFxuYxidiBp\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NmFmNzQ4ZWMtYzNiNS00ZmE5LTlkMzEtYmQ0YThmZWE1ZDE4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=S9MmPoBGZHTWJEa6FJXZbqNeCWRDSBgbzlVBPZjc77Kd4IDiZrirLuSHdn3TZRjGRP%2BbjxOqikPTufrUwkJWU309hZaSEcoRxw2%2BBpkHDFe%2FlpEQPKpeXYRHqYaOhmbo5WIdW%2B29NsEs4hG0JkGx\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281054fee9c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Glossary | Network\\nBatcher​\\nBatcher is a node role that packs transactions in L2 into batches and uploads them to L1. See here for more information.\\nBridge​\\nApp developers and users commonly need to move data and assets between layer 1 (L1) and layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\".\\nChannel​\\nChannel is a data structure used in OP Stack to store compressed and encoded sequencer batches, by storing multiple batches together to achieve a better compression rate and reduce data availability cost. For more details, please check here.\\nEIP-1559 transaction​\\nEIP-1559 introduces a new transaction type for Ethereum transactions. Unlike traditional transactions where users set their gas prices, EIP-1559 introduces a mechanism that automatically determines the transaction fee based on network demand.\\nFraud proof / Fault proof​\\nAn on-chain challenge mechanism initiated by a verifier, where the verifier, after fetching the state root from L1, compares it with the state root provided by the DA, and initiates single/multiple rounds of interactive/non-interactive proofs on the chain in case of inconsistency.\\nHardware security module (HSM)​\\nA hardware security module is a specialized hardware device designed to safeguard sensitive information, keys, and cryptographic operations from unauthorized access and attacks. In Mantle Network, we use a hardware security module for custody of crucial accounts in modules like op-proposer, op-batcher, etc.\\nLegacy transaction​\\nRefers to the format of transactions before the introduction of type transactions using EIP-2718. These transactions are identified as type 0x0 and contain parameters such as nonce, gasPrice, gasLimit, to, value, data, v, r and s.\\nMIPS​\\nMIPS architecture, which stands for Microprocessor without Interlocked Pipeline Stages, is a type of computer architecture that uses a Reduced Instruction Set Computing (RISC) design philosophy. See more details here.\\nModular chains​\\nIn a Modular Blockchain, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on specialized layers. By applying this principle to a rollup, we can optimize the solution since each layer is now performing a specialized task. This leads to lower costs and better overall performance.\\nMonolithic chains​\\nThe entire blockchain system is viewed as a monolithic, tightly coupled entity. With this structure, all functions and protocols are built into the same chain.\\nOptimistic Rollup​\\nOptimistic rollups (ORs) are L2 protocols designed to increase the throughput of Ethereum. They reduce computation load on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches. ORs are considered “optimistic” because they assume off-chain transactions are valid and don't publish proofs of validity for transaction batches posted on-chain, and also use Fraud proof to detect and deal with invalid status.\\nProposer​\\nProposer and Batcher are similar functions, but it packs not the transactions themselves, but the state after the transactions are completed, and sends the state root to the corresponding contract in L1. For more details, please check here.\\nReorg​\\nReorg, i.e., chain re-organization, refers to the situation where a transaction is rejected after it has been accepted due to a network attack or other factors, which often occurs in the L2 re-org situation after L1 has been attacked.\\nSequencer​\\nSequencer is a node role consisting of op-node and op-geth that performs transaction ordering in L2 and L2 block production. See here for more information.\\nVerifier​\\nVerifier is a node role consisting of op-node and op-geth that provides users with verified transactions and state root in L2, and it also initiates fraud proof in case of inconsistency in the state of on-chain and off-chain transactions to ensure the validity of transactions. See here for more information.\\nWASM​\\nWebAssembly, commonly abbreviated as WASM, is a binary instruction format that serves as a portable compilation target for high-level programming languages. It is designed to enable efficient execution of code on web browsers but is not limited to the web environment. WASM allows code to run at near-native speed, providing a performance boost compared to traditional web development technologies. See more details here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Glossary | Network\\n\\n## \\n\\nBatcher[​](https://docs-v2.mantle.xyz/intro/more/glossary#batcher)\\n\\nBatcher is a node role that packs transactions in L2 into batches and uploads them to L1. See [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) for more information.\\n\\n## \\n\\nBridge[​](https://docs-v2.mantle.xyz/intro/more/glossary#bridge)\\n\\nApp developers and users commonly need to move data and assets between layer 1 (L1) and layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\".\\n\\n## \\n\\nChannel[​](https://docs-v2.mantle.xyz/intro/more/glossary#channel)\\n\\nChannel is a data structure used in OP Stack to store compressed and encoded sequencer batches, by storing multiple batches together to achieve a better compression rate and reduce data availability cost. For more details, please check [here](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/glossary.md#channel).\\n\\n## \\n\\nEIP-1559 transaction[​](https://docs-v2.mantle.xyz/intro/more/glossary#eip-1559-transaction)\\n\\n[EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) introduces a new transaction type for Ethereum transactions. Unlike traditional transactions where users set their gas prices, EIP-1559 introduces a mechanism that automatically determines the transaction fee based on network demand.\\n\\n## \\n\\nFraud proof / Fault proof[​](https://docs-v2.mantle.xyz/intro/more/glossary#fraud-proof--fault-proof)\\n\\nAn on-chain challenge mechanism initiated by a verifier, where the verifier, after fetching the state root from L1, compares it with the state root provided by the DA, and initiates single/multiple rounds of interactive/non-interactive proofs on the chain in case of inconsistency.\\n\\n## \\n\\nHardware security module (HSM)[​](https://docs-v2.mantle.xyz/intro/more/glossary#hardware-security-module-hsm)\\n\\nA hardware security module is a specialized hardware device designed to safeguard sensitive information, keys, and cryptographic operations from unauthorized access and attacks. In Mantle Network, we use a hardware security module for custody of crucial accounts in modules like [`op-proposer`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer), [`op-batcher`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher), etc.\\n\\n## \\n\\nLegacy transaction[​](https://docs-v2.mantle.xyz/intro/more/glossary#legacy-transaction)\\n\\nRefers to the format of transactions before the introduction of type transactions using [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718). These transactions are identified as type `0x0` and contain parameters such as `nonce`, `gasPrice`, `gasLimit`, `to`, `value`, `data`, `v`, `r` and `s`.\\n\\n## \\n\\nMIPS[​](https://docs-v2.mantle.xyz/intro/more/glossary#mips)\\n\\nMIPS architecture, which stands for Microprocessor without Interlocked Pipeline Stages, is a type of computer architecture that uses a Reduced Instruction Set Computing (RISC) design philosophy. See more details [here](https://en.wikipedia.org/wiki/MIPS_architecture).\\n\\n## \\n\\nModular chains[​](https://docs-v2.mantle.xyz/intro/more/glossary#modular-chains)\\n\\nIn a Modular Blockchain, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on specialized layers. By applying this principle to a rollup, we can optimize the solution since each layer is now performing a specialized task. This leads to lower costs and better overall performance.\\n\\n## \\n\\nMonolithic chains[​](https://docs-v2.mantle.xyz/intro/more/glossary#monolithic-chains)\\n\\nThe entire blockchain system is viewed as a monolithic, tightly coupled entity. With this structure, all functions and protocols are built into the same chain.\\n\\n## \\n\\nOptimistic Rollup[​](https://docs-v2.mantle.xyz/intro/more/glossary#optimistic-rollup)\\n\\nOptimistic rollups (ORs) are L2 protocols designed to increase the throughput of Ethereum. They reduce computation load on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches. ORs are considered “optimistic” because they assume off-chain transactions are valid and don't publish proofs of validity for transaction batches posted on-chain, and also use Fraud proof to detect and deal with invalid status.\\n\\n## \\n\\nProposer[​](https://docs-v2.mantle.xyz/intro/more/glossary#proposer)\\n\\nProposer and Batcher are similar functions, but it packs not the transactions themselves, but the state after the transactions are completed, and sends the state root to the corresponding contract in L1. For more details, please check [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer).\\n\\n## \\n\\nReorg[​](https://docs-v2.mantle.xyz/intro/more/glossary#reorg)\\n\\nReorg, i.e., chain re-organization, refers to the situation where a transaction is rejected after it has been accepted due to a network attack or other factors, which often occurs in the L2 re-org situation after L1 has been attacked.\\n\\n## \\n\\nSequencer[​](https://docs-v2.mantle.xyz/intro/more/glossary#sequencer)\\n\\nSequencer is a node role consisting of [op-node](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) and [op-geth](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) that performs transaction ordering in L2 and L2 block production. See [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#sequencer) for more information.\\n\\n## \\n\\nVerifier[​](https://docs-v2.mantle.xyz/intro/more/glossary#verifier)\\n\\nVerifier is a node role consisting of [op-node](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) and [op-geth](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) that provides users with verified transactions and state root in L2, and it also initiates fraud proof in case of inconsistency in the state of on-chain and off-chain transactions to ensure the validity of transactions. See [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#verifier) for more information.\\n\\n## \\n\\nWASM[​](https://docs-v2.mantle.xyz/intro/more/glossary#wasm)\\n\\nWebAssembly, commonly abbreviated as WASM, is a binary instruction format that serves as a portable compilation target for high-level programming languages. It is designed to enable efficient execution of code on web browsers but is not limited to the web environment. WASM allows code to run at near-native speed, providing a performance boost compared to traditional web development technologies. See more details [here](https://en.wikipedia.org/wiki/WebAssembly).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/more/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/more/faqs\",\n    \"loadedTime\": \"2025-02-15T20:31:51.265Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/more/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/x1tG4zszPxNODd2z0tGn\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDAwOTBmOTQtNzRhZC00NzcyLWI3MmYtZDdkMGM1NTRmZGVj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ju2gtP2LN7%2BLz9G97n1xQTDsPFAFb8zXmYSPegkHnDLlZ4D3TA8aJShqT770Suzsg%2B3Ghu1cSE4w%2F6CeglRx4z158ovqFqbYglDzHsM6GFi6u1f1ZHXRD2YLAFLvx2d4YzqqB4PLzsd5kLm91r3J\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810563adc82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nGeneral​\\nWhat signature algorithm does Mantle Network use?\\nMantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\nWhat is the block gas limit on Mantle Network?\\nThe block gas limit is currently set to 250,000,000,000, or 250B units.\\nWhat's the average block time on Mantle Network?\\nIn Mantle Network, the OP Stack framework design of 2s per L2 block production is adopted.\\ninfo\\nIf the L1 node fails to synchronize a new block for more than 600s, L2 will pause block production, and once the L1 node recovers, the L2 node will return to normal, and the timestamp of the L2 block is guaranteed to be strictly incremented by 2s.\\nHow does transaction finality work on Mantle Network?\\nTransaction/block finality on L2 will depend on the finalized time of the transactions packed onto L1 (2 epochs, which is about 15mins)\\nTransaction/block finality on L1 connects to the challenge period, which is currently set at 7 days\\nAre fraud proofs online on Mantle Network?\\nNot yet, fraud proofs are in development in Mantle v2 Tectonic. For more details on Mantle Network's implementation, check out the page on Fraud Proofs.\\nHow does modular data availability bring down transaction costs?\\nThe majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\nWhere can I find the brand resources for Mantle Network?\\nYou can access brand resources by following this link.\\nProtocol​\\nDo Rollup Verifier nodes verify every piece of block data processed by the Sequencer?\\nYes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\nDo Rollup Verifiers sync rollup data from the Sequencer?\\nNo. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1.\\nWhat happens if a Rollup Verifier detects mismatch between L2 block data with L1?\\nBefore fraud proofs are online on Mantle Network, if Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n## \\n\\nGeneral[​](https://docs-v2.mantle.xyz/intro/more/faqs#general)\\n\\n*   **What signature algorithm does Mantle Network use?**\\n    \\n    Mantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\n    \\n*   **What is the block gas limit on Mantle Network?**\\n    \\n    The block gas limit is currently set to 250,000,000,000, or 250B units.\\n    \\n*   **What's the average block time on Mantle Network?**\\n    \\n    In Mantle Network, the OP Stack framework design of 2s per L2 block production is adopted.\\n    \\n    info\\n    \\n    If the L1 node fails to synchronize a new block for more than 600s, L2 will pause block production, and once the L1 node recovers, the L2 node will return to normal, and the timestamp of the L2 block is guaranteed to be strictly incremented by 2s.\\n    \\n*   **How does transaction finality work on Mantle Network?**\\n    \\n    *   Transaction/block finality on L2 will depend on the finalized time of the transactions packed onto L1 (2 epochs, which is about 15mins)\\n        \\n    *   Transaction/block finality on L1 connects to the challenge period, which is currently set at 7 days\\n        \\n    \\n*   **Are fraud proofs online on Mantle Network?**\\n    \\n    **Not yet**, fraud proofs are in development in Mantle v2 Tectonic. For more details on Mantle Network's implementation, check out the page on Fraud Proofs.\\n    \\n*   **How does modular data availability bring down transaction costs?**\\n    \\n    The majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\n    \\n*   **Where can I find the brand resources for Mantle Network?**\\n    \\n    You can access brand resources by following [this link](https://drive.google.com/drive/folders/1GGyOmob0i86mEUqBTPvZLAhgnzt3Oxaa).\\n    \\n\\n## \\n\\nProtocol[​](https://docs-v2.mantle.xyz/intro/more/faqs#protocol)\\n\\n*   **Do Rollup Verifier nodes verify every piece of block data processed by the Sequencer?**\\n    \\n    Yes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\n    \\n*   **Do Rollup Verifiers sync rollup data from the Sequencer?**\\n    \\n    No. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1.\\n    \\n*   **What happens if a Rollup Verifier detects mismatch between L2 block data with L1?**\\n    \\n    Before fraud proofs are online on Mantle Network, if Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling [here](https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion).\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/more/audits\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/more/audits\",\n    \"loadedTime\": \"2025-02-15T20:31:58.178Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/more/audits\",\n    \"title\": \"Audits | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Audits | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/t0VYGRvvV4Ktrz7LTqZc\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2Y4ZWI3YjUtMTY3MC00OGUzLWE4MWMtNTRkMWYzM2U5YzRm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Fv0EqYdF%2F5icne7ej91cII5yXWxXOXXfImRfvxRUcaxDt%2BpXKIxaVu4KOe%2B4zTb2o7udJxej4vsCbFNCpeCic0JSqNfht7FrOhFWWVdJvfJhxZz5WQJ9jipz1ehbJiorVFSGm%2Bl0dvN7MMZp%2FSpT\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810820b34c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Audits | Network\\nSecure3​\\nSecure3 is a battlefield where elite auditors compete to safeguard Web3 innovations against security threats. They have provided security audits for over 140 projects, including zkSync, Polkadot, and more! Here is the audit report for Mantle v2 Tectonic:\\nOpenZeppelin​\\nOpenZeppelin provides a complete suite of security products to adopt security best practices from the first line of code all the way to running your decentralized application on-chain. OpenZeppelin security audits are trusted by leading organizations building decentralized systems. Here is the audit report for Mantle v2 Tectonic:\\nSigma Prime​\\nSigma Prime is a leading blockchain security and research firm with an extensive history in decentralized technology.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Audits | Network\\n\\n## \\n\\nSecure3[​](https://docs-v2.mantle.xyz/intro/more/audits#secure3)\\n\\n[Secure3](https://www.secure3.io/) is a battlefield where elite auditors compete to safeguard Web3 innovations against security threats. They have provided security audits for over 140 projects, including zkSync, Polkadot, and more! Here is the audit report for Mantle v2 Tectonic:\\n\\n## \\n\\nOpenZeppelin[​](https://docs-v2.mantle.xyz/intro/more/audits#openzeppelin)\\n\\nOpenZeppelin provides a complete suite of security products to adopt security best practices from the first line of code all the way to running your decentralized application on-chain. OpenZeppelin security audits are trusted by leading organizations building decentralized systems. Here is the audit report for Mantle v2 Tectonic:\\n\\n## \\n\\nSigma Prime[​](https://docs-v2.mantle.xyz/intro/more/audits#sigma-prime)\\n\\n[Sigma Prime](https://sigmaprime.io/) is a leading blockchain security and research firm with an extensive history in decentralized technology.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/monitoring\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/monitoring\",\n    \"loadedTime\": \"2025-02-15T20:31:58.469Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/monitoring\",\n    \"title\": \"Monitoring | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Monitoring | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/6Du5aXQ6w7WooLKupEjw\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGU4NGEzNmQtMzVjZC00MTk2LWJkZTQtMzRkZGE4MjBiMDM2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LyknP1tiFJWKszvSXR8so8wEZDieBZU77LvpenJavyiRY45kfxnQ6P3PsQjlv0OTNHlF72%2FOiFpXGVdynjJoQtq17OQ0zdZdpGPM0JXeGlaHKFpde5OTWuvKegRC4uPXB8t81WuaL8XXT5zgDnOq\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810820a4282e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Monitoring | Network\\nBlock Explorers​\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\nMantlescan​\\nMantlescan is an explorer powered by Etherscan that provides real-time and historical transaction data.\\nBlockscout​\\nBlockscout is a free, open source blockchain explorer that provides real-time and historical transaction data.\\nSocialscan​\\nSocialscan is a community-owned explorer with multiple blockchain stats and charts.\\nDashboard​\\nArkham\\nArkham is a blockchain intelligence and analytics platform designed to deanonymize blockchain data, enhance on-chain transparency, and improve security. It provides powerful tools to identify entity ownership of blockchain addresses, trace fund flows, and analyze complex on-chain behavior patterns.\\nDeBank​\\nDeBank is a DeFi dashboard that enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\\nDefiLlama​\\nDefiLlama is a multi-chain TVL stats dashboard, where data connectors are contributed and maintained by a community. Follow the link below to see data for Mantle Network.\\nDEXTools​\\nDEXTools is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed to Mantle Network and other chains using different decentralized exchanges.\\nDEX Screener​\\nDEX Screener is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\nDune​\\nDune is crypto's data platform. Teams and individuals alike use Dune to explore, query, access, and export blockchain data. Dune's community of data engineers, researchers, and analysts use the platform to gain deeper insights into blockchain activity. Dune provides organized, decoded and human-readable blockchain data, across 15+ chains and 1.5M datasets.\\nRead more\\nFeatures​\\nData exploration: Dune Analytics allows you to explore and analyze blockchain data using SQL queries. You can easily filter, aggregate, and visualize data to gain insights into blockchain activity.\\nDashboards: Create interactive dashboards to monitor key metrics and visualize data trends. Dune Analytics provides a drag-and-drop interface for designing custom dashboards.\\nCollaboration: Share your queries, dashboards, and insights with others. Dune Analytics supports collaboration features, allowing you to work together with your team or the wider community.\\nAPI access: Access blockchain data programmatically using Dune's API. You can integrate blockchain data into your applications, tools, and services.\\nSnowflake datashare: Dune's Snowflake datashare allows you to access and analyze blockchain data directly in your Snowflake account. You can query and join blockchain data with your existing datasets in Snowflake.\\nResources​\\nHere are some resources to help you learn more about Dune Analytics:\\nDocumentation: The official documentation provides detailed guides and tutorials on using Dune Analytics.\\nAPI Docs: The API documentation provides detailed information on how to access blockchain data programmatically using Dune's API.\\nYouTube : The Dune YouTube channel features video tutorials and demos of the platform.\\nBlog: The Dune blog features articles, case studies, and updates about the platform.\\nTwitter: Follow Dune Analytics on Twitter for the latest news and announcements.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Monitoring | Network\\n\\n## \\n\\nBlock Explorers[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#block-explorers)\\n\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\n\\n### \\n\\nMantlescan[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#mantlescan)\\n\\n[Mantlescan](https://mantlescan.xyz/) is an explorer powered by Etherscan that provides real-time and historical transaction data.\\n\\n### \\n\\nBlockscout[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#blockscout)\\n\\n[Blockscout](https://explorer.mantle.xyz/) is a free, open source blockchain explorer that provides real-time and historical transaction data.\\n\\n### \\n\\nSocialscan[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#blockscout)\\n\\n[Socialscan](https://mantle.socialscan.io/) is a community-owned explorer with multiple blockchain stats and charts.\\n\\n## \\n\\nDashboard[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dashboard)\\n\\n### \\n\\nArkham\\n\\n[Arkham](https://arkm.com/) is a blockchain intelligence and analytics platform designed to deanonymize blockchain data, enhance on-chain transparency, and improve security. It provides powerful tools to identify entity ownership of blockchain addresses, trace fund flows, and analyze complex on-chain behavior patterns.\\n\\n### \\n\\nDeBank[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#debank)\\n\\n[DeBank](https://debank.com/) is a DeFi dashboard that enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\\n\\n### \\n\\nDefiLlama[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#defillama)\\n\\n[DefiLlama](https://defillama.com/chain/Mantle) is a multi-chain TVL stats dashboard, where data connectors are contributed and maintained by a community. Follow the link below to see data for Mantle Network.\\n\\n### \\n\\nDEXTools[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dextools)\\n\\n[DEXTools](https://www.dextools.io/app/en/pairs) is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed to Mantle Network and other chains using different decentralized exchanges.\\n\\n### \\n\\nDEX Screener[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dex-screener)\\n\\n[DEX Screener](https://dexscreener.com/) is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\n\\n### \\n\\nDune[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dune)\\n\\n[Dune](https://dune.com/) is crypto's data platform. Teams and individuals alike use Dune to explore, query, access, and export blockchain data. Dune's community of data engineers, researchers, and analysts use the platform to gain deeper insights into blockchain activity. Dune provides organized, decoded and human-readable blockchain data, across 15+ chains and 1.5M datasets.\\n\\n`Read more`[](#read-more)\\n\\n**Features**[**​**](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#features)\\n\\n*   **Data exploration**: Dune Analytics allows you to explore and analyze blockchain data using SQL queries. You can easily filter, aggregate, and visualize data to gain insights into blockchain activity.\\n    \\n*   **Dashboards**: Create interactive dashboards to monitor key metrics and visualize data trends. Dune Analytics provides a drag-and-drop interface for designing custom dashboards.\\n    \\n*   **Collaboration**: Share your queries, dashboards, and insights with others. Dune Analytics supports collaboration features, allowing you to work together with your team or the wider community.\\n    \\n*   **API access**: Access blockchain data programmatically using Dune's API. You can integrate blockchain data into your applications, tools, and services.\\n    \\n*   **Snowflake datashare**: Dune's Snowflake datashare allows you to access and analyze blockchain data directly in your Snowflake account. You can query and join blockchain data with your existing datasets in Snowflake.\\n    \\n\\n**Resources**[**​**](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#resources)\\n\\nHere are some resources to help you learn more about Dune Analytics:\\n\\n*   [Documentation](https://docs.dune.com/): The official documentation provides detailed guides and tutorials on using Dune Analytics.\\n    \\n*   [API Docs](https://docs.dune.com/api): The API documentation provides detailed information on how to access blockchain data programmatically using Dune's API.\\n    \\n*   [YouTube](https://www.youtube.com/@dunecom) : The Dune YouTube channel features video tutorials and demos of the platform.\\n    \\n*   [Blog](https://dune.com/blog): The Dune blog features articles, case studies, and updates about the platform.\\n    \\n*   [Twitter](https://twitter.com/duneanalytics): Follow Dune Analytics on Twitter for the latest news and announcements.\\n    \\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da\",\n    \"loadedTime\": \"2025-02-15T20:31:58.266Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da\",\n    \"title\": \"Mantle DA | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle DA | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/n2tk77lxhcut6QDAf40l\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGZjNTgwYmMtY2Q1ZS00MjQyLWIzYjItY2MwNzU0M2M5Yjhk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=OgNATRNDiiw2857BOrs7ELmnuaZB%2FwBico6DxbqQFXtdKSTlMag54BJLsIKqg95aHCNxFpAphcmNNSYeJDHTfk%2BEFN6ziQJWDhXeQVi0%2BbniRJSxaqITf9g9AOtNM3ScceGGAyF0nEAoTnaR5keG\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281082191ea5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle DA | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Mantle DA | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction\",\n    \"loadedTime\": \"2025-02-15T20:32:00.278Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction\",\n    \"title\": \"Introduction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/uvNVkJ2yPNodLW9NcAB1\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:00 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MWU4OWQ3MzgtMTA2MS00OTkwLWI4ZTAtODMzZDY1YzU3NjU0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7M%2Fg82iy%2FawI%2FNz7GJ866WHZvgPNiB%2B4JEN0DTYHO90Xph5ZVKVdYbmHmQdhiLPOTthU7n%2FKHthtd7fcmyGd9s3lKcP6rQPfMgYBl7TcIUxxX69eekJPl952Vp6s1DMkeEJITYHakGrw0rZqkgYT\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128108fba7a82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Introduction | Network\\nWhy Mantle DA​\\nWhen opting for Mantle DA, it's essential to consider the ongoing development of the EIP-4844 proposal. As this proposal is under development, we currently do not support EIP-4844 until its deployment on the Ethereum mainnet.\\nMoreover, due to the specified block size limit in EIP-4844, there might be performance constraints for layer 2 (L2) solutions with high TPS.\\nHowever, once EIP-4844 is officially implemented, Mantle can swiftly adapt with minimal modifications. This means that we can harness the full potential of EIP-4844, ensuring Mantle's sustained superior performance in the L2 space, adapting to the continuous evolution of the Ethereum ecosystem, and providing users with more efficient services and exceptional experiences.\\nMantle DA Operators Address​\\nCurrently Mantle DA has a list of ten permissioned Operators, here are their corresponding addresses:\\nMantle DA With BedRock Upgrade:​\\nIn Mantle v1, the DA-DTL component (DA internal data component) was responsible for fetching data from Mantle DA and storing it in a local database for use by internal DA components and browsers. However, in Mantle v2 Tectonic, we have significantly optimized the da-retriever component, which significantly reduces the computer configuration requirements. This means that we no longer need DA-DTL as a data relay service. In Mantle v2 Tectonic, the op-batcher and op-node need to go through several optimizations for the Bedrock upgrade to integrate smoothly with Mantle DA. In addition to supporting sending data frames directly to an EOA (Externally Owned Account) in L1 in Mantle v2 Tectonic, we also need to implement the ability to send data frames to Mantle DA. These improvements will allow us to better adapt to the evolving needs of data interaction and provide users with more flexible options.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Introduction | Network\\n\\n## \\n\\nWhy Mantle DA[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#why-mantle-da)\\n\\nWhen opting for Mantle DA, it's essential to consider the ongoing development of the [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) proposal. As this proposal is under development, we currently do not support EIP-4844 until its deployment on the Ethereum mainnet.\\n\\nMoreover, due to the specified [block size limit](https://eips.ethereum.org/EIPS/eip-4844#motivation) in EIP-4844, there might be performance constraints for layer 2 (L2) solutions with high TPS.\\n\\nHowever, once EIP-4844 is officially implemented, Mantle can swiftly adapt with minimal modifications. This means that we can harness the full potential of EIP-4844, ensuring Mantle's sustained superior performance in the L2 space, adapting to the continuous evolution of the Ethereum ecosystem, and providing users with more efficient services and exceptional experiences.\\n\\n## \\n\\nMantle DA Operators Address[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#mantle-da-operators-address)\\n\\nCurrently Mantle DA has a list of ten permissioned Operators, here are their corresponding addresses:\\n\\n## \\n\\nMantle DA With BedRock Upgrade:[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#mantle-da-with-bedrock-upgrade)\\n\\nIn Mantle v1, the DA-DTL component (DA internal data component) was responsible for fetching data from Mantle DA and storing it in a local database for use by internal DA components and browsers. However, in Mantle v2 Tectonic, we have significantly optimized the `da-retriever` component, which significantly reduces the computer configuration requirements. This means that we no longer need DA-DTL as a data relay service. In Mantle v2 Tectonic, the `op-batcher` and `op-node` need to go through several optimizations for the Bedrock upgrade to integrate smoothly with Mantle DA. In addition to supporting sending data frames directly to an EOA (Externally Owned Account) in L1 in Mantle v2 Tectonic, we also need to implement the ability to send data frames to Mantle DA. These improvements will allow us to better adapt to the evolving needs of data interaction and provide users with more flexible options.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction\",\n    \"loadedTime\": \"2025-02-15T20:31:57.772Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction\",\n    \"title\": \"Node Introduction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Node Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ArAkSwwniB42OEhmZKuh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTgyZTU2MGQtNzUwZC00MjQ4LTk4MjAtZWQ0MzZjMzlhOWI2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zNxLWl3Bnz26l%2Byt6PM%2FO2gg0hIB%2BsljKsVx4uzmADjGAb0OQ4oLRzZJYJeHfDMFN9xWv6BYVrFHua%2FYfwy7ZRsTW4GI%2BNGWVmVurs7o%2FHn2%2B1Reff0l2mM27pBmnsRCAmUyTIg7voxqvDeyiXuo\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128106e6aea4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Node Introduction | Network\\nNetwork Roles​\\nSequencer​\\nThe sequencer acts as block producers in the network, composed of op-node and op-geth in Mantle, with the following functions:\\nAccept off-chain transactions from users\\nMonitor user deposit transactions from L1\\nProduce blocks on L2\\nVerifier​\\nThe verifier exists in the network to provide Rollup data to users, also composed of op-node and op-geth, with the following functions:\\nSynchronize Rollup data from Mantle DA\\nVerify the state root submitted by op-proposer on L2\\nInitiate fraud proofs when invalid state data is detected\\nProvide verified block data and state to users\\nop-batcher​\\nop-batcher is a crucial component that interacts with the DA provider in the network. It also handles transaction packing and uploading to L1, with specific functions:\\nFetch data from the sequencer and process it (encoding and compressing) into frames based on different configurations, storing the frames as a channel\\nInteract with the DA provider through channels, providing batched transaction information\\nUpload processed batched transactions to L1\\nop-proposer​\\nSimilar to op-batcher but providing state root information. When submitting a single or batch of transactions, op-proposer needs to complete state changes through op-geth and write down state commitments sent to L2OutputOracle on L1.\\nDA Nodes​\\nNodes in the Mantle DA, forming the DA Network, are responsible for storing copies of Mantle transaction data. They use BLS signature schemes to sign the block data they provide, making commitments to ensure their availability. These signatures are verified by the EigenDA contract on Ethereum.\\nDeep Dive into Nodes​\\nWithin the sequencer and the verifier, two different components are present:\\nop-geth​\\nAs the execution client in the Mantle Network, op-geth has the following functions:\\nResponsible for executing blocks received from op-node and storing states.\\nQuery blockchain data through the Engine API and submit transactions to the network.\\nop-node​\\nAs the consensus client in the Mantle Network, op-node has the following functions:\\nDerive L2 blocks from L1.\\nSend blocks to op-geth via the Engine API.\\nRetrieve block information from Mantle DA for subsequent validity verification.\\nSynchronize with a P2P network to sequencer-constructed but unsubmitted blocks.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Node Introduction | Network\\n\\n## \\n\\nNetwork Roles[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#network-roles)\\n\\n### \\n\\nSequencer[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#sequencer)\\n\\nThe sequencer acts as block producers in the network, composed of [`op-node`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) and [`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) in Mantle, with the following functions:\\n\\n*   Accept off-chain transactions from users\\n    \\n*   Monitor user deposit transactions from L1\\n    \\n*   Produce blocks on L2\\n    \\n\\n### \\n\\nVerifier[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#verifier)\\n\\nThe verifier exists in the network to provide Rollup data to users, also composed of [`op-node`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) and [`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth), with the following functions:\\n\\n*   Synchronize Rollup data from Mantle DA\\n    \\n*   Verify the state root submitted by `op-proposer` on L2\\n    \\n*   Initiate fraud proofs when invalid state data is detected\\n    \\n*   Provide verified block data and state to users\\n    \\n\\n### \\n\\nop-batcher[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-batcher)\\n\\n`op-batcher` is a crucial component that interacts with the DA provider in the network. It also handles transaction packing and uploading to L1, with specific functions:\\n\\n*   Fetch data from the sequencer and process it (encoding and compressing) into frames based on different configurations, storing the frames as a [channel](https://docs.mantle.xyz/network/more/glossary#channel)\\n    \\n*   Interact with the DA provider through channels, providing batched transaction information\\n    \\n*   Upload processed batched transactions to L1\\n    \\n\\n### \\n\\nop-proposer[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-proposer)\\n\\nSimilar to `op-batcher` but providing state root information. When submitting a single or batch of transactions, `op-proposer` needs to complete state changes through `op-geth` and write down state commitments sent to `L2OutputOracle` on L1.\\n\\n### \\n\\nDA Nodes[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#da-nodes)\\n\\nNodes in the Mantle DA, forming the DA Network, are responsible for storing copies of Mantle transaction data. They use BLS signature schemes to sign the block data they provide, making commitments to ensure their availability. These signatures are verified by the EigenDA contract on Ethereum.\\n\\n## \\n\\nDeep Dive into Nodes[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#appendix)\\n\\nWithin the sequencer and the verifier, two different components are present:\\n\\n![](https://docs-v2.mantle.xyz/assets/images/op-73b9e5890fcee4afa3a20a40ae713b08.svg)\\n\\n### \\n\\nop-geth[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-geth)\\n\\nAs the execution client in the Mantle Network, `op-geth` has the following functions:\\n\\n*   Responsible for executing blocks received from `op-node` and storing states.\\n    \\n*   Query blockchain data through the Engine API and submit transactions to the network.\\n    \\n\\n### \\n\\nop-node[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-node)\\n\\nAs the consensus client in the Mantle Network, `op-node` has the following functions:\\n\\n*   Derive L2 blocks from L1.\\n    \\n*   Send blocks to `op-geth` via the Engine API.\\n    \\n*   Retrieve block information from Mantle DA for subsequent validity verification.\\n    \\n*   Synchronize with a P2P network to sequencer-constructed but unsubmitted blocks.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address\",\n    \"loadedTime\": \"2025-02-15T20:31:57.663Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address\",\n    \"title\": \"Key L2 Contract Address | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Key L2 Contract Address | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/lh3wphKxqaYwhmzm4NPR\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NjZkZTc0MDgtMzBiZC00M2E0LTg1ZjktZWU3OGY0NDliODY2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=N%2BuZGaJ0r0edncHLdTSsjmf41tTp51QwEXfAud3NcXCD2AkCuJ0pm2iRRkwedOq3AQFmuaxGfF4VnkykOO5TTeyeBIOV6JSE6%2BnAibwnkk6SDQ0m4TJPn41g8sbvZiSOCroJhQ8U3myAi2w6kkgB\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128106eeb9118af-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Key L2 Contract Address | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Key L2 Contract Address | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion\",\n    \"loadedTime\": \"2025-02-15T20:31:59.406Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion\",\n    \"title\": \"Forced Transaction Inclusion | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Forced Transaction Inclusion | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/srWN0zPUzda6gSAhXEOC\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWViZTVkYzItZTFlYy00ODZiLWE3OTgtOGJiMjRmYzA1Y2Rk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Fh%2FhRNGhfCyVwT%2Foh%2F71%2BexK9AjBSspWkV2JLxN889KtjtlpBfXDDKLUccXBh1jl0NagSupSZRIQY7muZiBd0qGCKJDNVCBQGlOUQLNmDeLnvf44L7uHwJnNUOIDj%2FarpNcKEFhzt3YCsFJzkalI\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281084eb6d4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Forced Transaction Inclusion | Network\\nAs layer-2 (L2) technologies host an increasing number of digital assets, ensuring the security of your assets in the event of an L2 security incident has become a critical concern. A robust L2 requires the ability to force L2 assets to be extracted at layer 1 (L1) in case of unforeseen circumstances (e.g., downtime or misbehavior of sequencers and proposers, etc.).\\nCensorship resistance is a crucial security feature, especially concerning the sequencer in the system. In situations where the sequencer refuses to execute your transaction requests or experiences prolonged downtime, a mechanism known as forced withdrawal or forced transaction inclusion becomes essential to better safeguard user funds.\\nHow to Enable Forced Transaction Inclusion​\\nOn all OP Stack chains, there is one and only one OptimismPortal contract. This contract allows EOAs (Externally Owned Accounts) or smart contracts to create an L2 transaction (depositTransaction of OptimismPortal) without going through the Sequencer, and transactions submitted in this way are indistinguishable from those built by the Sequencer on L2.\\nWhen the transaction is submitted on L1, it will be processed on a First Come, First Served (FCFS) basis, along with some inclusion rules. If the transaction is not published on L1 within the sequencer_window time, a reorganization (reorg) will occur on L2, and the transaction will be included in the L2 chain.\\nDifferent Sequencer Outage Scenarios​\\nIn practical applications, we may encounter different scenarios, such as:\\nSequencer Completely Down​\\nIn this scenario, the Sequencer remains unable to function and process transactions. Users must send their transactions directly to the OptimismPortal contract to ensure they are included in the L2 chain. After the sequencer_window time (24 hours) has passed, these transactions will be automatically included in L2. For more details, see here.\\nSequencer Temporarily Down​\\nIn this scenario, the Sequencer experiences a temporary outage and then recovers. Since the sequencer_window time has not yet elapsed, even though the transaction has been submitted to the OptimismPortal, it will eventually be processed by the Sequencer and included in L2. For more details, see here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Forced Transaction Inclusion | Network\\n\\nAs layer-2 (L2) technologies host an increasing number of digital assets, ensuring the security of your assets in the event of an L2 security incident has become a critical concern. A robust L2 requires the ability to force L2 assets to be extracted at layer 1 (L1) in case of unforeseen circumstances (e.g., downtime or misbehavior of sequencers and proposers, etc.).\\n\\nCensorship resistance is a crucial security feature, especially concerning the sequencer in the system. In situations where the sequencer refuses to execute your transaction requests or experiences prolonged downtime, a mechanism known as forced withdrawal or forced transaction inclusion becomes essential to better safeguard user funds.\\n\\n## \\n\\nHow to Enable Forced Transaction Inclusion[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#how-to-enable-forced-transaction-inclusion)\\n\\nOn all OP Stack chains, there is one and only one [`OptimismPortal`](https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction#optimismportalproxy) contract. This contract allows EOAs (Externally Owned Accounts) or smart contracts to create an L2 transaction (`depositTransaction` of `OptimismPortal`) without going through the Sequencer, and transactions submitted in this way are indistinguishable from those built by the Sequencer on L2.\\n\\nWhen the transaction is submitted on L1, it will be processed on a First Come, First Served (FCFS) basis, along with some [inclusion rules](https://docs.optimism.io/stack/protocol/outages#inclusion-rules). If the transaction is not published on L1 within the `sequencer_window` time, a reorganization (reorg) will occur on L2, and the transaction will be included in the L2 chain.\\n\\n## \\n\\nDifferent Sequencer Outage Scenarios[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#different-sequencer-outage-scenarios)\\n\\nIn practical applications, we may encounter different scenarios, such as:\\n\\n### \\n\\nSequencer Completely Down[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#sequencer-completely-down)\\n\\nIn this scenario, the Sequencer remains unable to function and process transactions. Users must send their transactions directly to the `OptimismPortal` contract to ensure they are included in the L2 chain. After the `sequencer_window` time (24 hours) has passed, these transactions will be automatically included in L2. For more details, see [here](https://docs.optimism.io/stack/protocol/outages#total-sequencer-outage).\\n\\n### \\n\\nSequencer Temporarily Down[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#sequencer-temporarily-down)\\n\\nIn this scenario, the Sequencer experiences a temporary outage and then recovers. Since the `sequencer_window` time has not yet elapsed, even though the transaction has been submitted to the OptimismPortal, it will eventually be processed by the Sequencer and included in L2. For more details, see [here](https://docs.optimism.io/stack/protocol/outages#partial-sequencer-outage).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/indexing\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/indexing\",\n    \"loadedTime\": \"2025-02-15T20:32:02.993Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/indexing\",\n    \"title\": \"Indexing | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Indexing | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/BFr3oQUl2XwSlRZwiWDg\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:02 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Yzg2YjYxN2MtNTg0Ni00MzIzLTk1NDEtNWIyODBmODhjMTBk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jZLEMeTw0X3AIvk1nIjYphhcSXOZ%2FuPku71NHRDsXq1oIAOo2VgdKyYD99IIPkTS16HNzmKE2thxpKmdMVG8HG4o9ziKSs5YeBVUwtPsdScextZdMyYoQQ7slAYgIDX%2BEHCkSQl%2FDsu2rTO%2BQkog\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810a0ce1c82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Indexing | Network\\nIn the blockchain field, to better understand and analyze blockchain data, often use Graph service or some Indexer service to process the data. Mantle Network supports a large number of data-related tools, providing users and developers with convenient data service infra.\\nGraph Service​\\nMantle Subgraph Studio​\\nSubgraph is a customized, open-source solution for indexing and accessing real-time blockchain data through the GraphQL API. They provide developers with powerful tools to build, customize and access blockchain data according to their needs. Check their documentation for more details.\\nIndexer​\\nLithosphere​\\nLithosphere serves as the data hub of the Mantle Network, providing comprehensive data services to the infrastructure (bridge and explorer) and dApps, etc. in the ecosystem, by synchronizing the data from layer 1, layer 2, and Mantle DA, processing it before storing it in the main database, and ultimately exposing interfaces to the ecosystem through APIs.\\nCovalent​\\nCovalent collects and indexes historical data points from over 100 different chain networks and makes them available via one unified API. This can come in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\nStructured and enhanced on-chain data well beyond what you get from RPC providers\\nBroad and deep multi-chain data at scale\\nEnterprise-grade performance\\nDune Echo\\nDune Echo is Dune’s new multichain real-time developer platform designed to provide real-time data processing and infrastructure support, enabling developers to efficiently build and scale blockchain applications.\\nEcho consolidates data from 30+ blockchain networks into a single API.\\nEcho ensures that developers receive data within 300ms of block propagation.\\nUnmarshal​\\nUnmarshal provides an API, TS, and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics data available at a glance for multiple chains, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\nSimpleHash\\nSimpleHash is a platform that provides access to Token balances, DEX prices, and transfers, along with NFT metadata, media, collection details, sales, floor prices, listings and bids across multiple chains. SimpleHash now powers Mantle devs with real-time token data and transactions, full NFT metadata and balances and flexible access via API and bulk data streams.\\nSubQuery​\\nSubQuery is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across multiple chains, including Mantle Network. Follow the link below to get started.\",\n  \"markdown\": \"# Indexing | Network\\n\\nIn the blockchain field, to better understand and analyze blockchain data, often use Graph service or some Indexer service to process the data. Mantle Network supports a large number of data-related tools, providing users and developers with convenient data service infra.\\n\\n## \\n\\nGraph Service[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#graph-service)\\n\\n### \\n\\nMantle Subgraph Studio[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#mantle-subgraph-studio)\\n\\n[Subgraph](https://subgraph.mantle.xyz/) is a customized, open-source solution for indexing and accessing real-time blockchain data through the GraphQL API. They provide developers with powerful tools to build, customize and access blockchain data according to their needs. Check their [documentation](https://docs.ormi.xyz/dedicated-env/mantle/subgraphs/overview) for more details.\\n\\n## \\n\\nIndexer[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#indexer)\\n\\n### \\n\\nLithosphere[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#lithosphere)\\n\\nLithosphere serves as the data hub of the Mantle Network, providing comprehensive data services to the infrastructure (bridge and explorer) and dApps, etc. in the ecosystem, by synchronizing the data from layer 1, layer 2, and Mantle DA, processing it before storing it in the main database, and ultimately exposing interfaces to the ecosystem through APIs.\\n\\n### \\n\\nCovalent[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#covalent)\\n\\n[Covalent](https://www.covalenthq.com/?utm_source=mantle&utm_medium=partner-docs) collects and indexes historical data points from over 100 different chain networks and makes them available via one unified API. This can come in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\n\\n*   Structured and enhanced on-chain data well beyond what you get from RPC providers\\n    \\n*   Broad and deep multi-chain data at scale\\n    \\n*   Enterprise-grade performance\\n    \\n\\n### \\n\\nDune Echo\\n\\n[**Dune Echo**](https://dune.com/echo) is Dune’s new multichain real-time developer platform designed to provide real-time data processing and infrastructure support, enabling developers to efficiently build and scale blockchain applications.\\n\\n*   Echo consolidates data from **30+ blockchain networks** into a single API.\\n    \\n*   Echo ensures that developers receive data within **300ms** of block propagation.\\n    \\n\\n### \\n\\nUnmarshal[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#unmarshal)\\n\\n[Unmarshal](https://console.unmarshal.io/) provides an API, TS, and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics data available at a glance for multiple chains, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\n\\n### \\n\\nSimpleHash\\n\\n[SimpleHash](https://simplehash.com/) is a platform that provides access to Token balances, DEX prices, and transfers, along with NFT metadata, media, collection details, sales, floor prices, listings and bids across multiple chains. SimpleHash now powers Mantle devs with real-time token data and transactions, full NFT metadata and balances and flexible access via API and bulk data streams.\\n\\n### \\n\\nSubQuery[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#subquery)\\n\\n[SubQuery](https://academy.subquery.network/quickstart/quickstart_chains/mantle.html) is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across multiple chains, including Mantle Network. Follow the link below to get started.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/roadmap\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/roadmap\",\n    \"loadedTime\": \"2025-02-15T20:32:03.093Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/roadmap\",\n    \"title\": \"Roadmap | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Roadmap | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/nhUQYMgAfLlj9o1gcRzI\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:02 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MmViYWRhNjktYzY1MC00MDNiLTg4ODEtOWQyOWE1NDY3MDll' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=DyexZArQVVs9aQ7pRnP3zEIRSMkj8fokNAODlzIRXYSs%2FINoHMZjpMssKmUI3cCQ717hv7G119G0NHIVefc1shffqlmcApGVZx3pvG%2FiDlfYsRGX7ktG69nvdDrf0bu8Q4vrPpnBYoNnwS8j0w7A\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810a0d94ca5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Roadmap | Network\\nPreviousForced Transaction InclusionNextNetwork Roles\\nLast updated 20 days ago\\nWas this helpful?\",\n  \"markdown\": \"# Roadmap | Network\\n\\n[PreviousForced Transaction Inclusion](https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion)[NextNetwork Roles](https://docs.mantle.xyz/network/for-node-operators/network-roles)\\n\\nLast updated 20 days ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/development-framework\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/development-framework\",\n    \"loadedTime\": \"2025-02-15T20:32:05.079Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/development-framework\",\n    \"title\": \"Development Framework | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Development Framework | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/8hM0jBymSWoFJinCE1wZ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGM4YzJlZjctZjJlOC00NDNlLTk5MzktMWQyMDIzOThmZDJm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=bdVt%2FMFDm%2BT1%2FpP%2BeoJPwvnciSlVRFCBl98Byxqsc0fYqz9eW0j7rnUUx7Zm%2FBBxOHLmgX%2FML0TwFsrlOSK%2FW1SLZdAZwjsWd3GYIA2qR3Z7a9RbHc6mORLqHoJAOCUbcU%2BQdMHpHdJr2MhOBa3p\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ad6fd8a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Development Framework | Network\\nHardhat​\\nHardhat is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\nFoundry​\\nFoundry is a fast, portable, and modular toolkit for EVM application development written in Rust. Foundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command line and via Solidity scripts.\\nThirdweb​\\nThirdweb is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network, which will empower you to seamlessly build, launch, and manage web3 applications and games across any EVM-compatible blockchain.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Development Framework | Network\\n\\n## \\n\\nHardhat[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/frameworks#hardhat)\\n\\n[Hardhat](https://hardhat.org/hardhat-runner/docs/getting-started#overview) is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\n\\n## \\n\\nFoundry[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/frameworks#foundry)\\n\\n[Foundry](https://book.getfoundry.sh/) is a fast, portable, and modular toolkit for EVM application development written in Rust. Foundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command line and via Solidity scripts.\\n\\n## \\n\\nThirdweb[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/frameworks#thirdweb)\\n\\n[Thirdweb](https://portal.thirdweb.com/) is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network, which will empower you to seamlessly build, launch, and manage web3 applications and games across any EVM-compatible blockchain.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture\",\n    \"loadedTime\": \"2025-02-15T20:32:05.116Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture\",\n    \"title\": \"Architecture | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Architecture | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/hcvgSc3jDGHvyrSNlSnU\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-N2JjYTBlZTMtMzA0ZS00MzhiLTkxMjUtZThjM2U5OWJiMDcz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=rGCRmMxRYlk3OZ%2Bqt7M0JKcsALEk28g4HLfDzgiasuC35Opu5s%2BZEBfMfB%2BjDDDjgorBrW6%2BvKoV5hMhk439Ats0epdtzfdsink9PzdvJCqVB5sTi9imJRBFpUfjpisfsCg3ccMlo397s3J3F%2BBn\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810addb1fc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Architecture | Network\\nArchitecture Overviews​\\nComponents​\\nMantle DA, supported by EigenDA technology, consists of four main components with a set of supported interactions:\\nOperator Nodes / DA Nodes:​\\nOperators, as service providers in the DA network, confirm their commitment through digital signatures that stake assets as guarantees for their participation. Operators will run nodes in the network that store data chunks for a predefined period, and make these data chunks available on request. Here is the address list of Mantle DA Operators.\\nDispersers​\\nThey are the roles of the Mantle DA service and pay for financial assurance of their data availability. This role can be played by rollup sequencers. Dispersers perform the following tasks:\\nEncoding data into blocks, providing funds to make the data available for a fixed period, and distributing the coded blocks to Mantle DA operators\\nAggregate operators' signatures and publish proofs to the blockchain, confirming the availability of the data of interest for a specified period\\nRetrievers​\\nThey are stakeholders who play an important role in the Proof of Custody protocol. Retrievers perform the following tasks:\\nMonitor certain verifiable operations of the protocol (will not be verified or resolved on-chain in optimistic scenarios)\\nPermissionless enforces toxic operations to be resolved up on-chain, slashing operators' stake\\nMantleLayerandMantle DASmart Contracts:​\\nThe collection of DA-related smart contracts running on Ethereum is responsible for the following:\\nResponsible for ensuring data acceptance only when a group of operators with sufficient stake collectively signs.\\nImplements the proof-of-custody protocol, providing on-chain data disclosure mechanisms for Retrievers.\\nVerifies the validity of data submitted by Retrievers based on signed commitments and enforces slash according to the proof-of-custody protocol.\\nWorkflow​\\nEncoding\\nDispersers encode data chunks (stored by Graph-node in L1 contract data) and generate KZG multi-reveal proofs for operators to verify chunk correctness.\\nDispersal\\nDispersers send data chunks to respective DA Operators.\\nAttestation\\nOperators verify their chunks based on global commitments. Upon successful verification, Operators will continue to store their data chunks for the time specified by Disperser and send back proofs.\\nAggregation\\nIf enough signatures are received, Dispersers aggregate them and publish them to L1 Ethereum.\\nRetrieve\\nRetrievers fetch valid data chunks from Operators and transfer data to the L2 application layer in frames.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Architecture | Network\\n\\n## \\n\\nArchitecture Overviews[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#architecture)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/da-a9af9bc4f2f42ad252f26e464fc802bd.svg)\\n\\n### \\n\\nComponents[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#components)\\n\\nMantle DA, supported by EigenDA technology, consists of four main components with a set of supported interactions:\\n\\n![](https://docs-v2.mantle.xyz/assets/images/mantleda-62ae03ff79cb25d30db4abaa2274f3ad.svg)\\n\\n#### \\n\\n**Operator Nodes / DA Nodes:**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#operator-nodes--da-nodes)\\n\\nOperators, as service providers in the DA network, confirm their commitment through digital signatures that stake assets as guarantees for their participation. Operators will run nodes in the network that store data chunks for a predefined period, and make these data chunks available on request. Here is [the address list](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction#mantle-da-operators-address) of Mantle DA Operators.\\n\\n#### \\n\\n**Dispersers**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#dispersers)\\n\\nThey are the roles of the Mantle DA service and pay for financial assurance of their data availability. This role can be played by rollup sequencers. Dispersers perform the following tasks:\\n\\n*   Encoding data into blocks, providing funds to make the data available for a fixed period, and distributing the coded blocks to Mantle DA operators\\n    \\n*   Aggregate operators' signatures and publish proofs to the blockchain, confirming the availability of the data of interest for a specified period\\n    \\n\\n#### \\n\\n**Retrievers**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#retrievers)\\n\\nThey are stakeholders who play an important role in the [Proof of Custody](https://dankradfeist.de/ethereum/2021/09/30/proofs-of-custody.html) protocol. Retrievers perform the following tasks:\\n\\n*   Monitor certain verifiable operations of the protocol (will not be verified or resolved on-chain in optimistic scenarios)\\n    \\n*   Permissionless enforces toxic operations to be resolved up on-chain, slashing operators' stake\\n    \\n\\n#### \\n\\n`**MantleLayer**`**and**`**Mantle DA**`**Smart Contracts:**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#mantlelayer-and-mantle-da-smart-contracts)\\n\\nThe collection of DA-related smart contracts running on Ethereum is responsible for the following:\\n\\n*   Responsible for ensuring data acceptance only when a group of operators with sufficient stake collectively signs.\\n    \\n*   Implements the proof-of-custody protocol, providing on-chain data disclosure mechanisms for Retrievers.\\n    \\n*   Verifies the validity of data submitted by Retrievers based on signed commitments and enforces slash according to the proof-of-custody protocol.\\n    \\n\\n### \\n\\nWorkflow[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#workflow)\\n\\n**Encoding**\\n\\nDispersers encode data chunks (stored by Graph-node in L1 contract data) and generate KZG multi-reveal proofs for operators to verify chunk correctness.\\n\\n**Dispersal**\\n\\nDispersers send data chunks to respective DA Operators.\\n\\n**Attestation**\\n\\nOperators verify their chunks based on global commitments. Upon successful verification, Operators will continue to store their data chunks for the time specified by Disperser and send back proofs.\\n\\n**Aggregation**\\n\\nIf enough signatures are received, Dispersers aggregate them and publish them to L1 Ethereum.\\n\\n**Retrieve**\\n\\nRetrievers fetch valid data chunks from Operators and transfer data to the L2 application layer in frames.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-roles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-roles\",\n    \"loadedTime\": \"2025-02-15T20:32:05.316Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-roles\",\n    \"title\": \"Network Roles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Roles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/d3ZBfrIknpIi7ZWPxrYm\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NmU0ZWQyY2YtZjM2Ny00MzYyLWIxYTMtY2U2OWQ2ZTM5YjU4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sFN1Vf%2FGl1tny9LjiyLnoT%2BQviFZ%2FGsbc2CW9ArLual5l9iIHKX2ZyjFDY%2BJU6fScal4c%2BYrE7EOS7c%2Fr69fjVPSx2tEY0Egoz0i1oHPZrrWK32nLhBDaSAsIuyXHP%2BREz1UtJ6pKUq3bGoCEW0G\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810adeb8982e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Roles | Network\\nWelcome to our Node Deployment service. This service covers different types of nodes, supporting the normal operation and various functionalities of the network. Please follow the instructions below to configure and deploy nodes.\\nAvailable Node Types​\\nVerifier Nodes​\\nVerifier nodes are used to verify the validity of transactions and blocks on the chain. It is a crucial component of the network, ensuring the security and reliability of the Mantle Network blockchain. Detailed Verifier Node Deployment documentation has already been provided.\\nSequencer Nodes​\\nSequencers are responsible for sequentially packing transactions into layer-2 blocks, providing a deterministic order for transactions. Currently, Sequencer nodes are not yet open due to security reasons.\\nProposer Nodes​\\nProposer nodes are used to create new state roots and send them to layer 1. Currently, Proposer nodes are not yet open due to security reasons.\\nBatcher Nodes​\\nBatcher nodes are used to bundle a batch of transactions into a block to improve processing efficiency. Currently, Batcher nodes are not yet open due to security reasons.\\nData Availability (DA) Nodes​\\nDA nodes ensure the availability of transaction data. Currently, DA nodes are not yet open due to security reasons.\\nWhy Run a Rollup Verifier Node?​\\nThere are multiple advantages of running a Rollup Verifier node.\\nIt grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions locally without rate-limiting (public RPCs may face such limitations).\\nAllows anyone to verify the work performed by Sequencers by re-deriving output roots and comparing them against those submitted by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mantle Network Mainnet.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Network Roles | Network\\n\\nWelcome to our Node Deployment service. This service covers different types of nodes, supporting the normal operation and various functionalities of the network. Please follow the instructions below to configure and deploy nodes.\\n\\n## \\n\\nAvailable Node Types[​](https://docs-v2.mantle.xyz/nodes/overviews#available-node-types)\\n\\n### \\n\\nVerifier Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#verifier-nodes)\\n\\n[Verifier](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#verifier) nodes are used to verify the validity of transactions and blocks on the chain. It is a crucial component of the network, ensuring the security and reliability of the Mantle Network blockchain. Detailed [Verifier Node Deployment documentation](https://docs.mantle.xyz/network/for-node-operators/deployment-guides) has already been provided.\\n\\n### \\n\\nSequencer Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#sequencer-nodes)\\n\\n[Sequencers](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#sequencer) are responsible for sequentially packing transactions into layer-2 blocks, providing a deterministic order for transactions. Currently, Sequencer nodes are not yet open due to security reasons.\\n\\n### \\n\\nProposer Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#proposer-nodes)\\n\\n[Proposer](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer) nodes are used to create new state roots and send them to layer 1. Currently, Proposer nodes are not yet open due to security reasons.\\n\\n### \\n\\nBatcher Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#batcher-nodes)\\n\\n[Batcher](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) nodes are used to bundle a batch of transactions into a block to improve processing efficiency. Currently, Batcher nodes are not yet open due to security reasons.\\n\\n### \\n\\nData Availability (DA) Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#data-availability-da-nodes)\\n\\n[DA nodes](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#da-nodes) ensure the availability of transaction data. Currently, DA nodes are not yet open due to security reasons.\\n\\n## \\n\\nWhy Run a Rollup Verifier Node?[​](https://docs-v2.mantle.xyz/nodes/overviews#why-run-a-rollup-verifier-node)\\n\\nThere are multiple advantages of running a Rollup Verifier node.\\n\\n1.  It grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions locally without rate-limiting (public RPCs may face such limitations).\\n    \\n2.  Allows anyone to verify the work performed by Sequencers by re-deriving output roots and comparing them against those submitted by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mantle Network Mainnet.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/l1-less-than-greater-than-l2-data-flow\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/l1-less-than-greater-than-l2-data-flow\",\n    \"loadedTime\": \"2025-02-15T20:32:05.501Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/l1-less-than-greater-than-l2-data-flow\",\n    \"title\": \"L1 <--> L2 Data Flow | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"L1 <--> L2 Data Flow | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/kzHPbwqMOvqwI3defLFW\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODc0NDE3MTYtZDAxZi00Njc0LWE4ZjctYTU3NzIwMmQzMDIx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=kiw051h3lDvapAaKI0M2xXGL9G8VjYOXJXSgLJ6elu%2FU1cNHncvK1hUjoDL8zaRsdWrRSQONcPBsrjCCnz7SLTpre7ae7lOzVZkKMGs7yaXczd42EQ7zbVZNcDuTtu7SzDO30BU8SOBBWR8GjM%2FT\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810afded7a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"L1 <--> L2 Data Flow\\n​For a robust L2, stable data flow includes batch submission from L2 to L1 and derivation from L1 to L2. Mantle v2 Tectonic ensures compatibility with Bedrock upgrades, enabling native data flow and interaction with Mantle DA.\\nBatch​\\nBatch is a process of sending data frames from the L2 to the DA layer. The data frames are stored in the form of a channel and sent to the destination (DA Layer), where the the verifier can validate the availability of the data.\\nBatch Submit To L1 / Ethereum EOA op-batcher obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. op-batcher creates a channel to store the frames, and then builds the EOA transaction to complete the batch submission.\\nBatch Submit To Mantle DA op-batcher obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. op-batcher will create a channel to store the frames, and once the channel is full, it will send all the frames in it to them and once the rollup is successful, the frames involved will undergo a state transition and be deleted from the cache.\\nDerivation​\\nDerivation is the process of obtaining data from the DA Layer and deriving it in L2 to ensure that the state of all L2 nodes remains consistent. the L2 op-node completes the state reconstruction of L2 by obtaining data frames from different DA Layers.\\nDerived from L1 / Ethereum EOA If we need to derive L2 data from the EOA address of L1, we can do it by syncing to the L1 block, then read the data batched to the EOA address from it, decode it to get the corresponding frame, and finally store it into a channel for processing. For more information, please check here.\\nDerived from Mantle DA If we need to do L2 data derivation from Mantle DA, we first need to get the confirmed block from L1, and then parse out the dataStoreId, which is a field about the data in the block, and use the dataStoreId to get the corresponding frame from Graph-Node and da-retriever. This completes the Mantle DA-based data derivation.\\nLast updated 3 months ago\",\n  \"markdown\": \"# L1 <--> L2 Data Flow\\n\\n[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#l1------l2-data-flow)For a robust L2, stable data flow includes batch submission from L2 to L1 and derivation from L1 to L2. Mantle v2 Tectonic ensures compatibility with Bedrock upgrades, enabling native data flow and interaction with Mantle DA.\\n\\n## \\n\\n**Batch**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#batch)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/workflow-a12e5ad99b4271e84ea35fd496c91cec.svg)\\n\\nBatch is a process of sending data frames from the L2 to the DA layer. The data frames are stored in the form of a channel and sent to the destination (DA Layer), where the the verifier can validate the availability of the data.\\n\\n*   **Batch Submit To L1 / Ethereum EOA** [`op-batcher`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. `op-batcher` creates a channel to store the frames, and then builds the EOA transaction to complete the batch submission.\\n    \\n*   **Batch Submit To Mantle DA** `op-batcher` obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. `op-batcher` will create a channel to store the frames, and once the channel is full, it will send all the frames in it to them and once the rollup is successful, the frames involved will undergo a state transition and be deleted from the cache.\\n    \\n\\n## \\n\\n**Derivation**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#derivation)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/derivation-19c3363fcbf805dcc434f1254d3ce1f2.svg)\\n\\nDerivation is the process of obtaining data from the DA Layer and deriving it in L2 to ensure that the state of all L2 nodes remains consistent. the L2 [`op-node`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) completes the state reconstruction of L2 by obtaining data frames from different DA Layers.\\n\\n*   **Derived from L1 / Ethereum EOA** If we need to derive L2 data from the EOA address of L1, we can do it by syncing to the L1 block, then read the data batched to the EOA address from it, decode it to get the corresponding frame, and finally store it into a channel for processing. For more information, please check [here](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/derivation.md#l2-chain-derivation-pipeline).\\n    \\n*   **Derived from Mantle DA** If we need to do L2 data derivation from Mantle DA, we first need to get the confirmed block from L1, and then parse out the `dataStoreId`, which is a field about the data in the block, and use the `dataStoreId` to get the corresponding frame from `Graph-Node` and `da-retriever`. This completes the Mantle DA-based data derivation.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides\",\n    \"loadedTime\": \"2025-02-15T20:32:05.196Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides\",\n    \"title\": \"Deployment Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deployment Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/b9ClajAPDVkc64F0MgeT\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTc0ZWI4M2MtNjgwNS00YjcwLTg0MWEtMmM3ZGIyMjJhNWQx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=d61avcHDR%2B%2FYUE2IHZkoieneOWZiXbFPY4dEFUQGeQgMWiaql%2Bq6pNiWSVMIDN42sTiMCOdXXxesSGi2Lcsn7QN%2B3%2F3ZescZgpm1XWhcaS1pBedArT39kH9oJYPDMnX0yp%2BPsMgo7hPGzedFu5bS\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ae78389c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deployment Guides | Network\\nMainnet (v1.0.0)Testnet (v1.1.0)\\nPreviousNetwork RolesNextMainnet (v1.0.0)\\nWas this helpful?\",\n  \"markdown\": \"# Deployment Guides | Network\\n\\n[Mainnet (v1.0.0)](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0)[Testnet (v1.1.0)](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0)\\n\\n[PreviousNetwork Roles](https://docs.mantle.xyz/network/for-node-operators/network-roles)[NextMainnet (v1.0.0)](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:05.982Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/sdk\",\n    \"title\": \"SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/StpBdV3riFdkAtFTkC91\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZjI2YmVjNzgtYjI1OS00ZDRmLTgzYTgtZWM3YWYxNmI1YWQ5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=x3JViZhFu6IFFip5fXC7cvuyvG6PKdLRNah25htVlQLGomk0aE5XpaLitSpdd%2FqJ9WsQp23F3cFhJGfScka%2By39Du2grf9y1zwOVO%2F1vI9JeTvHgQlPsSoDlHebfBi%2FDDNwlP%2B%2BJWRGJzkk1%2BC0u\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810b3381da5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"SDK | Network\\nThe Mantle SDK implements methods to make contract calls for both:\\nDeposit\\nLocking $MNT/ERC20/ERC721 tokens on layer 1 (L1) and minting equivalent tokens on layer 2 (L2)\\nWithdrawal\\nLocking $MNT/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\nSending Messages\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa.\\nDeposit​\\n$MNT/$ETH/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\nYou must first approve the Mantle Bridge to use the amount of $MNT/$ETH/ERC20/ERC721 tokens that you are moving to L2, or the deposit will fail.\\n$ETH deposits can alternatively be triggered by sending $ETH directly to the L1StandardBridge. Your account will be funded with the corresponding amount once the transaction is detected and finalized.\\nWithdrawal​\\n$MNT/$ETH/ERC20/ERC721 token withdrawals from L2 to the Ethereum mainnet can be triggered using the following SDK methods.\\nAll withdrawals use $MNT for gas fees.\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\nSending Messages​\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other. Here's a step-by-step guide on how to enable communication between L1 and L2.\",\n  \"markdown\": \"# SDK | Network\\n\\nThe Mantle SDK implements methods to make contract calls for both:\\n\\n*   **Deposit**\\n    \\n    *   Locking `$MNT`/ERC20/ERC721 tokens on layer 1 (L1) and minting equivalent tokens on layer 2 (L2)\\n        \\n    \\n*   **Withdrawal**\\n    \\n    *   Locking `$MNT`/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\n        \\n    \\n*   **Sending Messages**\\n    \\n    *   Contracts on Mantle can invoke contract functions on Ethereum, and vice versa.\\n        \\n    \\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/sdk#deposit)\\n\\n`$MNT`/`$ETH`/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\n\\nYou must first approve the Mantle Bridge to use the amount of `$MNT`/`$ETH`/`ERC20`/`ERC721` tokens that you are moving to L2, or the deposit will fail.\\n\\n`$ETH` deposits can alternatively be triggered by sending $ETH directly to the [L1StandardBridge](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol). Your account will be funded with the corresponding amount once the transaction is detected and finalized.\\n\\n### \\n\\nWithdrawal[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/sdk#withdrawal)\\n\\n`$MNT`/`$ETH`/ERC20/ERC721 token withdrawals from L2 to the Ethereum mainnet can be triggered using the following SDK methods.\\n\\nAll withdrawals use `$MNT` for gas fees.\\n\\n`0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`\\n\\n`0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111`\\n\\n### \\n\\nSending Messages[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/sdk#sending-messages)\\n\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other. Here's a [step-by-step](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/cross-dom-comm#communication-between-contracts-on-l1-and-l2) guide on how to enable communication between L1 and L2.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0\",\n    \"loadedTime\": \"2025-02-15T20:32:07.199Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0\",\n    \"title\": \"Mainnet (v1.0.0) | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mainnet (v1.0.0) | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/5gTouWippJnHCUMfMmk8\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDhiZGZhYTMtNzY0Ny00YzJkLTg1Y2YtNjJjNGNkMWZiNTIy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=GUSQgCBAReCbSCUR582dCRHyf33atNi606O6EHBoORkeL418abbbbwSw4NhQJqwsrYjMMJcZWhm%2FxFFaxp3oAn3TcQ5OY0pkCnnhE0NbdYyJ%2FYeEjo8uYMr%2BLGj5ft8Ehk%2BeiMp9RRyRjy4H3JwH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bb7f94a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mainnet (v1.0.0) | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Mainnet (v1.0.0) | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-node-operators/deployment-guides/mainnet-v1.0.0?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism\",\n    \"loadedTime\": \"2025-02-15T20:32:07.509Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism\",\n    \"title\": \"Fee Mechanism | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fee Mechanism | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/kUUmAkduFmbfYx1mMECT\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGNlODYxMzMtOTIzZi00MGMxLTkxNzYtYTBmZGE5ZjkzNDMy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gTEgCJReNMSA%2BIzPnJxf9efPf8JsNYOeA9BfDCrnEvNa5DVhJQIALAnJShXxTi1W3WX08lBh5%2BEFhzd205uK1Ct1moq13XeUVsMVauuGhjOB2guMdWEfPvPYtRWF2Dy%2BZHy0dK%2BYOjQT%2Ff2r8mx%2F\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bc2a8282e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fee Mechanism | Network\\nUnderstanding Fee Basics on Mantle Network​\\nTransaction fees on Mantle network are similar to those on Ethereum. However, as Mantle Network operates as a layer 2 (L2) blockchain, there are new paradigms in the fee structure that distinguish it from Ethereum's fees.\\nAs Mantle Network continuously enhances its EVM compatibility, dApps can conveniently adapt to any changes with minimal modifications. Let's explore the two sources of transaction costs on Mantle:\\nL1 Rollup Fee\\nCost of submitting rollup state root to L1 (distributed equally among users whose transactions are included in the batch)\\nWrite data credentials submitted to the DA contract on L1\\nThe L2 Execution Fee​\\nSimilar to Ethereum, transactions on Mantle Network must pay the gas fee for the computational and storage resources used. Each L2 transaction incurs some execution fees, calculated as the product of the gas used and the gas price associated with the transaction.\\nMathematically, this is represented as:\\nL2ExecutionFee=L2GasPrice∗L2GasUsedL2ExecutionFee=L2GasPrice∗L2GasUsed\\nThis fee reflects the computational and execution costs of completing transactions on the L2 network. The L2 execution fee paid by users is directly proportional to the computational and network resources consumed by their transactions.\\nThe L1 Rollup Fee​\\nAll state roots generated on L2 due to transaction execution are published to Ethereum. This step is crucial for the security properties of L2, ensuring that all the latest block data from the L2 network is consistently available on Ethereum L1 for sync nodes.\\nL2 aggregates states and essential transaction data into batches, publishing them to Ethereum, with the cost distributed among users whose transactions are included in the batch. The L1 rollup Fee is calculated based on factors such as:\\nThe current gas price on Ethereum\\nA fixed overhead (a fixed cost for committing data to L1, auto-adjusted and set into gas oracle)\\nThe scaling factor scalar\\nParameters related to the size of the transaction are stored as calldata in L1 called rollupDataGas\\nMathematically, this is represented as:\\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗scalar\\nThis fee covers the computational costs of integrating and submitting transaction batches from L2 to L1, including the gas needed for data storage and additional overhead. The L1 rollup fee is a crucial component ensuring the overall system's secure operation and also affects the overall transaction costs.\\nFor a more in-depth understanding, it is highly recommended to read the Mantle research team's study on fees in Rollups: Transaction Fees on Rollups\\nUnderstanding Fees on Mantle v2 Tectonic​\\nIn Mantle v2 Tectonic, the introduction of Mantle's native token design incorporates a tokenRatio parameter to adjust the fee:\\nL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio \\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\nL2 Execution Fee in Mantle v2 Tectonic​\\nThe size of the L2 Execution Fee is primarily influenced by two key factors that directly shape the cost of executing transactions on L2.\\nL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\nLet's delve into these factors:\\nL2 gasUsed - Complexity of Transaction Execution​\\nL2 gasUsed is the amount of gas consumed to execute a transaction on layer 2. This value is directly related to the complexity of the transaction and reflects the amount of work involved in executing the contract, computing, and processing the data. As a result, more complex transactions typically require more gas to complete, directly affecting the size of the L2 execution fee. This factor ensures that the transaction fee is proportional to the actual computational resources used.\\nL2 gasPrice - Depends on the transaction type​\\nL2 gasPrice is the unit price of gas used on L2, which depends on the specific transaction type chosen. L2 gasPrice is calculated differently for different transaction types:\\nFor EIP-1559 transaction types, L2 gasPrice is affected by the GasTipCap parameter, which is a parameter that is issued as a reward to sequencers and can be set to 0 by the user and does not affect the packing of transactions.\\nFor legacy transaction types, GasTipCap takes the default value (0.1 GWEI). In this case, eth_gasPrice is equal to the sum of GasTipCap and BASEFEE. This mechanism ensures the relative stability of the transaction costs, while providing the user with default values and simplifying the setup of the transaction parameters.\\nDue to EVM compatibility, transactions on Mantle Network generally have similar gasUsed to Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 Gas prices on the public Mantle dashboard. Moreover, as gas fees on Mantle Network are denominated in $MNT, transaction costs remain significantly lower than other L2 networks using $ETH as the gas token, even at the same gas price.\\nL1 Rollup Fee in Mantle v2 Tectonic​\\nSince the cost of transaction on L1 is much higher than that of transaction on L2, this is the largest part of the total transaction cost, and calculating the cost of L1 is a complex task due to the volatility of gasPrice in L1.\\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\nLet's delve into these factors:\\nrollupDataGasCalculation​\\nThe major portion of the L1 gas fee is rollupDataGas, which relates to the size of the transaction stored as calldata in L1, and typically accounts for more than 85% of the L1 GasUsed.\\nMantle v2 Tectonic chooses the Op Stack's rollupDataGas calculation, which counts the number of zero bytes and non-zero bytes in the transaction data, with each zero byte costing 4 Gas and each non-zero byte costing 16 Gas, thus:\\nrollupDataGas=count​zero​bytes(tx​data)∗4+count​non​zero​bytes(tx​data)∗16rollupDataGas=count_​zero_​bytes(tx_​data)∗4+count_​non_​zero_​bytes(tx_​data)∗16\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited amount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 transaction execution. As a result, for transactions with high complexity, this can even save up to more than 90% of the cost compared to the original L1 rollup fee.\\nFetchoverheadandscalar​\\noverhead and scalar are currently loaded from configurations, not supporting dynamic changes, you can fetch them from the BVM_GasPriceOracle contract, while L1gasPrice needs to be read from L1 blocks.\\nControl of tokenRatio​\\ntokenRatio is a parameter adjusting fees in Mantle. By obtaining prices for ETH and MNT from multiple price oracles and calculating their exchange rate (eth_price/mnt_price), Mantle v2 Tectonic limits the value of the current tokenRatio to the interval of the previous tokenRatio to prevent sudden and significant fluctuations in gasPrice caused by abrupt changes in the exchange rate.\\nMantle v2 Tectonic introduces a BVM_GasPriceOracle contract in Layer 2 to manage permissions for setting and updating tokenRatio. Users with permission (a multi-signature address managed through HSM) can update tokenRatio through an L2 transaction, dynamically adjusting gas fees.\\nFee Optimization​\\nCompared to Mantle v1, Mantle v2 Tectonic has made improvements and optimizations in fee design, including:\\nEIP-1559 Support: Mantle v2 Tectonic will support various transaction types, including EIP-1559, freeing users from the constraints of old transaction structures. For more details, refer to this. \\nWe highly recommend you to set the baseFee to 0.02 gwei and priorityfee to 0 in your L2 transaction. Refer to this for more details.\\nFee Estimation: The estimateGas API in Mantle v1 only returns the L2 gas cost, the L1 gas estimation needs to be calculated separately, while in Mantle v2 Tectonic it will support returning the total gas of the user's transaction directly. Developers also need to be mindful of the impact this optimization may have on transaction construction. For more details about how to calculate the gas fee, refer to this.\\nMantle v2 Tectonic Fee Showcase​\\nMantle v2 Tectonic\\nMantle v1 Alpha\\nERC-20 Contract Deployment\",\n  \"markdown\": \"# Fee Mechanism | Network\\n\\n## \\n\\nUnderstanding Fee Basics on Mantle Network[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#understanding-fee-basics-on-mantle-network)\\n\\nTransaction fees on Mantle network are similar to those on Ethereum. However, as Mantle Network operates as a layer 2 (L2) blockchain, there are new paradigms in the fee structure that distinguish it from Ethereum's fees.\\n\\nAs Mantle Network continuously enhances its EVM compatibility, dApps can conveniently adapt to any changes with minimal modifications. Let's explore the two sources of transaction costs on Mantle:\\n\\n2.  [**L1 Rollup Fee**](https://docs.mantle.xyz/network/system-information/fee-mechanism#the-l1-rollup-fee)\\n    \\n    *   Cost of submitting rollup state root to L1 (distributed equally among users whose transactions are included in the batch)\\n        \\n    *   Write data credentials submitted to the DA contract on L1\\n        \\n    \\n\\n### \\n\\nThe L2 Execution Fee[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#the-l2-execution-fee)\\n\\nSimilar to Ethereum, transactions on Mantle Network must pay the gas fee for the computational and storage resources used. Each L2 transaction incurs some execution fees, calculated as the product of the gas used and the gas price associated with the transaction.\\n\\nMathematically, this is represented as:\\n\\nL2ExecutionFee\\\\=L2GasPrice∗L2GasUsedL2ExecutionFee=L2GasPrice∗L2GasUsed\\n\\nThis fee reflects the computational and execution costs of completing transactions on the L2 network. The L2 execution fee paid by users is directly proportional to the computational and network resources consumed by their transactions.\\n\\n### \\n\\nThe L1 Rollup Fee[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#the-l1-rollup-fee)\\n\\nAll state roots generated on L2 due to transaction execution are published to Ethereum. This step is crucial for the security properties of L2, ensuring that all the latest block data from the L2 network is consistently available on Ethereum L1 for sync nodes.\\n\\nL2 aggregates states and essential transaction data into batches, publishing them to Ethereum, with the cost distributed among users whose transactions are included in the batch. The L1 rollup Fee is calculated based on factors such as:\\n\\n*   The current gas price on Ethereum\\n    \\n*   A fixed `overhead` (a fixed cost for committing data to L1, auto-adjusted and set into gas oracle)\\n    \\n*   The scaling factor `scalar`\\n    \\n*   Parameters related to the size of the transaction are stored as calldata in L1 called `rollupDataGas`\\n    \\n\\nMathematically, this is represented as:\\n\\nL1RollupFee\\\\=(rollupDataGas+overhead)∗L1gasPrice∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗scalar\\n\\nThis fee covers the computational costs of integrating and submitting transaction batches from L2 to L1, including the gas needed for data storage and additional overhead. The L1 rollup fee is a crucial component ensuring the overall system's secure operation and also affects the overall transaction costs.\\n\\nFor a more in-depth understanding, it is highly recommended to read the Mantle research team's study on fees in Rollups: [Transaction Fees on Rollups](https://www.mantle.xyz/blog/research/transaction-fees-on-rollups)\\n\\n## \\n\\nUnderstanding Fees on Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#understanding-fees-on-mantle-v2-tectonic)\\n\\nIn Mantle v2 Tectonic, the introduction of Mantle's native token design incorporates a [`tokenRatio`](https://docs.mantle.xyz/network/system-information/fee-mechanism#control-of-tokenratio) parameter to adjust the fee:\\n\\nL2ExecutionFee\\\\=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\n\\nL1RollupFee\\\\=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\n\\n### \\n\\nL2 Execution Fee in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l2-execution-fee-in-mantle-v2-tectonic)\\n\\nThe size of the L2 Execution Fee is primarily influenced by two key factors that directly shape the cost of executing transactions on L2.\\n\\nL2ExecutionFee\\\\=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\n\\nLet's delve into these factors:\\n\\n#### \\n\\n**L2 gasUsed - Complexity of Transaction Execution**[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l2-gasused---complexity-of-transaction-execution)\\n\\nL2 gasUsed is the amount of gas consumed to execute a transaction on layer 2. This value is directly related to the complexity of the transaction and reflects the amount of work involved in executing the contract, computing, and processing the data. As a result, more complex transactions typically require more gas to complete, directly affecting the size of the L2 execution fee. This factor ensures that the transaction fee is proportional to the actual computational resources used.\\n\\n#### \\n\\n**L2 gasPrice - Depends on the transaction type**[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l2-gasprice---depends-on-the-transaction-type)\\n\\nL2 gasPrice is the unit price of gas used on L2, which depends on the specific transaction type chosen. L2 gasPrice is calculated differently for different transaction types:\\n\\n*   **For** [**EIP-1559 transaction types**](https://docs.mantle.xyz/network/more/glossary#eip-1559-transaction), L2 gasPrice is affected by the `GasTipCap` parameter, which is a parameter that is issued as a reward to sequencers and can be set to `0` by the user and does not affect the packing of transactions.\\n    \\n*   **For** [**legacy transaction types**](https://docs.mantle.xyz/network/more/glossary#legacy-transaction), `GasTipCap` takes the default value (0.1 GWEI). In this case, `eth_gasPrice` is equal to the sum of `GasTipCap` and `BASEFEE`. This mechanism ensures the relative stability of the transaction costs, while providing the user with default values and simplifying the setup of the transaction parameters.\\n    \\n\\nDue to EVM compatibility, transactions on Mantle Network generally have similar `gasUsed` to Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 Gas prices on the public Mantle dashboard. Moreover, as gas fees on Mantle Network are denominated in `$MNT`, transaction costs remain significantly lower than other L2 networks using $ETH as the gas token, even at the same gas price.\\n\\n### \\n\\nL1 Rollup Fee in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l1-rollup-fee-in-mantle-v2-tectonic)\\n\\nSince the cost of transaction on L1 is much higher than that of transaction on L2, this is the largest part of the total transaction cost, and calculating the cost of L1 is a complex task due to the volatility of gasPrice in L1.\\n\\nL1RollupFee\\\\=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\n\\nLet's delve into these factors:\\n\\n#### \\n\\n`**rollupDataGas**`**Calculation**[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#rollupdatagas-calculation)\\n\\nThe major portion of the L1 gas fee is `rollupDataGas`, which relates to the size of the transaction stored as calldata in L1, and typically accounts for more than 85% of the L1 GasUsed.\\n\\nMantle v2 Tectonic chooses the Op Stack's rollupDataGas calculation, which counts the number of zero bytes and non-zero bytes in the transaction data, with each zero byte costing 4 Gas and each non-zero byte costing 16 Gas, thus:\\n\\nrollupDataGas\\\\=count​zero​bytes(tx​data)∗4+count​non​zero​bytes(tx​data)∗16rollupDataGas=count\\\\_​zero\\\\_​bytes(tx\\\\_​data)∗4+count\\\\_​non\\\\_​zero\\\\_​bytes(tx\\\\_​data)∗16\\n\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited amount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 transaction execution. As a result, for transactions with high complexity, this can even save up to more than **90%** of the cost compared to the original L1 rollup fee.\\n\\n#### \\n\\n**Fetch**`**overhead**`**and**`**scalar**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#fetch-overhead-and-scalar)\\n\\n`overhead` and `scalar` are currently loaded from configurations, not supporting dynamic changes, you can fetch them from the [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract, while `L1gasPrice` needs to be read from L1 blocks.\\n\\n#### \\n\\n**Control of tokenRatio**[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#control-of-tokenratio)\\n\\n`tokenRatio` is a parameter adjusting fees in Mantle. By obtaining prices for ETH and MNT from multiple price oracles and calculating their exchange rate (`eth_price/mnt_price`), Mantle v2 Tectonic limits the value of the current `tokenRatio` to the interval of the previous `tokenRatio` to prevent sudden and significant fluctuations in gasPrice caused by abrupt changes in the exchange rate.\\n\\nMantle v2 Tectonic introduces a [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract in Layer 2 to manage permissions for setting and updating `tokenRatio`. Users with permission (a multi-signature address managed through [HSM](https://docs.mantle.xyz/network/more/glossary#hardware-security-module-hsm)) can update `tokenRatio` through an L2 transaction, dynamically adjusting gas fees.\\n\\n## \\n\\nFee Optimization[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#fee-optimization)\\n\\nCompared to Mantle v1, Mantle v2 Tectonic has made improvements and optimizations in fee design, including:\\n\\n*   **EIP-1559 Support**: Mantle v2 Tectonic will support various transaction types, including EIP-1559, freeing users from the constraints of old transaction structures. For more details, refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support).\\n    \\n\\n**We highly recommend you to set the** `**baseFee**` **to** `**0.02 gwei**` **and** `**priorityfee**` **to** `**0**` **in your L2 transaction.** Refer to [this](https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees) for more details.\\n\\n*   **Fee Estimation**: The `estimateGas` API in Mantle v1 only returns the L2 gas cost, the L1 gas estimation needs to be calculated separately, while in Mantle v2 Tectonic it will support returning the total gas of the user's transaction directly. Developers also need to be mindful of the impact this optimization may have on transaction construction. For more details about how to calculate the gas fee, refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees).\\n    \\n\\n### \\n\\nMantle v2 Tectonic Fee Showcase[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#mantle-v2-tectonic-fee-showcase)\\n\\nMantle v2 Tectonic\\n\\nMantle v1 Alpha\\n\\n**ERC-20 Contract Deployment**\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker\",\n    \"loadedTime\": \"2025-02-15T20:32:07.793Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker\",\n    \"title\": \"Deploying a Rollup Verifier/Replica Node From Docker | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Rollup Verifier/Replica Node From Docker | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/G7xiHsaHcijCS3n3Ew52\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OTgwM2UyYzEtN2NiNy00YmVhLTljZjktMTc4N2NkNWRmYzhh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=oc2nVdyhzJAt%2FnvN99KqOQURFDyvLkZVDWyx39G9EfYiC8zStcwsh1wCdpGPD%2FEO6ow7yKL4c1h%2BwENLd0CyG2Ywk39DZ1SSSC3vXwPr%2B1jemH7n5P20LmAzzwRnHw%2BZgQwB1kHqLHSNUBho%2BK2L\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bdedafa5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Rollup Verifier/Replica Node From Docker\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\nThis doc is a simple introduction to the process. For more details, please refer to this:\\nPrerequisites​\\nEnsure you have the following software installed:\\nHardware Recommendations​\\nFor optimal performance, it is recommended to have the following hardware specifications:\\nRAM - 16GB+\\nCPU - 8C+\\nStorage - 4T+ disk(HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download speed\\nApproximate Disk Usage​\\nAs of Dec. 25, 2023:\\nArchive node: ~1.5TB\\nFull node: ~75GB\\nInstallation and Configuration​\\nClone the Repository​\\nFirstly, we need to clone the repository:\\ngit clone https://github.com/mantlenetworkio/networks.git\\nInitialize to Generate Files​\\nBefore running the node, you need to generate some necessary files, such as the jwt_secret.txt and p2p_node_key.txt. You can find more details here.\\nDeploy the Node​\\nDownload Latest Snapshot From Mantle (Recommended)​\\nWe recommend that you start the node with the latest snapshot, so that you don't need to wait a long time to sync data. Check this to know how to get the latest snapshot.\\ninfo\\nDepending on the user's location, we provide download links for snapshots in different regions. Check more details here.\\nOperate Mantle Node​\\nOnce the snapshot is downloaded and extracted to the correct folder, you can start the node, we've prepared a docker-compose file for you, so that you can easily start and stop the node.\\ninfo\\nPlease make sure to change your own L1 RPC Node URL in the docker-compose-mainnetv2.yml.\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\nExample​\\nStart the node\\ndocker-compose -f docker-compose-mainnetv2.yml up -d\\nWe can use docker ps to get container id and docker logs to view the logs\\ndocker logs -f <container_id>\\nVerification​\\nCheck Service Status​\\nOnce you start the node, you also need to check the service status, we provide a command to check the service status and the chain data.\\nExample​\\nWhen we use cast bn to check the service status, we will get the block number of the latest block. For example:\\nWe can run this command many times to make sure the service is running correctly.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Deploying a Rollup Verifier/Replica Node From Docker\\n\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\n\\n**This doc is a simple introduction to the process.** For more details, please refer to this:\\n\\n## \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/nodes/verifier#prerequisites)\\n\\nEnsure you have the following software installed:\\n\\n## \\n\\nHardware Recommendations[​](https://docs-v2.mantle.xyz/nodes/verifier#hardware-recommendations)\\n\\nFor optimal performance, it is recommended to have the following hardware specifications:\\n\\n*   **RAM** - 16GB+\\n    \\n*   **CPU** - 8C+\\n    \\n*   **Storage** - 4T+ disk(HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download speed\\n    \\n\\n## \\n\\nApproximate Disk Usage[​](https://docs-v2.mantle.xyz/nodes/verifier#approximate-disk-usage)\\n\\nAs of Dec. 25, 2023:\\n\\n*   Archive node: ~1.5TB\\n    \\n*   Full node: ~75GB\\n    \\n\\n## \\n\\nInstallation and Configuration[​](https://docs-v2.mantle.xyz/nodes/verifier#installation-and-configuration)\\n\\n### \\n\\nClone the Repository[​](https://docs-v2.mantle.xyz/nodes/verifier#clone-the-repository)\\n\\nFirstly, we need to clone the repository:\\n\\n```\\ngit clone https://github.com/mantlenetworkio/networks.git\\n```\\n\\n### \\n\\nInitialize to Generate Files[​](https://docs-v2.mantle.xyz/nodes/verifier#initialize-to-generate-files)\\n\\nBefore running the node, you need to generate some necessary files, such as the `jwt_secret.txt` and `p2p_node_key.txt`. You can find more details [**here**](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#init-to-generate-the-jwt_secret_txt-file-and-the-p2p_node_key_txt).\\n\\n## \\n\\nDeploy the Node[​](https://docs-v2.mantle.xyz/nodes/verifier#deploy-the-node)\\n\\n### \\n\\nDownload Latest Snapshot From Mantle (Recommended)[​](https://docs-v2.mantle.xyz/nodes/verifier#download-latest-snapshot-from-mantle-recommended)\\n\\n**We recommend that you start the node with the latest snapshot**, so that you don't need to wait a long time to sync data. Check [**this**](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle) to know how to get the latest snapshot.\\n\\ninfo\\n\\n*   Depending on the user's location, we provide download links for snapshots in different regions. Check more details [here](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle).\\n    \\n\\n### \\n\\nOperate Mantle Node[​](https://docs-v2.mantle.xyz/nodes/verifier#operate-mantle-node)\\n\\nOnce the snapshot is downloaded and extracted to the correct folder, you can start the node, we've prepared a `docker-compose` file for you, so that you can easily start and stop the node.\\n\\ninfo\\n\\nPlease make sure to change your own L1 RPC Node URL in the [`docker-compose-mainnetv2.yml`](https://github.com/mantlenetworkio/networks/blob/main/docker-compose-mainnetv2.yml).\\n\\n```\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\n```\\n\\n**Example**[**​**](https://docs-v2.mantle.xyz/nodes/verifier#example)\\n\\n1.  Start the node\\n    \\n\\n```\\ndocker-compose -f docker-compose-mainnetv2.yml up -d\\n```\\n\\n1.  We can use `docker ps` to get container id and `docker logs` to view the logs\\n    \\n\\n```\\ndocker logs -f <container_id>\\n```\\n\\n## \\n\\nVerification[​](https://docs-v2.mantle.xyz/nodes/verifier#verification)\\n\\n#### \\n\\nCheck Service Status[​](https://docs-v2.mantle.xyz/nodes/verifier#check-service-status)\\n\\nOnce you start the node, you also need to check the service status, we provide a command to check the service status and the chain data.\\n\\n**Example**[**​**](https://docs-v2.mantle.xyz/nodes/verifier#example-1)\\n\\nWhen we use `cast bn` to check the service status, we will get the block number of the latest block. For example:\\n\\nWe can run this command many times to make sure the service is running correctly.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/native-token-migration\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/native-token-migration\",\n    \"loadedTime\": \"2025-02-15T20:32:07.966Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/native-token-migration\",\n    \"title\": \"Native Token Migration | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Native Token Migration | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ddmQfieZfjaqlZXfXEWH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODk3ZTJkZjUtY2RmOS00Y2Q0LWE5YzUtODU5OWVmY2QwY2Rj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=WFTXX2T%2FjpoukeVu%2BxZpcrihRGHDOT493EfmR8HeoCZNlhlC%2FWiSwJl6RxKXqaAORvbfXHefG6VDSQP2GGDC3%2F6sA0xH8DyD%2BHC0kPO6B6f2N3FybKySovoUT%2B2QtryO4UPC2%2BRv4LEebcXJ8REq\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810be3ff9c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Native Token Migration | Network\\nMantle v2 Tectonic, as a significant version update, focuses on optimizing and improving various aspects, including a transformation in the system's native token. In Mantle v2 Tectonic, $MNT will serve as the native token for the system. This change aims to provide users with a more flexible and efficient transaction experience, laying a solid foundation for the ecosystem's future development.\\nWhy Mantle v2 Tectonic Requires a Change​\\nIn Mantle v2 Tectonic, the decision to change the native token from an ERC-20-based scheme to one using Ether Gas stems from several reasons:\\n1. Closer Alignment With Native Ethereum Design​\\nUnlike Mantle v1, where we opted for ERC-20 tokens as the native token, Mantle v2 Tectonic aims for closer alignment with Ethereum's native design. This not only simplifies the development and maintenance processes, but also integrates Mantle v2 more naturally into the Ethereum ecosystem.\\n2. Facilitating L2 Node Upgrades in Sync With the Mainnet​\\nThis new native token makes it easier for L2 nodes to synchronize with mainnet code upgrades. This consistency helps ensure the seamless collaboration of the entire Mantle Network across different levels and better support potential future EIPs.\\n3. Empowering MNT Token Further​\\nMantle v2 Tectonic introduces support for EIP-1559-type transactions. This update allows the MNT token to serve as a GasTipCap token in such transactions, controlling transaction priority. This enhancement not only provides users with more flexibility, but also empowers MNT Token with additional utility and potential, further enhancing the Mantle ecosystem.\\nChanges Post-New Solution​\\nTransition in Ledger Storage Method: From Contract Accounts to System Accounts​\\nIn Mantle v2 Tectonic, a significant change involves transitioning the storage method of the MNT ledger from contract accounts to system accounts. This shift from centralized storage (in a single contract account) to decentralized storage (balances correspond one-to-one with addresses, dispersed in address accounts) enhances system maintainability and aligns better with the decentralized design of the overall network.\\nAchieving Identical Flow Paths for MNT and ETH​\\nWith the modification of the native token, Mantle Network successfully achieves identical flow paths for MNT and ETH. This change elevates the position of MNT in Mantle Network, providing it with an equal and convenient standing in the system. Users can now enjoy a user experience similar to ETH without the need for MNT to adopt different flow paths, as is the case with ERC-20 assets.\\nThese changes not only positively impact the overall performance and user experience of the Mantle system, but also establish a solid foundation for future expansions and ecosystem development.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Native Token Migration | Network\\n\\nMantle v2 Tectonic, as a significant version update, focuses on optimizing and improving various aspects, including a transformation in the system's native token. In Mantle v2 Tectonic, $MNT will serve as the native token for the system. This change aims to provide users with a more flexible and efficient transaction experience, laying a solid foundation for the ecosystem's future development.\\n\\n## \\n\\nWhy Mantle v2 Tectonic Requires a Change[​](https://docs-v2.mantle.xyz/devs/concepts/native#why-mantle-v2-tectonic-requires-a-change)\\n\\nIn Mantle v2 Tectonic, the decision to change the native token from an ERC-20-based scheme to one using Ether Gas stems from several reasons:\\n\\n### \\n\\n1\\\\. Closer Alignment With Native Ethereum Design[​](https://docs-v2.mantle.xyz/devs/concepts/native#1-closer-alignment-with-native-ethereum-design)\\n\\nUnlike Mantle v1, where we opted for ERC-20 tokens as the native token, Mantle v2 Tectonic aims for closer alignment with Ethereum's native design. This not only simplifies the development and maintenance processes, but also integrates Mantle v2 more naturally into the Ethereum ecosystem.\\n\\n### \\n\\n2\\\\. Facilitating L2 Node Upgrades in Sync With the Mainnet[​](https://docs-v2.mantle.xyz/devs/concepts/native#2-facilitating-l2-node-upgrades-in-sync-with-the-mainnet)\\n\\nThis new native token makes it easier for L2 nodes to synchronize with mainnet code upgrades. This consistency helps ensure the seamless collaboration of the entire Mantle Network across different levels and better support potential future EIPs.\\n\\n### \\n\\n3\\\\. Empowering MNT Token Further[​](https://docs-v2.mantle.xyz/devs/concepts/native#3-empowering-mnt-token-further)\\n\\nMantle v2 Tectonic introduces support for [EIP-1559-type transactions](https://docs.mantle.xyz/network/more/glossary#eip-1559-transaction). This update allows the MNT token to serve as a `GasTipCap` token in such transactions, controlling transaction priority. This enhancement not only provides users with more flexibility, but also empowers MNT Token with additional utility and potential, further enhancing the Mantle ecosystem.\\n\\n## \\n\\nChanges Post-New Solution[​](https://docs-v2.mantle.xyz/devs/concepts/native#changes-post-new-solution)\\n\\n### \\n\\nTransition in Ledger Storage Method: From Contract Accounts to System Accounts[​](https://docs-v2.mantle.xyz/devs/concepts/native#transition-in-ledger-storage-method-from-contract-accounts-to-system-accounts)\\n\\nIn Mantle v2 Tectonic, a significant change involves transitioning the storage method of the MNT ledger from contract accounts to system accounts. This shift from centralized storage (in a single contract account) to decentralized storage (balances correspond one-to-one with addresses, dispersed in address accounts) enhances system maintainability and aligns better with the decentralized design of the overall network.\\n\\n### \\n\\nAchieving Identical Flow Paths for MNT and ETH[​](https://docs-v2.mantle.xyz/devs/concepts/native#achieving-identical-flow-paths-for-mnt-and-eth)\\n\\nWith the modification of the native token, Mantle Network successfully achieves identical flow paths for MNT and ETH. This change elevates the position of MNT in Mantle Network, providing it with an equal and convenient standing in the system. Users can now enjoy a user experience similar to ETH without the need for MNT to adopt different flow paths, as is the case with ERC-20 assets.\\n\\nThese changes not only positively impact the overall performance and user experience of the Mantle system, but also establish a solid foundation for future expansions and ecosystem development.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-binary\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-binary\",\n    \"loadedTime\": \"2025-02-15T20:32:08.180Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-binary\",\n    \"title\": \"Deploying a Rollup Verifier/Replica Node From Binary | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Rollup Verifier/Replica Node From Binary | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/jE789m5aclaQMPaokPxq\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NjQ4NmJlYmQtZDg1Yy00MmU2LTg5MDYtMDFlMGU3OGU0NDQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=UhQpQpCr%2Fi1Z6NvHgG3iAfArACjdIxWMZKRuc7xgW2wayThAKxyUTPTQ1lA%2BKCClYxh3MwdzyBFFw7OjBZIGxJFa4prTwrsEwxv30fY26NXWnXkJqsqcngAIyzvNWHy0azF6wt1KpyHUai1AGow2\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810c0feeea5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Rollup Verifier/Replica Node From Binary\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\nIf you want to customize the op-geth and run with your own binary, please follow this tutorial.\\nDue to the fact that Mantle DA in op-node is powered by EigenDA technology, which is currently not open-source yet, op-node still needs to be run using Docker.\\nPrerequisites​\\nEnsure you have the following software installed:\\nHardware Recommendations​\\nFor optimal performance, it is recommended to have the following hardware specifications:\\nRAM - 16GB+\\nCPU - 8C+\\nStorage - 4T+ disk(HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download speed\\nApproximate Disk Usage​\\nAs of Dec. 25, 2023:\\nArchive node: ~1.5TB\\nFull node: ~75GB\\nInstallation and Configuration​\\nClone the Repository​\\nFirstly, we need to clone the repository:\\ngit clone https://github.com/mantlenetworkio/networks.git\\nInitialize to Generate Files​\\nBefore running the node, you need to generate some necessary files, such as the jwt_secret.txt and p2p_node_key.txt. You can find more details here.\\nDeploy the Node​\\nDownload Latest Snapshot From Mantle (Recommended)​\\nWe recommend that you start the node with the latest snapshot, so that you don't need to wait a long time to sync data. Check this to know how to get the latest snapshot.\\ninfo\\nDepending on the user's location, we provide download links for snapshots in different regions. Check more details here.\\nIf you want to run with fullnode mode, please change the --gcmode to full in the gethv2.sh.\\nOperate Mantle Node​\\nOnce the snapshot is downloaded and extracted to the correct folder, you can start the node with the following steps:\\nPrepare the corresponding repos to run the node and switch to the correct release version:\\n# Download Mantle v2 Tectonic op-geth git clone https://github.com/mantlenetworkio/op-geth.git cd ./op-geth git checkout release/v1.0.0\\nMove the binary to the correct folder and start the node:\\ncd ./../networks cp ./../op-geth/build/bin/geth ./ # export PATH export PATH=$PATH:$(pwd) # Run op-geth script firstly ./gethv2.sh\\nStart the op-node by using docker:\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\ndocker-compose -f docker-compose-mainnetv2-nodeonly.yml up -d\\nVerification​\\nCheck Service Status​\\nOnce you start the node, you also need to check the service status, we provide a command to check the service status and the chain data.\\nExample​\\nWhen we use cast bn to check the service status, we will get the block number of the latest block. For example:\\nWe can run this command many times to make sure the service is running correctly.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Deploying a Rollup Verifier/Replica Node From Binary\\n\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\n\\nIf you want to customize the op-geth and run with your own binary, please follow this tutorial.\\n\\nDue to the fact that Mantle DA in op-node is powered by EigenDA technology, which is currently not open-source yet, op-node still needs to be run using Docker.\\n\\n## \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#prerequisites)\\n\\nEnsure you have the following software installed:\\n\\n## \\n\\nHardware Recommendations[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#hardware-recommendations)\\n\\nFor optimal performance, it is recommended to have the following hardware specifications:\\n\\n*   **RAM** - 16GB+\\n    \\n*   **CPU** - 8C+\\n    \\n*   **Storage** - 4T+ disk(HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download speed\\n    \\n\\n## \\n\\nApproximate Disk Usage[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#approximate-disk-usage)\\n\\nAs of Dec. 25, 2023:\\n\\n*   Archive node: ~1.5TB\\n    \\n*   Full node: ~75GB\\n    \\n\\n## \\n\\nInstallation and Configuration[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#installation-and-configuration)\\n\\n### \\n\\nClone the Repository[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#clone-the-repository)\\n\\nFirstly, we need to clone the repository:\\n\\n```\\ngit clone https://github.com/mantlenetworkio/networks.git\\n```\\n\\n### \\n\\nInitialize to Generate Files[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#initialize-to-generate-files)\\n\\nBefore running the node, you need to generate some necessary files, such as the `jwt_secret.txt` and `p2p_node_key.txt`. You can find more details [**here**](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#init-to-generate-the-jwt_secret_txt-file-and-the-p2p_node_key_txt).\\n\\n## \\n\\nDeploy the Node[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#deploy-the-node)\\n\\n### \\n\\nDownload Latest Snapshot From Mantle (Recommended)[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#download-latest-snapshot-from-mantle-recommended)\\n\\n**We recommend that you start the node with the latest snapshot**, so that you don't need to wait a long time to sync data. Check [**this**](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle) to know how to get the latest snapshot.\\n\\ninfo\\n\\n*   Depending on the user's location, we provide download links for snapshots in different regions. Check more details [here](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle).\\n    \\n*   If you want to run with fullnode mode, please change the `--gcmode` to `full` in the [`gethv2.sh`](https://github.com/mantlenetworkio/networks/blob/main/gethv2.sh).\\n    \\n\\n### \\n\\nOperate Mantle Node[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#operate-mantle-node)\\n\\nOnce the snapshot is downloaded and extracted to the correct folder, you can start the node with the following steps:\\n\\n**Prepare the corresponding repos to run the node and switch to the correct release version:**\\n\\n```\\n# Download Mantle v2 Tectonic op-geth\\ngit clone https://github.com/mantlenetworkio/op-geth.git\\ncd ./op-geth\\ngit checkout release/v1.0.0\\n```\\n\\n**Move the binary to the correct folder and start the node:**\\n\\n```\\ncd ./../networks\\ncp ./../op-geth/build/bin/geth ./\\n\\n# export PATH\\nexport PATH=$PATH:$(pwd)\\n\\n# Run op-geth script firstly\\n./gethv2.sh\\n```\\n\\n**Start the op-node by using docker:**\\n\\n```\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\n```\\n\\n```\\ndocker-compose -f docker-compose-mainnetv2-nodeonly.yml up -d\\n```\\n\\n## \\n\\nVerification[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#verification)\\n\\n#### \\n\\nCheck Service Status[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#check-service-status)\\n\\nOnce you start the node, you also need to check the service status, we provide a command to check the service status and the chain data.\\n\\n**Example**[**​**](https://docs-v2.mantle.xyz/nodes/verifier-binary#example)\\n\\nWhen we use `cast bn` to check the service status, we will get the block number of the latest block. For example:\\n\\nWe can run this command many times to make sure the service is running correctly.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/how-to-send-gasless-transaction-by-using-biconomy\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/how-to-send-gasless-transaction-by-using-biconomy\",\n    \"loadedTime\": \"2025-02-15T20:32:08.201Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/how-to-send-gasless-transaction-by-using-biconomy\",\n    \"title\": \"How to Send Gasless Transaction by Using Biconomy | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Send Gasless Transaction by Using Biconomy | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/sg9z5QoofwtLKIhPdaIr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTEwNWUxNDMtODAzZi00ZmVjLWIxMDUtODA4MTBkYmVlNmRh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jR6a4XvNKNIXYKhc7Sdb72uRlVfqBzwLf3odvfwRekOmFnIZr3DK7uf7gSKPI2mep0FKJ%2FVpXMSF20abUVwNE4h6Ce2CEZOJDWJKWu8gnrA%2BDFu3%2Fz%2Fo6ShdpfWh%2FM4mQQkyGiSJr7g4Fv7qT67h\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810be5b5b2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Send Gasless Transaction by Using Biconomy\\nThis tutorial will guide you through the process of implementing gasless transactions on the Mantle network using Biconomy. By the end of this tutorial, you'll learn how to integrate Biconomy into your DApp, allowing users to make transactions without holding native tokens.\\nPrerequisites​\\nBefore you start, ensure you have the following:\\nBasic Knowledge: Familiarity with Ethereum and smart contracts.\\nDevelopment Environment: Node.js and npm installed.\\nBiconomy Account: Register and create a project on Biconomy.\\nStep 1: Create a Project on Biconomy​\\nAdd a Paymaster, in this tutorial we choose Mantle Sepolia network.\\nNow you can see a Mode screen on the right, choose and enable the Sponsored.\\nNow you need to setup your gas tank, choose your wallet and deposit some MNT testnet token.\\nGet your Bundler URL from Biconomy Dashboard.\\nStep 2: Setup the Gasless Transaction Environment​\\nImport the following packages and setup the gasless transaction environment.\\nimport {Hex, createWalletClient, http, parseEther} from 'viem'; import {privateKeyToAccount} from 'viem/accounts'; import { createSmartAccountClient, PaymasterMode, SupportedSigner, } from '@biconomy/account'; import {mantle, mantleSepoliaTestnet} from 'viem/chains'; const biconomyTestPaymasterApiKey = 'Your Paymaster API Key'; const bundlerTestUrl = 'Your Bundler URL'; const privateKey = '0xxxxxxxx';\\nStep 3: Create Biconomy Smart Account Instance​\\nNow you can create the Biconomy Smart Account Instance.\\n// ----- 1. Generate EOA from private key const account = privateKeyToAccount(privateKey as Hex); const client = createWalletClient({ account, chain: mantleSepoliaTestnet, transport: http(), }); const eoa = client.account.address; console.log(`EOA address: ${eoa}`); // ------ 2. Create biconomy smart account instance const smartAccount = await createSmartAccountClient({ signer: client as SupportedSigner, bundlerUrl: bundlerTestUrl, biconomyPaymasterApiKey: biconomyTestPaymasterApiKey, }); const scwAddress = await smartAccount.getAccountAddress(); console.log('SCW Address', scwAddress);\\nMake sure your smart account has enough MNT tokens to transfer.\\nStep 4: Generate Transaction Data​\\n// ------ 3. Generate transaction data const txData = { to, value: parseEther(amount.toString()), };\\nStep 5: Send Gasless Transaction​\\n// ------ 4. Send user operation and get tx hash const userOpResponse = await smartAccount.sendTransaction(txData, { paymasterServiceData: {mode: PaymasterMode.SPONSORED}, }); const {transactionHash} = await userOpResponse.waitForTxHash(); console.log('Transaction Hash', transactionHash); const userOpReceipt = await userOpResponse.wait(); if (userOpReceipt.success == 'true') { console.log('UserOp receipt', userOpReceipt); console.log('Transaction receipt', userOpReceipt.receipt); }\\nStep 6: Verify Transaction​\\nRun this function and you can get your EOA address, smart account address and transaction hash, after several seconds you will receive the UserOp receipt which means the transaction was successful.\\nLast updated 3 months ago\",\n  \"markdown\": \"# How to Send Gasless Transaction by Using Biconomy\\n\\nThis tutorial will guide you through the process of implementing gasless transactions on the Mantle network using Biconomy. By the end of this tutorial, you'll learn how to integrate Biconomy into your DApp, allowing users to make transactions without holding native tokens.\\n\\n### \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#prerequisites)\\n\\nBefore you start, ensure you have the following:\\n\\n1.  Basic Knowledge: Familiarity with Ethereum and smart contracts.\\n    \\n2.  Development Environment: Node.js and npm installed.\\n    \\n3.  Biconomy Account: [Register](https://dashboard.biconomy.io/) and create a project on Biconomy.\\n    \\n\\n### \\n\\nStep 1: Create a Project on Biconomy[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-1-create-a-project-on-biconomy)\\n\\n1.  Add a Paymaster, in this tutorial we choose Mantle Sepolia network.\\n    \\n2.  Now you can see a Mode screen on the right, choose and enable the `Sponsored`.\\n    \\n3.  Now you need to setup your gas tank, choose your wallet and deposit some MNT testnet token.\\n    \\n4.  Get your Bundler URL from Biconomy Dashboard.\\n    \\n\\n### \\n\\nStep 2: Setup the Gasless Transaction Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-2-setup-the-gasless-transaction-environment)\\n\\nImport the following packages and setup the gasless transaction environment.\\n\\n```\\nimport {Hex, createWalletClient, http, parseEther} from 'viem';\\nimport {privateKeyToAccount} from 'viem/accounts';\\nimport {\\n  createSmartAccountClient,\\n  PaymasterMode,\\n  SupportedSigner,\\n} from '@biconomy/account';\\nimport {mantle, mantleSepoliaTestnet} from 'viem/chains';\\n\\nconst biconomyTestPaymasterApiKey = 'Your Paymaster API Key';\\nconst bundlerTestUrl = 'Your Bundler URL';\\n\\nconst privateKey = '0xxxxxxxx';\\n```\\n\\n### \\n\\nStep 3: Create Biconomy Smart Account Instance[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-3-create-biconomy-smart-account-instance)\\n\\nNow you can create the Biconomy Smart Account Instance.\\n\\n```\\n// ----- 1. Generate EOA from private key\\nconst account = privateKeyToAccount(privateKey as Hex);\\nconst client = createWalletClient({\\n  account,\\n  chain: mantleSepoliaTestnet,\\n  transport: http(),\\n});\\nconst eoa = client.account.address;\\nconsole.log(`EOA address: ${eoa}`);\\n\\n// ------ 2. Create biconomy smart account instance\\nconst smartAccount = await createSmartAccountClient({\\n  signer: client as SupportedSigner,\\n  bundlerUrl: bundlerTestUrl,\\n  biconomyPaymasterApiKey: biconomyTestPaymasterApiKey,\\n});\\nconst scwAddress = await smartAccount.getAccountAddress();\\nconsole.log('SCW Address', scwAddress);\\n```\\n\\nMake sure your smart account has enough MNT tokens to transfer.\\n\\n### \\n\\nStep 4: Generate Transaction Data[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-4-generate-transaction-data)\\n\\n```\\n// ------ 3. Generate transaction data\\nconst txData = {\\n  to,\\n  value: parseEther(amount.toString()),\\n};\\n```\\n\\n### \\n\\nStep 5: Send Gasless Transaction[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-5-send-gasless-transaction)\\n\\n```\\n// ------ 4. Send user operation and get tx hash\\nconst userOpResponse = await smartAccount.sendTransaction(txData, {\\n  paymasterServiceData: {mode: PaymasterMode.SPONSORED},\\n});\\nconst {transactionHash} = await userOpResponse.waitForTxHash();\\nconsole.log('Transaction Hash', transactionHash);\\nconst userOpReceipt = await userOpResponse.wait();\\nif (userOpReceipt.success == 'true') {\\n  console.log('UserOp receipt', userOpReceipt);\\n  console.log('Transaction receipt', userOpReceipt.receipt);\\n}\\n```\\n\\n### \\n\\nStep 6: Verify Transaction[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-6-verify-transaction)\\n\\nRun this function and you can get your EOA address, smart account address and transaction hash, after several seconds you will receive the UserOp receipt which means the transaction was successful.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction\",\n    \"loadedTime\": \"2025-02-15T20:32:08.321Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction\",\n    \"title\": \"Account Abstraction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Account Abstraction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/oS8jFQdUaBE6Z0A63fBr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODA4ZDUzYWQtNzNmNC00NDk4LWJhNjYtNzM2OWVjYzc1ZDgx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ua2sFp8wdmkxBMzdol%2FQkTVvvSNeBaMQW4JMnakIkSxIfrhZ%2BOdN9Za%2BXGF%2BZkVVP54Gb26WtL2fL3kbgWTppvffOjziWumTX3RrmFVkWYQcLGDEGRihc2A4Uvhu47kdGxV4vnLRm7vkxDy7ojEH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bcb9679c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Account Abstraction | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Account Abstraction | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/resources-and-tooling/account-abstraction?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/create-a-smart-account-by-using-etherspot\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/create-a-smart-account-by-using-etherspot\",\n    \"loadedTime\": \"2025-02-15T20:32:09.295Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/create-a-smart-account-by-using-etherspot\",\n    \"title\": \"Create a Smart Account by using Etherspot | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Create a Smart Account by using Etherspot | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/X2mSEwtQoK0cXIXqLQz3\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODgyMzExZTAtZjJjOC00Mzc5LWE0YzgtNjA0MzQ5YTExN2Ey' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=wFJtHggwaTy%2BMK9hem6jS3epjJdPuofPQAn%2Bc4ZTzOuksbVoNEg3Yn%2BufXFK%2BSa6Aw5Rted8dH7ROqitSDuRoMeKoF31mRkm5pW1206n%2BQY5MRtQ451iPnrpqhUSGNz1Z%2FF0itjfRI8vk1KzUD3w\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810c8a9b09c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Create a Smart Account by using Etherspot\\nPrerequisites​\\nBefore you start, ensure you have the following:\\nBasic Knowledge: Familiarity with Ethereum and smart contracts.\\nDevelopment Environment: Node.js and npm installed\\nFramework: React Native\\nCode Tutorial​\\nIn this tutorial, we’ll get set up with the very basics of using the Prime SDK.\\nWe’ll set up a React app, install the Etherspot Prime SDK, and create an Etherspot smart contract wallet.\\nStart by creating a react app like this:\\nnpx create-react-app etherspot-starter\\nThen enter the directory and install the Etherspot Prime SDK and Ethers.\\ncd etherspot-starter/ npm i @etherspot/prime-sdk --save npm i ethers --save\\nNow open the code in your editor, and open up App.js.\\nPaste in the following code:\\n'use client'; import React from 'react'; import {PrimeSdk} from '@etherspot/prime-sdk'; import {ethers} from 'ethers'; import './App.css'; const App = () => { const [etherspotWalletAddress, setEtherspotWalletAddress] = React.useState( '0x0000000000000000000000000000000000000000', ); const [eoaWalletAddress, setEoaWalletAddress] = React.useState( '0x0000000000000000000000000000000000000000', ); const [eoaPrivateKey, setEoaPrivateKey] = React.useState(''); const generateRandomEOA = async () => { // Create random EOA wallet const randomWallet = ethers.Wallet.createRandom(); setEoaWalletAddress(randomWallet.address); setEoaPrivateKey(randomWallet.privateKey); }; const generateEtherspotWallet = async () => { // Initialise Etherspot SDK const primeSdk = new PrimeSdk( {privateKey: eoaPrivateKey}, {chainId: 5000, projectKey: ''}, ); const address = await primeSdk.getCounterFactualAddress(); setEtherspotWalletAddress(address); console.log('\\\\x1b[33m%s\\\\x1b[0m', `EtherspotWallet address: ${address}`); }; return ( <div className=\\\"App-header\\\"> <h1 className=\\\"App-title\\\">Getting started with Etherspot Prime</h1> <p> {' '} To initialise the SDK, it requires a Key Based Wallet(KBW) to be passed in. </p> <button className=\\\"App-button\\\" onClick={() => generateRandomEOA()}> First click here to generate a random KBW. </button> <a target=\\\"_blank\\\" href={'https://mantlescan.info/address/' + eoaWalletAddress}> KBW Address: {eoaWalletAddress} </a> <p> Now we can intialise the SDK with this address as the owner, and create an Etherspot smart contract wallet. </p> <button onClick={() => generateEtherspotWallet()}> Generate Etherspot Smart Contract Wallet </button> <a target=\\\"_blank\\\" href={'https://mantlescan.info/address/' + etherspotWalletAddress}> Etherspot Smart Account Address: {etherspotWalletAddress} </a> <p> <a target=\\\"_blank\\\" href=\\\"https://etherspot.fyi/prime-sdk/intro\\\"> Now you have a wallet created on Mantle you can explore what else we can do with the Prime SDK. </a> </p> </div> ); }; export default App;\\nAnd that’s it! We’ve now created a random key-based wallet on Mantle on page load, and then using this KBW we pass it into the Etherspot Prime SDK, creating an Etherspot Smart Contract Wallet.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Create a Smart Account by using Etherspot\\n\\n## \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/etherspot#prerequisites)\\n\\nBefore you start, ensure you have the following:\\n\\n1.  Basic Knowledge: Familiarity with Ethereum and smart contracts.\\n    \\n2.  Development Environment: Node.js and npm installed\\n    \\n3.  Framework: React Native\\n    \\n\\n## \\n\\nCode Tutorial[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/etherspot#code-tutorial)\\n\\nIn this tutorial, we’ll get set up with the very basics of using the [Prime SDK](https://etherspot.fyi/prime-sdk/instantiation).\\n\\nWe’ll set up a React app, install the Etherspot Prime SDK, and create an Etherspot smart contract wallet.\\n\\nStart by creating a react app like this:\\n\\n```\\nnpx create-react-app etherspot-starter\\n```\\n\\nThen enter the directory and install the Etherspot Prime SDK and Ethers.\\n\\n```\\ncd etherspot-starter/\\nnpm i @etherspot/prime-sdk --save\\nnpm i ethers --save\\n```\\n\\nNow open the code in your editor, and open up App.js.\\n\\nPaste in the following code:\\n\\n```\\n'use client';\\n\\nimport React from 'react';\\nimport {PrimeSdk} from '@etherspot/prime-sdk';\\nimport {ethers} from 'ethers';\\nimport './App.css';\\n\\nconst App = () => {\\n  const [etherspotWalletAddress, setEtherspotWalletAddress] = React.useState(\\n    '0x0000000000000000000000000000000000000000',\\n  );\\n  const [eoaWalletAddress, setEoaWalletAddress] = React.useState(\\n    '0x0000000000000000000000000000000000000000',\\n  );\\n  const [eoaPrivateKey, setEoaPrivateKey] = React.useState('');\\n\\n  const generateRandomEOA = async () => {\\n    // Create random EOA wallet\\n    const randomWallet = ethers.Wallet.createRandom();\\n    setEoaWalletAddress(randomWallet.address);\\n    setEoaPrivateKey(randomWallet.privateKey);\\n  };\\n\\n  const generateEtherspotWallet = async () => {\\n    // Initialise Etherspot SDK\\n    const primeSdk = new PrimeSdk(\\n      {privateKey: eoaPrivateKey},\\n      {chainId: 5000, projectKey: ''},\\n    );\\n    const address = await primeSdk.getCounterFactualAddress();\\n    setEtherspotWalletAddress(address);\\n    console.log('\\\\x1b[33m%s\\\\x1b[0m', `EtherspotWallet address: ${address}`);\\n  };\\n\\n  return (\\n    <div className=\\\"App-header\\\">\\n      <h1 className=\\\"App-title\\\">Getting started with Etherspot Prime</h1>\\n\\n      <p>\\n        {' '}\\n        To initialise the SDK, it requires a Key Based Wallet(KBW) to be passed in.\\n      </p>\\n\\n      <button className=\\\"App-button\\\" onClick={() => generateRandomEOA()}>\\n        First click here to generate a random KBW.\\n      </button>\\n      <a\\n        target=\\\"_blank\\\"\\n        href={'https://mantlescan.info/address/' + eoaWalletAddress}>\\n        KBW Address: {eoaWalletAddress}\\n      </a>\\n\\n      <p>\\n        Now we can intialise the SDK with this address as the owner, and create\\n        an Etherspot smart contract wallet.\\n      </p>\\n\\n      <button onClick={() => generateEtherspotWallet()}>\\n        Generate Etherspot Smart Contract Wallet\\n      </button>\\n      <a\\n        target=\\\"_blank\\\"\\n        href={'https://mantlescan.info/address/' + etherspotWalletAddress}>\\n        Etherspot Smart Account Address: {etherspotWalletAddress}\\n      </a>\\n\\n      <p>\\n        <a target=\\\"_blank\\\" href=\\\"https://etherspot.fyi/prime-sdk/intro\\\">\\n          Now you have a wallet created on Mantle you can explore what else we\\n          can do with the Prime SDK.\\n        </a>\\n      </p>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n```\\n\\nAnd that’s it! We’ve now created a random key-based wallet on Mantle on page load, and then using this KBW we pass it into the Etherspot Prime SDK, creating an Etherspot Smart Contract Wallet.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support\",\n    \"loadedTime\": \"2025-02-15T20:32:09.673Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support\",\n    \"title\": \"EIP-1559 Support | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"EIP-1559 Support | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/XF16cr1pP7q6SwCN95gJ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDM5N2E0ZjgtYTc1YS00NTM5LThmZDQtZWVjODc1NmUyMTA5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xym6SnB%2F8IAQUVYBEuVhFTCPow9Slt4UlCK8X0gZovRmsE%2BsDTUh7AdMGzYoKnLG3ZvhkyctBM0QNM383IVapv7eMSIKMs65yomscyif5F%2B9FJTZDxTXTnU5fNI2KvP0An8vdhKKXJccwr9bXpCy\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ca7beb9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"EIP-1559 Support | Network\\nEIP-1559 is an upgrade proposal put forth by the Ethereum community, aiming to address network security issues by adjusting the structure of transaction fees. The core idea of this proposal is to burn transaction fees while providing miners (or proof-of-stake validators) with a more reliable permanent block reward, thus creating a more effective incentive mechanism.\\nAnalysis of Factors Affecting Fees​\\nIn EIP-1559, the composition of transaction fees undergoes significant changes with the introduction of BASEFEE and GasTipCap (or MaxPriorityFeePerGas), along with the addition of GasFeeCap to ensure transaction security. The Ethereum protocol dynamically adjusts BASEFEE based on network congestion, resolving potential security risks associated with external price discovery in transaction packing by burning all BASEFEE.\\nWhy Was EIP-1559 Introduced​\\nThe introduction of EIP-1559 aims to address the following issues:\\nInefficient price auctions: The use of price auctions for different network congestion scenarios leads to inefficiency, and fee estimation is highly inaccurate.\\nInconsistent block utilization: The native fee design results in inconsistent block utilization. EIP-1559 allows for the adjustment of block utilization, enabling a longer-term average block size limit.\\nEnhancing network security: Additional incentives (GasTipCap) help eliminate validators' dependence on block rewards, thereby strengthening network security.\\nApplication of EIP-1559 in Mantle v2 Tectonic​\\nIn Mantle v2 Tectonic, we have made the following adjustments to BASEFEE and GasTipCap:\\nBASEFEE Adjustment Mechanism:\\nThe BASEFEE for Mantle L2 is a system parameter set through the SystemConfig contract on Ethereum L1 and synchronized to Mantle L2. You can check it here - currently, the L2 BaseFee is fixed at 20,000,000 wei (0.02 gwei).\\nBASEFEE will no longer burn and will be collected in BaseFeeVault while supporting withdrawal to L1.\\nGasTipCap Adjustment Mechanism:\\nIn each transaction, take the smallest value of GasTip and (GasFeeCap - BaseFee) and multiply it by gasUsed as an award to the validator, have it collected in SequencerFeeVault, and support withdrawal to L1.\\nMantle v2 Tectonic, in an effort to further reduce fees, chose the FIFO method of transaction sequencing to minimize the impact of priorityfee.\\nThrough these adjustments, Mantle v2 Tectonic builds on EIP-1559 to provide a more flexible and efficient transaction fee management mechanism.\\nMantle v2 Tectonic sets a very low BASEFEE, we also recommend that you set the MaxPriorityFeePerGas of your EIP-1559 transactions to 0, so that your transaction fees will be very low! \\nLast updated 2 months ago\",\n  \"markdown\": \"# EIP-1559 Support | Network\\n\\n[EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) is an upgrade proposal put forth by the Ethereum community, aiming to address network security issues by adjusting the structure of transaction fees. The core idea of this proposal is to burn transaction fees while providing miners (or proof-of-stake validators) with a more reliable permanent block reward, thus creating a more effective incentive mechanism.\\n\\n## \\n\\nAnalysis of Factors Affecting Fees[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/eip-1559#analysis-of-factors-affecting-fees)\\n\\nIn EIP-1559, the composition of transaction fees undergoes significant changes with the introduction of `BASEFEE` and `GasTipCap` (or `MaxPriorityFeePerGas`), along with the addition of `GasFeeCap` to ensure transaction security. The Ethereum protocol dynamically adjusts `BASEFEE` based on network congestion, resolving potential security risks associated with external price discovery in transaction packing by burning all `BASEFEE`.\\n\\n## \\n\\nWhy Was EIP-1559 Introduced[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/eip-1559#why-was-eip-1559-introduced)\\n\\nThe introduction of EIP-1559 aims to address the following issues:\\n\\n*   **Inefficient price auctions**: The use of price auctions for different network congestion scenarios leads to inefficiency, and fee estimation is highly inaccurate.\\n    \\n*   **Inconsistent block utilization**: The native fee design results in inconsistent block utilization. EIP-1559 allows for the adjustment of block utilization, enabling a longer-term average block size limit.\\n    \\n*   **Enhancing network security**: Additional incentives (`GasTipCap`) help eliminate validators' dependence on block rewards, thereby strengthening network security.\\n    \\n\\n## \\n\\nApplication of EIP-1559 in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/eip-1559#application-of-eip-1559-in-mantle-v2-tectonic)\\n\\nIn Mantle v2 Tectonic, we have made the following adjustments to `BASEFEE` and `GasTipCap`:\\n\\n*   `**BASEFEE**` **Adjustment Mechanism**:\\n    \\n    *   The `BASEFEE` for Mantle L2 is a system parameter set through the [`SystemConfig`](https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction#systemconfigproxy) contract on Ethereum L1 and synchronized to Mantle L2. You can check it [here](https://etherscan.io/address/0x427Ea0710FA5252057F0D88274f7aeb308386cAf#readProxyContract#F3) - currently, the L2 BaseFee is fixed at 20,000,000 wei (0.02 gwei).\\n        \\n    *   `BASEFEE` will no longer burn and will be collected in [BaseFeeVault](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/predeploys.md#basefeevault) while supporting withdrawal to L1.\\n        \\n    \\n*   `**GasTipCap**` **Adjustment Mechanism**:\\n    \\n    *   In each transaction, take the smallest value of `GasTip` and `(GasFeeCap - BaseFee)` and multiply it by `gasUsed` as an award to the validator, have it collected in [SequencerFeeVault](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/predeploys.md#sequencerfeevault), and support withdrawal to L1.\\n        \\n    *   Mantle v2 Tectonic, in an effort to further reduce fees, chose the [FIFO](https://en.wikipedia.org/wiki/FIFO) method of transaction sequencing to minimize the impact of `priorityfee`.\\n        \\n    \\n\\nThrough these adjustments, Mantle v2 Tectonic builds on EIP-1559 to provide a more flexible and efficient transaction fee management mechanism.\\n\\nMantle v2 Tectonic sets a very low `BASEFEE`, we also recommend that you set the `MaxPriorityFeePerGas` of your EIP-1559 transactions to 0, so that your transaction fees will be very low!\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0\",\n    \"loadedTime\": \"2025-02-15T20:32:10.003Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0\",\n    \"title\": \"Testnet (v1.1.0) | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet (v1.1.0) | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/CL0OTpMQddRXx9aUCrS5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmI3MDVhYmMtNTIwMS00ZWM3LTljNzgtNDAxN2UzOGNkYWI4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=PIyWbxJ9tEfs0kdXa2QLXG4ua2bPQIKhb%2F%2FvFqVOQXk%2Fx%2FcXqlD%2B5MJs8NPwfn64YhW9cafn5aEdz0vqGeDJl3REu1g%2FU32sh38%2BoimjHk915acg6biXsJktfM5tPO%2B7lr%2BHFbJVQFba1zJvvHNQ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810cc9e969c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Testnet (v1.1.0) | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Testnet (v1.1.0) | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-node-operators/deployment-guides/testnet-v1.1.0?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet\",\n    \"loadedTime\": \"2025-02-15T20:32:10.371Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet\",\n    \"title\": \"Wallet | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Wallet | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/JDnKUz9WSGdmqFjdsVa0\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGFkOTA5MTgtOTVjNS00MzZjLWEyMmEtMDc1ODFiNDQ3OTg1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ngfrxJKbeX6n3Re0MV5%2FCc%2FjdygB6eAoDa6RXWONnlh5qt14bIOhIBRNlLV3qvLaxGuzw5DD5VJpsEd2drJqdJOJxdSODzkU6bMez%2B09q01xzcX2sM4J91sXCcC7az505VG1eiB2bhBbUeRbmxO1\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ceb9439c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Wallet | Network\\nMantle supports multiple wallets for interacting with the network.\\nReown​\\nReown (formerly WalletConnect Inc.) is an onchain UX platform providing toolkits (AppKit and WalletKit) that help builders create intuitive, secure, and seamless Web3 experiences. Check more details here.\\nMultisig Wallet​\\nMultisig wallet is a wallet that can be used to sign transactions with multiple signers. This is useful when you cooperate with multiple people in your project and also increase the decentralization of your project. Mantle also supports this important feature. Check more details here.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Wallet | Network\\n\\nMantle supports multiple wallets for interacting with the network.\\n\\n## \\n\\nReown[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/wallet/overview#web3modal)\\n\\nReown (formerly WalletConnect Inc.) is an onchain UX platform providing toolkits (AppKit and WalletKit) that help builders create intuitive, secure, and seamless Web3 experiences. Check more details [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown).\\n\\n## \\n\\nMultisig Wallet[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/wallet/overview#multisig-wallet)\\n\\nMultisig wallet is a wallet that can be used to sign transactions with multiple signers. This is useful when you cooperate with multiple people in your project and also increase the decentralization of your project. Mantle also supports this important feature. Check more details [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wallet).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management\",\n    \"loadedTime\": \"2025-02-15T20:32:10.471Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management\",\n    \"title\": \"Risk Management | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Risk Management | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/aallqws1j9qh8fbOVACe\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGViNDlkOWItYWRkOS00MGY2LWFlYmEtZTY0Y2NkMDQ5YjM4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Gi7P3RCa6xLOR0AoLbElo7LdciPBNOuIBGYzJyM0EhEyhuvK93g8GCaEaKFQuicphQK5gex4kEvUWYihI6Vgg6AKtazrDTWcWp8mF4WFsHb4LE5PEtwgayH4wW5EUcb6sht6gGBeFKR4dkx1UBKj\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810cfbc36c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Risk Management | Network\\nMantle Network is dedicated to providing a secure and reliable layer-2 (L2) scaling solution, with strong risk control being a crucial safeguard. In Mantle's risk analysis comprises three key aspects: Data Availability, Fraud Proofs, and Forced Transaction Inclusion.\\n1. Data Availability​\\nMantle Network ensures the cornerstone of system security by guaranteeing the availability of data. Through innovative data availability solutions, we ensure the secure availability of data during the process of data transfer between the L2 execution layer and layer 1 (L1). This mechanism not only enhances network stability, but also provides users and developers with a more trustworthy data guarantee.\\n2. Fraud Proofs​\\nMantle Network addresses potential fraudulent activities by introducing the concept of Fraud Proofs. Throughout the entire transaction process, the system actively monitors and verifies the consistency of data. Any attempts to tamper with or forge data are detected by the system and handled accordingly. This ensures the security and fairness of the system, providing users with a secure trading environment.\\n3. Forced Transaction Inclusion​\\nTo further enhance system security, Mantle Network has designed the Forced Transaction Inclusion mechanism. In extreme situations where the system encounters insurmountable issues, the Forced Transaction Inclusion allows a quick and secure rollback to L1, ensuring the safety of user assets. This design provides the system with an emergency rescue mechanism, enabling it to confront unpredictable threats at any time.\\nThrough these three key aspects of security assurance, Mantle Network has constructed a robust counter-risk model, offering users and developers a trustworthy L2 scaling solution and driving the healthy development of the entire decentralized ecosystem.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Risk Management | Network\\n\\nMantle Network is dedicated to providing a secure and reliable layer-2 (L2) scaling solution, with strong risk control being a crucial safeguard. In Mantle's risk analysis comprises three key aspects: **Data Availability**, **Fraud Proofs**, and **Forced Transaction Inclusion**.\\n\\n## \\n\\n1\\\\. Data Availability[​](https://docs-v2.mantle.xyz/intro/risk-management/overviews#1-data-availability)\\n\\nMantle Network ensures the cornerstone of system security by guaranteeing the availability of data. Through innovative data availability solutions, we ensure the secure availability of data during the process of data transfer between the L2 execution layer and layer 1 (L1). This mechanism not only enhances network stability, but also provides users and developers with a more trustworthy data guarantee.\\n\\n## \\n\\n2\\\\. Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/overviews#2-fraud-proofs)\\n\\nMantle Network addresses potential fraudulent activities by introducing the concept of [Fraud Proofs](https://docs.mantle.xyz/network/more/glossary#fraud-proof--fault-proof). Throughout the entire transaction process, the system actively monitors and verifies the consistency of data. Any attempts to tamper with or forge data are detected by the system and handled accordingly. This ensures the security and fairness of the system, providing users with a secure trading environment.\\n\\n## \\n\\n3\\\\. Forced Transaction Inclusion[​](https://docs-v2.mantle.xyz/intro/risk-management/overviews#3-forced-transaction-inclusion)\\n\\nTo further enhance system security, Mantle Network has designed the Forced Transaction Inclusion mechanism. In extreme situations where the system encounters insurmountable issues, the Forced Transaction Inclusion allows a quick and secure rollback to L1, ensuring the safety of user assets. This design provides the system with an emergency rescue mechanism, enabling it to confront unpredictable threats at any time.\\n\\nThrough these three key aspects of security assurance, Mantle Network has constructed a robust counter-risk model, offering users and developers a trustworthy L2 scaling solution and driving the healthy development of the entire decentralized ecosystem.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees\",\n    \"loadedTime\": \"2025-02-15T20:32:10.303Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees\",\n    \"title\": \"Estimate Fees | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Estimate Fees | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/XyXnyhkFy8E1WLzg0MHl\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OTNmMTRmYjgtYmIyNS00MTZjLTg0YjEtNDg4NDQyNDdhYzM1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=fTcyCqNLrJALo7zyuwJAt8OA3xMtYc%2FaPQnAiLN1V9Ftf2TMD1SvUFtnomzSWJAludvEib5DXQi39HRBSyAGAcJ9sMy0XdqbQEWIVl%2Be43sADbO2WTmzjBD9KhjQBbaVe8Rr8raK9IpkRfNzYuvv\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810cb79562d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Estimate Fees | Network\\nEstimate Fees in Mantle v2 Tectonic​\\nConcerning the selection of the gas fee token on layer 2 (L2), Mantle v2 Tectonic departs from the conventional ETH solution adopted by most rollups, and employs MNT instead. This introduces a variable called tokenRatio for dynamic adjustment of gas fees. The overall gas fee calculation is as follows:\\nL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\nLet's break down the variables involved. Both scalar and overhead are retrieved from the BVM_GasPriceOracle contract, while L1gasPrice can be obtained from layer 1 (L1). tokenRatio is a variable updated through an external Oracle contract, which you can fetch from the BVM_GasPriceOracle contract. Therefore, obtaining L2gasPrice and rollupDataGas allows the calculation of a suitable gasLimit.\\nWhy is a suitable gasLimit necessary?\\nDetermining an appropriate gasLimit is crucial. If the gasLimit is set too low, the transaction may fail to execute. If set too high, the computed upfront transaction fee might exceed the user's balance, leading to insufficient funds. Additionally, setting a high gasLimit may discourage validators from including the transaction in a block, as validators tend to prefer including more transactions with lower gasLimit within the fixed block gasLimit. Therefore, estimating the fee is a pivotal step.\\nThe L2 block gasLimit for Mantle can be checked here, currently set at 200,000,000,000.\\nHow to Obtain Parameters forBVM_GasPriceOracle​\\noverhead​\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'overhead()(uint256)'\\nscalar​\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'scalar()(uint256)'\\nYou need to divide the value you get by 1,000,000 to get the true scalar value. For example, if the value you get is 10,000, you need to divide it by 1,000,000 to get 0.01.\\ntokenRatio​\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'tokenRatio()(uint256)'\\nL1gasPrice​\\nAlso known as L1BaseFee.\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'l1BaseFee()(uint256)'\\nHow to Obtain L2 gasPrice​\\nDifferent transaction types, such as Legacy and EIP-1559 transactions, require distinct handling. For detailed information, please refer to this.\\nHow to Obtain rollupDataGas​\\nIt's essential to note that rollupDataGas is not constructed during the estimateGas process in the OP Stack codebase. Thus, an interface is needed to estimate the cost. Mantle addresses this by constructing rollupDataGas and introducing a constant to cover V, R, S signatures, and other data, ensuring that the estimateGas's gasLimit covers L1 costs.\\nWe provide interfaces that return L1GasUsed data directly, i.e., the sum of (rollupDataGas + overhead)\\n# _data is rlp-encoded data of the signed tx cast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'getL1GasUsed(_data)(uint256)'\\nIf you want to learn more, please refer to this.\\nEnsuring transaction success​\\nestimateGas provides only an estimate. To prevent transaction failure due to insufficient gas fees, Mantle Network internally magnifies the estimate by a factor, ensuring the correct execution of transactions.\\nWhy Do We Need to UseestimateGas​\\nThe cost of fees on L1 is difficult to predict accurately due to the influence of L1 gasPrice, therefore, in Mantle v1, the estimateGas function only returns an estimate of the L2 gas fee. However, in Mantle v2 Tectonic, we have addressed this issue by providing an optimized solution. The estimateGas interface now returns an estimate of the total gas fee, including both L1 and L2 costs. Consequently, when constructing transactions, adjustments need to be made to accommodate this optimization. We encourage all transactions to first call estimateGas to obtain an estimate of the gas fee before construction.\\nExample​\\nHere is an example illustrating the difference in gasLimit settings for transaction construction between Mantle v1 and Mantle v2 Tectonic.\\nIn Mantle v1, the gasUsed on a typical native token transfer on L2 is a fixed value (21,000), so developers might opt to skip calling estimateGas and set it to a fixed value.\\nHowever, in Mantle v2 Tectonic, the gasLimit that developers need to set when constructing transactions will include both L1 and L2 components, so without calling estimateGas and setting it to a fixed value may result in transaction failures.\\nTo avoid transaction failures, we recommend calling estimateGas when constructing transactions to obtain an estimate of the gas fee.\\nIf you want to do estimateGas with the Mantle SDK, here's a demo.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Estimate Fees | Network\\n\\n## \\n\\nEstimate Fees in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#estimate-fees-in-mantle-v2-tectonic)\\n\\nConcerning the selection of the gas fee token on layer 2 (L2), Mantle v2 Tectonic departs from the conventional ETH solution adopted by most rollups, and employs MNT instead. This introduces a variable called [`tokenRatio`](https://docs.mantle.xyz/network/system-information/fee-mechanism#control-of-tokenratio) for dynamic adjustment of gas fees. The overall gas fee calculation is as follows:\\n\\nL2ExecutionFee\\\\=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\n\\nL1RollupFee\\\\=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\n\\nLet's break down the variables involved. Both `scalar` and `overhead` are retrieved from the [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract, while `L1gasPrice` can be obtained from layer 1 (L1). `tokenRatio` is a variable updated through an external Oracle contract, which you can fetch from the [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract. Therefore, obtaining `L2gasPrice` and `rollupDataGas` allows the calculation of a suitable `gasLimit`.\\n\\n**Why is a suitable gasLimit necessary?**\\n\\nDetermining an appropriate `gasLimit` is crucial. If the `gasLimit` is set too low, the transaction may fail to execute. If set too high, the computed upfront transaction fee might exceed the user's balance, leading to insufficient funds. Additionally, setting a high `gasLimit` may discourage validators from including the transaction in a block, as validators tend to prefer including more transactions with lower `gasLimit` within the fixed block `gasLimit`. Therefore, estimating the fee is a pivotal step.\\n\\nThe L2 block gasLimit for Mantle can be checked [here](https://etherscan.io/address/0x427Ea0710FA5252057F0D88274f7aeb308386cAf#readProxyContract#F5), currently set at 200,000,000,000.\\n\\n### \\n\\nHow to Obtain Parameters for`BVM_GasPriceOracle`[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#how-to-obtain-parameters-for-bvm_gaspriceoracle)\\n\\n#### \\n\\n`**overhead**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#overhead)\\n\\n```\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'overhead()(uint256)'\\n```\\n\\n#### \\n\\n`**scalar**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#scalar)\\n\\n```\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'scalar()(uint256)'\\n```\\n\\nYou need to divide the value you get by `1,000,000` to get the true scalar value. For example, if the value you get is `10,000`, you need to divide it by `1,000,000` to get `0.01`.\\n\\n#### \\n\\n`**tokenRatio**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#tokenratio)\\n\\n```\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'tokenRatio()(uint256)'\\n```\\n\\n#### \\n\\n`**L1gasPrice**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#l1gasprice)\\n\\nAlso known as `L1BaseFee`.\\n\\n```\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'l1BaseFee()(uint256)'\\n```\\n\\n### \\n\\nHow to Obtain L2 gasPrice[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#how-to-obtain-l2-gasprice)\\n\\nDifferent transaction types, such as Legacy and EIP-1559 transactions, require distinct handling. For detailed information, please refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism#l2-gasprice-depends-on-the-transaction-type).\\n\\n### \\n\\nHow to Obtain rollupDataGas[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#how-to-obtain-rollupdatagas)\\n\\nIt's essential to note that `rollupDataGas` is not constructed during the `estimateGas` process in the OP Stack codebase. Thus, an interface is needed to estimate the cost. Mantle addresses this by constructing `rollupDataGas` and introducing a constant to cover `V`, `R`, `S` signatures, and other data, ensuring that the `estimateGas`'s `gasLimit` covers L1 costs.\\n\\nWe provide interfaces that return `L1GasUsed` data directly, i.e., the sum of `(rollupDataGas + overhead)`\\n\\n```\\n# _data is rlp-encoded data of the signed tx\\n\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'getL1GasUsed(_data)(uint256)'\\n```\\n\\nIf you want to learn more, please refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism#rollupdatagascalculation).\\n\\n### \\n\\nEnsuring transaction success[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#ensuring-transaction-success)\\n\\n`estimateGas` provides only an estimate. To prevent transaction failure due to insufficient gas fees, Mantle Network internally magnifies the estimate by a factor, ensuring the correct execution of transactions.\\n\\n## \\n\\nWhy Do We Need to Use`estimateGas`[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#why-we-need-to-use-estimategas)\\n\\nThe cost of fees on L1 is difficult to predict accurately due to the influence of L1 gasPrice, therefore, in Mantle v1, the `estimateGas` function only returns an estimate of the L2 gas fee. However, in Mantle v2 Tectonic, we have addressed this issue by providing an optimized solution. The `estimateGas` interface now returns an estimate of the total gas fee, including both L1 and L2 costs. Consequently, when constructing transactions, adjustments need to be made to accommodate this optimization. We encourage all transactions to first call `estimateGas` to obtain an estimate of the gas fee before construction.\\n\\n### \\n\\nExample[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#example)\\n\\nHere is an example illustrating the difference in `gasLimit` settings for transaction construction between Mantle v1 and Mantle v2 Tectonic.\\n\\nIn Mantle v1, the `gasUsed` on a typical native token transfer on L2 is a fixed value (21,000), so developers might opt to skip calling `estimateGas` and set it to a fixed value.\\n\\nHowever, in Mantle v2 Tectonic, the `gasLimit` that developers need to set when constructing transactions will include both L1 and L2 components, so without calling `estimateGas` and setting it to a fixed value may result in transaction failures.\\n\\n**To avoid transaction failures, we recommend calling** `**estimateGas**` **when constructing transactions to obtain an estimate of the gas fee.**\\n\\nIf you want to do `estimateGas` with the Mantle SDK, here's a [demo](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/sdk-estimate-gas).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/social-login-by-using-particle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/social-login-by-using-particle\",\n    \"loadedTime\": \"2025-02-15T20:32:11.156Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/social-login-by-using-particle\",\n    \"title\": \"Social Login by Using Particle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Social Login by Using Particle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/KrDpngGISFcgZPFHPMiP\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDc2MjFiYzctOWM2MS00NGQxLWI3OWMtZmQ3NDBjNWI2MTVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jj3SB%2Bt5qRTB0%2FQIZqyFI5P4u%2FO0fbos3fXS%2Fwl9zXvjT%2BY7vVbVpG1A2n%2B1r0QRX6kChYLlyZqVlG%2BMyiFAAEOBhnnzwV0Vxd8AuesE9slvqabzywZS1EbyYVhX0rbWl00r4HgzVZqt8D7R1gBV\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ceddd6a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Social Login by Using Particle\\nParticle Network offers Wallet Abstraction services through its Account Abstraction stack, optimizing user onboarding with a set of SDKs. Comment Edit from here\\nIntegrating customizable modules for Externally Owned Accounts (EOA) and Account Abstraction (AA), Particle facilitates quick onboarding in just 2-clicks via social login options like Google, email, and phone, alongside traditional Web3 login methods.\\nParticle Network is compatible with Mantle Mainnet and Testnet, supporting EOA interactions and native ERC-4337 via implementations like SimpleAccount, Biconomy V2, and Cyber Connect.\\nThis tutorial guides you through the steps for building a demo application on Mantle Sepolia using the Particle Connect SDK — Particle's flagship onboarding SDK. The Particle Connect SDK enables quick 2-click onboarding with social and Web3 login options in a single modal. In this demo, we'll onboard users through a SimpleAccount instance of a smart account via social login and execute a gasless (sponsored) transaction.\\nGetting Started \\nThis tutorial is based on a Next.js app with TypeScript and Tailwind CSS to demonstrate wallet creation on Mantle using social logins.\\nThe Particle Connect SDK simplifies wallet creation, user authentication, and blockchain interactions, providing a streamlined interface that supports social logins and traditional Web3 wallets.\\nPrerequisites \\nTo integrate Particle Connect into your Mantle application, you'll need just a few dependencies. Particle Connect includes built-in Account Abstraction (AA) support, but in this example, we’ll also install the Particle AA SDK to use EIP-1193 providers like ethers.\\nyarn add @particle-network/connectkit viem@^2 @particle-network/aa ethers\\nConfiguring the Particle Dashboard \\nTo get started with the setup, visit the Particle dashboard to retrieve three essential values for your project.\\nWhen using any Particle Network SDK, you'll need a projectId, clientKey, and appId to authenticate your project and establish a connection between your Particle Auth instance and the Particle dashboard. This setup allows you to customize in-app modals, track users, manage your Paymaster funds, and more.\\nOnce you're in the Particle dashboard, follow these steps:\\nGo to Add New Project to create a new project.\\nChoose a name and domain for your app. You can use a placeholder here if you haven't finalized your deployment domain.\\nCopy your Project ID, Client Key, and App ID.\\nFor security, it's best to store these values in a .env file in this format:\\nNEXT_PUBLIC_PROJECT_ID='PROJECT_ID' NEXT_PUBLIC_CLIENT_KEY='CLIENT_KEY' NEXT_PUBLIC_APP_ID='APP_ID' NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID='WALLETCONNECT_PROJECT_ID'\\nConfiguring Particle Connect \\nFirst, let’s configure and initialize Particle Connect. Create a new file called ConnectKit.tsx in your src directory. In this file, we’ll define the ParticleConnectKit component, which wraps the configured ConnectKitProvider instance and acts as the primary interface for handling configuration.\\n\\\"use client\\\"; import React from \\\"react\\\"; import { ConnectKitProvider, createConfig } from \\\"@particle-network/connectkit\\\"; import { authWalletConnectors } from \\\"@particle-network/connectkit/auth\\\"; import { evmWalletConnectors } from \\\"@particle-network/connectkit/evm\\\"; import { mantleSepoliaTestnet } from \\\"@particle-network/connectkit/chains\\\"; import { wallet, EntryPosition } from \\\"@particle-network/connectkit/wallet\\\"; import { aa } from \\\"@particle-network/connectkit/aa\\\"; const config = createConfig({ projectId: process.env.NEXT_PUBLIC_PROJECT_ID!, clientKey: process.env.NEXT_PUBLIC_CLIENT_KEY!, appId: process.env.NEXT_PUBLIC_APP_ID!, walletConnectors: [ authWalletConnectors({}), // Social logins // Default Web3 logins evmWalletConnectors({ walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID, // optional, retrieved from https://cloud.walletconnect.com }), ], plugins: [ wallet({ entryPosition: EntryPosition.BR, // Positions the modal button at the bottom right on login visible: true, // Determines if the wallet modal is displayed }), aa({ name: \\\"SIMPLE\\\", version: \\\"2.0.0\\\", }), ], chains: [mantleSepoliaTestnet], }); export const ParticleConnectkit = ({ children }: React.PropsWithChildren) => { return <ConnectKitProvider config={config}>{children}</ConnectKitProvider>; };\\nThis code configures Particle Connect to enable wallet authentication and blockchain interactions on Mantle Sepolia. It supports social logins and standard Web3 options via WalletConnect and includes Account Abstraction (AA) with a simpleAccount instance, version 2.0.0. The configured ConnectKitProvider component wraps the app’s content, ensuring this setup is accessible throughout the application.\\nIntegrate Particle Connect in Your App \\nAfter configuration, wrap your application with the ParticleConnectKit component to provide access to the Particle Connect SDK across the app. Update the layout.tsx file in the src directory as follows:\\nimport { ParticleConnectkit } from \\\"@/components/Connectkit\\\"; import type { Metadata } from \\\"next\\\"; import { Inter } from \\\"next/font/google\\\"; import \\\"./globals.css\\\"; const inter = Inter({ subsets: [\\\"latin\\\"] }); export const metadata: Metadata = { title: \\\"Particle Connectkit App\\\", description: \\\"Generated by create next app\\\", }; export default function RootLayout({ children, }: Readonly<{ children: React.ReactNode; }>) { return ( <html lang=\\\"en\\\"> <body className={inter.className}> <ParticleConnectkit>{children}</ParticleConnectkit> </body> </html> ); }\\nBuilding the Application \\nWith your project set up, dependencies installed, and Particle Connect configured, you can start building in the page.tsx file.\\nIn page.tsx, you’ll define the core features: login flow, data visualization, transaction handling, and the UI.\\nConnecting the Wallet \\nWith layout.tsx set up, the next step is to add a main Connect Wallet button for user login. Import ConnectButton from @particle-network/connectkit and add it to the interface. Once the user logs in, the ConnectButton transforms into an embedded wallet widget.\\n\\\"use client\\\"; import { ConnectButton, useAccount } from \\\"@particle-network/connectkit\\\"; const HomePage = () => { const { address, isConnected, chainId } = useAccount(); return ( <div className=\\\"flex justify-center items-center h-screen\\\"> <div className=\\\"text-center\\\"> <ConnectButton /> {isConnected && ( <> <h2>Address: {address}</h2> <h2>Chain ID: {chainId}</h2> </> )} </div> </div> ); }; export default HomePage;\\nSending Transactions with an EIP-1193 Provider \\nParticle Connect offers built-in AA features, but pairing it with the Particle AA SDK lets you leverage EIP-1193 providers like ethers. This setup is particularly useful if you’re already accustomed to these providers or if you’re integrating Particle Connect into an existing application.\\nTo set this up, wrap the smart account from Particle Connect within an ethers instance to create a customProvider. This lets you interact with ethers as usual while the smart account manages transaction signing in the background.\\nimport {useSmartAccount } from \\\"@particle-network/connectkit\\\"; import { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\"; const smartAccount = useSmartAccount(); // Init custom provider with gasless transaction mode const customProvider = smartAccount ? new ethers.BrowserProvider( new AAWrapProvider( smartAccount, SendTransactionMode.Gasless ) as Eip1193Provider, \\\"any\\\" ) : null; /** * Sends a transaction using the ethers.js library. * This transaction is gasless since the customProvider is initialized as gasless */ const executeTxEthers = async () => { if (!customProvider) return; const signer = await customProvider.getSigner(); const tx = { to: recipientAddress, value: parseEther(\\\"0.01\\\").toString(), }; const txResponse = await signer.sendTransaction(tx); const txReceipt = await txResponse.wait(); console.log(txReceipt?.hash) };\\nThis transaction is gasless due to two factors:\\nGasless Mode: Setting SendTransactionMode.Gasless in AAWrapProvider specifies a sponsored transaction.\\nFunding: On Testnets like Mantle Sepolia, transactions are automatically sponsored, so no USDT is needed. On mainnets, the Paymaster (configured in the Particle dashboard) must be funded to cover transaction fees.\\nThis example uses an EIP-1193 provider, though you can also create a userOp directly with Particle Connect. For details, see the starter repository.\\nFull App Example \\nWith an understanding of each part, you can now use Particle Connect, as shown in the example application below.\\nThis application creates a smart account on Mantle Sepolia through either social or Web3 login and sends a gasless transaction of 0.01 MNT using the ethers provider.\\n\\\"use client\\\"; import React, { useEffect, useState } from \\\"react\\\"; // Particle imports import { ConnectButton, useAccount, usePublicClient, useSmartAccount, } from \\\"@particle-network/connectkit\\\"; // Eip1193 and AA Provider import { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\"; // Only needed with Eip1193 provider import { ethers, type Eip1193Provider } from \\\"ethers\\\"; import { formatEther, parseEther } from \\\"viem\\\"; export default function Home() { const { isConnected, chain } = useAccount(); const publicClient = usePublicClient(); const smartAccount = useSmartAccount(); const [userAddress, setUserAddress] = useState<string>(\\\"\\\"); const [balance, setBalance] = useState<string | null>(null); const [recipientAddress, setRecipientAddress] = useState<string>(\\\"\\\"); const [transactionHash, setTransactionHash] = useState<string | null>(null); // Init custom provider with gasless transaction mode const customProvider = smartAccount ? new ethers.BrowserProvider( new AAWrapProvider( smartAccount, SendTransactionMode.Gasless ) as Eip1193Provider, \\\"any\\\" ) : null; /** * Fetches the balance of a given address. * @param {string} address - The address to fetch the balance for. */ const fetchBalance = async (address: string) => { try { const balanceResponse = await publicClient?.getBalance({ address: address as `0x${string}`, }); if (balanceResponse) { const balanceInEther = formatEther(balanceResponse).toString(); setBalance(balanceInEther); } else { setBalance(\\\"0.0\\\"); } } catch (error) { console.error(\\\"Error fetching balance:\\\", error); setBalance(\\\"0.0\\\"); } }; /** * Loads the user's account data, including address and balance. */ useEffect(() => { const loadAccountData = async () => { if (isConnected && smartAccount) { try { const address = await smartAccount.getAddress(); setUserAddress(address); await fetchBalance(address); } catch (error) { console.error(\\\"Error loading account data:\\\", error); } } }; loadAccountData(); }, [isConnected, smartAccount]); /** * Sends a transaction using the ethers.js library. * This transaction is gasless since the customProvider is initialized as gasless */ const executeTxEthers = async () => { if (!customProvider) return; const signer = await customProvider.getSigner(); try { const tx = { to: recipientAddress, value: parseEther(\\\"0.01\\\").toString(), }; const txResponse = await signer.sendTransaction(tx); const txReceipt = await txResponse.wait(); setTransactionHash(txReceipt?.hash || null); } catch (error) { console.error(\\\"Failed to send transaction using ethers.js:\\\", error); } }; return ( <div className=\\\"container min-h-screen flex flex-col justify-center items-center mx-auto gap-4 px-4 md:px-8\\\"> <div className=\\\"w-full flex justify-center mt-4\\\"> <ConnectButton label=\\\"Click to login\\\" /> </div> {isConnected && ( <> <div className=\\\"border border-purple-500 p-6 rounded-lg w-full\\\"> <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\"> Address: <code>{userAddress || \\\"Loading...\\\"}</code> </h2> <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\"> Balance: {balance || \\\"Loading...\\\"} {chain?.nativeCurrency.symbol} </h2> <input type=\\\"text\\\" placeholder=\\\"Recipient Address\\\" value={recipientAddress} onChange={(e) => setRecipientAddress(e.target.value)} className=\\\"mt-4 p-3 w-full rounded border border-gray-700 bg-gray-900 text-white focus:outline-none\\\" /> <button className=\\\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded mt-4\\\" onClick={executeTxEthers} disabled={!recipientAddress} > Send 0.001 {chain?.nativeCurrency.name} </button> {transactionHash && ( <p className=\\\"text-green-500 mt-4\\\"> Transaction Hash: {transactionHash} </p> )} </div> </> )} </div> ); }\\nParticle Connect Hooks \\nThis example demonstrates a basic usage of Particle Connect. For the complete list of hooks, see the Particle Connect documentation.\",\n  \"markdown\": \"# Social Login by Using Particle\\n\\nParticle Network offers Wallet Abstraction services through its Account Abstraction stack, optimizing user onboarding with a set of SDKs. Comment Edit from here\\n\\nIntegrating customizable modules for Externally Owned Accounts (EOA) and Account Abstraction (AA), Particle facilitates quick onboarding in just 2-clicks via social login options like Google, email, and phone, alongside traditional Web3 login methods.\\n\\nParticle Network is compatible with Mantle Mainnet and Testnet, supporting EOA interactions and native ERC-4337 via implementations like SimpleAccount, Biconomy V2, and Cyber Connect.\\n\\nThis tutorial guides you through the steps for building a demo application on Mantle Sepolia using the [Particle Connect SDK](https://developers.particle.network/api-reference/connect/desktop/web) — Particle's flagship onboarding SDK. The Particle Connect SDK enables quick 2-click onboarding with social and Web3 login options in a single modal. In this demo, we'll onboard users through a SimpleAccount instance of a smart account via social login and execute a gasless (sponsored) transaction.\\n\\n## \\n\\nGetting Started\\n\\nThis tutorial is based on a [Next.js app](https://nextjs.org/docs/getting-started/installation) with TypeScript and Tailwind CSS to demonstrate wallet creation on Mantle using social logins.\\n\\nThe Particle Connect SDK simplifies wallet creation, user authentication, and blockchain interactions, providing a streamlined interface that supports social logins and traditional Web3 wallets.\\n\\n### \\n\\nPrerequisites\\n\\nTo integrate Particle Connect into your Mantle application, you'll need just a few dependencies. Particle Connect includes built-in Account Abstraction (AA) support, but in this example, we’ll also install the [Particle AA SDK](https://developers.particle.network/api-reference/aa/sdks/desktop/web) to use EIP-1193 providers like ethers.\\n\\n```\\nyarn add @particle-network/connectkit viem@^2 @particle-network/aa ethers\\n```\\n\\n### \\n\\nConfiguring the Particle Dashboard\\n\\nTo get started with the setup, visit the [Particle dashboard](https://dashboard.particle.network/) to retrieve three essential values for your project.\\n\\nWhen using any Particle Network SDK, you'll need a projectId, clientKey, and appId to authenticate your project and establish a connection between your Particle Auth instance and the Particle dashboard. This setup allows you to customize in-app modals, track users, manage your Paymaster funds, and more.\\n\\nOnce you're in the Particle dashboard, follow these steps:\\n\\nGo to **Add New Project** to create a new project.\\n\\nChoose a name and domain for your app. You can use a placeholder here if you haven't finalized your deployment domain.\\n\\nCopy your **Project ID**, **Client Key**, and **App ID**.\\n\\nFor security, it's best to store these values in a .env file in this format:\\n\\n```\\nNEXT_PUBLIC_PROJECT_ID='PROJECT_ID'\\nNEXT_PUBLIC_CLIENT_KEY='CLIENT_KEY'\\nNEXT_PUBLIC_APP_ID='APP_ID'\\nNEXT_PUBLIC_WALLETCONNECT_PROJECT_ID='WALLETCONNECT_PROJECT_ID'\\n```\\n\\n## \\n\\nConfiguring Particle Connect\\n\\nFirst, let’s configure and initialize Particle Connect. Create a new file called `ConnectKit.tsx` in your `src` directory. In this file, we’ll define the `ParticleConnectKit` component, which wraps the configured `ConnectKitProvider` instance and acts as the primary interface for handling configuration.\\n\\n```\\n\\\"use client\\\";\\n\\nimport React from \\\"react\\\";\\nimport { ConnectKitProvider, createConfig } from \\\"@particle-network/connectkit\\\";\\nimport { authWalletConnectors } from \\\"@particle-network/connectkit/auth\\\";\\nimport { evmWalletConnectors } from \\\"@particle-network/connectkit/evm\\\";\\nimport { mantleSepoliaTestnet } from \\\"@particle-network/connectkit/chains\\\";\\nimport { wallet, EntryPosition } from \\\"@particle-network/connectkit/wallet\\\";\\nimport { aa } from \\\"@particle-network/connectkit/aa\\\";\\n\\nconst config = createConfig({\\n  projectId: process.env.NEXT_PUBLIC_PROJECT_ID!,\\n  clientKey: process.env.NEXT_PUBLIC_CLIENT_KEY!,\\n  appId: process.env.NEXT_PUBLIC_APP_ID!,\\n\\n  walletConnectors: [\\n    authWalletConnectors({}), // Social logins\\n\\n    // Default Web3 logins\\n    evmWalletConnectors({\\n      walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID, // optional, retrieved from https://cloud.walletconnect.com\\n    }),\\n  ],\\n\\n  plugins: [\\n    wallet({\\n      entryPosition: EntryPosition.BR, // Positions the modal button at the bottom right on login\\n      visible: true, // Determines if the wallet modal is displayed\\n    }),\\n    aa({\\n      name: \\\"SIMPLE\\\",\\n      version: \\\"2.0.0\\\",\\n    }),\\n  ],\\n  chains: [mantleSepoliaTestnet],\\n});\\n\\nexport const ParticleConnectkit = ({ children }: React.PropsWithChildren) => {\\n  return <ConnectKitProvider config={config}>{children}</ConnectKitProvider>;\\n};\\n```\\n\\nThis code configures Particle Connect to enable wallet authentication and blockchain interactions on Mantle Sepolia. It supports social logins and standard Web3 options via WalletConnect and includes Account Abstraction (AA) with a `simpleAccount` instance, version 2.0.0. The configured `ConnectKitProvider` component wraps the app’s content, ensuring this setup is accessible throughout the application.\\n\\n## \\n\\nIntegrate Particle Connect in Your App\\n\\nAfter configuration, wrap your application with the `ParticleConnectKit` component to provide access to the Particle Connect SDK across the app. Update the `layout.tsx` file in the `src` directory as follows:\\n\\n```\\nimport { ParticleConnectkit } from \\\"@/components/Connectkit\\\";\\nimport type { Metadata } from \\\"next\\\";\\nimport { Inter } from \\\"next/font/google\\\";\\nimport \\\"./globals.css\\\";\\n\\nconst inter = Inter({ subsets: [\\\"latin\\\"] });\\n\\nexport const metadata: Metadata = {\\n  title: \\\"Particle Connectkit App\\\",\\n  description: \\\"Generated by create next app\\\",\\n};\\n\\nexport default function RootLayout({\\n  children,\\n}: Readonly<{\\n  children: React.ReactNode;\\n}>) {\\n  return (\\n    <html lang=\\\"en\\\">\\n      <body className={inter.className}>\\n        <ParticleConnectkit>{children}</ParticleConnectkit>\\n      </body>\\n    </html>\\n  );\\n}\\n```\\n\\n## \\n\\nBuilding the Application\\n\\nWith your project set up, dependencies installed, and Particle Connect configured, you can start building in the `page.tsx` file.\\n\\nIn `page.tsx`, you’ll define the core features: login flow, data visualization, transaction handling, and the UI.\\n\\n### \\n\\nConnecting the Wallet\\n\\nWith `layout.tsx` set up, the next step is to add a main **Connect Wallet** button for user login. Import `ConnectButton` from `@particle-network/connectkit` and add it to the interface. Once the user logs in, the `ConnectButton` transforms into an embedded wallet widget.\\n\\n```\\n\\\"use client\\\";\\nimport { ConnectButton, useAccount } from \\\"@particle-network/connectkit\\\";\\n\\nconst HomePage = () => {\\n  const { address, isConnected, chainId } = useAccount();\\n\\n  return (\\n    <div className=\\\"flex justify-center items-center h-screen\\\">\\n      <div className=\\\"text-center\\\">\\n        <ConnectButton />\\n        {isConnected && (\\n          <>\\n            <h2>Address: {address}</h2>\\n            <h2>Chain ID: {chainId}</h2>\\n          </>\\n        )}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default HomePage;\\n```\\n\\n### \\n\\nSending Transactions with an EIP-1193 Provider\\n\\nParticle Connect offers built-in AA features, but pairing it with the Particle AA SDK lets you leverage EIP-1193 providers like `ethers`. This setup is particularly useful if you’re already accustomed to these providers or if you’re integrating Particle Connect into an existing application.\\n\\nTo set this up, wrap the smart account from Particle Connect within an `ethers` instance to create a `customProvider`. This lets you interact with ethers as usual while the smart account manages transaction signing in the background.\\n\\n```\\nimport {useSmartAccount } from \\\"@particle-network/connectkit\\\";\\nimport { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\";\\n\\nconst smartAccount = useSmartAccount();\\n\\n// Init custom provider with gasless transaction mode\\nconst customProvider = smartAccount\\n? new ethers.BrowserProvider(\\n    new AAWrapProvider(\\n        smartAccount,\\n        SendTransactionMode.Gasless\\n    ) as Eip1193Provider,\\n    \\\"any\\\"\\n    )\\n: null;\\n\\n/**\\n * Sends a transaction using the ethers.js library.\\n * This transaction is gasless since the customProvider is initialized as gasless\\n*/\\nconst executeTxEthers = async () => {\\n    if (!customProvider) return;\\n  \\n    const signer = await customProvider.getSigner();\\n    const tx = {\\n      to: recipientAddress,\\n      value: parseEther(\\\"0.01\\\").toString(),\\n    };\\n  \\n    const txResponse = await signer.sendTransaction(tx);\\n    const txReceipt = await txResponse.wait();\\n    console.log(txReceipt?.hash)\\n  };\\n```\\n\\nThis transaction is gasless due to two factors:\\n\\n1.  **Gasless Mode:** Setting `SendTransactionMode.Gasless` in `AAWrapProvider` specifies a sponsored transaction.\\n    \\n2.  **Funding:** On Testnets like Mantle Sepolia, transactions are automatically sponsored, so no USDT is needed. On mainnets, the Paymaster (configured in the [Particle dashboar](https://dashboard.particle.network/)d) must be funded to cover transaction fees.\\n    \\n\\nThis example uses an EIP-1193 provider, though you can also create a userOp directly with Particle Connect. For details, see the [starter repository](https://github.com/Particle-Network/connectkit-aa-usage/blob/2017262daf297624362d51f3d50cccd3b4606ef9/app/page.tsx#L117).\\n\\n## \\n\\nFull App Example\\n\\nWith an understanding of each part, you can now use Particle Connect, as shown in the example application below.\\n\\nThis application creates a smart account on Mantle Sepolia through either social or Web3 login and sends a gasless transaction of 0.01 MNT using the `ethers` provider.\\n\\n```\\n\\\"use client\\\";\\nimport React, { useEffect, useState } from \\\"react\\\";\\n\\n// Particle imports\\nimport {\\n  ConnectButton,\\n  useAccount,\\n  usePublicClient,\\n  useSmartAccount,\\n} from \\\"@particle-network/connectkit\\\";\\n\\n// Eip1193 and AA Provider\\nimport { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\"; // Only needed with Eip1193 provider\\nimport { ethers, type Eip1193Provider } from \\\"ethers\\\";\\nimport { formatEther, parseEther } from \\\"viem\\\";\\n\\nexport default function Home() {\\n  const { isConnected, chain } = useAccount();\\n  const publicClient = usePublicClient();\\n  const smartAccount = useSmartAccount();\\n\\n  const [userAddress, setUserAddress] = useState<string>(\\\"\\\");\\n  const [balance, setBalance] = useState<string | null>(null);\\n  const [recipientAddress, setRecipientAddress] = useState<string>(\\\"\\\");\\n  const [transactionHash, setTransactionHash] = useState<string | null>(null);\\n\\n  // Init custom provider with gasless transaction mode\\n  const customProvider = smartAccount\\n    ? new ethers.BrowserProvider(\\n        new AAWrapProvider(\\n          smartAccount,\\n          SendTransactionMode.Gasless\\n        ) as Eip1193Provider,\\n        \\\"any\\\"\\n      )\\n    : null;\\n\\n  /**\\n   * Fetches the balance of a given address.\\n   * @param {string} address - The address to fetch the balance for.\\n   */\\n  const fetchBalance = async (address: string) => {\\n    try {\\n      const balanceResponse = await publicClient?.getBalance({\\n        address: address as `0x${string}`,\\n      });\\n      if (balanceResponse) {\\n        const balanceInEther = formatEther(balanceResponse).toString();\\n        setBalance(balanceInEther);\\n      } else {\\n        setBalance(\\\"0.0\\\");\\n      }\\n    } catch (error) {\\n      console.error(\\\"Error fetching balance:\\\", error);\\n      setBalance(\\\"0.0\\\");\\n    }\\n  };\\n\\n  /**\\n   * Loads the user's account data, including address and balance.\\n   */\\n  useEffect(() => {\\n    const loadAccountData = async () => {\\n      if (isConnected && smartAccount) {\\n        try {\\n          const address = await smartAccount.getAddress();\\n          setUserAddress(address);\\n          await fetchBalance(address);\\n        } catch (error) {\\n          console.error(\\\"Error loading account data:\\\", error);\\n        }\\n      }\\n    };\\n    loadAccountData();\\n  }, [isConnected, smartAccount]);\\n\\n  /**\\n   * Sends a transaction using the ethers.js library.\\n   * This transaction is gasless since the customProvider is initialized as gasless\\n   */\\n  const executeTxEthers = async () => {\\n    if (!customProvider) return;\\n\\n    const signer = await customProvider.getSigner();\\n    try {\\n      const tx = {\\n        to: recipientAddress,\\n        value: parseEther(\\\"0.01\\\").toString(),\\n      };\\n\\n      const txResponse = await signer.sendTransaction(tx);\\n      const txReceipt = await txResponse.wait();\\n\\n      setTransactionHash(txReceipt?.hash || null);\\n    } catch (error) {\\n      console.error(\\\"Failed to send transaction using ethers.js:\\\", error);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"container min-h-screen flex flex-col justify-center items-center mx-auto gap-4 px-4 md:px-8\\\">\\n      <div className=\\\"w-full flex justify-center mt-4\\\">\\n        <ConnectButton label=\\\"Click to login\\\" />\\n      </div>\\n      {isConnected && (\\n        <>\\n          <div className=\\\"border border-purple-500 p-6 rounded-lg w-full\\\">\\n            <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\">\\n              Address: <code>{userAddress || \\\"Loading...\\\"}</code>\\n            </h2>\\n            <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\">\\n              Balance: {balance || \\\"Loading...\\\"} {chain?.nativeCurrency.symbol}\\n            </h2>\\n            <input\\n              type=\\\"text\\\"\\n              placeholder=\\\"Recipient Address\\\"\\n              value={recipientAddress}\\n              onChange={(e) => setRecipientAddress(e.target.value)}\\n              className=\\\"mt-4 p-3 w-full rounded border border-gray-700 bg-gray-900 text-white focus:outline-none\\\"\\n            />\\n            <button\\n              className=\\\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded mt-4\\\"\\n              onClick={executeTxEthers}\\n              disabled={!recipientAddress}\\n            >\\n              Send 0.001 {chain?.nativeCurrency.name}\\n            </button>\\n            {transactionHash && (\\n              <p className=\\\"text-green-500 mt-4\\\">\\n                Transaction Hash: {transactionHash}\\n              </p>\\n            )}\\n          </div>\\n        </>\\n      )}\\n    </div>\\n  );\\n}\\n```\\n\\n### \\n\\nParticle Connect Hooks\\n\\nThis example demonstrates a basic usage of Particle Connect. For the complete list of hooks, see the Particle Connect documentation.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown\",\n    \"loadedTime\": \"2025-02-15T20:32:12.268Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown\",\n    \"title\": \"Reown | Network\",\n    \"description\": \"Learn how to use Reown AppKit to enable wallet connections and interact with the Mantle network.\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Reown | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Learn how to use Reown AppKit to enable wallet connections and interact with the Mantle network.\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/nuVtp6u7f4Q1jFEX2Rfo\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:11 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Yzk0Y2RiY2YtYzU1NS00MjM3LTkwNmQtMzZhZjZkYzQ3MTQ5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Zwmlt3QAvrk%2BI4rOcm%2FYtrFoqXqvwveaAlZQY5otpMXnzANCuc0sI0SHTuVDC7051B1rkez0gxzzAgfm4gCCQxNv81IO8dO3ynxqLX1hX8parofar%2FFZixeQYmotgBTPgsmSJheA72OTKKKdxBIQ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810d78ddfa5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Reown | Network\\nWith AppKit, you can provide seamless wallet connections, including email and social logins, on-ramp functionality, smart accounts, one-click authentication, and wallet notifications, all designed to deliver an exceptional user experience.\\nIn this tutorial, you will learn how to:\\nSet up Reown AppKit.\\nConfigure a wallet connection modal and enable interactions with the Mantle network.\\nThis guide takes approximately 10 minutes to complete.\\nLet’s get started!\\nSetup\\nIn this section, you'll learn how to set up the development environment to use AppKit with Mantle.\\nFor this tutorial, we'll be using Next.js, though you can use any other framework compatible with AppKit.\\nAppKit is available on eight frameworks, including React, Next.js, Vue, JavaScript, React Native, Flutter, Android, iOS, and Unity.\\nNow, let’s create a Next app. In order to do so, please run the command given below:\\nnpx create-next-app@latest appkit-example\\nThe above command creates a Next app and sets the name of the Next app as “appkit-example”.\\nInstall AppKit\\nNow, we need to install AppKit and other dependencies that we need for our app to function as expected. For this tutorial, we will be using “wagmi” as our preferred Ethereum library. \\nnpm install @reown/appkit @reown/appkit-wagmi-adapter wagmi @tanstack/react-query\\nReown also supports wagmi v1, ethers, ethers v5, if you want to use other sdk, please refer to their documentation here.\\nCreate a New Project on Reown Cloud\\nNow, we need to get a project Id from Reown Cloud that we will use to set up AppKit with Wagmi config. Navigate to cloud.reown.com and sign in. If you have not created an account yet, please do so before we proceed.\\nAfter you have logged in, please navigate to the “Projects” section of the Cloud and click on “Create Project”.\\nNow, enter the name for your project and click on “Continue”.\\nSelect the product as “AppKit” and click on “Continue”.\\nSelect the framework as “Next.js” and click on “Create”. Reown Cloud will now create a new project for you which will also generate a project Id.\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\nBuild the App Using AppKit\\nBefore we build the app, let’s first configure our .env file. On the root level of your code directory, create a new file named .env.\\nOpen that file and create a new variable NEXT_PUBLIC_PROJECT_ID. You will assign the project Id that you copied in the previous step to this environment variable that you just created. This is what it will look like:\\nNEXT_PUBLIC_PROJECT_ID = <YOUR_PROJECT_ID_HERE>\\nPlease make sure you follow the best practices when you are working with secret keys and other sensitive information. Environment variables that start with NEXT_PUBLIC will be exposed by your app which can be misused by bad actors.\\nConfigure AppKit\\nOn the root level of your code directory, create a new folder named config and within that folder, create a new code file named config/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., config/index.tsx.TypeScriptCopy\\nimport { WagmiAdapter } from \\\"@reown/appkit-adapter-wagmi\\\"; import { cookieStorage, createStorage } from \\\"wagmi\\\"; import { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks' // Get projectId from https://cloud.reown.com export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID; export const networks = [mantle, mantleSepoliaTestnet] if (!projectId) throw new Error(\\\"Project ID is not defined\\\"); // Set up the Wagmi Adapter (config) export const wagmiAdapter = new WagmiAdapter({ storage: createStorage({ storage: cookieStorage }), ssr: true, networks, projectId }) export const config = wagmiAdapter.wagmiConfig\\nSo what's happening in the above code? Let's understand it step-by-step:\\nFirst, we need to import the necessary functions from their respective packages.\\nWagmiAdapter - this is used to create a WAGMI configuration which is then initialized to the wagmiAdapter\\ncookieStorage, createStorage - this provides a storage mechanism using cookies and a function to create custom storage solutions (in this case, using cookies).\\nCreate the Modal for your app\\nNow, we need to create a context provider to wrap our application in and initialize AppKit.\\nOn the root level of your code directory, create a new folder named context and within that folder, create a new code file named context/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., context/index.tsx.\\n'use client' import { wagmiAdapter, projectId } from '@/config' import { createAppKit } from '@reown/appkit/react' import { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks' import { QueryClient, QueryClientProvider } from '@tanstack/react-query' import React, { type ReactNode } from 'react' import { cookieToInitialState, WagmiProvider, type Config } from 'wagmi' // Set up queryClient const queryClient = new QueryClient() if (!projectId) { throw new Error('Project ID is not defined') } // Set up metadata const metadata = { //this is optional name: \\\"appkit-example-mantle\\\", description: \\\"AppKit Example - Mantle\\\", url: \\\"https://mantleapp.com\\\", // origin must match your domain & subdomain icons: [\\\"https://avatars.githubusercontent.com/u/179229932\\\"] } // Create the modal const modal = createAppKit({ adapters: [wagmiAdapter], projectId, networks: [mantle, mantleSepoliaTestnet], metadata: metadata, features: { analytics: true, // Optional - defaults to your Cloud configuration }, themeMode: 'light' }) function ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) { const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies) return ( <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}> <QueryClientProvider client={queryClient}>{children}</QueryClientProvider> </WagmiProvider> ) } export default ContextProvider\\nLet’s understand what is happening in the above code:\\nFirst, we import the necessary functions from their respective packages. After this, we need to create the modal component for our app.\\nmetadata - This object contains information about our application that will be used by AppKit. This includes the name of the app, the description, the url and the icons representing our app. This is optional.\\ncreateAppKit - this is called to initialize the AppKit component, which handles the user interface for connecting to blockchain wallets. The function is configured with various options, such as the app's metadata, theming, and enabling features like analytics and onramp services.\\nnetworks - these are the networks that we want our app to support. So import the chains you want your app to support from @reown/appkit/network and assign it to this network parameter. Since we want to enable wallet interactions on the Mantle network, we import both Mantle Mainnet and the Sepolia testnet. You can view the complete list of supported chains here.\\nWagmiProvider: Provides blockchain and wallet connection context to the app.\\nQueryClientProvider: Provides the React Query context for managing server-state data.\\nNow, let’s create the layout for our app. In app/layout.tsx, remove the existing code and paste the code snippet given below.\\nimport type { Metadata } from \\\"next\\\"; import { Inter } from \\\"next/font/google\\\"; import \\\"./globals.css\\\"; const inter = Inter({ subsets: [\\\"latin\\\"] }); import { headers } from \\\"next/headers\\\"; // added import ContextProvider from '@/context' export const metadata: Metadata = { title: \\\"AppKit Example App\\\", description: \\\"Powered by Reown\\\" }; export default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) { const cookies = headers().get('cookie') return ( <html lang=\\\"en\\\"> <body className={inter.className}> <ContextProvider cookies={cookies}>{children}</ContextProvider> </body> </html> ) }\\nCreate the UI for your app\\nFor our app to have the UI with which your users can interact, you need to set a simple UI and configure the modal. Since, we have already set up AppKit, you can use <w3m-button> which will serve as a “Connect Wallet” button or you can build your own custom button using the hooks that AppKit provides.\\nOpen the app/page.tsx file and remove the existing boilerplate code, and then replace it with the code snippet given below.\\n\\\"use client\\\"; import { useAccount } from \\\"wagmi\\\"; export default function Home() { const { isConnected } = useAccount(); return ( <main className=\\\"min-h-screen px-8 py-0 pb-12 flex-1 flex flex-col items-center\\\"> <header className=\\\"w-full py-4 flex justify-between items-center\\\"> <div className=\\\"flex items-center\\\"> <img src=\\\"/walletconnect.png\\\" alt=\\\"logo\\\" className=\\\"w-10 h-10 mr-2\\\" /> <div className=\\\"hidden sm:inline text-xl font-bold\\\">Reown - AppKit + Mantle</div> </div> </header> <h2 className=\\\"my-8 text-2xl font-bold leading-snug text-center\\\">Examples</h2> <div className=\\\"max-w-4xl\\\"> <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\"> <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Connect your wallet</h3> <div className=\\\"flex justify-center items-center p-4\\\"> <w3m-button /> </div> </div> <br></br> {isConnected && ( <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\"> <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Network selection button</h3> <div className=\\\"flex justify-center items-center p-4\\\"> <w3m-network-button /> </div> </div> )} </div> </main> ); }\\nThe code above uses the AppKit configuration to provide two buttons: one for users to connect their wallet to the app, and another to allow users to switch networks.\\nYou can now run the app and test it out. In order to do so, run the command given below.\\nConclusion\\nAnd that’s it! You have now learned how to create a simple app using AppKit that allows users to connect their wallet and interact with the Mantle network.\\nReown AppKit is a powerful solution for developers looking to integrate wallet connections and other Web3 functionalities into their apps on any EVM chain. In just a few simple steps, you can provide your users with seamless wallet access, one-click authentication, social logins, and notifications—streamlining their experience while enabling advanced features like on-ramp functionality and smart accounts. By following this guide, you'll quickly get up and running with Reown’s AppKit, enhancing your app’s user experience and interaction with blockchain technology.\\nYou can view the complete code repository here.\",\n  \"markdown\": \"# Reown | Network\\n\\nWith AppKit, you can provide seamless wallet connections, including email and social logins, on-ramp functionality, smart accounts, one-click authentication, and wallet notifications, all designed to deliver an exceptional user experience.\\n\\nIn this tutorial, you will learn how to:\\n\\n1.  Set up Reown AppKit.\\n    \\n2.  Configure a wallet connection modal and enable interactions with the Mantle network.\\n    \\n\\nThis guide takes approximately 10 minutes to complete.\\n\\nLet’s get started!\\n\\n### \\n\\nSetup\\n\\nIn this section, you'll learn how to set up the development environment to use AppKit with Mantle.\\n\\nFor this tutorial, we'll be using Next.js, though you can use any other framework compatible with AppKit.\\n\\n_AppKit is available on eight frameworks, including React, Next.js, Vue, JavaScript, React Native, Flutter, Android, iOS, and Unity._\\n\\nNow, let’s create a Next app. In order to do so, please run the command given below:\\n\\n```\\nnpx create-next-app@latest appkit-example\\n```\\n\\nThe above command creates a Next app and sets the name of the Next app as “appkit-example”.\\n\\n#### \\n\\nInstall AppKit\\n\\nNow, we need to install AppKit and other dependencies that we need for our app to function as expected. For this tutorial, we will be using “wagmi” as our preferred Ethereum library.\\n\\n```\\nnpm install @reown/appkit @reown/appkit-wagmi-adapter wagmi @tanstack/react-query\\n```\\n\\nReown also supports wagmi v1, ethers, ethers v5, if you want to use other sdk, please refer to their documentation [here](https://docs.reown.com/appkit/react/core/installation).\\n\\n#### \\n\\nCreate a New Project on Reown Cloud\\n\\nNow, we need to get a project Id from Reown Cloud that we will use to set up AppKit with Wagmi config. Navigate to [cloud.reown.com](https://cloud.reown.com/) and sign in. If you have not created an account yet, please do so before we proceed.\\n\\nAfter you have logged in, please navigate to the “**Projects**” section of the Cloud and click on “**Create Project**”.\\n\\nNow, enter the name for your project and click on “**Continue**”.\\n\\nSelect the product as “**AppKit**” and click on “**Continue**”.\\n\\nSelect the framework as “**Next.js**” and click on “**Create**”. Reown Cloud will now create a new project for you which will also generate a project Id.\\n\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\n\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\n\\n### \\n\\nBuild the App Using AppKit\\n\\nBefore we build the app, let’s first configure our .env file. On the root level of your code directory, create a new file named .env.\\n\\nOpen that file and create a new variable NEXT\\\\_PUBLIC\\\\_PROJECT\\\\_ID. You will assign the project Id that you copied in the previous step to this environment variable that you just created. This is what it will look like:\\n\\n```\\nNEXT_PUBLIC_PROJECT_ID = <YOUR_PROJECT_ID_HERE>\\n```\\n\\n_Please make sure you follow the best practices when you are working with secret keys and other sensitive information. Environment variables that start with NEXT\\\\_PUBLIC will be exposed by your app which can be misused by bad actors._\\n\\n#### \\n\\nConfigure AppKit\\n\\nOn the root level of your code directory, create a new folder named config and within that folder, create a new code file named config/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., `config/index.tsx.TypeScriptCopy`\\n\\n```\\nimport { WagmiAdapter } from \\\"@reown/appkit-adapter-wagmi\\\";\\nimport { cookieStorage, createStorage } from \\\"wagmi\\\";\\nimport { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks'\\n\\n// Get projectId from https://cloud.reown.com\\nexport const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;\\n\\nexport const networks = [mantle, mantleSepoliaTestnet]\\n\\nif (!projectId) throw new Error(\\\"Project ID is not defined\\\");\\n\\n// Set up the Wagmi Adapter (config)\\nexport const wagmiAdapter = new WagmiAdapter({\\n  storage: createStorage({\\n    storage: cookieStorage\\n  }),\\n  ssr: true,\\n  networks,\\n  projectId\\n})\\n\\nexport const config = wagmiAdapter.wagmiConfig\\n```\\n\\nSo what's happening in the above code? Let's understand it step-by-step:\\n\\nFirst, we need to import the necessary functions from their respective packages.\\n\\n**WagmiAdapter -** this is used to create a WAGMI configuration which is then initialized to the wagmiAdapter\\n\\n**cookieStorage, createStorage -** this provides a storage mechanism using cookies and a function to create custom storage solutions (in this case, using cookies).\\n\\n#### \\n\\nCreate the Modal for your app\\n\\nNow, we need to create a context provider to wrap our application in and initialize AppKit.\\n\\nOn the root level of your code directory, create a new folder named context and within that folder, create a new code file named context/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., `context/index.tsx`.\\n\\n```\\n'use client'\\n\\nimport { wagmiAdapter, projectId } from '@/config'\\nimport { createAppKit } from '@reown/appkit/react' \\nimport { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks'\\n\\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\\nimport React, { type ReactNode } from 'react'\\nimport { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'\\n\\n// Set up queryClient\\nconst queryClient = new QueryClient()\\n\\nif (!projectId) {\\n  throw new Error('Project ID is not defined')\\n}\\n\\n// Set up metadata\\nconst metadata = { //this is optional\\n  name: \\\"appkit-example-mantle\\\",\\n  description: \\\"AppKit Example - Mantle\\\",\\n  url: \\\"https://mantleapp.com\\\", // origin must match your domain & subdomain\\n  icons: [\\\"https://avatars.githubusercontent.com/u/179229932\\\"]\\n}\\n\\n// Create the modal\\nconst modal = createAppKit({\\n  adapters: [wagmiAdapter],\\n  projectId,\\n  networks: [mantle, mantleSepoliaTestnet],\\n  metadata: metadata,\\n  features: {\\n    analytics: true, // Optional - defaults to your Cloud configuration\\n  },\\n  themeMode: 'light'\\n})\\n\\nfunction ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {\\n  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)\\n\\n  return (\\n    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>\\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\\n    </WagmiProvider>\\n  )\\n}\\n\\nexport default ContextProvider\\n```\\n\\nLet’s understand what is happening in the above code:\\n\\nFirst, we import the necessary functions from their respective packages. After this, we need to create the modal component for our app.\\n\\n*   **metadata** - This object contains information about our application that will be used by AppKit. This includes the name of the app, the description, the url and the icons representing our app. **This is optional.**\\n    \\n*   `createAppKit` - this is called to initialize the AppKit component, which handles the user interface for connecting to blockchain wallets. The function is configured with various options, such as the app's metadata, theming, and enabling features like analytics and onramp services.\\n    \\n*   **networks -** these are the networks that we want our app to support. So import the chains you want your app to support from `@reown/appkit/network` and assign it to this network parameter. Since we want to enable wallet interactions on the Mantle network, we import both Mantle Mainnet and the Sepolia testnet. You can view the complete list of supported chains [here](https://wagmi.sh/core/api/chains).\\n    \\n*   **WagmiProvider**: Provides blockchain and wallet connection context to the app.\\n    \\n*   **QueryClientProvider**: Provides the React Query context for managing server-state data.\\n    \\n\\nNow, let’s create the layout for our app. In `app/layout.tsx`, remove the existing code and paste the code snippet given below.\\n\\n```\\nimport type { Metadata } from \\\"next\\\";\\nimport { Inter } from \\\"next/font/google\\\";\\nimport \\\"./globals.css\\\";\\n\\nconst inter = Inter({ subsets: [\\\"latin\\\"] });\\n\\nimport { headers } from \\\"next/headers\\\"; // added\\nimport ContextProvider from '@/context'\\n\\nexport const metadata: Metadata = {\\n  title: \\\"AppKit Example App\\\",\\n  description: \\\"Powered by Reown\\\"\\n};\\n\\nexport default function RootLayout({\\n  children\\n}: Readonly<{\\n  children: React.ReactNode\\n}>) {\\n  const cookies = headers().get('cookie')\\n\\n  return (\\n    <html lang=\\\"en\\\">\\n      <body className={inter.className}>\\n        <ContextProvider cookies={cookies}>{children}</ContextProvider>\\n      </body>\\n    </html>\\n  )\\n}\\n```\\n\\n#### \\n\\nCreate the UI for your app\\n\\nFor our app to have the UI with which your users can interact, you need to set a simple UI and configure the modal. Since, we have already set up AppKit, you can use <w3m-button> which will serve as a “Connect Wallet” button or you can build your own custom button using the [hooks](https://docs.walletconnect.com/appkit/next/core/hooks) that AppKit provides.\\n\\nOpen the app/page.tsx file and remove the existing boilerplate code, and then replace it with the code snippet given below.\\n\\n```\\n\\\"use client\\\";\\nimport { useAccount } from \\\"wagmi\\\";\\n\\nexport default function Home() {\\n  const { isConnected } = useAccount();\\n\\n  return (\\n    <main className=\\\"min-h-screen px-8 py-0 pb-12 flex-1 flex flex-col items-center\\\">\\n      <header className=\\\"w-full py-4 flex justify-between items-center\\\">\\n        <div className=\\\"flex items-center\\\">\\n          <img src=\\\"/walletconnect.png\\\" alt=\\\"logo\\\" className=\\\"w-10 h-10 mr-2\\\" />\\n          <div className=\\\"hidden sm:inline text-xl font-bold\\\">Reown - AppKit + Mantle</div>\\n        </div>\\n      </header>\\n      <h2 className=\\\"my-8 text-2xl font-bold leading-snug text-center\\\">Examples</h2>\\n      <div className=\\\"max-w-4xl\\\">\\n        <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\">\\n          <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Connect your wallet</h3>\\n          <div className=\\\"flex justify-center items-center p-4\\\">\\n          <w3m-button />\\n          </div>\\n        </div> \\n        <br></br>\\n        {isConnected && (\\n          <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\">\\n            <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Network selection button</h3>\\n            <div className=\\\"flex justify-center items-center p-4\\\">\\n              <w3m-network-button />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    </main>\\n  );\\n}\\n```\\n\\nThe code above uses the AppKit configuration to provide two buttons: one for users to connect their wallet to the app, and another to allow users to switch networks.\\n\\nYou can now run the app and test it out. In order to do so, run the command given below.\\n\\n### \\n\\nConclusion\\n\\nAnd that’s it! You have now learned how to create a simple app using AppKit that allows users to connect their wallet and interact with the Mantle network.\\n\\n**Reown AppKit** is a powerful solution for developers looking to integrate wallet connections and other Web3 functionalities into their apps on any EVM chain. In just a few simple steps, you can provide your users with seamless wallet access, one-click authentication, social logins, and notifications—streamlining their experience while enabling advanced features like on-ramp functionality and smart accounts. By following this guide, you'll quickly get up and running with Reown’s AppKit, enhancing your app’s user experience and interaction with blockchain technology.\\n\\nYou can view the complete code repository [here](https://github.com/rohit-710/reown-appkit-evm).\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates\",\n    \"loadedTime\": \"2025-02-15T20:32:12.871Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates\",\n    \"title\": \"Network Updates | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Updates | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ct6TaYJUUnKuLLjxri4j\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:12 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzkwZDAyOTctODk5Zi00MWY0LThhZDgtOGM3NDQyMWRiMWNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=a5%2Fxu7n2A2NEIxQ9of3uiTwY5MlYcAbKaLYta19jQAuntu2TmCKUanNIzAOXBYkWA%2BQ3NqVpI3jM4vieI%2FLdjs%2FEVLEHvqxFIV6Y6k7VWk%2F6AEd%2Bzhn8%2FrBr9TxX51%2F8K%2Fi5gRnv2XOSP9F1BZPN\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810de7f93a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Updates | Network\\nChangelogs\\nPreviousDeploying a Sepolia Rollup Verifier/Replica Node From DockerNextChangelogs\\nWas this helpful?\",\n  \"markdown\": \"# Network Updates | Network\\n\\n[Changelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs)\\n\\n[PreviousDeploying a Sepolia Rollup Verifier/Replica Node From Docker](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker)[NextChangelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs\",\n    \"loadedTime\": \"2025-02-15T20:32:12.975Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs\",\n    \"title\": \"Changelogs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Changelogs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/A8MNSMFgtwxUehdjFthB\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:12 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTM2MjQ0YzMtNTdlOC00NjhkLTg1YTUtNjE5YzM3MDRkN2I3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3rl2%2Brk3FsqoB4HLjOEsmZXuZ0TF58Sxgx2c9xA70fIMkPSujBwv9vAX7tYA%2FUye14txybvFTacoXme5f91Q2rnpjPIcf6DpVZ3xDte8hd7DjsV%2Bn2LMAOKbm%2F6jy0D7HafmgxT9a4ekgAXrc88Z\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810deddf3c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Changelogs | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Changelogs | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-node-operators/network-updates/changelogs?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management/fraud-proof\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/fraud-proof\",\n    \"loadedTime\": \"2025-02-15T20:32:13.797Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/fraud-proof\",\n    \"title\": \"Fraud Proof | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fraud Proof | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/RVVT3c0d8aACEZaPzaX5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:13 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MTQ0NTZjY2QtM2Q5ZS00OTQzLWE2MjktMTY1OGRlZmE0M2I3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=5Kc21bV2AKSAwm80Tsp4zSMNaHotUUG0ktDQenaVsrLwhMdDKDQncxbatXSijOzHR%2BDg3sU1UzR81W6fplImElZbrgJcqw3A1pjXA%2BU4qa%2FOVvape1X41nF18HAkyJFGj%2BrSywsyG46a3ozTuKZI\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810e3fb1e9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fraud Proof | Network\\nOptimistic rollups assume the validity of all layer-2 (L2) transaction state transitions unless proven otherwise. As a result, they are also referred to as assertions, as their validity is not predetermined. The verification logic relies on evidence of invalid state transitions to initiate the validation process, with fraud proofs serving as the medium to provide such evidence. The protocol allows for a dispute window during which network participants can come forward to submit fraud proofs disputing states they believe to be incorrect. For most Optimistic rollup protocols, this challenge period typically lasts around 7 days. By default, any transactions without disputes within this timeframe are considered valid.\\nTypes of Fraud Proofs​\\nFraud proofs can be categorized into two distinct types: non-interactive and interactive.\\nNon-Interactive Fraud Proofs​\\nNon-interactive fraud proofs use a method where no other parties are needed to prove the incorrectness of an assertion. They basically run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\nInteractive Fraud Proofs​\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem to verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back-and-forth introduces a new level of complexity in the protocol, and it can be harder to design safely. But it has the advantage of not placing any limitations on L1, due to a much smaller volume of actual on-chain execution.\\nFraud Proofs on Mantle Network​\\nWhat is Cannon?​\\nCannon, developed by Optimism, is an on-chain MIPS instruction simulator. It facilitates EVM-equivalent fault proofs as part of an interactive dispute by employing op-geth to execute on-chain instructions one at a time. This process involves on-chain contracts paired with an off-chain simulator.\\nWhy do we need this in Mantle?​\\nIn popular fraud-proof models currently, the contracts responsible for resolving disputes — on-chain validators — can only execute instructions in lower-level virtual machines like MIPS or WASM. This compels the Ethereum Virtual Machine (EVM) client (e.g., op-geth) to recompile fraud proofs into a lower-level language (e.g., MIPs-opcode) for on-chain validators to interpret. Thus, Cannon implements an on-chain contract to simulate MIPs-opcode, enabling the verification of MIPs instructions' execution in the EVM environment. Simultaneously, it implements an off-chain simulator to generate proofs for any MIPS instruction, completing on-chain verification.\\nMantle network will use the fraud proof model implemented by Cannon. You can learn more here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Fraud Proof | Network\\n\\nOptimistic rollups assume the validity of all layer-2 (L2) transaction state transitions unless proven otherwise. As a result, they are also referred to as assertions, as their validity is not predetermined. The verification logic relies on evidence of invalid state transitions to initiate the validation process, with fraud proofs serving as the medium to provide such evidence. The protocol allows for a dispute window during which network participants can come forward to submit fraud proofs disputing states they believe to be incorrect. For most [Optimistic rollup](https://docs.mantle.xyz/network/more/glossary#optimistic-rollup) protocols, this challenge period typically lasts around 7 days. By default, any transactions without disputes within this timeframe are considered valid.\\n\\n## \\n\\nTypes of Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#types-of-fraud-proofs)\\n\\nFraud proofs can be categorized into two distinct types: **non-interactive** and **interactive**.\\n\\n### \\n\\nNon-Interactive Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#non-interactive-fraud-proofs)\\n\\nNon-interactive fraud proofs use a method where no other parties are needed to prove the incorrectness of an assertion. They basically run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\n\\n### \\n\\nInteractive Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#interactive-fraud-proofs)\\n\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem to verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back-and-forth introduces a new level of complexity in the protocol, and it can be harder to design safely. But it has the advantage of not placing any limitations on L1, due to a much smaller volume of actual on-chain execution.\\n\\n## \\n\\nFraud Proofs on Mantle Network[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#fraud-proofs-on-mantle-network)\\n\\n### \\n\\nWhat is Cannon?[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#what-is-cannon)\\n\\nCannon, developed by Optimism, is an on-chain MIPS instruction simulator. It facilitates EVM-equivalent fault proofs as part of an interactive dispute by employing [`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) to execute on-chain instructions one at a time. This process involves on-chain contracts paired with an off-chain simulator.\\n\\n### \\n\\nWhy do we need this in Mantle?[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#why-do-we-need-this-in-mantle)\\n\\nIn popular fraud-proof models currently, the contracts responsible for resolving disputes — on-chain validators — can only execute instructions in lower-level virtual machines like [MIPS](https://docs.mantle.xyz/network/more/glossary#mips) or [WASM](https://docs.mantle.xyz/network/more/glossary#wasm). This compels the Ethereum Virtual Machine (EVM) client (e.g., `op-geth`) to recompile fraud proofs into a lower-level language (e.g., MIPs-opcode) for on-chain validators to interpret. Thus, Cannon implements an on-chain contract to simulate MIPs-opcode, enabling the verification of MIPs instructions' execution in the EVM environment. Simultaneously, it implements an off-chain simulator to generate proofs for any MIPS instruction, completing on-chain verification.\\n\\nMantle network will use the fraud proof model implemented by Cannon. You can learn more [here](https://github.com/ethereum-optimism/optimism/blob/develop/cannon/docs/README.md).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wallet\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wallet\",\n    \"loadedTime\": \"2025-02-15T20:32:13.158Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wallet\",\n    \"title\": \"Multisig Wallet | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Multisig Wallet | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/FJY23acYPPm3cN3D9HoA\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:12 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDZlNWVlYmQtY2Y1Ny00ZjNlLTkyY2EtYjg1ZDc1MTVmNTEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=8w99nOTFTCFxWQCOyVO4gAPkf%2BI0pRh2eoYL4JMMsVeuiQzlTSxFBIri1dnUI3E8muW8Xenia2Y4B%2BQhVHGbV6XmtqCoA4d08aNh9crIcnKPU7vS7zQVq%2FbpkaalUwMdlOaM1EWZIhyJRavMNGvd\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810df1d4d9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Multisig Wallet | Network\\nSafe{Wallet}​\\nSafe{Wallet} is the most trusted decentralized custody protocol and collective asset management platform.\\nWhat's new\\nMantle use several Safe services to support the multisig wallet, this is the changelog for these services:\\nSafe UI [1.36.4]\\nchangelogs\\nCritical Updates\\nImproved handling of pending transactions.\\nDisabled execute button.\\nAdded speed-up options.\\nRedesigned approval editor.\\nAdded ENS resolution for Safe addresses in the sidebar.\\nNew Features and Functionalities\\nDisplay balances in Safe list.\\nAdded activity app banner on dashboard.\\nIntroduced speed-up pending transactions feature toggle.\\nDisplayed deprecation banner for social logins on all pages.\\nEnabled transaction deletion with UI updates.\\nAutomatic approval for verified WalletConnect sessions.\\nApps\\nAdded Token Approval Manager, which allows you to keep track of safe ERC20 token approvals and control them (edit/revoke) in batched transactions.\\nFixes and Improvements\\nAlways fetch message information when signing.\\nCorrected fee tooltip text.\\nSet default owner and improved counterfactual transactions when creating a Safe.\\nVarious UI fixes: dark mode, button overlaps, transaction status indicators.\\nSafe transaction service [v5.0.0]\\nchanglogs\\nCritical Updates:\\nRemoved deprecated endpoints (e.g., balances/usd).\\nEnhanced UserOperation:\\nRemoved POST method.\\nAdded safeOperation model.\\nNew endpoint for UserOperations with indexing for failed/reverted ones.\\nValidations for init_code, nonce, valid_after, and valid_until.\\nImproved decoding error handling and transaction hash logging.\\nNew Features and Functionalities:\\nIntegrated Swagger tags for better API documentation.\\nAdded endpoint for safe deployments.\\nRefactored delegate endpoint signatures to use EIP712.\\nProcessed ENS names in token list address fields.\\nMinor Updates and Dependency Changes\\nSafe Config Service [v2.80.0]\\nchanglogs\\nCritical Updates:\\nRenamed SafeApp visible field to listed.\\nAdded prices provider configuration.\\nNew Features and Functionalities:\\nIntroduced optional \\\"onlyListed\\\" query param for SafeApps filtering.\\nMinor Updates and Dependency Updates\\nSafe Event Service [v0.12.0]\\nchanglogs\\nCritical Updates:\\nUpdated to Node.js v20.\\nRolled back TypeORM to v0.3.19.\\nNew Features and Functionalities:\\nAdded JSON format for event logs.\\nIntroduced asynchronous datasource creation.\\nMinor Updates and Dependency Updates\\nLast updated 3 months ago\",\n  \"markdown\": \"# Multisig Wallet | Network\\n\\n## \\n\\nSafe{Wallet}[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/wallet/multisig#safewallet)\\n\\n[Safe{Wallet}](https://multisig.mantle.xyz/) is the most trusted decentralized custody protocol and collective asset management platform.\\n\\n`What's new`[](#whats-new)\\n\\nMantle use several Safe services to support the multisig wallet, this is the changelog for these services:\\n\\n*   **Safe UI \\\\[1.36.4\\\\]**\\n    \\n    *   changelogs\\n        \\n        *   Critical Updates\\n            \\n            *   Improved handling of pending transactions.\\n                \\n            *   Disabled execute button.\\n                \\n            *   Added speed-up options.\\n                \\n            *   Redesigned approval editor.\\n                \\n            *   Added ENS resolution for Safe addresses in the sidebar.\\n                \\n            \\n        *   New Features and Functionalities\\n            \\n            *   Display balances in Safe list.\\n                \\n            *   Added activity app banner on dashboard.\\n                \\n            *   Introduced speed-up pending transactions feature toggle.\\n                \\n            *   Displayed deprecation banner for social logins on all pages.\\n                \\n            *   Enabled transaction deletion with UI updates.\\n                \\n            *   Automatic approval for verified WalletConnect sessions.\\n                \\n            \\n        *   Apps\\n            \\n            *   Added Token Approval Manager, which allows you to keep track of safe ERC20 token approvals and control them (edit/revoke) in batched transactions.\\n                \\n            \\n        *   Fixes and Improvements\\n            \\n            *   Always fetch message information when signing.\\n                \\n            *   Corrected fee tooltip text.\\n                \\n            *   Set default owner and improved counterfactual transactions when creating a Safe.\\n                \\n            *   Various UI fixes: dark mode, button overlaps, transaction status indicators.\\n                \\n            \\n        \\n    \\n\\n*   **Safe transaction service \\\\[v5.0.0\\\\]**\\n    \\n    *   **changlogs**\\n        \\n        *   Critical Updates:\\n            \\n            *   Removed deprecated endpoints (e.g., balances/usd).\\n                \\n            *   Enhanced UserOperation:\\n                \\n                *   Removed POST method.\\n                    \\n                *   Added safeOperation model.\\n                    \\n                *   New endpoint for UserOperations with indexing for failed/reverted ones.\\n                    \\n                *   Validations for init\\\\_code, nonce, valid\\\\_after, and valid\\\\_until.\\n                    \\n                *   Improved decoding error handling and transaction hash logging.\\n                    \\n                \\n            \\n        *   New Features and Functionalities:\\n            \\n            *   Integrated Swagger tags for better API documentation.\\n                \\n            *   Added endpoint for safe deployments.\\n                \\n            *   Refactored delegate endpoint signatures to use EIP712.\\n                \\n            *   Processed ENS names in token list address fields.\\n                \\n            \\n        *   Minor Updates and Dependency Changes\\n            \\n        \\n    \\n\\n*   **Safe Config Service \\\\[v2.80.0\\\\]**\\n    \\n    *   **changlogs**\\n        \\n        *   Critical Updates:\\n            \\n            *   Renamed SafeApp visible field to listed.\\n                \\n            *   Added prices provider configuration.\\n                \\n            *   New Features and Functionalities:\\n                \\n            *   Introduced optional \\\"onlyListed\\\" query param for SafeApps filtering.\\n                \\n            \\n        *   Minor Updates and Dependency Updates\\n            \\n        \\n    \\n\\n*   **Safe Event Service \\\\[v0.12.0\\\\]**\\n    \\n    *   **changlogs**\\n        \\n        *   Critical Updates:\\n            \\n            *   Updated to Node.js v20.\\n                \\n            *   Rolled back TypeORM to v0.3.19.\\n                \\n            *   New Features and Functionalities:\\n                \\n            *   Added JSON format for event logs.\\n                \\n            *   Introduced asynchronous datasource creation.\\n                \\n            \\n        *   Minor Updates and Dependency Updates\\n            \\n        \\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.1.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.1.0\",\n    \"loadedTime\": \"2025-02-15T20:32:14.368Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.1.0\",\n    \"title\": \"Mantle v2 v1.1.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v1.1.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/o4qGoOsccLCGuC7bOI59\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:14 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YmEwM2E1OTktMGNlOC00ZTVlLTgwYjctNzQwZjU5Y2NiNDlm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=QGJe6iXtjQjZYj1%2F0dN1EcWhTtdJTxgV9UbrXluUXEtXOS8U6Y71XdvHBUBfccvhQBFmeCHvSQMlXg1O6q2aLQQ7zNYvdEL9CWdwf4Jm4FedI4kMCFYCGmDEl%2BuJ4j%2BLOWs9KLof4ckCWbYQ%2Fsei\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810e818459c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.1.0 | Network\\nMantle v2​\\nThis release has optimized the way in which the Mantle network accesses EigenDA. We have introduced the EigenDA Proxy component, developed by the EigenDA team. Furthermore, we have enabled S3 and Redis caching for the internally deployed EigenDA Proxy, thereby enhancing the stability of the Mantle network. Additionally, we have changed the maximum size of the submitted EigenDA blob from 2MB to 4MB.\\nChange the maximum size of the submitted EigenDA blob from 2MB to 4MB (#184)\\nEigenDA Proxy integration (#185)\\nop-geth​\\nThis version includes several bug fixes and functional enhancements, implements secp256r1 signature verification to enhance wallet UX (FaceID / TouchID) , and deprecates the MetaTransaction feature. EIP-7702 will be integrated as a replacement for MetaTransaction in the future.\\nAdded the new JSON-RPC interface eth_getBlockReceipts (#91)\\nFixed the gas validation bug in txpool (#92)\\nAdded support for RIP-7212 secp256r1 signature verification in precompiled contracts (#93)\\nDeprecated the MetaTransaction feature (#95)\\nThe implementation refers to RIP 7212 spec and the secp256r1 algorithm does not perform malleability checks in the precompiled contract. Wrapper libraries SHOULD add a malleability check by default.\",\n  \"markdown\": \"# Mantle v2 v1.1.0 | Network\\n\\n## \\n\\nMantle v2[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#mantle-v2)\\n\\nThis release has optimized the way in which the Mantle network accesses EigenDA. We have introduced the `EigenDA Proxy` component, developed by the EigenDA team. Furthermore, we have enabled S3 and Redis caching for the internally deployed `EigenDA Proxy`, thereby enhancing the stability of the Mantle network. Additionally, we have changed the maximum size of the submitted EigenDA blob from 2MB to 4MB.\\n\\n*   Change the maximum size of the submitted EigenDA blob from 2MB to 4MB ([#184](https://github.com/mantlenetworkio/mantle-v2/pull/184))\\n    \\n*   `EigenDA Proxy` integration ([#185](https://github.com/mantlenetworkio/mantle-v2/pull/185))\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#op-geth)\\n\\nThis version includes several bug fixes and functional enhancements, implements secp256r1 signature verification to enhance wallet UX (FaceID / TouchID) , and deprecates the `MetaTransaction` feature. EIP-7702 will be integrated as a replacement for `MetaTransaction` in the future.\\n\\n*   Added the new JSON-RPC interface `eth_getBlockReceipts` ([#91](https://github.com/mantlenetworkio/op-geth/pull/91))\\n    \\n*   Fixed the gas validation bug in txpool ([#92](https://github.com/mantlenetworkio/op-geth/pull/92))\\n    \\n*   Added support for RIP-7212 secp256r1 signature verification in precompiled contracts ([#93](https://github.com/mantlenetworkio/op-geth/pull/93))\\n    \\n*   Deprecated the `MetaTransaction` feature ([#95](https://github.com/mantlenetworkio/op-geth/pull/95))\\n    \\n\\nThe implementation refers to RIP 7212 spec and the secp256r1 algorithm does not perform malleability checks in the precompiled contract. Wrapper libraries **SHOULD** add a malleability check by default.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides\",\n    \"loadedTime\": \"2025-02-15T20:32:15.620Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides\",\n    \"title\": \"How-to Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How-to Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/4qhHOIORsSIErfPeJAi0\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:15 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NmQ5MjNlZWYtZjA1OS00YTVmLTg2NDQtNzdmZjg2ZmE2MmY3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=tft%2FAprMdEsKNma95TYpPhMSIki45vv3WW0aE8MK6XcMh1nJh4Yb%2FE7hGzHsrIlwwEwYv88bKH15suy0YwLFdkrYfFsGEhDXVn7qy9fiChWYyQcOTFz5u6SFBaSaBWNwxWl3hAdr8%2BwGRYizlYa0\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810f009a69c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How-to Guides | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# How-to Guides | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/how-to-guides?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/how-to-guides?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker\",\n    \"loadedTime\": \"2025-02-15T20:32:13.271Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker\",\n    \"title\": \"Deploying a Sepolia Rollup Verifier/Replica Node From Docker | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Sepolia Rollup Verifier/Replica Node From Docker | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/6o75ExO2iaCJ3E29WMCr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:11 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NjgxOTE0ZjEtMzBiZS00NzRkLWFlYWYtNjk5Y2MwNDIwMDgx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=qDk7ZF234IarTVQU1oGakvTWJ7QtEqCV%2FjGnzct%2BNVhsCRp1x4OyGAVT%2FPC7kS0%2BNdYs9hIPwL2pSH1swH%2FynWtmhrJ%2FVOMa1VrvNy4c7q9%2BKfxW2oB%2BWX5Bz5U1cFsfQ0XgXeJ4HKswuFbOn2zP\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810d6a9ef4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Sepolia Rollup Verifier/Replica Node From Docker\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\nThis doc is a simple introduction to the process. For more details, please refer to this:\\nFor those operators who have already deployed the Mantle Sepolia node, you can skip directly to this section.\\nFor Operators Who Deploy Nodes For the First Time​\\nPrerequisites​\\nEnsure you have the following software installed:\\nHardware Recommendations​\\nFor optimal performance, it is recommended to have the following hardware specifications:\\nRAM - 16GB+\\nCPU - 8C+\\nStorage - 500GB+ disk(HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download speed\\nOperation Guide​\\nIf you are a new operator who wants to deploy a Mantle Sepolia node, please follow the steps provided here.\\nFor Operators Who Have Already Deployed Nodes​\\nOperation Guide​\\nIf you have previously deployed Mantle Sepolia nodes and need to complete this hardfork upgrade, you can follow the instructions here for more detailed information.\\nIf you meet some data issues in the process, please try to restore from snapshot. You can refer to this guide\",\n  \"markdown\": \"# Deploying a Sepolia Rollup Verifier/Replica Node From Docker\\n\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\n\\n*   **This doc is a simple introduction to the process.** For more details, please refer to this:\\n    \\n*   For those operators who have already deployed the Mantle Sepolia node, you can skip directly to this [section](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker#for-operators-who-have-already-deployed-nodes).\\n    \\n\\n## \\n\\nFor Operators Who Deploy Nodes For the First Time[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#for-operators-who-deploy-nodes-for-the-first-time)\\n\\n### \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#prerequisites)\\n\\nEnsure you have the following software installed:\\n\\n### \\n\\nHardware Recommendations[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#hardware-recommendations)\\n\\nFor optimal performance, it is recommended to have the following hardware specifications:\\n\\n*   **RAM** - 16GB+\\n    \\n*   **CPU** - 8C+\\n    \\n*   **Storage** - 500GB+ disk(HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download speed\\n    \\n\\n### \\n\\nOperation Guide[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#operation-guide)\\n\\nIf you are a new operator who wants to deploy a Mantle Sepolia node, please follow the steps provided [**here**](https://github.com/mantlenetworkio/networks/blob/main/run-node-sepolia.md#installation-and-setup-instructions-for-new-user).\\n\\n## \\n\\nFor Operators Who Have Already Deployed Nodes[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#for-operators-who-have-already-deployed-nodes)\\n\\n### \\n\\nOperation Guide[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#operation-guide-1)\\n\\nIf you have previously deployed Mantle Sepolia nodes and need to complete this hardfork upgrade, you can follow the instructions [**here**](https://github.com/mantlenetworkio/networks/blob/main/run-node-sepolia.md#2025-01-16-upgrade-for-historical-user) for more detailed information.\\n\\nIf you meet some data issues in the process, please try to restore from snapshot. You can refer to this [guide](https://github.com/mantlenetworkio/networks/blob/main/run-node-sepolia.md#restore-from-snapshot)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.1\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.1\",\n    \"loadedTime\": \"2025-02-15T20:32:16.825Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.1\",\n    \"title\": \"Mantle v2 v1.0.1 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v1.0.1 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/C117dAtNBsGjBdtYidAN\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZjU1OTNiMDMtOWY4MS00YjNiLWFlODUtZDBiNmM4MDg2MTQ0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=f9z8T%2F3Z49J5acjc3JOHNOhtLkLu3ALXa2crQudrlh%2FTiFMzj1ieQvBbpmBeLn3Tq7LQdrSFj2IXpEcysU9yHu8r%2FLUvYPRDUnX9K7eGH3cYPNKI0wzUJKw2cy82DlciCYIt9zWHSh0ThXxWGPFo\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810f739d29c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.0.1 | Network\\nThis is a Hardfork Upgrade on Mantle Sepolia Testnet. Sepolia node operators must upgrade; otherwise, nodes will be unusable.\\nMantle v1.0.1 is an upgrade for Mantle DA, transitioning from Mantle DA to EigenDA, and includes several functional optimizations, primarily:\\nMantle v2​\\nMantle Sepolia testnet DA layer switches from Mantle DA to EigenDA #163\\nop-geth​\\nOptimizing Meta Transaction, including gasFee estimation, charging logic, adding Meta Transaction security checks; improving estimateGas. #83\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v1.0.1 | Network\\n\\nThis is a Hardfork Upgrade on Mantle Sepolia Testnet. Sepolia node operators must upgrade; otherwise, nodes will be unusable.\\n\\nMantle v1.0.1 is an upgrade for Mantle DA, transitioning from Mantle DA to EigenDA, and includes several functional optimizations, primarily:\\n\\n## \\n\\nMantle v2[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.1#mantle-v2)\\n\\n*   Mantle Sepolia testnet DA layer switches from Mantle DA to EigenDA [#163](https://github.com/mantlenetworkio/mantle-v2/pull/163/files)\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.1#op-geth)\\n\\n*   Optimizing Meta Transaction, including gasFee estimation, charging logic, adding Meta Transaction security checks; improving estimateGas. [#83](https://github.com/mantlenetworkio/op-geth/pull/83/files)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2\",\n    \"loadedTime\": \"2025-02-15T20:32:16.876Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2\",\n    \"title\": \"Mantle v2 v1.0.2 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v1.0.2 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/FYHMgXhh0Rf2s7j9WgqV\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWE3ZGIyMDUtYzZmNy00ZjkxLThhNzUtNmFlNDU4ZGYwMTVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=MaiG6CMQPnfk%2BSac0z9isDLg3GgcXs07NDMoKRQhVrhzj0dKVCOS2RrwseZ6zNWEF8q4iWrxqmb1zo9Wk3OPiZ%2BMrWGJthw11ikDPtMiyNOcILQyfojUV0wgWIS2Suh4KIpz%2FncejDsyvgX09KxJ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810f73c14c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.0.2 | Network\\nMantle v1.0.2 is an update for optimizations of the OP-Batcher module, also with some bug fixed.\\nMantle v2​\\nOptimizes the logic of OP-Batcher DA submission. #179\\nOptimized the logic related to the submission of EigenDA.\\nAdded the ability to switch between EigenDA and Ethereum Blob based on configuration.\\nAdded verification for the commitment returned by EigenDA.\\nop-geth​\\nFix the issue where the txpool balance verification was inaccurate, leading to the full amount transfer being mistakenly judged as insufficient balance. #90\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v1.0.2 | Network\\n\\nMantle v1.0.2 is an update for optimizations of the OP-Batcher module, also with some bug fixed.\\n\\n## \\n\\nMantle v2[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#mantle-v2)\\n\\n*   Optimizes the logic of OP-Batcher DA submission. [#179](https://github.com/mantlenetworkio/mantle-v2/pull/179)\\n    \\n    *   Optimized the logic related to the submission of EigenDA.\\n        \\n    *   Added the ability to switch between EigenDA and Ethereum Blob based on configuration.\\n        \\n    *   Added verification for the commitment returned by EigenDA.\\n        \\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#op-geth)\\n\\n*   Fix the issue where the txpool balance verification was inaccurate, leading to the full amount transfer being mistakenly judged as insufficient balance. [#90](https://github.com/mantlenetworkio/op-geth/pull/90)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management/data-availability\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/data-availability\",\n    \"loadedTime\": \"2025-02-15T20:32:14.483Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/data-availability\",\n    \"title\": \"Data Availability | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Data Availability | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/fQjYeNdTfCOF2aI5VGjW\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:13 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2MxMWVhMmItZDFiYy00ZjA3LTk5NTItYTQxN2ViYjZmNTRl' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=EjpO8S4jfa2jn2DQTj9PuE17wTICHnoDykYAPvYgHK0YWms1KHyDQd1GJ2hDsJubwfTzfldZi4rvs4s0lt%2FyVMhYIJaFLqy%2BbP3NWg6MkR8Q4ScGDh0ryoZfpdjGg92lSLHRRWYmmvAEzXFx89sr\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810e328f84ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Data Availability | Network\\nWhat Is Data Availability?​\\nData Availability (DA) in Mantle network refers to the ability of any node to access the transaction history published by the sequencer. Access to block data by all network participants is a critical scalability issue, particularly in the context of blockchain running on a rollup architecture. As a Rollup inherits security from its layer 1 (L1) and publishes transaction data on L1, the sequencer plays a vital role in making transaction data available and trustworthy. DA is essential to maintain the liveness of the chain and capture invalid transactions, eliminating the possibility of block data being maliciously withheld.\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding here.\\nHow to Retain Data Availability?​\\nEnsuring data availability is a significant challenge in the blockchain industry, and there are lots of teams employing various innovative solutions to address it:\\n1. On-Chain L1 Approaches:​\\nEnsures data availability by making all data required for constructing proofs accessible on L1. While providing the highest level of trust, this may come with higher costs and relatively slower data retrieval.\\n2. Centralized DA Committees:​\\nUtilizes centralized DA committees responsible for providing the necessary data. This approach significantly reduces rollup costs compared to on-chain L1 methods but introduces the potential risk of data unavailability.\\n3. DA Sampling:​\\nDA Sampling is a way to enable light nodes to verify data availability without downloading the full block data. This mechanism involves light nodes randomly sampling a small portion of block data in multiple rounds, increasing confidence in data availability. Once the light node reaches a predetermined confidence level (e.g., 99%), it considers the block data available.\\n4. Independent DA Modules:​\\nInnovative approaches include independent DA modules, such as Mantle DA supported by EigenLayer's EigenDA technology. This method achieves data availability through a game theory of DA economics involving rewards and stake slashing. According to internal assessments, this solution can save more than 90% of costs compared to on-chain L1 methods, providing efficient data availability with economic incentives.\\nMantle DA - Powered by EigenDA Technology​\\nWhat is EigenLayer?​\\nEigenLayer is a re-staking protocol that leverages the existing trust network of Ethereum, allowing any rollup-based L2 to ensure data availability for its execution layer while maintaining the same level of security as the Ethereum mainnet. This is achieved through the re-staking mechanism, where L1 validators can choose to provide data availability services, using their staked ETH as collateral and complying with additional performance conditions.\\nThink of it as middleware for Ethereum.\\nSimilar to how Optimistic rollups use economic incentives to maintain system integrity, this mechanism provides incentives for Ethereum validators to offer services for additional income opportunities. Read more on EigenLayer here.\\nWhat is Mantle DA?​\\nEigenDA, built by EigenLabs, is one of the core applications of EigenLayer, chosen as the technology that powers the data availability module in Mantle Network. The current Mantle DA version is supported by EigenDA technology and authorized by EigenLabs. Throughout development, the Mantle team has been closely collaborating with the EigenLayer team to explore this streamlined solution. Once the standardized solution of EigenDA is ready for mainnet launch, Mantle will migrate its DA component to EigenDA for more efficient data availability. Additionally, Mantle DA allows permissioned nodes to provide data availability services to Mantle network, requiring $MNT staking to ensure network security. For more details, refer here.\\nFor Mantle DA, rollup data is available here: State Roots on L1, Rollup Tx Data on L1, and DA Rollup Tx on L2.\\nSee the section on DA Nodes to find out more about how the different participating actors that are part of the Mantle DA module function.\\nMantle DA Characteristics​\\nAllow decoupling of the data availability layer from the consensus layer\\nEmploy a unicast channel for data exchange between network participants to deliver efficiency gains both in terms of data transmission and storage\\nMaintain an erasure rate ensures pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\nThis approach will provide the required high throughput and low gas costs for the next generation of applications in blockchain gaming, decentralized social networks, and other fields.\\nMantle Explorer displays the transaction batch details for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Data Availability | Network\\n\\n## \\n\\nWhat Is Data Availability?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#what-is-data-availability)\\n\\nData Availability (DA) in Mantle network refers to the ability of any node to access the transaction history published by the sequencer. Access to block data by all network participants is a critical scalability issue, particularly in the context of blockchain running on a rollup architecture. As a Rollup inherits security from its layer 1 (L1) and publishes transaction data on L1, the sequencer plays a vital role in making transaction data available and trustworthy. DA is essential to maintain the liveness of the chain and capture invalid transactions, eliminating the possibility of block data being maliciously withheld.\\n\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding [here](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding).\\n\\n## \\n\\nHow to Retain Data Availability?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#how-to-retain-data-availability)\\n\\nEnsuring data availability is a significant challenge in the blockchain industry, and there are lots of teams employing various innovative solutions to address it:\\n\\n### \\n\\n1\\\\. On-Chain L1 Approaches:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#1-on-chain-l1-approaches)\\n\\nEnsures data availability by making all data required for constructing proofs accessible on L1. While providing the highest level of trust, this may come with higher costs and relatively slower data retrieval.\\n\\n### \\n\\n2\\\\. Centralized DA Committees:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#2-centralized-da-committees)\\n\\nUtilizes centralized DA committees responsible for providing the necessary data. This approach significantly reduces rollup costs compared to on-chain L1 methods but introduces the potential risk of data unavailability.\\n\\n### \\n\\n3\\\\. DA Sampling:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#3-da-sampling)\\n\\nDA Sampling is a way to enable light nodes to verify data availability without downloading the full block data. This mechanism involves light nodes randomly sampling a small portion of block data in multiple rounds, increasing confidence in data availability. Once the light node reaches a predetermined confidence level (e.g., 99%), it considers the block data available.\\n\\n### \\n\\n4\\\\. Independent DA Modules:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#4-independent-da-modules)\\n\\nInnovative approaches include independent DA modules, such as Mantle DA supported by EigenLayer's EigenDA technology. This method achieves data availability through a game theory of DA economics involving rewards and stake slashing. According to internal assessments, this solution can save more than **90%** of costs compared to on-chain L1 methods, providing efficient data availability with economic incentives.\\n\\n## \\n\\nMantle DA - Powered by EigenDA Technology[​](https://docs-v2.mantle.xyz/intro/risk-management/da#mantle-da---powered-by-eigenda-technology)\\n\\n### \\n\\nWhat is EigenLayer?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#what-is-eigenlayer)\\n\\nEigenLayer is a re-staking protocol that leverages the existing trust network of Ethereum, allowing any rollup-based L2 to ensure data availability for its execution layer while maintaining the same level of security as the Ethereum mainnet. This is achieved through the re-staking mechanism, where L1 validators can choose to provide data availability services, using their staked ETH as collateral and complying with additional performance conditions.\\n\\nThink of it as middleware for Ethereum.\\n\\nSimilar to how [Optimistic rollups](https://docs.mantle.xyz/network/more/glossary#optimistic-rollup) use economic incentives to maintain system integrity, this mechanism provides incentives for Ethereum validators to offer services for additional income opportunities. Read more on EigenLayer [here](https://ethresear.ch/t/an-eigenlayer-centric-roadmap-or-cancel-sharding/14141#what-is-eigenlayer-1).\\n\\n### \\n\\nWhat is Mantle DA?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#what-is-mantle-da)\\n\\nEigenDA, built by EigenLabs, is one of the core applications of EigenLayer, chosen as the technology that powers the data availability module in Mantle Network. The current Mantle DA version is supported by EigenDA technology and authorized by EigenLabs. Throughout development, the Mantle team has been closely collaborating with the EigenLayer team to explore this streamlined solution. Once the standardized solution of EigenDA is ready for mainnet launch, Mantle will migrate its DA component to EigenDA for more efficient data availability. Additionally, Mantle DA allows permissioned nodes to provide data availability services to Mantle network, requiring $MNT staking to ensure network security. For more details, refer [here](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da).\\n\\nFor Mantle DA, rollup data is available here: [State Roots on L1](https://etherscan.io/address/0x89E9D387555AF0cDE22cb98833Bae40d640AD7fa), [Rollup Tx Data on L1](https://etherscan.io/address/0x291dc3819b863e19b0a9b9809F8025d2EB4aaE93), and [DA Rollup Tx on L2](https://mantlescan.xyz/batches).\\n\\nSee the [**section**](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture#components) on [DA Nodes](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#da-nodes) to find out more about how the different participating actors that are part of the Mantle DA module function.\\n\\n### \\n\\nMantle DA Characteristics[​](https://docs-v2.mantle.xyz/intro/risk-management/da#mantle-da-characteristics)\\n\\n*   Allow decoupling of the data availability layer from the consensus layer\\n    \\n*   Employ a unicast channel for data exchange between network participants to deliver efficiency gains both in terms of data transmission and storage\\n    \\n*   Maintain an erasure rate ensures pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\n    \\n\\nThis approach will provide the required high throughput and low gas costs for the next generation of applications in blockchain gaming, decentralized social networks, and other fields.\\n\\n**Mantle Explorer** displays the [transaction batch details](https://mantlescan.xyz/batches) for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:19.058Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts\",\n    \"title\": \"How to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/MMaogjB242tKi1RYGWjZ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:17 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MDFjNTBkNDAtY2UwMy00MTI1LTgxNTMtZjhlNWVkZjI1MzM4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=%2B7EaYDxLOpCa9HF7jHZoZrWHgGReWx%2FWGCFg95Qv%2B0iu%2FyXDftZvoqJisXLbf6516N3nMY2%2FWPdfSRdn6bTphemVwDMOKKbGKElzJDHE4UoPovIWvJKz5uCtkkhuQZqlyHIbOJw6Re00%2BxeIz5uk\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810faf9af4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Deploy Smart Contracts\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# How to Deploy Smart Contracts\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/how-to-guides/how-to-deploy-smart-contracts?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:21.156Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts\",\n    \"title\": \"Use Hardhat to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Hardhat to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/0EdjwN8ydfUbog2iQHW8\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:17 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDJmNWI2OTAtOWZlOC00Y2Q2LTgyYzMtOGY4MGE0ZWQ5YjBh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=SYhPcQR9OH2esAAv2HC%2BBWcQYqwiv7FDOPywG%2FsUXZd5Mpgd%2FZ8Yx4rZ8YZKNsHpSDLI9g%2Bkub6g94Prexqqbl%2F73VX5l%2BUYN%2FVHFpg59uXsHaVn1yKuUWJHRUJOvnLC6xlUZ8bxQB2qq5zPc5C3\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810f9bfce4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Hardhat to Deploy Smart Contracts\\nHardhat is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Faucet page\\nCreate a project and configure​\\nBegin by creating a new Hardhat project and installing the necessary dependencies. In this tutorial, we will use the dotenv library to set up your wallet private key.\\nnpm install dotenv --save-dev\\nCreate a .env file and set your wallet private key inside it.\\ntouch .env echo \\\"ACCOUNT_PRIVATE_KEY=<your-wallet-private-key>\\\" >> .env\\nOnce the wallet private key is ready, configure the hardhat.config.ts file to include Mantle Network's settings.\\nimport { HardhatUserConfig } from \\\"hardhat/config\\\"; import '@nomicfoundation/hardhat-toolbox'; import * as dotenv from 'dotenv'; dotenv.config(); const config: HardhatUserConfig = { solidity: \\\"0.8.19\\\", // solidity version defaultNetwork: \\\"mantleSepolia\\\", // chosen by default when network isn't specified while running Hardhat networks: { mantle: { url: \\\"https://rpc.mantle.xyz\\\", //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"], }, mantleSepolia: { url: \\\"https://rpc.sepolia.mantle.xyz\\\", // Sepolia Testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"], }, }, }; export default config;\\nIn this configuration file, three networks are set up for deployment: Mantle Mainnet, and Mantle Sepolia Testnet (as default).\\nCompile and Deploy​\\nWith your contracts prepared in the \\\"Contracts\\\" directory within your Hardhat project, compile them using the following command.\\nSample Outputs\\nGenerating typings for: 1 artifacts in dir: typechain-types for target: ethers-v6 Successfully generated 6 typings! Compiled 1 Solidity file successfully (evm target: paris).\\nDeploy your contracts to a chosen network using the following command. You can omit the --network field to deploy on the default network specified in hardhat.config.ts (Mantle Sepolia Testnet in this tutorial).\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia\\nYou will receive a response confirming successful contract deployment, and the address (e.g., 0xDe33e86f2Da37E01e0eCb870bd1CE91a71bB6bF4) is the deployed contract's address.\\nNow you can head over to Mantle blockchain explorer to check the contract details.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Use Hardhat to Deploy Smart Contracts\\n\\n[Hardhat](https://hardhat.org/hardhat-runner/docs/getting-started#overview) is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\n\\n## \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/hardhat#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nCreate a project and configure[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/hardhat#create-a-project-and-configure)\\n\\n1.  Begin by [creating a new Hardhat project](https://hardhat.org/hardhat-runner/docs/guides/project-setup) and installing the necessary dependencies. In this tutorial, we will use the `dotenv` library to set up your wallet private key.\\n    \\n    ```\\n    npm install dotenv --save-dev\\n    ```\\n    \\n2.  Create a `.env` file and set your wallet private key inside it.\\n    \\n    ```\\n    touch .env\\n    echo \\\"ACCOUNT_PRIVATE_KEY=<your-wallet-private-key>\\\" >> .env\\n    ```\\n    \\n3.  Once the wallet private key is ready, configure the `hardhat.config.ts` file to include Mantle Network's settings.\\n    \\n    ```\\n    import { HardhatUserConfig } from \\\"hardhat/config\\\";\\n    import '@nomicfoundation/hardhat-toolbox';\\n    import * as dotenv from 'dotenv';\\n    \\n    dotenv.config();\\n    \\n    const config: HardhatUserConfig = {\\n        solidity: \\\"0.8.19\\\", // solidity version\\n        defaultNetwork: \\\"mantleSepolia\\\", // chosen by default when network isn't specified while running Hardhat\\n        networks: {\\n            mantle: {\\n                url: \\\"https://rpc.mantle.xyz\\\", //mainnet\\n                accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"],\\n            },\\n            mantleSepolia: {\\n                url: \\\"https://rpc.sepolia.mantle.xyz\\\", // Sepolia Testnet\\n                accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"],\\n            },\\n        },\\n    };\\n    \\n    export default config;\\n    ```\\n    \\n    In this configuration file, three networks are set up for deployment: **Mantle Mainnet**, and **Mantle Sepolia Testnet** (as default).\\n    \\n\\n## \\n\\nCompile and Deploy[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/hardhat#compile-and-deploy)\\n\\n1.  With your contracts prepared in the **\\\"Contracts\\\"** directory within your Hardhat project, compile them using the following command.\\n    \\n    **Sample Outputs**\\n    \\n    ```\\n    Generating typings for: 1 artifacts in dir: typechain-types for target: ethers-v6\\n    Successfully generated 6 typings!\\n    Compiled 1 Solidity file successfully (evm target: paris).\\n    ```\\n    \\n2.  Deploy your contracts to a chosen network using the following command. You can omit the `--network` field to deploy on the default network specified in `hardhat.config.ts` (Mantle Sepolia Testnet in this tutorial).\\n    \\n    ```\\n    npx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia\\n    ```\\n    \\n    You will receive a response confirming successful contract deployment, and the address (e.g., `0xDe33e86f2Da37E01e0eCb870bd1CE91a71bB6bF4`) is the deployed contract's address.\\n    \\n\\nNow you can head over to [Mantle blockchain explorer](https://mantlescan.xyz/) to check the contract details.\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.0\",\n    \"loadedTime\": \"2025-02-15T20:32:25.175Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.0\",\n    \"title\": \"Mantle v2 v1.0.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v1.0.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/aws4XCtzuUkckOpaAyY6\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:25 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MDcyYjJhYzItYzgyOS00OGM4LWIxMjEtZGFiNzdjYzczMTU3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=caMraT9Td0pmfee%2F1Tzkh%2BvpIsv58bGadZm1bfoFLS0THVGWNv5aG69tQIyNV3K6ga3VylueOeuRqBZRPIC%2BB9GJ2sCweOnLhxeO6r9%2B8Pdy95kor49Xpdzla6o4vquQQODcV%2BQZxqpr0%2FdztnqU\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128112afb2dc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.0.0 | Network\\nMantle v2 v1.0.0 is the confirmed version for the mainnet launch, which includes some bug fixes based on the testnet version v0.5.0. The main updates are:\\nMantle v2 Tectonic​\\nEnhance handling of abnormal situations in Mantle DA. #117\\nAdd verification for some methods of bridge contract #106\\nop-geth​\\nOptimize Meta Transactions UX. #37\\nOptimize the estimateGas function. #67\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v1.0.0 | Network\\n\\nMantle v2 v1.0.0 is the confirmed version for the mainnet launch, which includes some bug fixes based on the testnet version [v0.5.0](https://docs-v2.mantle.xyz/nodes/changelogs/v0.5.0). The main updates are:\\n\\n## \\n\\nMantle v2 Tectonic[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.0#mantle-v2-tectonic)\\n\\n*   Enhance handling of abnormal situations in Mantle DA. [#117](https://github.com/mantlenetworkio/mantle-v2/pull/117)\\n    \\n*   Add verification for some methods of bridge contract [#106](https://github.com/mantlenetworkio/mantle-v2/pull/106)\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.0#op-geth)\\n\\n*   Optimize Meta Transactions UX. [#37](https://github.com/mantlenetworkio/op-geth/pull/37)\\n    \\n*   Optimize the `estimateGas` function. [#67](https://github.com/mantlenetworkio/op-geth/pull/67)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-thirdweb-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-thirdweb-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:25.276Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-thirdweb-to-deploy-smart-contracts\",\n    \"title\": \"Use Thirdweb to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Thirdweb to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/3pDf28i1HQr2kJ1qWTAM\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:25 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTUxZTJhYTktYmI1NC00OTM5LWE5ZWUtMDI5Yjg1ODI1MmQw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=CLvcgq9l89j%2FexcJvKOAT2s33XszOtIe4ohms5l4JLMqZwBUuekpouWICd2P6zSxPSvkkY6JtpQFZO3h5Bz3wuro7Sl%2BYFkQJw2RY4vJXNqBawRtRcbQOrCaBfeSQ%2BOWr6YV8h4V%2FkNmTwOUAhFS\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128112b0ecd9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Thirdweb to Deploy Smart Contracts\\nThirdweb is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network.\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Faucet page\\nInstall Thirdweb CLI​\\nYou can install the Thirdweb CLI globally on your machine using npm by running the following command.\\nnpm i -g @thirdweb-dev/cli\\nCreate a project​\\nStart by creating a new project by running:\\nnpx thirdweb create contract\\nInput your preferences for the command line prompts, such like:\\n✔ What is your project named? … mantle-test ✔ What framework do you want to use? › Hardhat ✔ What will be the name of your new smart contract? … MyContract ✔ What type of contract do you want to start from? › Empty Contract\\nHere we have chosen to use the hardhat framework and generated an empty contract project.\\nPlace the contracts you want to deploy in the contracts folder, for example, let's deploy a Storage contract.\\n// SPDX-License-Identifier: GPL-3.0 pragma solidity >=0.8.2 <0.9.0; /** * @title Storage * @dev Store & retrieve value in a variable * @custom:dev-run-script ./scripts/deploy_with_ethers.ts */ contract Storage { uint256 number; /** * @dev Store value in variable * @param num value to store */ function store(uint256 num) public { number = num; } /** * @dev Return value * @return value of 'number' */ function retrieve() public view returns (uint256){ return number; } }\\nDeploy your contract​\\nThe command deploy allows you to deploy a smart contract to Mantle Network without configuring RPC URLs, exposing your private keys, writing scripts, and another additional setup such as verifying your contract.\\nTo deploy your smart contract using deploy, navigate to the root directory of your project and run:\\nSample Outputs\\n✔ Detected project type: hardhat ✔ Compilation successful ✔ Processing contract: \\\"Storage\\\" ✔ Upload successful ✔ Open this link to deploy your contracts: https://thirdweb.com/contracts/deploy/QmPQJLQaEHVRD55hUSvkraSb74ZzBqwCcmFGGCXX5TLmx6\\nOpen the link and connect your wallet, select the network you need to deploy, and click the Deploy Now button to complete the deployment!\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Thirdweb to Deploy Smart Contracts\\n\\n[Thirdweb](https://portal.thirdweb.com/) is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network.\\n\\n## \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nInstall Thirdweb CLI[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#install-thirdweb-cli)\\n\\nYou can install the Thirdweb CLI globally on your machine using npm by running the following command.\\n\\n```\\nnpm i -g @thirdweb-dev/cli\\n```\\n\\n## \\n\\nCreate a project[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#create-a-project)\\n\\n1.  Start by creating a new project by running:\\n    \\n    ```\\n    npx thirdweb create contract\\n    ```\\n    \\n2.  Input your preferences for the command line prompts, such like:\\n    \\n    ```\\n    ✔ What is your project named? … mantle-test\\n    ✔ What framework do you want to use? › Hardhat\\n    ✔ What will be the name of your new smart contract? … MyContract\\n    ✔ What type of contract do you want to start from? › Empty Contract\\n    ```\\n    \\n    Here we have chosen to use the hardhat framework and generated an empty contract project.\\n    \\n3.  Place the contracts you want to deploy in the contracts folder, for example, let's deploy a `Storage` contract.\\n    \\n    ```\\n    // SPDX-License-Identifier: GPL-3.0\\n    \\n    pragma solidity >=0.8.2 <0.9.0;\\n    \\n    /**\\n    * @title Storage\\n    * @dev Store & retrieve value in a variable\\n    * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\\n    */\\n    contract Storage {\\n    \\n        uint256 number;\\n    \\n        /**\\n        * @dev Store value in variable\\n        * @param num value to store\\n        */\\n        function store(uint256 num) public {\\n            number = num;\\n        }\\n    \\n        /**\\n        * @dev Return value\\n        * @return value of 'number'\\n        */\\n        function retrieve() public view returns (uint256){\\n            return number;\\n        }\\n    }\\n    ```\\n    \\n\\n## \\n\\nDeploy your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#deploy-your-contract)\\n\\nThe command `deploy` allows you to deploy a smart contract to Mantle Network without configuring RPC URLs, exposing your private keys, writing scripts, and another additional setup such as verifying your contract.\\n\\n1.  To deploy your smart contract using deploy, navigate to the root directory of your project and run:\\n    \\n    **Sample Outputs**\\n    \\n    ```\\n    ✔ Detected project type: hardhat\\n    ✔ Compilation successful\\n    ✔ Processing contract: \\\"Storage\\\"\\n    ✔ Upload successful\\n    ✔ Open this link to deploy your contracts: https://thirdweb.com/contracts/deploy/QmPQJLQaEHVRD55hUSvkraSb74ZzBqwCcmFGGCXX5TLmx6\\n    ```\\n    \\n2.  Open the link and connect your wallet, select the network you need to deploy, and click the **Deploy Now** button to complete the deployment!\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fthirdweb-1-a374d0a39cc9e4863fad2b94c93e9506.png&width=768&dpr=4&quality=100&sign=fe440751&sv=2)\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v0.5.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v0.5.0\",\n    \"loadedTime\": \"2025-02-15T20:32:25.490Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v0.5.0\",\n    \"title\": \"Mantle v2 v0.5.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v0.5.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/FbKx4sLV0fZARC4EQc7k\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:25 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDQxMGJhMmMtMmQ5Mi00ZGJmLWEyZjktOTYyMTEzN2Q5ZGFi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=99T4zyt8TjYBj9jTOwCeLzfnlEMkxilvyiqSjOLZk14mgtU2HoNfItPP1bBbK13QhqwVPoQbgWt2sOIh5nWCPHXOGM6HbbBBfVcHtPcfpjERgvwq9tDpZeIArLZJO92fYSBprOYDkUKThWKJ%2Bkju\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128112c09d3a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v0.5.0 | Network\\nMantle v2 Tectonic​\\nThis release includes several important functionalities such as using MNT as the native token, implementing Mantle DA as the DA layer, and complement of migration tool for Mantle upgrade.\\nIt's forked from the Optimism release v1.1.0.\\nUses MNT as the Native Token and Gas Token, replacing Ether #2 #11\\nAdds Mantle DA as the DA layer #4 #9 #29\\nEnhances the Migration Tool to facilitate network upgrades of Mantle OVM versions #19 #20\\nIntroduces the gas-oracle module to record the ETH/MNT ratio, utilized for fee calculation and collection #41\\nSupports the use of HSM (Hardware Security Module) for custody of crucial accounts in modules like op-proposer, op-batcher, etc. #43 #55\\nImproves end-to-end testing and code unit test coverage #18 #38 #39\\nop-geth​\\nThis release includes several important functionalities such as using MNT as the native token, optimizing fee estimation, and enabling meta-transactions. This release is forked from the Release version v1.101105.3 and additionally integrates the latest go-ethereum release v1.11.5.\\nUse MNT as the Native Token and Gas Token instead of Ether. #1\\nSupport Meta Transactions at the protocol level for gas fee delegation services in various scenarios. #2\\nOptimize the estimateGas function to return fees inclusive of both layer1 and layer2 when estimating transaction fees. #6\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v0.5.0 | Network\\n\\n## \\n\\nMantle v2 Tectonic[​](https://docs-v2.mantle.xyz/nodes/changelogs/v0.5.0#mantle-v2-tectonic)\\n\\nThis release includes several important functionalities such as using MNT as the native token, implementing Mantle DA as the DA layer, and complement of migration tool for Mantle upgrade.\\n\\nIt's forked from the Optimism release v1.1.0.\\n\\n*   Uses MNT as the Native Token and Gas Token, replacing Ether [#2](https://github.com/mantlenetworkio/mantle-v2/pull/2) [#11](https://github.com/mantlenetworkio/mantle-v2/pull/11)\\n    \\n*   Adds Mantle DA as the DA layer [#4](https://github.com/mantlenetworkio/mantle-v2/pull/4) [#9](https://github.com/mantlenetworkio/mantle-v2/pull/9) [#29](https://github.com/mantlenetworkio/mantle-v2/pull/29)\\n    \\n*   Enhances the Migration Tool to facilitate network upgrades of Mantle OVM versions [#19](https://github.com/mantlenetworkio/mantle-v2/pull/19) [#20](https://github.com/mantlenetworkio/mantle-v2/pull/20)\\n    \\n*   Introduces the gas-oracle module to record the ETH/MNT ratio, utilized for fee calculation and collection [#41](https://github.com/mantlenetworkio/mantle-v2/pull/41)\\n    \\n*   Supports the use of HSM (Hardware Security Module) for custody of crucial accounts in modules like `op-proposer`, `op-batcher`, etc. [#43](https://github.com/mantlenetworkio/mantle-v2/pull/43) [#55](https://github.com/mantlenetworkio/mantle-v2/pull/55)\\n    \\n*   Improves end-to-end testing and code unit test coverage [#18](https://github.com/mantlenetworkio/mantle-v2/pull/18) [#38](https://github.com/mantlenetworkio/mantle-v2/pull/38) [#39](https://github.com/mantlenetworkio/mantle-v2/pull/39)\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v0.5.0#op-geth)\\n\\nThis release includes several important functionalities such as using MNT as the native token, optimizing fee estimation, and enabling meta-transactions. This release is forked from the Release version v1.101105.3 and additionally integrates the latest go-ethereum release v1.11.5.\\n\\n*   Use MNT as the Native Token and Gas Token instead of Ether. [#1](https://github.com/mantlenetworkio/op-geth/pull/1)\\n    \\n*   Support Meta Transactions at the protocol level for gas fee delegation services in various scenarios. [#2](https://github.com/mantlenetworkio/op-geth/pull/2)\\n    \\n*   Optimize the `estimateGas` function to return fees inclusive of both layer1 and layer2 when estimating transaction fees. [#6](https://github.com/mantlenetworkio/op-geth/pull/6)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:20.968Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contracts\",\n    \"title\": \"Use Foundry to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Foundry to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/g7ZmYykcBiIg7VnkdlrY\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:18 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MDBiYjAwMzctYTJiZS00NGVjLTg0YjAtODhmNTAzMzU0Njc4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=BXouyNvsUojkDVNEcAdwGImEbdccbBZuZrU5CdAK5rdM5NJOjZmjsVXceZG6NSSMBlVZy4EMZdsUkijS6LUvb3F9ASRVougZbbQnPFBzeS59Nx8icR0pAeIBAjTh%2B3KakEu3GpUtSLREZpTmDwuR\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281103081e4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Foundry to Deploy Smart Contracts\\nFoundry is a fast, portable, and modular toolkit for EVM application development written in Rust. The two main components that you'll generally be using for smart contract development are:\\nForge: used to compile, test, and deploy contracts\\nCast: used to make RPC calls to interact with a network\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Faucet page\\nInstall Foundry​\\nFoundryup is the Foundry toolchain installer. Open your terminal and run the following command:\\ncurl -L https://foundry.paradigm.xyz | bash\\nFor more installation instructions, check here.\\nCreate a project​\\nCreate a new Foundry project and install the necessary dependencies.\\nPlease put your contract in the src folder. For this tutorial, we will use the existing example contract Counter.sol. Then use the following command to compile a smart contract.\\nSample Outputs\\n[⠒] Compiling... [⠒] Compiling 24 files with 0.8.15 [⠢] Solc 0.8.15 finished in 2.52sCompiler run successful! [⠆] Solc 0.8.15 finished in 2.52s\\nDeploy your contract​\\nUpon successful compilation, use the following command to deploy a smart contract (replace <your-private-key> on the command line with your wallet private key).\\nforge create --rpc-url <mantle_rpc_url> --private-key <your-private-key> src/Counter.sol:Counter --legacy\\nSample Outputs\\n[⠢] Compiling...No files changed, compilation skipped [⠆] Compiling... Deployer: 0xE1F10AfE71FF3397A85aAce99D42Db6661E02bB9 Deployed to: 0x38fa66D97b98607636F88C98aE59e08C04D2FEB6 Transaction hash: 0x308fb9f1824ca85e34ed9d1df94aa3f1d9dbcc02b3d01a130ac4b7cf1e1a77fb\\nHere 0x38fa66D97b98607636F88C98aE59e08C04D2FEB6 is the address of the deployed contract, which you can view via the Mantle blockchain explorer.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Foundry to Deploy Smart Contracts\\n\\n[Foundry](https://github.com/foundry-rs/foundry#readme) is a fast, portable, and modular toolkit for EVM application development written in Rust. The two main components that you'll generally be using for smart contract development are:\\n\\n*   [Forge](https://github.com/foundry-rs/foundry/tree/master/crates/forge#readme): used to compile, test, and deploy contracts\\n    \\n*   [Cast](https://github.com/foundry-rs/foundry/tree/master/crates/cast#readme): used to make RPC calls to interact with a network\\n    \\n\\n### \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nInstall Foundry[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#install-foundry)\\n\\nFoundryup is the Foundry toolchain installer. Open your terminal and run the following command:\\n\\n```\\ncurl -L https://foundry.paradigm.xyz | bash\\n```\\n\\nFor more installation instructions, check [here](https://book.getfoundry.sh/getting-started/installation#installation).\\n\\n## \\n\\nCreate a project[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#create-a-project)\\n\\n1.  Create a new Foundry project and install the necessary dependencies.\\n    \\n2.  Please put your contract in the **src** folder. For this tutorial, we will use the existing example contract `Counter.sol`. Then use the following command to compile a smart contract.\\n    \\n    **Sample Outputs**\\n    \\n    ```\\n    [⠒] Compiling...\\n    [⠒] Compiling 24 files with 0.8.15\\n    [⠢] Solc 0.8.15 finished in 2.52sCompiler run successful!\\n    [⠆] Solc 0.8.15 finished in 2.52s\\n    ```\\n    \\n\\n## \\n\\nDeploy your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#deploy-your-contract)\\n\\nUpon successful compilation, use the following command to deploy a smart contract (replace <your-private-key> on the command line with your wallet private key).\\n\\n```\\nforge create --rpc-url <mantle_rpc_url> --private-key <your-private-key> src/Counter.sol:Counter --legacy\\n```\\n\\n### \\n\\n**Sample Outputs**\\n\\n```\\n[⠢] Compiling...No files changed, compilation skipped\\n[⠆] Compiling...\\nDeployer: 0xE1F10AfE71FF3397A85aAce99D42Db6661E02bB9\\nDeployed to: 0x38fa66D97b98607636F88C98aE59e08C04D2FEB6\\nTransaction hash: 0x308fb9f1824ca85e34ed9d1df94aa3f1d9dbcc02b3d01a130ac4b7cf1e1a77fb\\n```\\n\\nHere `0x38fa66D97b98607636F88C98aE59e08C04D2FEB6` is the address of the deployed contract, which you can view via the [Mantle blockchain explorer](https://mantlescan.xyz/).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-hardhat-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-hardhat-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:27.670Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-hardhat-to-verify-smart-contracts\",\n    \"title\": \"Use Hardhat to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Hardhat to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/9kZCqDkv1WYuD0trpt2V\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:27 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmFlMDRhNDAtYzU0Ny00NzIyLWI2ZWMtNGY0ZGQxNjBkYTZi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ZiwCzdxjWBQZJbYCUTYE0P7BLwiF87WN%2BYncsQ0L8jWc5p662CkaScjAHtwEuVEUOTY1%2B7dG9afww3Q0EroHqNXw%2F%2FRzxgrcV5bquSj40OQGGGZpGWi1QsVK5dHKAoVjMNmmGZurlKmslCoHTFta\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281139becba5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Hardhat to Verify Smart Contracts\\nTo verify your contracts using Hardhat, you'll need an Etherscan API key and custom network configuration in your hardhat.config.ts file.\\nConfigure​\\nModify the hardhat.config.ts configuration to include customChains before moving forward.\\nimport {HardhatUserConfig} from 'hardhat/config'; import '@nomicfoundation/hardhat-toolbox'; import * as dotenv from 'dotenv'; dotenv.config(); const config: HardhatUserConfig = { solidity: '0.8.19', // solidity version defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat networks: { mantle: { url: 'https://rpc.mantle.xyz', //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], }, mantleSepolia: { url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], gasPrice: 20000000, }, }, etherscan: { apiKey: process.env.API_KEY, customChains: [ { network: 'mantle', chainId: 5000, urls: { apiURL: 'https://api.mantlescan.xyz/api', browserURL: 'https://mantlescan.xyz', }, }, { network: 'mantleSepolia', chainId: 5003, urls: { apiURL: 'https://api-sepolia.mantlescan.xyz/api', browserURL: 'https://sepolia.mantlescan.xyz/', }, }, ], }, }; export default config;\\nVerify your contracts​\\nCurrently hardhat supports two methods of contract validation:\\nUse --deployment-id to name your deployment.\\nYou can use a flag to name your contract (whatever you want) during deployment, and then you can run the ignition verify task and pass the deployment Id to verify your contracts.\\nDeploy your contract like this:\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --deployment-id <Contract-Deployment-ID>\\nVerify your contract like this:\\nnpx hardhat ignition verify <Contract-Deployment-ID>\\nUse --verify to verify your contract during deployment:\\nYou can add a flag to verify your contract during deployment\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --verify\\nSample Outputs\\nSuccessfully submitted source code for contract contracts/Lock.sol:Lock at 0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c for verification on the block explorer. Waiting for verification result... Successfully verified contract Lock on the block explorer. https://sepolia.mantlescan.xyz/address/0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c#code\\nNow you can head over to Mantle blockchain explorer to check the contract status.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Use Hardhat to Verify Smart Contracts\\n\\nTo verify your contracts using Hardhat, you'll need an [Etherscan API key](https://docs.etherscan.io/getting-started/viewing-api-usage-statistics) and custom network configuration in your `hardhat.config.ts` file.\\n\\n## \\n\\nConfigure[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/hardhat#configure)\\n\\n2.  Modify the `hardhat.config.ts` configuration to include `customChains` before moving forward.\\n    \\n    ```\\n    import {HardhatUserConfig} from 'hardhat/config';\\n    import '@nomicfoundation/hardhat-toolbox';\\n    import * as dotenv from 'dotenv';\\n    \\n    dotenv.config();\\n    \\n    const config: HardhatUserConfig = {\\n      solidity: '0.8.19', // solidity version\\n      defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat\\n      networks: {\\n        mantle: {\\n          url: 'https://rpc.mantle.xyz', //mainnet\\n          accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n        },\\n        mantleSepolia: {\\n          url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet\\n          accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n          gasPrice: 20000000,\\n        },\\n      },\\n      etherscan: {\\n        apiKey: process.env.API_KEY,\\n        customChains: [\\n          {\\n            network: 'mantle',\\n            chainId: 5000,\\n            urls: {\\n              apiURL: 'https://api.mantlescan.xyz/api',\\n              browserURL: 'https://mantlescan.xyz',\\n            },\\n          },\\n          {\\n            network: 'mantleSepolia',\\n            chainId: 5003,\\n            urls: {\\n              apiURL: 'https://api-sepolia.mantlescan.xyz/api',\\n              browserURL: 'https://sepolia.mantlescan.xyz/',\\n            },\\n          },\\n        ],\\n      },\\n    };\\n    export default config;\\n    ```\\n    \\n\\n## \\n\\nVerify your contracts[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/hardhat#verify-your-contracts)\\n\\nCurrently hardhat supports two methods of contract validation:\\n\\n#### \\n\\nUse `--deployment-id` to name your deployment.\\n\\nYou can use a flag to name your contract (whatever you want) during deployment, and then you can run the `ignition verify` task and pass the deployment Id to verify your contracts.\\n\\n1.  Deploy your contract like this:\\n    \\n\\n```\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --deployment-id <Contract-Deployment-ID>\\n```\\n\\n1.  Verify your contract like this:\\n    \\n\\n```\\nnpx hardhat ignition verify <Contract-Deployment-ID>\\n```\\n\\n#### \\n\\nUse `--verify` to verify your contract during deployment:\\n\\nYou can add a flag to verify your contract during deployment\\n\\n```\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --verify\\n```\\n\\n### \\n\\n**Sample Outputs**\\n\\n```\\nSuccessfully submitted source code for contract\\ncontracts/Lock.sol:Lock at 0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c\\nfor verification on the block explorer. Waiting for verification result...\\n\\nSuccessfully verified contract Lock on the block explorer.\\nhttps://sepolia.mantlescan.xyz/address/0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c#code\\n```\\n\\nNow you can head over to [Mantle blockchain explorer](https://mantlescan.xyz/) to check the contract status.\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-foundry-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-foundry-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:30.034Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-foundry-to-verify-smart-contracts\",\n    \"title\": \"Use Foundry to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Foundry to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/fVMa7VUBOmUdLNkXV76K\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTFkMzY4NGYtYjIyNC00ZjE2LTllMWEtYjNjMWQ5NzQxN2I3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=5MeJcA1DKn1xAYj2%2B4%2BM1NnktVbi7GOLl2TeL7pKjqwmYI1yL%2BhMrJwRuiuyze%2BtZIs3sVudxdcjsnhQyUBxRRpNrDe3Bm1cmOrrpS4gQXYTVjvzBg9OAsk7NXIk8CfFsX7g8SVVNWZR0UxbNOW1\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281149a99c9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Foundry to Verify Smart Contracts\\nTo verify your contracts using Foundry, we need to verify the contract with the help of Mantle's explorer. It is assumed that you have already completed the deployment of the contract. If not, you can review this document to complete the contract deployment.\\nVerify your contract​\\nRun the following command in your terminal to verify your contract.\\nforge verify-contract --verifier-url https://api-sepolia.mantlescan.xyz/api --etherscan-api-key <YOUR_MANTLESCAN_API_KEY> --compiler-version \\\"v0.8.23+commit.f704f362\\\" <contract address> src/Contract_Name.sol:Contract_Name --watch\\nMake sure to configure --compiler-version and --num-of-optimizations correctly! And you can modify the --constructor-args if needed. And make sure you set the --chain and --verifier-url correctly.\\nSample Outputs\\nStart verifying contract `0xad4736AE3DB1E71375a27b7d8A634994921E3c04` deployed on mainnet Submitting verification for [src/Counter.sol:Counter] 0xad4736AE3DB1E71375a27b7d8A634994921E3c04. Submitted contract for verification: Response: `OK` GUID: `d5s2dhvr62tahsjez9cypxkxdcmpjagkkxxuqcp6dkyaizbp8n` URL: https://etherscan.io/address/0xad4736ae3db1e71375a27b7d8a634994921e3c04 Contract verification status: Response: `NOTOK` Details: `Pending in queue` Contract verification status: Response: `OK` Details: `Pass - Verified` Contract successfully verified\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Foundry to Verify Smart Contracts\\n\\nTo verify your contracts using Foundry, we need to verify the contract with the help of Mantle's explorer. It is assumed that you have already completed the deployment of the contract. If not, you can review this document to complete the contract deployment.\\n\\n## \\n\\nVerify your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/foundry#verify-your-contract)\\n\\nRun the following command in your terminal to verify your contract.\\n\\n```\\nforge verify-contract --verifier-url https://api-sepolia.mantlescan.xyz/api --etherscan-api-key <YOUR_MANTLESCAN_API_KEY> --compiler-version \\\"v0.8.23+commit.f704f362\\\" <contract address> src/Contract_Name.sol:Contract_Name --watch\\n```\\n\\nMake sure to configure `--compiler-version` and `--num-of-optimizations` correctly! And you can modify the `--constructor-args` if needed. And make sure you set the `--chain` and `--verifier-url` correctly.\\n\\n### \\n\\n**Sample Outputs**\\n\\n```\\nStart verifying contract `0xad4736AE3DB1E71375a27b7d8A634994921E3c04` deployed on mainnet\\n\\nSubmitting verification for [src/Counter.sol:Counter] 0xad4736AE3DB1E71375a27b7d8A634994921E3c04.\\nSubmitted contract for verification:\\n        Response: `OK`\\n        GUID: `d5s2dhvr62tahsjez9cypxkxdcmpjagkkxxuqcp6dkyaizbp8n`\\n        URL:\\n        https://etherscan.io/address/0xad4736ae3db1e71375a27b7d8a634994921e3c04\\nContract verification status:\\nResponse: `NOTOK`\\nDetails: `Pending in queue`\\nContract verification status:\\nResponse: `OK`\\nDetails: `Pass - Verified`\\nContract successfully verified\\n```\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle\",\n    \"loadedTime\": \"2025-02-15T20:32:30.054Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle\",\n    \"title\": \"Difference Between Ethereum and Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Difference Between Ethereum and Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/VeHt7zb68MiiT0SYoyTM\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDViMjEzMTMtMDNiNy00ZTU5LWEwZjUtODRiNmVhYTc0OTc3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=shMbGy05MwuzMpI8SLKKn8m2HwPmPrc0%2B1lQSwh5%2B5qqrBqoiRQtr7OPrTIPJo2c57elUN%2Blry6RLWw5nZYrugRwHE1ez%2BPYU%2BiQfk53RhgecrDl5%2Bt1MzsGx7bbTi7yxYdab%2B2uU5WdHgmGq7sx\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128114998e2a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Difference Between Ethereum and Mantle\\nMantle is developed based on the OP Stack architecture. While it shares many design similarities with Ethereum, there are differences when transitioning from Ethereum to Mantle.\\nKey Differences​\\nOpcodes​\\nWhile Mantle aims for Ethereum compatibility, there may be differences in supported opcode sets or their specific implementations. Developers transitioning from Ethereum should review and adjust their smart contracts accordingly. Refer to the table below for detailed information:\\nOpcode\\nSolidity equivalent\\nBehavior\\nIn mantle-V2 Tectonic, block coinbase is the SequencerFeeVault, which address is 0x4200000000000000000000000000000000000011\\nRandom value. As this value is set by the sequencer, it is not as reliably random as the L1 equivalent.\\nTimestamp of the L2 block\\nIf the transaction is an L1 ⇒ L2 transaction, then tx.origin is set to the aliased address of the address that triggered the L1 ⇒ L2 transaction. Otherwise, this opcode behaves normally.\\nIf the transaction is an L1 ⇒ L2 transaction, and this is the initial call (rather than an internal transaction from one contract to another), the same address aliasing behavior applies.\\nUnsupported Opcodes​\\nThe following opcodes are not supported in Mantle:\\nOpcode\\nImplementation Info\\nBehavior\\nManipulate state that behaves almost identically to storage but is discarded after every transaction\\nAn efficient EVM instruction for copying memory areas, enabled in Cancun upgrade\\nOpcode to get versioned hashes, enabled in Cancun upgrade\\nInstruction that returns the current data-blob base-fee, enabled in Cancun upgrade\\nBlocks​\\nAs a rollup, Mantle's block structure may differ from Ethereum, including block construction time, block size, and more. Developers should familiarize themselves with Mantle's block specifications for optimal integration. Refer to this for more details.\\nNetwork Specifications​\\nMantle has distinct network specifications compared to Ethereum, particularly in JSON-RPC differences. Understanding these variances is crucial for a smooth transition to Mantle. Refer to this for more details.\\nTransaction Costs​\\nAs a rollup on Ethereum, Mantle's transaction cost composition differs from L1. Developers should understand Mantle's fee structure to optimize their applications' performance on Mantle Network. Refer to this for more details.\\nSolidity Support​\\nCurrently Mantle doesn't support the latest version of the Solidity. Make sure your Solidity compiler version is lower than v0.8.23 when you deploy the contract.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Difference Between Ethereum and Mantle\\n\\nMantle is developed based on the OP Stack architecture. While it shares many design similarities with Ethereum, there are differences when transitioning from Ethereum to Mantle.\\n\\n## \\n\\nKey Differences[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#key-differences)\\n\\n### \\n\\nOpcodes[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#opcodes)\\n\\nWhile Mantle aims for Ethereum compatibility, there may be differences in supported opcode sets or their specific implementations. Developers transitioning from Ethereum should review and adjust their smart contracts accordingly. Refer to the table below for detailed information:\\n\\nOpcode\\n\\nSolidity equivalent\\n\\nBehavior\\n\\nIn mantle-V2 Tectonic, block coinbase is the `SequencerFeeVault`, which address is `0x4200000000000000000000000000000000000011`\\n\\nRandom value. As this value is set by the sequencer, it is not as reliably random as the L1 equivalent.\\n\\nTimestamp of the L2 block\\n\\nIf the transaction is an L1 ⇒ L2 transaction, then `tx.origin` is set to the [aliased address](https://community.optimism.io/docs/developers/build/differences/#address-aliasing) of the address that triggered the L1 ⇒ L2 transaction. Otherwise, this opcode behaves normally.\\n\\nIf the transaction is an L1 ⇒ L2 transaction, and this is the initial call (rather than an internal transaction from one contract to another), the same [address aliasing](https://community.optimism.io/docs/developers/build/differences/#address-aliasing) behavior applies.\\n\\n#### \\n\\n**Unsupported Opcodes**[**​**](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#unsupported-opcodes)\\n\\nThe following opcodes are not supported in Mantle:\\n\\nOpcode\\n\\nImplementation Info\\n\\nBehavior\\n\\nManipulate state that behaves almost identically to storage but is discarded after every transaction\\n\\nAn efficient EVM instruction for copying memory areas, enabled in Cancun upgrade\\n\\nOpcode to get versioned hashes, enabled in Cancun upgrade\\n\\nInstruction that returns the current data-blob base-fee, enabled in Cancun upgrade\\n\\n### \\n\\nBlocks[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#blocks)\\n\\nAs a rollup, Mantle's block structure may differ from Ethereum, including block construction time, block size, and more. Developers should familiarize themselves with Mantle's block specifications for optimal integration. Refer to [this](https://community.optimism.io/docs/developers/build/differences/#blocks) for more details.\\n\\n### \\n\\nNetwork Specifications[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#network-specifications)\\n\\nMantle has distinct network specifications compared to Ethereum, particularly in JSON-RPC differences. Understanding these variances is crucial for a smooth transition to Mantle. Refer to [this](https://community.optimism.io/docs/developers/build/differences/#network-specifications) for more details.\\n\\n### \\n\\nTransaction Costs[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#transaction-costs)\\n\\nAs a rollup on Ethereum, Mantle's transaction cost composition differs from L1. Developers should understand Mantle's fee structure to optimize their applications' performance on Mantle Network. Refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism) for more details.\\n\\n### \\n\\nSolidity Support[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#solidity-support)\\n\\nCurrently Mantle doesn't support [the latest version](https://github.com/ethereum/solidity/releases) of the Solidity. Make sure your Solidity compiler version is lower than **v0.8.23** when you deploy the contract.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/quick-access\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/quick-access\",\n    \"loadedTime\": \"2025-02-15T20:32:30.154Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/quick-access\",\n    \"title\": \"Quick Access | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Quick Access | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/D91mopDwoPBuuVL9DTPJ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MjBlMmIyYTUtNmFkYi00ZTM0LTg0ODMtYWE1N2JlYThiNzk0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ctLIQzgTmw1uQDmeYVCjVJ2meqAxEMpyQ8G2D6bi5R%2BAaOkeRy6FfjmVHnVYZjeIE%2Fhi0izg4fU1hraAgmcTrO0tVGdjSQvI2Yrp2QQ7BQ2xxIEdNDVVu2K6vneCcvgg3ac7T62MnR3tAsGhUz9i\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281149cd2a3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Quick Access | Network\\nNetwork Details​\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC providers here.\\nOnboarding Tools​\\nHere are some useful tools for developers' onboarding.\\nRecommended Solidity Compiler Version\\nContract Address​\\nMantle as a Layer 2 (L2) system of Ethereum, scales Ethereum by deploying L1 contracts and L2 contracts. The most updated list of addresses of the contracts deployed on Ethereum and Mantle Network is available as follows:\\nToken List​\\nThe Mantle Bridge allows a one-to-many mapping between layer 1 (L1) and layer 2 (L2) tokens, meaning that there can be multiple Mantle implementations of an L1 token.\\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on the Mantle token list. The token list is used as the source of truth for the Mantle Bridge which is the main portal for moving assets between L1 and L2.\\nIf you want to support your token on the Mantle Bridge, we strongly recommend using this template for token deployment in order to authorize bridge contracts\\nAdding a Token to the List​\\nIf you want to have your token added to the token list, you'll need to make a pull request against the Mantle token list repository. You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.\\nTools for Developers\\nLast updated 2 months ago\",\n  \"markdown\": \"# Quick Access | Network\\n\\n## \\n\\nNetwork Details[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#network-details)\\n\\nThe official Mantle RPC employs **rate limiting** to ensure stability during traffic spikes. If your particular use case involves calling the [Mantle API](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api) frequently, you might run into issues that arise due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC providers [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n\\n## \\n\\nOnboarding Tools[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#onboarding-tools)\\n\\nHere are some useful tools for developers' onboarding.\\n\\n**Recommended Solidity Compiler Version**\\n\\n## \\n\\nContract Address[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#contract-address)\\n\\nMantle as a Layer 2 (L2) system of Ethereum, scales Ethereum by deploying L1 contracts and L2 contracts. The most updated list of addresses of the contracts deployed on Ethereum and Mantle Network is available as follows:\\n\\n## \\n\\nToken List[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#token-list)\\n\\nThe [Mantle Bridge](https://bridge.mantle.xyz/) allows a one-to-many mapping between layer 1 (L1) and layer 2 (L2) tokens, meaning that there can be multiple Mantle implementations of an L1 token.\\n\\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on the [Mantle token list](https://token-list.mantle.xyz/mantle.tokenlist.json). The token list is used as the source of truth for the Mantle Bridge which is the main portal for moving assets between L1 and L2.\\n\\nIf you want to support your token on the Mantle Bridge, we strongly recommend using [this template](https://github.com/mantle-xyz/bridge-token-contracts) for token deployment in order to authorize bridge contracts\\n\\n### \\n\\nAdding a Token to the List[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#adding-a-token-to-the-list)\\n\\nIf you want to have your token added to the token list, you'll need to make a pull request against the [Mantle token list repository](https://github.com/mantlenetworkio/mantle-token-lists). You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.\\n\\n## \\n\\nTools for Developers\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-eth-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-eth-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:30.124Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-eth-with-the-mantle-sdk\",\n    \"title\": \"Bridging ETH with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging ETH with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/IbXe4oGU7NqMzf5X7Ugu\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:30 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGJiZmM4YWUtOTE4Ni00MTk2LWE5MWMtOGZmOTc3ZDBhMTlj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dWuo5W4b8YUwvfj5b%2B%2FITm9ZkQ8vwXXEtawuAcHrn3kB%2BxwsOxt4inJ2sertqRiQbMLMqdj07uJXXLrILSQPjkSb8RW2K1dFTAOI81t%2BpGL%2Fif3hGd1aDRg35PtTeyr2IgFqcPrKfHA9Qtn7U1Rp\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281149af2cc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging ETH with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial guides you on using the Mantle SDK to transfer ETH between layer 1 (L1) and layer 2 (L2). Check the complete code here.\\nSetup​\\nEnsure that your computer has the following installed:\\nStart L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC here and replace the L1 RPC URL in the .env file.\\nClone this repository and navigate to it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-eth\\nInstall the necessary packages.\\nRun the Sample Code​\\nThe sample code is in index.js, the whole execution flow will automatically start after running it.\\nNode Environment​\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file .env.local.tmp then use yarn local to execute index.js.\\nIf you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow Does It Work?​\\nImport the Necessary Libraries​\\nconst ethers = require('ethers'); const mantleSDK = require('@mantleio/sdk');\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nNetwork Configuration and Wallet Setup​\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the .env file.\\nconst key = process.env.PRIV_KEY; const l2ETH = process.env.L2_ETH;\\nkey: The private key retrieved from the environment variables.\\nl2ETH: The address of the L2 ETH token.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let addr; // Our address\\ncrossChainMessenger: A global variable initialized later in the setup function, representing the Mantle SDK's CrossChainMessenger object.\\naddr: A variable that will store the user's address.\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wallet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nSetup CrossChainMessenger Object​\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\nconst setup = async () => { addr = l1Wallet.address crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, }) } ......\\nReport the Balances​\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\nconst reportBalances = async () => { const l1Balance = await crossChainMessenger.l1Signer.getBalance(); const ETH = new ethers.Contract(l2ETH, erc20ABI, l2Wallet); const l2Balance = await ETH.balanceOf( crossChainMessenger.l2Signer.getAddress(), ); console.log(`On L1:${l1Balance} On L2:${l2Balance} `); };\\nDeposit​\\nThe depositETH function deposits 0.01 ETH token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated ETH balance on L1 and L2.\\nTo show that the deposit actually happened we show before and after balances.\\nconsole.log('Deposit ETH'); await reportBalances();\\ncrossChainMessenger.depositETH() creates and sends the deposit transaction on L1.\\nconst start = new Date(); const response = await crossChainMessenger.depositETH(eth);\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(`Transaction hash (on L1): ${response.hash}`); await response.wait();\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\nconsole.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 0.01 ETH.\\nawait reportBalances(); console.log(`depositETH took ${(new Date() - start) / 1000} seconds\\\\n\\\\n`);\\nWithdraw​\\nThis function shows how to withdraw ETH from L2 to L1.\\nTo show that the withdrawal actually happened we show before and after balances.\\nconsole.log('#################### Withdraw ETH ####################'); await reportBalances();\\nWe need to make sure the allowance is approved. We can do that by sending an approval transaction on L1.\\nconst approve = await crossChainMessenger.approveERC20( ethers.constants.AddressZero, l2ETH, doubleeth, {signer: l2Wallet, gasLimit: 300000}, ); console.log(`Approve transaction hash (on L2): ${approve.hash}`);\\nThen we withdraw the token from L2.\\nconst response = await crossChainMessenger.withdrawERC20( ethers.constants.AddressZero, l2ETH, eth, {gasLimit: 300000}, ); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\nWe need to wait until the message is ready to prove.\\nconsole.log('Waiting for status to be READY_TO_PROVE'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE, );\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log('Waiting for status to change to IN_CHALLENGE_PERIOD'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD, ); console.log('In the challenge period, waiting for status READY_FOR_RELAY'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY, );\\nFinalizing the message also takes a bit of time.\\nconsole.log('Ready for relay, finalizing message now'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash); console.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nInvoke deposit and withdraw functions\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nconst main = async () => { await setup(); await depositETH(); await withdrawETH(); }; main() .then(() => process.exit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion​\\nYou should now be able to write applications using our SDK and bridge to transfer ETH between L1 and L2.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Bridging ETH with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial guides you on using the Mantle SDK to transfer ETH between layer 1 (L1) and layer 2 (L2). Check the complete code [here](https://github.com/mantlenetworkio/mantle-tutorial/blob/main/cross-dom-bridge-eth/index.js).\\n\\n## \\n\\nSetup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#setup)\\n\\n1.  Ensure that your computer has the following installed:\\n    \\n2.  Start L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # check status\\n    make ps\\n    ```\\n    \\n    **We highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and navigate to it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-eth\\n    ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the Sample Code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#run-the-sample-code)\\n\\nThe sample code is in `index.js`, the whole execution flow will automatically start after running it.\\n\\n### \\n\\nNode Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#node-environment)\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execute `index.js`.\\n\\nIf you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow Does It Work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#how-does-it-work)\\n\\n### \\n\\nImport the Necessary Libraries[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#import-the-necessary-libraries)\\n\\n```\\nconst ethers = require('ethers');\\nconst mantleSDK = require('@mantleio/sdk');\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\n    \\n\\n### \\n\\nNetwork Configuration and Wallet Setup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#network-configuration-and-wallet-setup)\\n\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the `.env` file.\\n\\n```\\nconst key = process.env.PRIV_KEY;\\nconst l2ETH = process.env.L2_ETH;\\n```\\n\\n*   `key`: The private key retrieved from the environment variables.\\n    \\n*   `l2ETH`: The address of the L2 ETH token.\\n    \\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet addr; // Our address\\n```\\n\\n*   `crossChainMessenger`: A global variable initialized later in the `setup` function, representing the Mantle SDK's `CrossChainMessenger` object.\\n    \\n*   `addr`: A variable that will store the user's address.\\n    \\n\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\nSetup CrossChainMessenger Object[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#setup-crosschainmessenger-object)\\n\\nThe `CrossChainMessenger` object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n```\\nconst setup = async () => {\\n  addr = l1Wallet.address\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({\\n    l1ChainId: process.env.L1_CHAINID,\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet,\\n    l2SignerOrProvider: l2Wallet,\\n    bedrock: true,\\n  })\\n}\\n......\\n```\\n\\n### \\n\\nReport the Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#report-the-balances)\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n```\\nconst reportBalances = async () => {\\n  const l1Balance = await crossChainMessenger.l1Signer.getBalance();\\n  const ETH = new ethers.Contract(l2ETH, erc20ABI, l2Wallet);\\n  const l2Balance = await ETH.balanceOf(\\n    crossChainMessenger.l2Signer.getAddress(),\\n  );\\n\\n  console.log(`On L1:${l1Balance}     On L2:${l2Balance} `);\\n};\\n```\\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#deposit)\\n\\nThe `depositETH` function deposits 0.01 ETH token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated ETH balance on L1 and L2.\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n```\\nconsole.log('Deposit ETH');\\nawait reportBalances();\\n```\\n\\n`crossChainMessenger.depositETH()` creates and sends the deposit transaction on L1.\\n\\n```\\nconst start = new Date();\\n\\nconst response = await crossChainMessenger.depositETH(eth);\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(`Transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\n\\n```\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 0.01 ETH.\\n\\n```\\nawait reportBalances();\\nconsole.log(`depositETH took ${(new Date() - start) / 1000} seconds\\\\n\\\\n`);\\n```\\n\\n### \\n\\nWithdraw[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#withdraw)\\n\\nThis function shows how to withdraw ETH from L2 to L1.\\n\\nTo show that the withdrawal actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Withdraw ETH ####################');\\nawait reportBalances();\\n```\\n\\nWe need to make sure the allowance is approved. We can do that by sending an approval transaction on L1.\\n\\n```\\nconst approve = await crossChainMessenger.approveERC20(\\n  ethers.constants.AddressZero,\\n  l2ETH,\\n  doubleeth,\\n  {signer: l2Wallet, gasLimit: 300000},\\n);\\nconsole.log(`Approve transaction hash (on L2): ${approve.hash}`);\\n```\\n\\nThen we withdraw the token from L2.\\n\\n```\\nconst response = await crossChainMessenger.withdrawERC20(\\n  ethers.constants.AddressZero,\\n  l2ETH,\\n  eth,\\n  {gasLimit: 300000},\\n);\\nconsole.log(`Transaction hash (on L2): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nWe need to wait until the message is ready to prove.\\n\\n```\\nconsole.log('Waiting for status to be READY_TO_PROVE');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE,\\n);\\n```\\n\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to IN_CHALLENGE_PERIOD');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD,\\n);\\n\\nconsole.log('In the challenge period, waiting for status READY_FOR_RELAY');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY,\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n```\\nconsole.log('Ready for relay, finalizing message now');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.finalizeMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\n### \\n\\nInvoke deposit and withdraw functions\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n```\\nconst main = async () => {\\n  await setup();\\n  await depositETH();\\n  await withdrawETH();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#conclusion)\\n\\nYou should now be able to write applications using our SDK and bridge to transfer ETH between L1 and L2.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-mnt-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-mnt-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:30.192Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-mnt-with-the-mantle-sdk\",\n    \"title\": \"Bridging MNT with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging MNT with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/63or3mkqkLA3Jk6Cu32m\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:30 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTc2MDdhOWItMGJiYy00ZGJiLTg2OTEtMjFlZjE4MjNjNzhi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7XD2Qesi9SwtoLTFzBq0XWoRrtgEh42P9n8up4Uqxrd5zaa%2FOxDAQqnKJiudFLYH7mjf7sR6eVUWY53vgrZVsaSJzAETifkiLepxX4LtZWgndYiDzI5iLPdxQOTfMK2lRU3PNy4q7fVx9afrJIST\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281149ade12d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging MNT with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial teaches you how to use the Mantle SDK to transfer MNT between Layer 1 (L1) and Layer 2 (L2). Check the complete code here.\\nSetup​\\nEnsure your computer has:\\nStart L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC here and replace the L1 RPC URL in the .env file.\\nClone this repository and enter it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-mnt\\nInstall the necessary packages.\\nRun the Sample Code​\\nThe sample code is in the index.js, the whole execution flow will automatically start after running it.\\nNode Environment​\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file .env.local.tmp then use yarn local to execute index.js.\\nIf you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow Does It Work?​\\nImport the Necessary Libraries​\\nconst ethers = require('ethers'); const mantleSDK = require('@mantleio/sdk'); const fs = require('fs');\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nfs: The Node.js fs module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\nNetwork Configuration and Wallet Setup​\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the .env file.\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('TestERC20.json')); const l1MntAddr = process.env.L1_MNT; const l2MntAddr = process.env.L2_MNT; const key = process.env.PRIV_KEY;\\nL1TestERC20: A JSON object representing the L1 Test ERC20 contract.\\nl1MntAddr: The address of the L1 MNT token.\\nl2MntAddr: The address of the L2 MNT token.\\nkey: The private key retrieved from the environment variables.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let ourAddr; // Our address\\ncrossChainMessenger: A global variable initialized later in the setup function, representing the Mantle SDK's CrossChainMessenger object.\\nourAddr: A variable that will store the user's address.\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wallet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nSetup CrossChainMessenger Object​\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\nconst setup = async () => { ourAddr = l1Wallet.address; crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, }); l1Mnt = new ethers.Contract(l1MntAddr, L1TestERC20.abi, l1Wallet); };\\nReport the Balances​\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\nconst reportBalances = async () => { const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18); const l2Balance = (await crossChainMessenger.l2Signer.getBalance()) .toString() .slice(0, -18); console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`); };\\nDeposit​\\nThe depositMNT function deposits 1 MNT token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated MNT balance on L1 and L2.\\nTo show that the deposit actually happened we show before and after balances.\\nconsole.log('#################### Deposit MNT ####################'); await reportBalances();\\nWe need to make sure the allowance is approved. We can do that by sending an approval transaction on L1.\\n// Need the l2 address to know which bridge is responsible const allowanceResponse = await crossChainMessenger.approveERC20( l1MntAddr, l2MntAddr, depositToken, ); await allowanceResponse.wait();\\ncrossChainMessenger.depositMNT() creates and sends the deposit transaction on L1.\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); const response = await crossChainMessenger.depositMNT(depositToken);\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`); await response.wait();\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\nconsole.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.RELAYED, );\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\nawait reportBalances(); console.log(`depositMNT took ${(new Date() - start) / 1000} seconds\\\\n`);\\nWithdraw​\\nThis function shows how to withdraw MNT from L2 to L1. For deposits, it was enough to transfer 1 MNT to show that the L2 balance increases. However, in the case of withdrawals the withdrawing account needs to be paid for finalizing the message, which costs more than that.\\nTo show that the withdrawal actually happened we show before and after balances.\\nconsole.log('#################### Withdraw MNT ####################'); await reportBalances();\\nThen we withdraw the token from L2.\\nconst response = await crossChainMessenger.withdrawMNT(withdrawToken); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\nWe need to wait until the message is ready to prove.\\nconsole.log('Waiting for status to be READY_TO_PROVE'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE, );\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log('In the challenge period, waiting for status READY_FOR_RELAY'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY, );\\nFinalizing the message also takes a bit of time.\\nconsole.log('Ready for relay, finalizing message now'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash); console.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nInvoke deposit and withdraw functions​\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nconst main = async () => { await setup(); await depositMNT(); await withdrawMNT(); }; main() .then(() => process.exit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion​\\nYou should now be able to write applications that use our SDK and bridge to transfer MNT between L1 and L2.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Bridging MNT with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial teaches you how to use the Mantle SDK to transfer MNT between Layer 1 (L1) and Layer 2 (L2). Check the complete code [here](https://github.com/mantlenetworkio/mantle-tutorial/blob/main/cross-dom-bridge-mnt/index.js).\\n\\n## \\n\\nSetup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#setup)\\n\\n1.  Ensure your computer has:\\n    \\n2.  Start L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # check status\\n    make ps\\n    ```\\n    \\n    **We highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and enter it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-mnt\\n    ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the Sample Code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#run-the-sample-code)\\n\\nThe sample code is in the `index.js`, the whole execution flow will automatically start after running it.\\n\\n### \\n\\nNode Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#node-environment)\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execute `index.js`.\\n\\nIf you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow Does It Work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#how-does-it-work)\\n\\n### \\n\\nImport the Necessary Libraries[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#import-the-necessary-libraries)\\n\\n```\\nconst ethers = require('ethers');\\nconst mantleSDK = require('@mantleio/sdk');\\nconst fs = require('fs');\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\n    \\n*   `fs`: The Node.js `fs` module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\n    \\n\\n### \\n\\nNetwork Configuration and Wallet Setup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#network-configuration-and-wallet-setup)\\n\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the `.env` file.\\n\\n```\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('TestERC20.json'));\\nconst l1MntAddr = process.env.L1_MNT;\\nconst l2MntAddr = process.env.L2_MNT;\\nconst key = process.env.PRIV_KEY;\\n```\\n\\n*   `L1TestERC20`: A JSON object representing the L1 Test ERC20 contract.\\n    \\n*   `l1MntAddr`: The address of the L1 MNT token.\\n    \\n*   `l2MntAddr`: The address of the L2 MNT token.\\n    \\n*   `key`: The private key retrieved from the environment variables.\\n    \\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet ourAddr; // Our address\\n```\\n\\n*   `crossChainMessenger`: A global variable initialized later in the `setup` function, representing the Mantle SDK's `CrossChainMessenger` object.\\n    \\n*   `ourAddr`: A variable that will store the user's address.\\n    \\n\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\nSetup CrossChainMessenger Object[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#setup-crosschainmessenger-object)\\n\\nThe `CrossChainMessenger` object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n```\\nconst setup = async () => {\\n  ourAddr = l1Wallet.address;\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({\\n    l1ChainId: process.env.L1_CHAINID,\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet,\\n    l2SignerOrProvider: l2Wallet,\\n    bedrock: true,\\n  });\\n  l1Mnt = new ethers.Contract(l1MntAddr, L1TestERC20.abi, l1Wallet);\\n};\\n```\\n\\n### \\n\\nReport the Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#report-the-balances)\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n```\\nconst reportBalances = async () => {\\n  const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18);\\n  const l2Balance = (await crossChainMessenger.l2Signer.getBalance())\\n    .toString()\\n    .slice(0, -18);\\n  console.log(`Token on L1:${l1Balance}     Token on L2:${l2Balance}`);\\n};\\n```\\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#deposit)\\n\\nThe `depositMNT` function deposits 1 MNT token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated MNT balance on L1 and L2.\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Deposit MNT ####################');\\nawait reportBalances();\\n```\\n\\nWe need to make sure the allowance is approved. We can do that by sending an approval transaction on L1.\\n\\n```\\n// Need the l2 address to know which bridge is responsible\\nconst allowanceResponse = await crossChainMessenger.approveERC20(\\n  l1MntAddr,\\n  l2MntAddr,\\n  depositToken,\\n);\\nawait allowanceResponse.wait();\\n```\\n\\n`crossChainMessenger.depositMNT()` creates and sends the deposit transaction on L1.\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\n\\nconst response = await crossChainMessenger.depositMNT(depositToken);\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\n\\n```\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\n\\n```\\nawait reportBalances();\\nconsole.log(`depositMNT took ${(new Date() - start) / 1000} seconds\\\\n`);\\n```\\n\\n### \\n\\nWithdraw[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#withdraw)\\n\\nThis function shows how to withdraw MNT from L2 to L1. For deposits, it was enough to transfer 1 MNT to show that the L2 balance increases. However, in the case of withdrawals the withdrawing account needs to be paid for finalizing the message, which costs more than that.\\n\\nTo show that the withdrawal actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Withdraw MNT ####################');\\nawait reportBalances();\\n```\\n\\nThen we withdraw the token from L2.\\n\\n```\\nconst response = await crossChainMessenger.withdrawMNT(withdrawToken);\\nconsole.log(`Transaction hash (on L2): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nWe need to wait until the message is ready to prove.\\n\\n```\\nconsole.log('Waiting for status to be READY_TO_PROVE');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE,\\n);\\n```\\n\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log('In the challenge period, waiting for status READY_FOR_RELAY');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY,\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n```\\nconsole.log('Ready for relay, finalizing message now');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.finalizeMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\n### \\n\\nInvoke deposit and withdraw functions[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#invoke-deposit-and-withdraw-functions)\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n```\\nconst main = async () => {\\n  await setup();\\n  await depositMNT();\\n  await withdrawMNT();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#conclusion)\\n\\nYou should now be able to write applications that use our SDK and bridge to transfer MNT between L1 and L2.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees\",\n    \"loadedTime\": \"2025-02-15T20:32:30.211Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees\",\n    \"title\": \"Optimize Your Transaction Fees | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Optimize Your Transaction Fees | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/c9bde1mHGMCsm47rMw7Q\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:30 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTFiZTJkYzAtMGM0Yi00ODA1LWI3NWItNjkzOTM4YWQ0ZTM0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=2tkfuWDITY0wBDxaMcXDwL2MJ65KzMsuQjp4HjjNHKXNxylIe4ghRILMmfB168S7VfpEEtjc5l2XvE56YBYpXKLTo3Bo5IZtlxAQfFyInSD9YVzY%2FYcFAtxjeehgxozzLCl7zP7tzg%2FxB1cVzwrD\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281149bef382e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Optimize Your Transaction Fees | Network\\nThis section will help you to reduce the transaction fees on Mantle v2 Tectonic. Mantle v2 Tectonic introduces a new fee collection mechanism, including EIP-1559 and some native token optimizations, if you want to know more details about our fee collection mechanism, please refer to this document.\\nIn Mantle v2 Tectonic, with the introduction of the EIP-1559 mechanism, users need to configure the network's basefee (the minimum basefee currently set 0.02 gwei) and priorityfee (recommend to set it to 0) configurations in order to optimize the transaction fees. We explain the different development components to optimize the user experience.\\nMetaMask​\\nIf you are a user of MetaMask for trading or contract deployment and interaction (e.g. using Remix), you can set up basefee and priorityfee in MetaMask to be able to send transactions at a lowest fee. Details can be found here.\\nHardhat​\\nIf you are using Hardhat for contract deployment and interaction, you can use the default configuration in hardhat.config.ts or specify gasPrice as the network minimum basefee:\\nconst config: HardhatUserConfig = { solidity: '0.8.19', // solidity version defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat networks: { mantle: { url: 'https://rpc.mantle.xyz', //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], // Use the default configuration }, mantleSepolia: { url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], gasPrice: 20000000, // specify the network's minimum basefee as the gas price }, }, };\\nFoundry​\\nIf you are using Foundry for contract deployment and interaction, you need to set it up on the corresponding command line:\\nContracts Deployment​\\nCurrently, for users deploying contracts using forge create, we strongly recommend using the legacy transaction type.\\nMake sure you are using the latest version of Foundry, if you are using a version lower than 2024-07-31, please add -skip-simulation to your command line to ensure successful execution!\\nWhen you use the forge script for contract deployment, there are different settings for different transaction types:\\nlegacy transactions\\nIf you are using legacy type transactions, you can use the following command for contract deployment, e.g.\\nforge script --legacy script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --rpc-url <mantle_rpc_url> --broadcast\\nEIP-1559 transactions\\nIf you are using EIP-1559 type transactions, you need to set the --with-gas-price parameter to the network minimum basefee, using the following command to deploy the contract, e.g.\\nforge script script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --with-gas-price 20000000 --rpc-url <mantle_rpc_url> --broadcast\\nLast updated 3 months ago\",\n  \"markdown\": \"# Optimize Your Transaction Fees | Network\\n\\nThis section will help you to reduce the transaction fees on Mantle v2 Tectonic. Mantle v2 Tectonic introduces a new fee collection mechanism, including EIP-1559 and some native token optimizations, if you want to know more details about our fee collection mechanism, please refer to [this document](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\nIn Mantle v2 Tectonic, with the introduction of the EIP-1559 mechanism, users need to configure the network's `basefee` (the minimum basefee currently set `0.02 gwei`) and `priorityfee` (recommend to set it to 0) configurations in order to optimize the transaction fees. We explain the different development components to optimize the user experience.\\n\\n## \\n\\nMetaMask[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#metamask)\\n\\nIf you are a user of MetaMask for trading or contract deployment and interaction (e.g. using [Remix](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts)), you can set up `basefee` and `priorityfee` in MetaMask to be able to send transactions at a lowest fee. Details can be found [here](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network#configure-your-wallet).\\n\\n## \\n\\nHardhat[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#hardhat)\\n\\nIf you are using [Hardhat](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts) for contract deployment and interaction, you can use the default configuration in `hardhat.config.ts` or specify `gasPrice` as the network minimum basefee:\\n\\n```\\nconst config: HardhatUserConfig = {\\n  solidity: '0.8.19', // solidity version\\n  defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat\\n  networks: {\\n    mantle: {\\n      url: 'https://rpc.mantle.xyz', //mainnet\\n      accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n      // Use the default configuration\\n    },\\n    mantleSepolia: {\\n      url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet\\n      accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n      gasPrice: 20000000, // specify the network's minimum basefee as the gas price\\n    },\\n  },\\n};\\n```\\n\\n## \\n\\nFoundry[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#foundry)\\n\\nIf you are using [Foundry](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contracts) for contract deployment and interaction, you need to set it up on the corresponding command line:\\n\\n### \\n\\nContracts Deployment[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#contracts-deployment)\\n\\nCurrently, for users deploying contracts using `forge create`, we strongly recommend using the **legacy** transaction type.\\n\\nMake sure you are using [the latest version](https://github.com/foundry-rs/foundry/releases) of Foundry, if you are using a version lower than [`2024-07-31`](https://github.com/foundry-rs/foundry/releases/tag/nightly-26a7559758c192911dd39ce7d621a18ef0d419e6), please add `-skip-simulation` to your command line to ensure successful execution!\\n\\nWhen you use the `forge script` for contract deployment, there are different settings for different transaction types:\\n\\n*   **legacy transactions**\\n    \\n    If you are using legacy type transactions, you can use the following command for contract deployment, e.g.\\n    \\n    ```\\n    forge script --legacy script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --rpc-url <mantle_rpc_url> --broadcast\\n    ```\\n    \\n*   **EIP-1559 transactions**\\n    \\n    If you are using EIP-1559 type transactions, you need to set the [`--with-gas-price`](https://book.getfoundry.sh/reference/forge/forge-script#options) parameter to the network minimum basefee, using the following command to deploy the contract, e.g.\\n    \\n    ```\\n    forge script script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --with-gas-price 20000000 --rpc-url <mantle_rpc_url> --broadcast\\n    ```\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/faqs\",\n    \"loadedTime\": \"2025-02-15T20:32:28.277Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/eCQuALzFX1SHg65FHmoP\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:26 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MmMzY2ZiOTAtMTMxMS00NDhiLWI1NzAtNDhjNjI5YjEwOTUx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=mQzhITgFGk6qZ5dQN5N7dcyaGAyKIF2G5EFeCt%2BqEKVHQfXIwufNxjlsmyUI1dJtBHo21Sj%2FlkBNzPuoxZ3CvMbnfQvLNPxyjdpk2rPkkJmbVWnSUiJ9OYJAXiLiB91mImwB%2Byp6TwCNe2lG2yGi\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811301ca74d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nHow big is the current testnet state?​\\nYou can find details on this subject here: Approximate Disk Usage​\\nWhat does the error \\\"foundryup can't find command\\\" mean when installing Foundry on my server?​\\nThis error occurs when the foundryup script cannot locate the necessary system commands required to complete the installation process. One common solution is to upgrade the version of GNU C Library (glibc) installed on your server to version 2.29 or higher.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n### \\n\\nHow big is the current testnet state?[​](https://docs-v2.mantle.xyz/nodes/faqs#how-big-is-the-current-testnet-state)\\n\\nYou can find details on this subject here: [Approximate Disk Usage​](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker#approximate-disk-usage)\\n\\n### \\n\\nWhat does the error \\\"foundryup can't find command\\\" mean when installing Foundry on my server?[​](https://docs-v2.mantle.xyz/nodes/faqs#what-does-the-error-foundryup-cant-find-command-mean-when-installing-foundry-on-my-server)\\n\\nThis error occurs when the foundryup script cannot locate the necessary system commands required to complete the installation process. One common solution is to upgrade the version of GNU C Library (glibc) installed on your server to version 2.29 or higher.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:28.174Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts\",\n    \"title\": \"How to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Q44ZkgEuGLr40VtkqQXn\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:26 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MWNmNGI0YzItM2VkMS00NDRiLTk4NTUtNjNiMWU0ZDk1MzFj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ZOfkPPalOhWm%2Fh%2Fhrol2u4tI8RMYDXWPIn9S35aUhIIDwDyg%2F14k6IkADwb36gPu6Fy8W0dcMLEHv7x6dPYolOsQqCq8G55PYVRRXpAuyGvSDi0b2l9sYoVghPAzNVjFTM3DsRFnFNkJto%2FTixuK\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281131fe574d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Verify Smart Contracts\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# How to Verify Smart Contracts\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/how-to-guides/how-to-verify-smart-contracts?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases\",\n    \"loadedTime\": \"2025-02-15T20:32:32.587Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases\",\n    \"title\": \"Common Use Cases | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Common Use Cases | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/zFmufzgvs1ssLIPU0Eb7\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Njc2MDI1ZWEtNzllZS00ZWJiLTg5MzMtZWY4Y2Q1NTUxY2Ix' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dNA6uxyH0BF1IjCJCqrmT99YjFsUFdlpa3z%2B5ryfjtS3c6ITis0%2BmQyqNpKjG1%2FwkCK2ejY2fRzuElESlNuaarEmuMpnaXeeYF46TsnGQBichsPpAsg%2BQ3EUVstrBOoqv53QdPYTDzsbVLSCn5d9\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281159b87682e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Common Use Cases | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Common Use Cases | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/common-use-cases?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/common-use-cases?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/moving-assets-and-data\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/moving-assets-and-data\",\n    \"loadedTime\": \"2025-02-15T20:32:32.843Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/moving-assets-and-data\",\n    \"title\": \"Moving Assets and Data | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Moving Assets and Data | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/MYlSr58UAWGpozdYGZGG\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDUwYzdkMGMtZThlMS00MDlkLTlmY2ItOThkNTc4YjZkNmE1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dE%2BqF0vk%2FlkvRNiJxVowWnNJG2i4opfp0bOzh3L2EUb%2BMqexDW1ow0xpzc7lf%2BlmxxpuCwJv8muCcOcF5mzVCh2lbZthNLw1I9illpnjYzZLdMY2qGzOw0KRYcnT0fSU5GXJrlKFBNBPTqFwv8bD\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115a4ead2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Moving Assets and Data | Network\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\nSending Assets​\\nThe Mantle Bridge enables all functionality necessary for the most common use case, i.e., moving tokens between Mantle network and Ethereum. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\nSending Data​\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The Mantle Bridge has a simple API for triggering a cross-chain function call.\\nHow does it work?​\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 asset bridging mechanism are L2StandardBridge on Mantle network, and L1StandardBridge on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standard bridge contracts.\\nFor instance, when a wallet sends a deposit request for 10 $MNT on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of 10 $MNT is minted on L2 and transferred to the wallet.\\nIn case a wallet makes a withdrawal of 10 $MNT on L2, these tokens are burned and the matching amount of 10 $MNT tokens locked on L1 get released and transferred to the wallet.\\nYou can connect your wallet to the Mantle Bridge to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the API page for more information and tutorials on how to call the appropriate SDK methods to bridge the various kinds of tokens that are currently supported.\\nUsing the Official Mantle Bridge​\\nTo move your $MNT tokens/Ether/other ERC-20 tokens between the Mantle and Ethereum chain, visit the Mantle Bridge. Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps here. ​\\nLast updated 3 months ago\",\n  \"markdown\": \"# Moving Assets and Data | Network\\n\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\n\\n## \\n\\nSending Assets[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#sending-assets)\\n\\nThe [Mantle Bridge](https://bridge.mantle.xyz/) enables all functionality necessary for the most common use case, i.e., moving tokens between Mantle network and Ethereum. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\n\\n## \\n\\nSending Data[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#sending-data)\\n\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The [Mantle Bridge](https://bridge.mantle.xyz/) has a simple API for triggering a cross-chain function call.\\n\\n## \\n\\nHow does it work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#how-does-it-work)\\n\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 asset bridging mechanism are [`L2StandardBridge`](https://github.com/mantlenetworkio/mantle-v2/blob/develop/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol) on Mantle network, and [`L1StandardBridge`](https://github.com/mantlenetworkio/mantle-v2/blob/develop/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol) on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standard bridge contracts.\\n\\nFor instance, when a wallet sends a deposit request for `10 $MNT` on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of `10 $MNT` is minted on L2 and transferred to the wallet.\\n\\nIn case a wallet makes a withdrawal of `10 $MNT` on L2, these tokens are burned and the matching amount of `10 $MNT` tokens locked on L1 get released and transferred to the wallet.\\n\\nYou can connect your wallet to the [Mantle Bridge](https://bridge.mantle.xyz/) to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the [API page](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api) for more information and tutorials on how to call the appropriate SDK methods to bridge the various kinds of tokens that are currently supported.\\n\\n## \\n\\nUsing the Official Mantle Bridge[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#using-the-official-mantle-bridge)\\n\\nTo move your `$MNT` tokens/Ether/other ERC-20 tokens between the Mantle and Ethereum chain, visit the [Mantle Bridge](https://bridge.mantle.xyz/). Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps [here](https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge). ​\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-to-a-cex\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-to-a-cex\",\n    \"loadedTime\": \"2025-02-15T20:32:32.876Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-to-a-cex\",\n    \"title\": \"Adding Mantle to a CEX | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle to a CEX | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/jrpeS4pvzCV0ahHavLwr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YjVlYzc1ZjUtOWEwZC00YjI0LWI3NjUtZTM4ZmQ4ZGZlN2Zk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ZGyXf9t5LeIYxZTXsg6Vn5jNskcL9Rel2IHDXyVj1zuhCP9%2FOMQAWddPAlTz36OJgq979hSgK2xM1%2FqXXg5xqG6fp1tL6oHJ0Qq02HpA7%2BuECusrUaYgZEh0XwZmEwW7Rb%2FvDON0I%2BbztYt9Acgs\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115ab9f8c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding Mantle to a CEX\\nConnecting to Mantle​\\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nThird-party endpoints from infrastructure providers.\\nFetching Token Balances​\\nCalculating ETH/ERC-20 Balance​\\nOn Mantle network, the ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address 0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111. The ERC-20 balance is stored in the ERC-20 contract, you can check it using the token list. Then you can still access it using the standard APIs.\\nCalculating $MNT Balance​\\nYou can use the same methods as querying the ERC-20 balance, but note that since MNT is the native token in L2, it will disable ERC-20 methods other than querying the balance.\\nTransaction Fees​\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum here.\\nDeposits and Withdrawals​\\nDeposits and Withdrawals on Mantle​\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\nDeposits and Withdrawals Across Chains​\\nAs a centralized exchange, there will be times that withdrawals of $ETH/$MNT token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network.\\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this tutorial for bridging ETH, or this tutorial for bridging ERC-20 tokens.\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\nWhen an ERC-20 token does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this tutorial for bridging standard ERC-20s. If you need to implement some kind of custom logic, see this tutorial for bridging custom ERC-20s.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Adding Mantle to a CEX\\n\\n## \\n\\nConnecting to Mantle[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#connecting-to-mantle)\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to Mantle through any of the following means:\\n\\n2.  Third-party endpoints from infrastructure [providers](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n\\n## \\n\\nFetching Token Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#fetching-token-balances)\\n\\n### \\n\\nCalculating ETH/ERC-20 Balance[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#calculating-etherc-20-balance)\\n\\nOn Mantle network, the ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address `0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111`. The ERC-20 balance is stored in the ERC-20 contract, you can check it using the [token list](https://github.com/mantlenetworkio/mantle-token-lists/blob/main/mantle.tokenlist.json). Then you can still access it using the standard APIs.\\n\\n### \\n\\nCalculating $MNT Balance[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#calculating-mnt-balance)\\n\\nYou can use the same methods as querying the ERC-20 balance, but note that since MNT is the native token in L2, it will disable ERC-20 methods other than querying the balance.\\n\\n## \\n\\nTransaction Fees[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#transaction-fees)\\n\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum [here](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\n## \\n\\nDeposits and Withdrawals[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#deposits-and-withdrawals)\\n\\n### \\n\\nDeposits and Withdrawals on Mantle[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#deposits-and-withdrawals-on-mantle)\\n\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\n\\n### \\n\\nDeposits and Withdrawals Across Chains[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#deposits-and-withdrawals-across-chains)\\n\\nAs a centralized exchange, there will be times that withdrawals of `$ETH/$MNT` token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network.\\n\\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this [tutorial for bridging ETH](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-eth/), or this [tutorial for bridging ERC-20 tokens](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\n\\nWhen an ERC-20 token does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this [tutorial for bridging standard ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-standard-token/). If you need to implement some kind of custom logic, see this [tutorial for bridging custom ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-custom-token/).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-wallet-support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-wallet-support\",\n    \"loadedTime\": \"2025-02-15T20:32:33.482Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-wallet-support\",\n    \"title\": \"Adding Mantle Wallet Support | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle Wallet Support | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/8oVJtG6l6fZlbDC07q31\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:33 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzYzOWNiNjQtM2ZmZS00ZDczLTg2MDEtNGQwYWU0YjRlMDMz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=TpGsPTqtpAH152uXQD%2F3FdfsZAE19zzMdfYJqV4LMPsoa0lGQXow%2B1opT7wikpl6B6TjgeSYyxXUc0GIc3bz7mKrGbw0pCCzec5gelknue8YzrVcx6JXjHVIjXgIpLzx%2Fw8ZUwaumEwm1DqxBcco\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115aa8733b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding Mantle Wallet Support | Network\\nMantle network uses $MNT as a native token, and creates an EVM-like code execution environment for transaction and state processing. This means a user on Layer 2 (L2) can use $MNT exactly like they would $ETH on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in this section. Any $MNT tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\nConnecting to Mantle​\\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nThird-party endpoints from infrastructure providers.\\nAdd Mantle Network to Metamask Quickly​\\nBased on the JSON-RPC API provided by Metamask, developers can implement the ability to add Mantle Network to Metamask with a single click.\\nawait window.ethereum.request({ \\\"method\\\": \\\"wallet_addEthereumChain\\\", \\\"params\\\": [ { \\\"blockExplorerUrls\\\": [ \\\"https://mantlescan.xyz/\\\" ], \\\"iconUrls\\\": [ \\\"https://drive.google.com/file/d/1qLqZu2vZSkZcKf46YERoa9cF0NfURvcc/view?usp=drive_link\\\" ], \\\"nativeCurrency\\\": { \\\"name\\\": \\\"MNT\\\", \\\"symbol\\\": \\\"MNT\\\", \\\"decimals\\\": 18 }, \\\"rpcUrls\\\": [ \\\"https://rpc.mantle.xyz\\\" ], \\\"chainId\\\": \\\"0x1388\\\", \\\"chainName\\\": \\\"Mantle\\\" } ] });\\nCanonical Token Addresses​\\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains a token list that includes known addresses for many popular tokens. For example, looking at the$MNT token, the Mantle token list returns the following addresses:\\n0x3c3a81e81dc49a522a592e7622a7e711c06bf354\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\nTransaction Status​\\nA transaction on Mantle network can be in one of these states:\\nSequencer Confirmed: The transaction has been accepted by the sequencer on Mantle (L2)\\nConfirmed On-Chain: The transaction has been written to Ethereum (L1)\\nIf a transaction is a withdrawal, it can be in one of the following states:\\nWaiting: Confirmed on L1, but still in the challenge period\\nReady to Prove: Transaction is ready to be proved on L1 to initiate the challenge period\\nReady for Relay: Transaction is out of the challenge period, and can be released by submitting a relay message\\nRelayed: A withdrawal is finalized, and the token is released from the bridge\\nYou can use the Mantle SDK to find out your transaction status.\\nTransaction Fees​\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum here.\\nEstimating Total Fees​\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it rolls up to Ethereum.\\nIn fact, this fee is automatically deducted from the user's $MNT balance on Mantle when the transaction is executed.\\nMantle SDK provides an interface to get the total gas fee directly.\\nSending \\\"Max\\\" $MNT​\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's $MNT balance being sent.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Adding Mantle Wallet Support | Network\\n\\nMantle network uses `$MNT` as a native token, and creates an EVM-like code execution environment for transaction and state processing. This means a user on Layer 2 (L2) can use `$MNT` exactly like they would `$ETH` on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in this [section](https://docs.mantle.xyz/network/system-information/fee-mechanism). Any `$MNT` tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\n\\n## \\n\\nConnecting to Mantle[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#connecting-to-mantle)\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to Mantle through any of the following means:\\n\\n2.  Third-party endpoints from infrastructure [providers](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n\\n### \\n\\nAdd Mantle Network to Metamask Quickly[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#add-mantle-network-to-metamask-quickly)\\n\\nBased on the [JSON-RPC API](https://docs.metamask.io/wallet/reference/wallet_addethereumchain/) provided by Metamask, developers can implement the ability to add Mantle Network to Metamask with a single click.\\n\\n```\\nawait window.ethereum.request({\\n  \\\"method\\\": \\\"wallet_addEthereumChain\\\",\\n  \\\"params\\\": [\\n    {\\n      \\\"blockExplorerUrls\\\": [\\n        \\\"https://mantlescan.xyz/\\\"\\n      ],\\n      \\\"iconUrls\\\": [\\n        \\\"https://drive.google.com/file/d/1qLqZu2vZSkZcKf46YERoa9cF0NfURvcc/view?usp=drive_link\\\"\\n      ],\\n      \\\"nativeCurrency\\\": {\\n        \\\"name\\\": \\\"MNT\\\",\\n        \\\"symbol\\\": \\\"MNT\\\",\\n        \\\"decimals\\\": 18\\n      },\\n      \\\"rpcUrls\\\": [\\n        \\\"https://rpc.mantle.xyz\\\"\\n      ],\\n      \\\"chainId\\\": \\\"0x1388\\\",\\n      \\\"chainName\\\": \\\"Mantle\\\"\\n    }\\n  ]\\n});\\n```\\n\\n## \\n\\nCanonical Token Addresses[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#canonical-token-addresses)\\n\\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains [a token list](https://github.com/mantlenetworkio/mantle-token-lists/blob/main/mantle.tokenlist.json) that includes known addresses for many popular tokens. For example, looking at the`$MNT` token, the Mantle token list returns the following addresses:\\n\\n0x3c3a81e81dc49a522a592e7622a7e711c06bf354\\n\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n\\n## \\n\\nTransaction Status[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#transaction-status)\\n\\nA transaction on Mantle network can be in one of these states:\\n\\n*   **Sequencer Confirmed:** The transaction has been accepted by the sequencer on Mantle (L2)\\n    \\n*   **Confirmed On-Chain:** The transaction has been written to Ethereum (L1)\\n    \\n\\nIf a transaction is a withdrawal, it can be in one of the following states:\\n\\n*   **Waiting:** Confirmed on L1, but still in the challenge period\\n    \\n*   **Ready to Prove:** Transaction is ready to be proved on L1 to initiate the challenge period\\n    \\n*   **Ready for Relay:** Transaction is out of the challenge period, and can be released by submitting a relay message\\n    \\n*   **Relayed:** A withdrawal is finalized, and the token is released from the bridge\\n    \\n\\nYou can use the [Mantle SDK](https://github.com/mantlenetworkio/mantle-v2/tree/develop/packages/sdk) to find out your transaction status.\\n\\n## \\n\\nTransaction Fees[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#transaction-fees)\\n\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum [here](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\n## \\n\\nEstimating Total Fees[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#estimating-total-fees)\\n\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it rolls up to Ethereum.\\n\\nIn fact, this fee is automatically deducted from the user's `$MNT` balance on Mantle when the transaction is executed.\\n\\nMantle SDK provides an interface to get the total gas fee directly.\\n\\n## \\n\\nSending \\\"Max\\\" $MNT[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#sending-max-mnt)\\n\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's `$MNT` balance being sent.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-a-custom-bridge-to-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"loadedTime\": \"2025-02-15T20:32:33.998Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"title\": \"Adding a Custom Bridge to Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding a Custom Bridge to Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/cV2CIE5W2wkdKsyr6t6p\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:33 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTg1ZWJlZGQtZjk4OS00YjU1LTkwMTctMWQ3MDIyNGFhNzZh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=FoSdNQYTKMqSxn2sLbR%2FIattwkDoPOTt9XG6i80oPUf6okseY51SIvO2KZan%2B2A16%2BowWFQxUfD18KooSH71hyGwC2kJWgaAwWX3e%2Fvl0q857oaoqW5qjbMEpg%2BUJnFvmxsmS4fDfan9RJKdIEPD\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115c7c254d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding a Custom Bridge to Mantle\\nUsing the Standard Bridge​\\nWe suggest considering using the Standard Bridge first before deciding to develop a custom bridge solution.\\nIn the standard bridge when ERC-20 is deposited on layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the layer 2 (L2) token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\nBuilding a Custom Bridge​\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the Bridging basics article, and also the tutorial on depositing and withdrawing ERC-20 tokens between L1 and L2.\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the IL1ERC20Bridge interface in the L1 bridge contract and IL2ERC20Bridge interface in the L2 bridge contract. This ensures the Mantle Gateway can support token deposits and withdrawals via this custom bridge.\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle token list repository. Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Adding a Custom Bridge to Mantle\\n\\n## \\n\\nUsing the Standard Bridge[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/bridge#using-the-standard-bridge)\\n\\nWe suggest considering using the [Standard Bridge](https://bridge.mantle.xyz/) first before deciding to develop a custom bridge solution.\\n\\nIn the standard bridge when ERC-20 is deposited on layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the layer 2 (L2) token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\n\\n## \\n\\nBuilding a Custom Bridge[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/bridge#building-a-custom-bridge)\\n\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the [Bridging basics article](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-comm/), and also the [tutorial on depositing and withdrawing ERC-20 tokens between L1 and L2](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\n\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the IL1ERC20Bridge interface in the L1 bridge contract and IL2ERC20Bridge interface in the L2 bridge contract. This ensures the Mantle Gateway can support token deposits and withdrawals via this custom bridge.\\n\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle [token list repository](https://github.com/mantlenetworkio/mantle-token-lists#mantle-token-list). Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups\",\n    \"loadedTime\": \"2025-02-15T20:32:39.456Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups\",\n    \"title\": \"Optimistic Rollups | Network\",\n    \"description\": \"Taking transaction processing off Ethereum to L2s\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Optimistic Rollups | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Taking transaction processing off Ethereum to L2s\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/vi5qIQH1GumsGDIqVRlh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OWE2N2MyYjMtYWZlMi00YmUyLWFjMTgtNjUyYmVlY2EwMDQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=9cEGo7%2B9hZb1UkPUx6DDZYKFWGpnux4cEy8DIEzv0jXq1Maf8RwQKaEMT3JjjBXMaE1AdLz4fMf9jm%2Bou%2FTb3wdlV1Ufje8yIzzEDNwNeoY7DGqieOTYU6t%2BSTzNcEbvizfTVeYMXJuq2p3Kq1n8\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811842df7059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Optimistic Rollups | Network\\nTaking transaction processing off Ethereum to L2s\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWhat are Optimistic Rollups?\\nOptimistic Rollups (ORs) are Layer-2 (L2) protocols designed to increase the throughput of Ethereum. They reduce computation load on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches.\\nThere are a few different scaling solutions currently in use by various projects, such as:\\nSidechains: Independent blockchains that are linked to a main chain, but maintain block data separately and use their own consensus models. For example, Polygon.\\nPlasma chains: Analogous to child chains that also maintain their own block data validation process, except they're non-custodial in nature from the perspective of assets, which means users can exit with their funds in case of an anomaly. \\nUnlike the solutions stated above, ORs derive security from the Ethereum mainnet by publishing transaction results on-chain. \\nORs are considered “optimistic” because they assume off-chain transactions are valid and don't publish proofs of validity for transaction batches posted on-chain. But how do they detect and deal with invalid states then? This is where Fraud Proofs come in.\\nNetwork actors submit fraud proofs if they spot invalid transactions. Smart contracts on the Ethereum mainnet then execute the individual transactions (or an entire block if necessary) to check their validity. If confirmed to be invalid, the batch submitter (the Sequencer) gets their stake (deposited as bond at the time of batch submission) slashed, setting a disincentive in place to discourage invalid submissions.\\nFor more details, we recommend reading: \\nLast updated 11 months ago\",\n  \"markdown\": \"# Optimistic Rollups | Network\\n\\nTaking transaction processing off Ethereum to L2s\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**What are** Optimistic Rollups?\\n\\nOptimistic Rollups (ORs) are Layer-2 (L2) protocols designed to increase the throughput of Ethereum. They reduce computation load on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches.\\n\\nThere are a few different scaling solutions currently in use by various projects, such as:\\n\\n*   **Sidechains:** Independent blockchains that are linked to a main chain, but maintain block data separately and use their own consensus models. For example, Polygon.\\n    \\n*   **Plasma chains:** Analogous to child chains that also maintain their own block data validation process, except they're non-custodial in nature from the perspective of assets, which means users can exit with their funds in case of an anomaly.\\n    \\n\\nUnlike the solutions stated above, ORs derive security from the Ethereum mainnet by publishing transaction results on-chain.\\n\\nORs are considered “_optimistic_” because they assume off-chain transactions are valid and don't publish proofs of validity for transaction batches posted on-chain. But how do they detect and deal with invalid states then? This is where Fraud Proofs come in.\\n\\nNetwork actors submit fraud proofs if they spot invalid transactions. Smart contracts on the Ethereum mainnet then execute the individual transactions (or an entire block if necessary) to check their validity. If confirmed to be invalid, the batch submitter (the _Sequencer_) gets their stake (deposited as bond at the time of batch submission) slashed, setting a disincentive in place to discourage invalid submissions.\\n\\n**For more details, we recommend reading:**\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge\",\n    \"loadedTime\": \"2025-02-15T20:32:39.493Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge\",\n    \"title\": \"Bridging Custom ERC20 Tokens Using Standard Bridge | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging Custom ERC20 Tokens Using Standard Bridge | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/CCIFJ5Yq2sVYZaY98Da4\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzRhNzVjYjctZjg2ZS00YzcyLWJlNjAtYTE4ZjAyYTNkN2Ux' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IllJ0A7FOA1c1rb37c5bI2ELQQtfht8kTK2fnfEnsjKhQXo2V9J6onPp7ZrjZ7VIPgsGyLmnoZKPC8zXdP70ngI3RGQfF24HyaoNRYjY3i9mW8ANr9AWnNah8RVpgXXUBEylUWgsMhUuohEyCEL2\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811839ac42d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging Custom ERC20 Tokens Using Standard Bridge\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nFor an L1/L2 token pair to work on the Standard Bridge, there has to be a layer of original mint (where the minting and burning of tokens is controlled by the business logic), and a bridged layer where the Standard Bridge controls minting and burning. The most common configuration is to have L1 as the layer of original mint, and L2 as the bridged layer, this allows for ERC-20 contracts that were written with no knowledge of Mantle Mainnet to be bridged. The contract on the bridged layer has to implement the legacy IL2StandardERC20 interface (only if the bridged layer is L2).\\nFor this to be done securely, the only entity that is allowed to mint and burn tokens on the bridged layer has to be the Standard Bridge, to ensure that the tokens on the bridged layer are backed up by real tokens on the layer of original mint. It is also necessary that the ERC-20 token contract on the layer of original mint not implement either of the interfaces, to make sure the bridge contracts don't get confused and think it is the bridged layer.\\nWarning: The standard bridge does not support certain ERC-20 configurations:\\nFor the purpose we import the L2StandardERC20 from the @mantleio/contracts package. This standard token implementation is based on the OpenZeppelin ERC20 contract and implements the required IL2StandardERC20 interface.\\nYou can import @mantleio/contracts to use the Mantle contracts within your own codebase. Install via npm or yarn:\\nnpm install @mantleio/contracts\\nWithin your contracts:\\nimport { L2StandardERC20 } from \\\"@mantleio/contracts/standards/L2StandardERC20.sol\\\";\\nDeploying the custom token\\nDownload the necessary packages.\\nCopy .env.example to .env.\\nEdit .env to set the deployment parameters:\\nPRIVATE_KEY, the hex private key for an account that has enough ETH for the deployment.\\nL1_RPC, Ethereum endpoint RPC URL.\\nL2_RPC, Mantle endpoint RPC URL.\\nL1_BRIDGE, L1 standard bridge contract address.\\nL2_BRIDGE, L2 standard bridge contract address.\\nL1_TOKEN_ADDRESS, the address of the L1 ERC20 which you want to bridge. The default value, 0xeE7Bf96bFd25931976F45a16C4483d336169Bc0F is a test ERC-20 contract on Goerli that lets you call faucet to give yourself test tokens.\\nOpen the hardhat console.\\nyarn hardhat console --network mantle-network\\nDeploy the contract.\\nl2CustomERC20Factory = await ethers.getContractFactory(\\\"L2CustomERC20\\\") l2CustomERC20 = await l2CustomERC20Factory.deploy( \\\"0x4200000000000000000000000000000000000010\\\", process.env.L1_TOKEN_ADDRESS)\\nTransferring tokens\\nGet the token addresses.\\nl1Addr = process.env.L1_TOKEN_ADDRESS l2Addr = l2CustomERC20.address\\nGet setup for L1 (provider, wallet, tokens, etc)\\nGet the L1 wallet.\\nl1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC) const privateKey = process.env.PRIVATE_KEY l1Wallet = new ethers.Wallet(privateKey, l1RpcProvider)\\nGet the L1 contract.\\nl1Factory = await ethers.getContractFactory(\\\"MantleUselessToken\\\") l1Contract = new ethers.Contract(process.env.L1_TOKEN_ADDRESS, l1Factory.interface, l1Wallet)\\nGet tokens on L1 (and verify the balance)\\ntx = await l1Contract.faucet() rcpt = await tx.wait() await l1Contract.balanceOf(l1Wallet.address)\\nTransfer tokens\\nCreate and use CrossDomainMessenger (the Mantle SDK object used to bridge assets).\\nImport the Mantle SDK.\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\")\\nCreate the cross domain messenger.\\nl1ChainId = (await l1RpcProvider.getNetwork()).chainId l2ChainId = (await ethers.provider.getNetwork()).chainId l2Wallet = await ethers.provider.getSigner() crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: l1ChainId, l2ChainId: l2ChainId, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, })\\nDeposit (from Goerli to Mantle Testnet, or Ethereum to Mantle Mainnet)\\nGive the L2 bridge an allowance to use the user's token. The L2 address is necessary to know which bridge is responsible and needs the allowance.\\ndepositTx1 = await crossChainMessenger.approveERC20(l1Contract.address, l2Addr, 1e9) await depositTx1.wait()\\nCheck your balances on L1 and L2.\\nawait l1Contract.balanceOf(l1Wallet.address) await l2CustomERC20.balanceOf(l1Wallet.address)\\nDo the actual deposit\\ndepositTx2 = await crossChainMessenger.depositERC20(l1Contract.address, l2Addr, 1e9) await depositTx2.wait()\\nWait for the deposit to be relayed.\\nawait crossChainMessenger.waitForMessageStatus(depositTx2.hash, mantleSDK.MessageStatus.RELAYED)\\nCheck your balances on L1 and L2.\\nawait l1Contract.balanceOf(l1Wallet.address) await l2CustomERC20.balanceOf(l1Wallet.address)\\nWithdrawal (from Mantle Mainnet to Ethereum, or Mantle Testnet to Goerli)\\nInitiate the withdrawal on L2\\nwithdrawalTx1 = await crossChainMessenger.withdrawERC20(l1Contract.address, l2Addr, 1e9) await withdrawalTx1.wait()\\nWait until the root state is published on L1, and then prove the withdrawal. This is likely to take within 30 minutes.\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mantleSDK.MessageStatus.READY_TO_PROVE) withdrawalTx2 = await crossChainMessenger.proveMessage(withdrawalTx1.hash) await withdrawalTx2.wait()\\nWait the fraud challenge period (a short period on Goerli, currently 7 days(but may be adjusted in the future which can be checked here) on the production network) and then finish the withdrawal.\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mantleSDK.MessageStatus.READY_FOR_RELAY) withdrawalTx3 = await crossChainMessenger.finalizeMessage(withdrawalTx1.hash) await withdrawalTx3.wait() \\nCheck your balances on L1 and L2. The balance on L2 should be back to zero.\\nawait l1Contract.balanceOf(l1Wallet.address) await l2CustomERC20.balanceOf(l1Wallet.address)\\nUse Factory Contract to Deploy L2StandardERC20\\nThe token contracts deployed using Factory contract are standard IL2StandardERC20 contracts and can only take the name \\\"L2StandardERC20\\\". If you want to use a different name and methods, you can inherit the L2StandardERC20 contract and deploy is as a custom contract.\\nCall the createStandardL2Token method of the L2StandardTokenFactory contract by passing the l1Token, name, symbol, and decimal parameters. The mainnet factory contract is deployed at: 0x4200000000000000000000000000000000000012\\nThe corresponding contract address will be generated upon a successful call. The creation transaction can be found under the internal transaction tab on the Explorer. Examples:\\nInternal transactions on mainnet can take upto ~12 minutes before they show up on the Explorer.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Bridging Custom ERC20 Tokens Using Standard Bridge\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nFor an L1/L2 token pair to work on the Standard Bridge, there has to be a layer of original mint (where the minting and burning of tokens is controlled by the business logic), and a bridged layer where the Standard Bridge controls minting and burning. The most common configuration is to have L1 as the layer of original mint, and L2 as the bridged layer, this allows for ERC-20 contracts that were written with no knowledge of Mantle Mainnet to be bridged. The contract on the bridged layer has to implement the legacy [`IL2StandardERC20`](https://github.com/mantlenetworkio/mantle-erc20-bridge/blob/main/contracts/ERC20/IL2StandardERC20.sol) interface (only if the bridged layer is L2).\\n\\nFor this to be done securely, the _only_ entity that is allowed to mint and burn tokens on the bridged layer has to be the Standard Bridge, to ensure that the tokens on the bridged layer are backed up by real tokens on the layer of original mint. It is also necessary that the ERC-20 token contract on the layer of original mint _not_ implement either of the interfaces, to make sure the bridge contracts don't get confused and think it is the bridged layer.\\n\\n**Warning:** The standard bridge does _not_ support certain ERC-20 configurations:\\n\\nFor the purpose we import the `L2StandardERC20` from the `@mantleio/contracts` package. This standard token implementation is based on the OpenZeppelin ERC20 contract and implements the required `IL2StandardERC20` interface.\\n\\nYou can import `@mantleio/contracts` to use the Mantle contracts within your own codebase. Install via `npm` or `yarn`:\\n\\n```\\nnpm install @mantleio/contracts\\n```\\n\\nWithin your contracts:\\n\\n```\\nimport { L2StandardERC20 } from \\\"@mantleio/contracts/standards/L2StandardERC20.sol\\\";\\n```\\n\\n## \\n\\nDeploying the custom token\\n\\n1.  Download the necessary packages.\\n    \\n\\n1.  Copy `.env.example` to `.env`.\\n    \\n\\n1.  Edit `.env` to set the deployment parameters:\\n    \\n\\n*   `PRIVATE_KEY`, the hex private key for an account that has enough ETH for the deployment.\\n    \\n*   `L1_RPC`, Ethereum endpoint RPC URL.\\n    \\n*   `L2_RPC`, Mantle endpoint RPC URL.\\n    \\n*   `L1_BRIDGE`, L1 standard bridge contract address.\\n    \\n*   `L2_BRIDGE`, L2 standard bridge contract address.\\n    \\n*   `L1_TOKEN_ADDRESS`, the address of the L1 ERC20 which you want to bridge. The default value, [`0xeE7Bf96bFd25931976F45a16C4483d336169Bc0F`](https://goerli.etherscan.io/address/0xee7bf96bfd25931976f45a16c4483d336169bc0f) is a test ERC-20 contract on Goerli that lets you call `faucet` to give yourself test tokens.\\n    \\n\\n1.  Open the hardhat console.\\n    \\n\\n```\\nyarn hardhat console --network mantle-network\\n```\\n\\n1.  Deploy the contract.\\n    \\n\\n```\\nl2CustomERC20Factory = await ethers.getContractFactory(\\\"L2CustomERC20\\\")   \\nl2CustomERC20 = await l2CustomERC20Factory.deploy(\\n   \\\"0x4200000000000000000000000000000000000010\\\",\\n   process.env.L1_TOKEN_ADDRESS)\\n```\\n\\n## \\n\\nTransferring tokens\\n\\n1.  Get the token addresses.\\n    \\n\\n```\\nl1Addr = process.env.L1_TOKEN_ADDRESS\\nl2Addr = l2CustomERC20.address\\n```\\n\\n### \\n\\nGet setup for L1 (provider, wallet, tokens, etc)\\n\\n1.  Get the L1 wallet.\\n    \\n\\n```\\nl1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC)\\nconst privateKey = process.env.PRIVATE_KEY\\nl1Wallet = new ethers.Wallet(privateKey, l1RpcProvider)\\n```\\n\\n1.  Get the L1 contract.\\n    \\n\\n```\\nl1Factory = await ethers.getContractFactory(\\\"MantleUselessToken\\\")\\nl1Contract = new ethers.Contract(process.env.L1_TOKEN_ADDRESS, l1Factory.interface, l1Wallet)\\n```\\n\\n1.  Get tokens on L1 (and verify the balance)\\n    \\n\\n```\\ntx = await l1Contract.faucet()\\nrcpt = await tx.wait()\\nawait l1Contract.balanceOf(l1Wallet.address)\\n```\\n\\n### \\n\\nTransfer tokens\\n\\nCreate and use [`CrossDomainMessenger`](https://sdk.mantle.xyz/classes/CrossChainMessenger.html) (the Mantle SDK object used to bridge assets).\\n\\n1.  Import the Mantle SDK.\\n    \\n\\n```\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\")\\n```\\n\\n1.  Create the cross domain messenger.\\n    \\n\\n```\\nl1ChainId = (await l1RpcProvider.getNetwork()).chainId\\nl2ChainId = (await ethers.provider.getNetwork()).chainId\\nl2Wallet = await ethers.provider.getSigner()\\ncrossChainMessenger = new mantleSDK.CrossChainMessenger({\\n   l1ChainId: l1ChainId,\\n   l2ChainId: l2ChainId,\\n   l1SignerOrProvider: l1Wallet,\\n   l2SignerOrProvider: l2Wallet,\\n})\\n```\\n\\n#### \\n\\n**Deposit (from Goerli to Mantle Testnet, or Ethereum to Mantle Mainnet)**\\n\\n1.  Give the L2 bridge an allowance to use the user's token. The L2 address is necessary to know which bridge is responsible and needs the allowance.\\n    \\n\\n```\\ndepositTx1 = await crossChainMessenger.approveERC20(l1Contract.address, l2Addr, 1e9)\\nawait depositTx1.wait()\\n```\\n\\n1.  Check your balances on L1 and L2.\\n    \\n\\n```\\nawait l1Contract.balanceOf(l1Wallet.address) \\nawait l2CustomERC20.balanceOf(l1Wallet.address)\\n```\\n\\n1.  Do the actual deposit\\n    \\n\\n```\\ndepositTx2 = await crossChainMessenger.depositERC20(l1Contract.address, l2Addr, 1e9)\\nawait depositTx2.wait()\\n```\\n\\n1.  Wait for the deposit to be relayed.\\n    \\n\\n```\\nawait crossChainMessenger.waitForMessageStatus(depositTx2.hash, mantleSDK.MessageStatus.RELAYED)\\n```\\n\\n1.  Check your balances on L1 and L2.\\n    \\n\\n```\\nawait l1Contract.balanceOf(l1Wallet.address) \\nawait l2CustomERC20.balanceOf(l1Wallet.address)\\n```\\n\\n#### \\n\\nWithdrawal (from Mantle Mainnet to Ethereum, or Mantle Testnet to Goerli)\\n\\n1.  Initiate the withdrawal on L2\\n    \\n\\n```\\nwithdrawalTx1 = await crossChainMessenger.withdrawERC20(l1Contract.address, l2Addr, 1e9)\\nawait withdrawalTx1.wait()\\n```\\n\\n1.  Wait until the root state is published on L1, and then prove the withdrawal. This is likely to take within 30 minutes.\\n    \\n\\n```\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mantleSDK.MessageStatus.READY_TO_PROVE)\\nwithdrawalTx2 = await crossChainMessenger.proveMessage(withdrawalTx1.hash)\\nawait withdrawalTx2.wait()\\n```\\n\\n1.  Wait the fraud challenge period (a short period on Goerli, currently 7 days(but may be adjusted in the future which can be checked [here](https://etherscan.io/address/0x89E9D387555AF0cDE22cb98833Bae40d640AD7fa#readContract#F1)) on the production network) and then finish the withdrawal.\\n    \\n\\n```\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mantleSDK.MessageStatus.READY_FOR_RELAY)\\nwithdrawalTx3 = await crossChainMessenger.finalizeMessage(withdrawalTx1.hash)\\nawait withdrawalTx3.wait()   \\n```\\n\\n1.  Check your balances on L1 and L2. The balance on L2 should be back to zero.\\n    \\n\\n```\\nawait l1Contract.balanceOf(l1Wallet.address) \\nawait l2CustomERC20.balanceOf(l1Wallet.address)\\n```\\n\\n## \\n\\nUse Factory Contract to Deploy L2StandardERC20\\n\\nThe token contracts deployed using Factory contract are standard `IL2StandardERC20` contracts and can only take the name \\\"L2StandardERC20\\\". If you want to use a different name and methods, you can inherit the L2StandardERC20 contract and deploy is as a custom contract.\\n\\n1.  Call the `createStandardL2Token` method of the `L2StandardTokenFactory` contract by passing the `l1Token`, `name`, `symbol`, and `decimal` parameters. The mainnet factory contract is deployed at: [`0x4200000000000000000000000000000000000012`](https://explorer.mantle.xyz/address/0x4200000000000000000000000000000000000012)\\n    \\n\\n1.  The corresponding contract address will be generated upon a successful call. The creation transaction can be found under the internal transaction tab on the Explorer. Examples:\\n    \\n\\nInternal transactions on mainnet can take upto ~12 minutes before they show up on the Explorer.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-wallet-support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-wallet-support\",\n    \"loadedTime\": \"2025-02-15T20:32:39.865Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-wallet-support\",\n    \"title\": \"Adding Mantle Wallet Support | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle Wallet Support | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/cO8szj2fDmZ34TmDdRBp\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTQwMzMwZjUtMTg4Ni00NmNiLWExMWQtY2MxZWVkODU5MTcy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=QDdRhSj5fmr369gfU%2FOj7Vt99sMyE4SwWkQlBUuIqYQiSp%2F6hfUbUnXfQHw3mQ0aOathnmVGzYL%2B01BqyUK4grNEBfJr%2BTzLywAmbr0o%2Bm7PuD9DIYeQG7bxd88%2FF%2Fxo1jG9L3B0D%2FEk8x0oNglS\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281185aac382e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding Mantle Wallet Support | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nOverview\\nMantle network uses $MNT as a native token, and creates an EVM-like code execution environment for transaction and state processing. This means a user on Layer 2 (L2) can use $MNT exactly like they would $ETH on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in the section:Transaction Fees on L2. Any $MNT tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\nConnecting to Mantle\\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nCanonical Token Addresses \\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains a token list that includes known addresses for many popular tokens. \\nFor example, looking at the $MNT token, the Mantle token list returns the following addresses:\\n0x1A4b46696b2bB4794Eb3D4c26f1c55F9170fa4C5\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\nTransaction Status\\nA transaction on Mantle network can be in one of these states:\\nSequencer Confirmed: The transaction has been accepted by the sequencer on Mantle (L2) \\nConfirmed On-Chain: The transaction has been written to Ethereum (L1)\\nIf a transaction is a withdrawal, it can be in one of the following states:\\nWaiting: Confirmed on L1, but still in the challenge period \\nReady for Relay: Transaction is out of the challenge period, and can be released by submitting a relay message \\nRelayed: A withdrawal is finalized, and the token is released from the bridge\\nYou can use the Mantle SDK to find out your transaction status.\\nTransaction Fees\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum here.\\nEstimating Total Fees\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it rolls up to Ethereum. \\nIn fact, this fee is automatically deducted from the user's $MNT balance on Mantle when the transaction is executed.\\nThe total fee paid by a transaction will be a combination of the normal fee estimation formula (gasPrice * gasLimit) on L2 execution, and in addition to the estimated L1 fee for rollup.\\nYou can read more about this subject in Transaction Fees on L2. \\nSending \\\"Max\\\" $MNT\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's $MNT balance being sent. \\nYou MUST deduct both the L2 execution fee, and the L1 data rollup fee from the transaction sending amount. Otherwise, it will exceed the user's balance and the transaction will fail.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Adding Mantle Wallet Support | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**Overview**\\n\\nMantle network uses $MNT as a native token, and creates an EVM-like code execution environment for transaction and state processing. This means a user on Layer 2 (L2) can use **$MNT** exactly like they would $ETH on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in the section:[Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2). Any $MNT tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\n\\n### \\n\\n**Connecting to Mantle**\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to Mantle through any of the following means:\\n\\n### \\n\\n**Canonical Token Addresses**\\n\\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains a [token list](https://github.com/mantlenetworkio/mantle-token-lists) that includes known addresses for many popular tokens.\\n\\nFor example, looking at the **$MNT** token, the Mantle token list returns the following addresses:\\n\\n0x1A4b46696b2bB4794Eb3D4c26f1c55F9170fa4C5\\n\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n\\n0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\n\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n\\n### \\n\\n**Transaction Status**\\n\\nA transaction on Mantle network can be in one of these states:\\n\\n*   **Sequencer Confirmed:** The transaction has been accepted by the sequencer on Mantle (L2)\\n    \\n*   **Confirmed On-Chain:** The transaction has been written to Ethereum (L1)\\n    \\n\\nIf a transaction is a withdrawal, it can be in one of the following states:\\n\\n*   **Waiting:** Confirmed on L1, but still in the challenge period\\n    \\n*   **Ready for Relay:** Transaction is out of the challenge period, and can be released by submitting a relay message\\n    \\n*   **Relayed:** A withdrawal is finalized, and the token is released from the bridge\\n    \\n\\nYou can use the [Mantle SDK](https://github.com/mantlenetworkio/mantle/tree/main/packages/sdk) to find out your transaction status.\\n\\n### \\n\\nTransaction Fees\\n\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum [here](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2).\\n\\n### \\n\\nEstimating Total Fees\\n\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it rolls up to Ethereum.\\n\\nIn fact, this fee is automatically deducted from the user's $MNT balance on Mantle when the transaction is executed.\\n\\nThe total fee paid by a transaction will be a combination of the normal fee estimation formula `**(gasPrice * gasLimit)**` on L2 execution, and in addition to the estimated L1 fee for rollup.\\n\\nYou can read more about this subject in [Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2).\\n\\n### \\n\\nSending \\\"Max\\\" $MNT\\n\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's $MNT balance being **sent**.\\n\\nYou **MUST** deduct **both** the **L2 execution fee,** and the **L1 data rollup fee** from the transaction sending amount. Otherwise, it will exceed the user's balance and the transaction will fail.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains\",\n    \"loadedTime\": \"2025-02-15T20:32:40.170Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains\",\n    \"title\": \"Modular Blockchain | Network\",\n    \"description\": \"Taking a modular chain approach to offer hyper-scaled transaction throughput\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Modular Blockchain | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Taking a modular chain approach to offer hyper-scaled transaction throughput\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/8V1H7kVgtwUQ3zzkPNbg\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2RiN2NjZjItYTA5NC00MWY4LTg1OTEtZDM3NmI1NGM0ZWI1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=aTL1pkwyzNwnSXFlFmFi0d5cfwpy7Pi60WjHGiEldFezaGXO2jpS0My4HgNig7WdJgf05hUXQovQo8MD%2FT88GGjZXqFhe44dKrUlc0UEnD9Rf17%2BitW%2FYmLrN343OEu6Yj50NF3MtY%2F3yPdS%2BrUZ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811844dd69c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Modular Blockchain | Network\\nTaking a modular chain approach to offer hyper-scaled transaction throughput\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nExisting systems\\nTraditional Optimistic Rollups (ORs) rely on Ethereum for data availability, final settlement, and as an execution layer for fraud proofs.\\nTo get a clearer idea on why we built Mantle network with a modular architecture, let's talk about the standard operations of a traditional OR.\\nA typical OR can be thought of as a blockchain that processes L2 transactions on a separate execution layer, but ultimately relies on Ethereum for final settlement. In order to maintain Ethereum-level security, an OR must also use Ethereum for data availability and as an execution layer for fraud proofs. This design improves Ethereum's scaling, but also introduces several downsides:\\nL2 users are exposed to expensive fees because the OR posts transaction data to Ethereum\\nUsing Ethereum as a data availability layer constrains throughput for L2 nodes\\nTraditional ORs must allow for a lengthy challenge period (typically 7 days) before finality is achieved and users can exit their funds from the L2 chain\\nIdeally, an L2 scaling solution should offer the benefits of an OR without the downsides of the current architecture.\\nModular Rollups\\nIn a Modular Blockchain, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on specialized layers. By applying this principle to a rollup, we are able to optimize the solution since each layer is now performing a specialized task. This leads to lower costs and better overall performance.\\nMany popular blockchains like Ethereum, Binance Smart Chain, Solana, etc. handle processes such as execution, consensus, settlement, and data availability all at the node/network level (hence sometimes referred to as Monolithic blockchains). Modular blockchains essentially break these functions into separate layers that can be run by network actors at different levels. This translates to lower gas costs and better overall performance. \\nA system like this is also a potential solution to the popular Scalability, Security, and Decentralization blockchain trilemma. Here's how.\\nThe separation of resources results in increased network efficiency since each layer specializes at a particular task.\\nAll users operate at the same level of improved security, as opposed to only validators (full nodes) on L1.\\nTechnologies such as fraud proofs and ZK proofs that operate on separate layers reduce the overall execution and validation load on the nodes since they don't need to execute all the transactions for checking validity anymore.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Modular Blockchain | Network\\n\\nTaking a modular chain approach to offer hyper-scaled transaction throughput\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nExisting systems\\n\\nTraditional Optimistic Rollups (ORs) rely on Ethereum for data availability, final settlement, and as an execution layer for fraud proofs.\\n\\nTo get a clearer idea on why we built Mantle network with a modular architecture, let's talk about the standard operations of a traditional OR.\\n\\nA typical OR can be thought of as a blockchain that processes L2 transactions on a separate execution layer, but ultimately relies on Ethereum for final settlement. In order to maintain Ethereum-level security, an OR must also use Ethereum for data availability and as an execution layer for fraud proofs. This design improves Ethereum's scaling, but also introduces several downsides:\\n\\n1.  L2 users are exposed to expensive fees because the OR posts transaction data to Ethereum\\n    \\n2.  Using Ethereum as a data availability layer constrains throughput for L2 nodes\\n    \\n3.  Traditional ORs must allow for a lengthy challenge period (typically 7 days) before finality is achieved and users can exit their funds from the L2 chain\\n    \\n\\nIdeally, an L2 scaling solution should offer the benefits of an OR without the downsides of the current architecture.\\n\\n## \\n\\nModular Rollups\\n\\nIn a **Modular Blockchain**, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on **specialized** layers. By applying this principle to a rollup, we are able to optimize the solution since each layer is now performing a specialized task. This leads to lower costs and better overall performance.\\n\\nMany popular blockchains like Ethereum, Binance Smart Chain, Solana, etc. handle processes such as execution, consensus, settlement, and data availability all at the node/network level (hence sometimes referred to as _Monolithic blockchains_). Modular blockchains essentially break these functions into separate layers that can be run by network actors at different levels. This translates to lower gas costs and better overall performance.\\n\\nA system like this is also a potential solution to the popular Scalability, Security, and Decentralization [blockchain trilemma](https://learn.bybit.com/deep-dive/blockchain-trilemma/). Here's how.\\n\\n1.  The separation of resources results in increased network efficiency since each layer specializes at a particular task.\\n    \\n2.  All users operate at the same level of improved security, as opposed to only validators (full nodes) on L1.\\n    \\n3.  Technologies such as fraud proofs and ZK proofs that operate on separate layers reduce the overall execution and validation load on the nodes since they don't need to execute all the transactions for checking validity anymore.\\n    \\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees\",\n    \"loadedTime\": \"2025-02-15T20:32:40.872Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees\",\n    \"title\": \"Estimating Transaction Fees | Network\",\n    \"description\": \"A tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Estimating Transaction Fees | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"A tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/7N7iC4oV6TvObfaJmPvk\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OTFiODI3NzMtMjMzMC00MGQ5LWJmNDctNzNkZjlhOTlmYjli' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Xcw7Wm9KmYQ5g2hRoprP4FIBJbU24N05RyLw5dRx3nd%2FFCEZ4jZvI5ZF7NAy4EQfyJ3noly7RvSCNTgTnkPPfKfOIDyUXFL6RjOhNIa6QGt5hDVn4baplE45Tw%2BwCPiVvLas3u0pNS0vB%2BFxdSkJ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128118b9f039c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Estimating Transaction Fees | Network\\nA tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nDescription\\nIn this tutorial, we'll be looking at an example that shows how to use the Mantle SDK to estimate the total gas fees for a transaction on Mantle Network, which is a combination of the layer-2 (L2) execution fee, and the layer-1 (L1) rollup fee.\\nIn SDK version @mantleio/sdk @0.2.2 , we're introducing the parameters required to make accurate estimations of the L1 rollup fee that will be incurred for sending a transaction at any given time. The calculation to obtain L1 rollup fee is as follows:\\nL1RollupFee = L1GasPrice * Overhead * Scalar * Ratio\\nThere are 4 interfaces available as part of the SDK, where:\\nL1GasPrice * Ratio can be fetched by calling the getL1GasPrice method. It invokes the l1basefee() function of the BVM_GasPriceOracle contract.\\noverhead, decimals, and scalar values can be fetched from the BVM_GasPriceOracle contract by calling the respective SDK methods with the same names.\\nThe decimals value in the contract is mainly used to control the precision of scalar, which helps ensure accurate L1 rollup fee calculation.\\nThe L2 execution fee, on the other hand, is calculated as follows:\\nL2TxnFee = L2GasPrice * L2GasUsed\\nL2 gas price is fetched by calling the getGasPrice method\\nThe gas used to execute a transaction is fetched by calling the estimateGas method\\nThe total gas fee is thus calculated as:\\ntotalEstimatedGasFee = L1RollupFee + L2TxnFee\\nSDK Installation\\nBefore proceeding, please make sure you have npm installed and configured in your local environment.\\nStart by installing Mantle SDK and the necessary dependencies in your environment by running the following command:\\nnpm install @mantleio/sdk\\nIf you already have the SDK installed, please make sure you update to the latest version by running the command npm update @mantleio/sdk since the L1 rollup fee parameters are only available for version 0.2.2, or higher.\\nScript\\nYou can directly use the following JS code to estimate the total gas fees.\\nconst ethers = require(\\\"ethers\\\") const mantleSDK = require(\\\"@mantleio/sdk\\\"); async function estimateGasFee() { const l2RpcProvider = new ethers.providers.JsonRpcProvider(\\\"https://rpc.mantle.xyz\\\") try{ // Arbitrary tx object const tx = { to: '0x...', value: ethers.utils.parseEther(\\\"0.1\\\"), // Returns value in wei }; // By calling the BVM_GasPriceOracle contract method l1basefee() const gasPrice = await mantleSDK.getL1GasPrice(l2RpcProvider); const decimals = await mantleSDK.decimals(l2RpcProvider); const scalar = await mantleSDK.scalar(l2RpcProvider); const gasUsed = await mantleSDK.overhead(l2RpcProvider); // L1RollupFee const l1RollupFee = gasPrice.mul(gasUsed).mul(scalar).div(10**decimals) // L2TxnFee const l2Gas = await l2RpcProvider.estimateGas(tx) const l2GasPrice = await l2RpcProvider.getGasPrice() const l2TxnFee = l2GasPrice.mul(l2Gas); // Total estimated Gas Fee const totalEstimatedGasFee = l1RollupFee.add(l2TxnFee); console.log(`Total estimated Gas Fee: ${totalEstimatedGasFee.toString()}`); } catch (error) { console.error('Error estimating gas:', error); } } estimateGasFee();\\nResult\\ntotalEstimatedGasFee contains the final result of the calculation, as discussed in the Description section.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Estimating Transaction Fees | Network\\n\\nA tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nDescription\\n\\nIn this tutorial, we'll be looking at an example that shows how to use the Mantle SDK to estimate the total gas fees for a transaction on Mantle Network, which is a combination of the layer-2 (L2) execution fee, and the layer-1 (L1) rollup fee.\\n\\nIn SDK version [`@mantleio/sdk @0.2.2`](https://www.npmjs.com/package/@mantleio/sdk/v/0.2.2) , we're introducing the parameters required to make accurate estimations of the L1 rollup fee that will be incurred for sending a transaction at any given time. The calculation to obtain L1 rollup fee is as follows:\\n\\n```\\nL1RollupFee = L1GasPrice * Overhead * Scalar * Ratio\\n```\\n\\nThere are 4 interfaces available as part of the SDK, where:\\n\\n*   `L1GasPrice * Ratio` can be fetched by calling the `getL1GasPrice` method. It invokes the `l1basefee()` function of the [`BVM_GasPriceOracle`](https://explorer.mantle.xyz/address/0x420000000000000000000000000000000000000F) contract.\\n    \\n*   `overhead`, `decimals`, and `scalar` values can be fetched from the [`BVM_GasPriceOracle`](https://explorer.mantle.xyz/address/0x420000000000000000000000000000000000000F) contract by calling the respective SDK methods with the same names.\\n    \\n\\nThe `decimals` value in the contract is mainly used to control the precision of `scalar`, which helps ensure accurate L1 rollup fee calculation.\\n\\nThe L2 execution fee, on the other hand, is calculated as follows:\\n\\n```\\nL2TxnFee = L2GasPrice * L2GasUsed\\n```\\n\\n*   L2 gas price is fetched by calling the `getGasPrice` method\\n    \\n*   The gas used to execute a transaction is fetched by calling the `estimateGas` method\\n    \\n\\nThe total gas fee is thus calculated as:\\n\\n```\\ntotalEstimatedGasFee = L1RollupFee + L2TxnFee\\n```\\n\\n## \\n\\nSDK Installation\\n\\nBefore proceeding, please make sure you have `npm` installed and configured in your local environment.\\n\\nStart by installing Mantle SDK and the necessary dependencies in your environment by running the following command:\\n\\n```\\nnpm install @mantleio/sdk\\n```\\n\\nIf you already have the SDK installed, please make sure you update to the latest version by running the command `npm update @mantleio/sdk` since the L1 rollup fee parameters are only available for **version 0.2.2, or higher**.\\n\\n## \\n\\nScript\\n\\nYou can directly use the following JS code to estimate the total gas fees.\\n\\n```\\nconst ethers = require(\\\"ethers\\\")\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\");\\n\\nasync function estimateGasFee() {\\n    const l2RpcProvider = new ethers.providers.JsonRpcProvider(\\\"https://rpc.mantle.xyz\\\")    \\n\\n    try{\\n        \\n        // Arbitrary tx object\\n        const tx = {\\n            to: '0x...',\\n            value: ethers.utils.parseEther(\\\"0.1\\\"), // Returns value in wei\\n        };\\n    \\n        // By calling the BVM_GasPriceOracle contract method l1basefee()\\n        const gasPrice = await mantleSDK.getL1GasPrice(l2RpcProvider);\\n        const decimals = await mantleSDK.decimals(l2RpcProvider);\\n        const scalar = await mantleSDK.scalar(l2RpcProvider);\\n        const gasUsed = await mantleSDK.overhead(l2RpcProvider);\\n    \\n        // L1RollupFee\\n        const l1RollupFee = gasPrice.mul(gasUsed).mul(scalar).div(10**decimals)\\n        \\n        // L2TxnFee\\n        const l2Gas = await l2RpcProvider.estimateGas(tx)\\n        const l2GasPrice = await l2RpcProvider.getGasPrice()\\n        const l2TxnFee = l2GasPrice.mul(l2Gas);\\n        \\n        // Total estimated Gas Fee\\n        const totalEstimatedGasFee = l1RollupFee.add(l2TxnFee);\\n        console.log(`Total estimated Gas Fee: ${totalEstimatedGasFee.toString()}`);\\n\\n    } catch (error) {\\n        console.error('Error estimating gas:', error);\\n    }\\n\\n}\\n\\nestimateGasFee();\\n```\\n\\n## \\n\\nResult\\n\\n`totalEstimatedGasFee` contains the final result of the calculation, as discussed in the [Description](https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees#description) section.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts\",\n    \"loadedTime\": \"2025-02-15T20:32:40.778Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts\",\n    \"title\": \"Key Concepts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Key Concepts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/qiSK5IHzU2PiBzSkmRNS\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzI4ZmI1OGYtM2U4OC00Yzg5LTk1NmEtNmYzODliZDI4NjE4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=nDDEjcXaCe8z9spWJYal%2FH1MJQ673hpJkaBpx0JjVtjo0EnhOlUM2vwXMpsfska1sII0g70Sd2SD72BZJZU50v5Wfs5l62mMdU%2BP08iF%2FPmc5d6wN7I5yDwPkrI01N8vefueRHknmbIDmJrBoLeq\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281184af264d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Key Concepts | Network\\nOptimistic RollupsModular BlockchainData AvailabilityThreshold Signature SchemeFraud ProofsBridging\\nPreviousOverviewNextOptimistic Rollups\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Key Concepts | Network\\n\\n[Optimistic Rollups](https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups)[Modular Blockchain](https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains)[Data Availability](https://docs.mantle.xyz/network/network/introduction/concepts/data-availability)[Threshold Signature Scheme](https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme)[Fraud Proofs](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs)[Bridging](https://docs.mantle.xyz/network/network/introduction/concepts/bridging)\\n\\n[PreviousOverview](https://docs.mantle.xyz/network/network)[NextOptimistic Rollups](https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups)\\n\\nLast updated 1 year ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/moving-assets-and-data\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/moving-assets-and-data\",\n    \"loadedTime\": \"2025-02-15T20:32:42.355Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/moving-assets-and-data\",\n    \"title\": \"Moving Assets and Data | Network\",\n    \"description\": \"Moving assets between Mantle and Ethereum\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Moving Assets and Data | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Moving assets between Mantle and Ethereum\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/nty7gT6AGIVrPkQQ3s39\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODg4ODA4NmMtNDhmNy00YTdlLTg4ZDAtYzg0ZGE0YTgxMTg2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=KoJmkcO7vPwrqJ8XYwkHsXsCzHkteXpF4%2BI7SZXaQzTH5WvO942lS3BIstb8rKMqJJvLNag%2BJ%2FqNTC93b8b3d%2ByrZnABLw5YAo45I0J1ZNrSm601ZOuEP7f%2B%2B1DGxMjL7A1xiKjkmmj6UGiXqz%2FN\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128118acbf74d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Moving Assets and Data | Network\\nMoving assets between Mantle and Ethereum\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\nSending Assets\\nThe Mantle Bridge enables all functionality necessary for the most common use case, i.e., moving tokens between Mantle network and Ethereum. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\nSending Data\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The Mantle Bridge has a simple API for triggering a cross-chain function call.\\nHow does it work?\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 asset bridging mechanism are L2StandardBridge on Mantle network, and L1StandardBridge on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standard bridge contracts. \\nFor instance, when a wallet sends a deposit request for 10 $MNT on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of 10 $MNT is minted on L2 and transferred to the wallet.\\nIn case a wallet makes a withdrawal of 10 $MNT on L2, these tokens are burned and the matching amount of 10 $MNT tokens locked on L1 get released and transferred to the wallet.\\nYou can connect your wallet to the Mantle Bridge UI to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the Mantle Bridge API page for more information and tutorials on how to call the appropriate SDK methods to bridge the various kinds of tokens that are currently supported.\\nUsing the Official Mantle Bridge\\nTo move your $MNT tokens/Ether/other ERC-20 tokens between the Mantle and Ethereum chain, visit the Mantle Bridge. Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps here: Using Mantle Bridge\\nLast updated 11 months ago\",\n  \"markdown\": \"# Moving Assets and Data | Network\\n\\nMoving assets between Mantle and Ethereum\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\n\\n## \\n\\nSending Assets\\n\\nThe [Mantle Bridge](https://bridge.mantle.xyz/) enables all functionality necessary for the most common use case, i.e., moving tokens between Mantle network and Ethereum. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\n\\n## \\n\\nSending Data\\n\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The [Mantle Bridge](https://bridge.mantle.xyz/) has a simple API for triggering a cross-chain function call.\\n\\n## \\n\\nHow does it work?\\n\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 asset bridging mechanism are [`L2StandardBridge`](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L2/messaging/L2StandardBridge.sol) on Mantle network, and [`L1StandardBridge`](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol) on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standard bridge contracts.\\n\\nFor instance, when a wallet sends a deposit request for 10 $MNT on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of 10 $MNT is minted on L2 and transferred to the wallet.\\n\\nIn case a wallet makes a withdrawal of 10 $MNT on L2, these tokens are burned and the matching amount of 10 $MNT tokens locked on L1 get released and transferred to the wallet.\\n\\nYou can connect your wallet to the [Mantle Bridge UI](https://bridge.mantle.xyz/) to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the [Mantle Bridge API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api) page for more information and tutorials on how to call the appropriate SDK methods to bridge the various kinds of tokens that are currently supported.\\n\\n## \\n\\nUsing the Official Mantle Bridge\\n\\nTo move your $MNT tokens/Ether/other ERC-20 tokens between the Mantle and Ethereum chain, visit the [Mantle Bridge](https://bridge.mantle.xyz/). Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps here: [Using Mantle Bridge](https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge)\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:41.955Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk\",\n    \"title\": \"Bridging $MNT using Mantle SDK | Network\",\n    \"description\": \"Deposit and withdraw $MNT using the SDK\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging $MNT using Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Deposit and withdraw $MNT using the SDK\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/cFG57e8MwTyZ3Tf4MqOj\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDE2YjRmZjUtNGViNi00NjFlLWFjOWMtOTQ5ZjdmYTY2ZTVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=iX49HRB0sIZnGuz9QrpPrhUJW7cBcmvLQsiMaL2wpp9vMMCtFGKqKldZbm%2B%2FN1%2FmKL7KjGUc52Cc6Hgs1S27fTmhgB78Oo%2FxAKc1t1voE6ykQGZG8P0%2BW4P2gjNxTVmiqT7WNrlINlwzfsyD9EdC\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281187b9a74d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging $MNT using Mantle SDK\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nThis tutorial demonstrates how to use the Mantle SDK to deposit and withdraw $MNT tokens between Mantle and Ethereum.\\nSet up local environment\\nMake sure you have the following tools installed in your local environment.\\nLet's start by fetching the example JS scripts that we’ll work with and use to make SDK invocations from the Mantle Github. Clone the repository containing the sample scripts by executing the following command in your project directory.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git\\nNext, we can use yarn to download the SDK along with all the necessary dependencies, as shown below. All the dependencies are defined in the yarn.lock file, so we can just run yarn in the ./cross-dom-bridge-mnt directory.\\nWe'll need a .env file from where we can add and modify wallet and network settings. The main directory contains two .env files, where .env.local specifies the configuration for a local environment, while .env.testnet specifies the configuration to connect to testnet.\\nAll the necessary contracts addresses are already included in the respective .env files, so you can specify your preferred L1 RPC endpoint and your wallet private key to start sending transactions.\\n# testnet ENV EXEC_ENV=testnet # rpc url L1_RPC= # L1 RPC Endpoint L2_RPC=https://rpc.testnet.mantle.xyz # chain id L1_CHAINID=5 L2_CHAINID=5001 # bridge address L1_BRIDGE=0xc92470D7Ffa21473611ab6c6e2FcFB8637c8f330 L2_BRIDGE=0x4200000000000000000000000000000000000010 # crossDomainMessenger address L1_CDM=0x7Bfe603647d5380ED3909F6f87580D0Af1B228B4 L2_CDM=0x4200000000000000000000000000000000000007 # token address L1_MNT=0xc1dC2d65A2243c22344E725677A3E3BEBD26E604 L2_MNT=0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000 L2_ETH=0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111 # local test key PRIV_KEY= # Wallet private key\\nLet's take a look at the main script.\\nAnalyzing and modifying the sample script\\nThe index.js script containing the code we need is located in the ./mantle-tutorial/cross-dom-bridge-eth directory. By default, it is configured to run on a local test environment. You can run L1 and L2 instances on your system and start deploying contracts to test your applications. You can make a copy of the index.js file before we start modifying it if you want to try that out.\\nCheck out the tutorial here that demonstrates the same bridging functionality on a private network.\\nImporting necessary libraries\\nrequire('dotenv').config() const ethers = require(\\\"ethers\\\") const mantleSDK = require(\\\"@mantleio/sdk\\\") const fs = require(\\\"fs\\\")\\nThis code does not need to be changed. We import three libraries, and the .env configuration file we created earlier.\\ndotenv : The .env file containing wallet and network configuration\\nethers : The Ethers.js library comes handy with wallet and contract operations\\n@mantlenetwork/sdk : Mantle SDK instance\\nfs: File system module to read the contract ABI from a JSON file\\nGenerating contract bytecode from ABI\\nconst L1TestERC20 = JSON.parse(fs.readFileSync(\\\"TestERC20.json\\\"))\\nWe don't need to modify this either. The contents of the JSON file containing the contract ABI are stored in TestERC20.json which we will be using later.\\nNetwork configuration and wallet setup\\nconst l1MntAddr = process.env.L1_MNT const l2MntAddr = process.env.L2_MNT const key = process.env.PRIV_KEY const l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC) const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC) const l1Wallet = new ethers.Wallet(key, l1RpcProvider) const l2Wallet = new ethers.Wallet(key, l2RpcProvider)\\nWe fetch the specified network and wallet configurations from the .env file, and create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\nCrossChainMessenger object\\n//Global variables let crossChainMessenger let l1Mnt, l2Mnt let ourAddr const setup = async () => { ourAddr = l1Wallet.address // Assigning wallet address crossChainMessenger = new mantleSDK.CrossChainMessenger({ // CrossChainMessenger object instantiation l1ChainId: process.env.L1_CHAINID, // Assigning chain IDs from .env file l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, // Wallets that will sign transactions l2SignerOrProvider: l2Wallet }) l1Mnt = new ethers.Contract(l1MntAddr, L1TestERC20.abi, l1Wallet) // Contract objects l2Mnt = new ethers.Contract(l2MntAddr, L1TestERC20.abi, l2Wallet) }\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\nReporting balances\\nconst reportBalances = async () => { const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18) const l2Balance = (await l2Mnt.balanceOf(ourAddr)).toString().slice(0, -18) console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`) }\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\nDeposit function\\nconst depositMNT = async () => { console.log(\\\"#################### Deposit MNT ####################\\\") await reportBalances() // 1. Print balance before deposit const start = new Date() const allowanceResponse = await crossChainMessenger.approveERC20( // 2. Approve deposit amount l1MntAddr, l2MntAddr, depositToken) await allowanceResponse.wait() console.log(`Time so far ${(new Date() - start) / 1000} seconds`) const response = await crossChainMessenger.depositERC20( // 3. Send deposit transaction l1MntAddr, l2MntAddr, depositToken) console.log(`Deposit transaction hash (on L1): ${response.hash}`) // 4. Print L1 deposit transaction hash await response.wait() console.log(\\\"Waiting for status to change to RELAYED\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response.hash, mantleSDK.MessageStatus.RELAYED) await reportBalances() // 5. Print updated balance after deposit console.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`) }\\nThe depositMNT function deposits 1 $MNT token to L2 via the Mantle bridge. The deposit transaction is sent using the depositERC20 method, which is picked up by an off-chain service and relayed to L2. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated $MNT balance on L1 and L2.\\nWithdraw function\\nconst withdrawMNT = async () => { console.log(\\\"#################### Withdraw MNT ####################\\\") const start = new Date() await reportBalances() // 1. Print balance before withdraw const response = await crossChainMessenger.withdrawERC20( // 2. Send withdraw transaction l1MntAddr, l2MntAddr, withdrawToken) console.log(`Transaction hash (on L2): ${response.hash}`) // 3. Print L2 withdraw transaction hash await response.wait() console.log(\\\"Waiting for status to change to IN_CHALLENGE_PERIOD\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response.hash, // 4. Function waits for transaction to enter challenge period mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD) console.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY) // 5. Check whether transaction is ready for relay console.log(\\\"Ready for relay, finalizing message now\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.finalizeMessage(response) console.log(\\\"Waiting for status to change to RELAYED\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response, mantleSDK.MessageStatus.RELAYED) // 6. Wait for transaction to get relayed await reportBalances() // 7. Print updated balance after withdraw console.log(`withdrawERC20 took ${(new Date() - start) / 1000} seconds\\\\n\\\\n\\\\n`) }\\nSimilarly, the withdrawMNT function withdraws 1 $MNT token from L2 via the Mantle bridge. The function prints out the transaction hash. The transaction then goes into a challenge period. Once it is ready for relay, it is picked up by an off-chain service to be relayed to L1. Finally, we display the updated $MNT balance on L1 and L2.\\nInvoking deposit and withdraw functions\\nconst main = async () => { await setup() await depositMNT() await withdrawMNT() } main().then(() => process.exit(0)) .catch((error) => { console.error(error) process.exit(1) })\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nRunning the script\\nOnce the configuration is ready, you can run the script using the yarn testnet command. The script will automatically select the testnet configuration to perform both deposit and withdraw operations in the index.js script. If you want to run the script locally, you can run yarn local.\\nConclusion\\nYou can use this code to test out the token bridging mechanism via SDK on Mantle testnet and start integrating it to your applications.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Bridging $MNT using Mantle SDK\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nThis tutorial demonstrates how to use the Mantle SDK to deposit and withdraw $MNT tokens between Mantle and Ethereum.\\n\\n## \\n\\nSet up local environment\\n\\nMake sure you have the following tools installed in your local environment.\\n\\nLet's start by fetching the example JS scripts that we’ll work with and use to make SDK invocations from the Mantle Github. Clone the repository containing the sample scripts by executing the following command in your project directory.\\n\\n```\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n```\\n\\nNext, we can use `yarn` to download the SDK along with all the necessary dependencies, as shown below. All the dependencies are defined in the `yarn.lock` file, so we can just run `yarn` in the `./cross-dom-bridge-mnt` directory.\\n\\nWe'll need a `.env` file from where we can add and modify wallet and network settings. The main directory contains two `.env` files, where `.env.local` specifies the configuration for a local environment, while `.env.testnet` specifies the configuration to connect to testnet.\\n\\nAll the necessary contracts addresses are already included in the respective `.env` files, so you can specify your preferred L1 RPC endpoint and your wallet private key to start sending transactions.\\n\\n```\\n# testnet ENV\\nEXEC_ENV=testnet\\n# rpc url\\nL1_RPC= # L1 RPC Endpoint\\nL2_RPC=https://rpc.testnet.mantle.xyz\\n\\n# chain id\\nL1_CHAINID=5\\nL2_CHAINID=5001\\n\\n# bridge address\\nL1_BRIDGE=0xc92470D7Ffa21473611ab6c6e2FcFB8637c8f330\\nL2_BRIDGE=0x4200000000000000000000000000000000000010\\n\\n# crossDomainMessenger address \\nL1_CDM=0x7Bfe603647d5380ED3909F6f87580D0Af1B228B4\\nL2_CDM=0x4200000000000000000000000000000000000007\\n\\n# token address\\nL1_MNT=0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\nL2_MNT=0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\nL2_ETH=0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\n\\n# local test key \\nPRIV_KEY= # Wallet private key\\n```\\n\\nLet's take a look at the main script.\\n\\n## \\n\\nAnalyzing and modifying the sample script\\n\\nThe `index.js` script containing the code we need is located in the `./mantle-tutorial/cross-dom-bridge-eth` directory. By default, it is configured to run on a local test environment. You can run L1 and L2 instances on your system and start deploying contracts to test your applications. You can make a copy of the `index.js` file before we start modifying it if you want to try that out.\\n\\n> Check out the [tutorial here](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/cross-dom-bridge-mnt) that demonstrates the same bridging functionality on a private network.\\n\\n### \\n\\nImporting necessary libraries\\n\\n```\\nrequire('dotenv').config()\\nconst ethers = require(\\\"ethers\\\")\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\")\\nconst fs = require(\\\"fs\\\")\\n```\\n\\nThis code does not need to be changed. We import three libraries, and the `.env` configuration file we created earlier.\\n\\n*   `dotenv` : The `.env` file containing wallet and network configuration\\n    \\n*   `ethers` : The Ethers.js library comes handy with wallet and contract operations\\n    \\n*   `@mantlenetwork/sdk` : Mantle SDK instance\\n    \\n*   `fs`: File system module to read the contract ABI from a JSON file\\n    \\n\\n### \\n\\nGenerating contract bytecode from ABI\\n\\n```\\nconst L1TestERC20 = JSON.parse(fs.readFileSync(\\\"TestERC20.json\\\"))\\n```\\n\\nWe don't need to modify this either. The contents of the JSON file containing the contract ABI are stored in `TestERC20.json` which we will be using later.\\n\\n### \\n\\nNetwork configuration and wallet setup\\n\\n```\\nconst l1MntAddr = process.env.L1_MNT\\nconst l2MntAddr = process.env.L2_MNT\\nconst key = process.env.PRIV_KEY\\n\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC)\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC)\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider)\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider)\\n```\\n\\nWe fetch the specified network and wallet configurations from the `.env` file, and create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\n\\n### \\n\\nCrossChainMessenger object\\n\\n```\\n//Global variables\\nlet crossChainMessenger \\nlet l1Mnt, l2Mnt\\nlet ourAddr\\n\\nconst setup = async () => {\\n  ourAddr = l1Wallet.address // Assigning wallet address\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({ // CrossChainMessenger object instantiation\\n    l1ChainId: process.env.L1_CHAINID, // Assigning chain IDs from .env file\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet, // Wallets that will sign transactions\\n    l2SignerOrProvider: l2Wallet\\n  })\\n  l1Mnt = new ethers.Contract(l1MntAddr, L1TestERC20.abi, l1Wallet) // Contract objects\\n  l2Mnt = new ethers.Contract(l2MntAddr, L1TestERC20.abi, l2Wallet)\\n}\\n```\\n\\nThe `CrossChainMessenger` object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n### \\n\\nReporting balances\\n\\n```\\nconst reportBalances = async () => {\\n  const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18)\\n  const l2Balance = (await l2Mnt.balanceOf(ourAddr)).toString().slice(0, -18)\\n  console.log(`Token on L1:${l1Balance}     Token on L2:${l2Balance}`)\\n}\\n```\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n### \\n\\nDeposit function\\n\\n```\\nconst depositMNT = async () => {\\n  console.log(\\\"#################### Deposit MNT ####################\\\")\\n  await reportBalances() // 1. Print balance before deposit\\n  const start = new Date()\\n  \\n  const allowanceResponse = await crossChainMessenger.approveERC20( // 2. Approve deposit amount\\n    l1MntAddr, l2MntAddr, depositToken)\\n  await allowanceResponse.wait()\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n\\n  const response = await crossChainMessenger.depositERC20( // 3. Send deposit transaction\\n    l1MntAddr, l2MntAddr, depositToken)\\n  console.log(`Deposit transaction hash (on L1): ${response.hash}`) // 4. Print L1 deposit transaction hash\\n  await response.wait()\\n  console.log(\\\"Waiting for status to change to RELAYED\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageStatus(response.hash, mantleSDK.MessageStatus.RELAYED)\\n\\n  await reportBalances() // 5. Print updated balance after deposit\\n  console.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`)\\n}\\n```\\n\\nThe `depositMNT` function deposits 1 $MNT token to L2 via the Mantle bridge. The deposit transaction is sent using the `depositERC20` method, which is picked up by an off-chain service and relayed to L2. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated $MNT balance on L1 and L2.\\n\\n### \\n\\nWithdraw function\\n\\n```\\nconst withdrawMNT = async () => {\\n  console.log(\\\"#################### Withdraw MNT ####################\\\")\\n  const start = new Date()\\n  await reportBalances() // 1. Print balance before withdraw\\n\\n  const response = await crossChainMessenger.withdrawERC20( // 2. Send withdraw transaction\\n    l1MntAddr, l2MntAddr, withdrawToken)\\n  console.log(`Transaction hash (on L2): ${response.hash}`) // 3. Print L2 withdraw transaction hash\\n  await response.wait()\\n\\n  console.log(\\\"Waiting for status to change to IN_CHALLENGE_PERIOD\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageStatus(response.hash, // 4. Function waits for transaction to enter challenge period\\n    mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD)\\n  console.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageStatus(response.hash,\\n    mantleSDK.MessageStatus.READY_FOR_RELAY)  // 5. Check whether transaction is ready for relay \\n  console.log(\\\"Ready for relay, finalizing message now\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.finalizeMessage(response)\\n  console.log(\\\"Waiting for status to change to RELAYED\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageStatus(response,\\n    mantleSDK.MessageStatus.RELAYED)  // 6. Wait for transaction to get relayed\\n  await reportBalances() // 7. Print updated balance after withdraw\\n  console.log(`withdrawERC20 took ${(new Date() - start) / 1000} seconds\\\\n\\\\n\\\\n`)\\n}\\n```\\n\\nSimilarly, the `withdrawMNT` function withdraws 1 $MNT token from L2 via the Mantle bridge. The function prints out the transaction hash. The transaction then goes into a challenge period. Once it is ready for relay, it is picked up by an off-chain service to be relayed to L1. Finally, we display the updated $MNT balance on L1 and L2.\\n\\n### \\n\\nInvoking deposit and withdraw functions\\n\\n```\\nconst main = async () => {\\n  await setup()\\n  await depositMNT()\\n  await withdrawMNT()\\n}\\n\\nmain().then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error)\\n    process.exit(1)\\n  })\\n```\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n### \\n\\nRunning the script\\n\\nOnce the configuration is ready, you can run the script using the `yarn testnet` command. The script will automatically select the testnet configuration to perform both deposit and withdraw operations in the `index.js` script. If you want to run the script locally, you can run `yarn local`.\\n\\n## \\n\\nConclusion\\n\\nYou can use this code to test out the token bridging mechanism via SDK on Mantle testnet and start integrating it to your applications.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-to-a-cex\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-to-a-cex\",\n    \"loadedTime\": \"2025-02-15T20:32:46.076Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-to-a-cex\",\n    \"title\": \"Adding Mantle to a CEX | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle to a CEX | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/rzxbwMP8sPBywexHVx0N\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWMyOTMxMjctMTRlNC00MzA1LTk2ZmEtYWFhNTJmNTc2YWEx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=U3Rn8Mg3wewHKfY7ymEMQvo7WzqApJVaZwsMy7vcCKT4ofqQxU9UCumo%2FRGLXvDS0Eu0%2BjtBnipscx5E9X7NodOGykEUc8w2UIRauZqkvCDIyWbAY3fBfLvQWFTJAbUWcVXJzJQbYReYKXfcgh7l\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae2aa02d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding Mantle to a CEX\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nConnecting to Mantle \\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nCalculating $ETH Balance \\nOn Mantle network, the $ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address 0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111. You can still access it using the standard APIs.\\nCalculating $MNT Balance\\nToken Addresses\\nThe ERC-20 contract address for a token on Mantle may be different from the address for the same token on Ethereum. The list of tokens and their addresses is here.\\nTo get the total ERC-20 token balance of a user for a specific token we listed, you need to:\\nConnect to a standard Ethereum endpoint and send a balanceOf query to the L1 token address. \\nConnect to a Mantle endpoint and send a balanceOf query to address.\\nDeposits and Withdrawals on Mantle\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\nTransaction Fees\\nMost of the cost of a Mantle transaction is not the gas consumed by the transaction itself (which is priced at a very low level), but the cost of writing the transaction in Ethereum. That cost is deducted automatically from the user's balance on Mantle. If you charge your users the cost of withdrawals, you have to account for it.\\nYou can read more about this subject at Transaction Fees on L2. You can also find relevant code samples on our Mantle Tutorial page. \\nDeposits and Withdrawals Across Chains \\nAs a centralized exchange, there will be times that withdrawals of $ETH/$MNT token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network. \\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this tutorial for bridging ETH, or this tutorial for bridging ERC-20 tokens.\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\nWhen an ERC-20 token does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this tutorial for bridging standard ERC-20s. If you need to implement some kind of custom logic, see this tutorial for bridging custom ERC-20s.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Adding Mantle to a CEX\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**Connecting to Mantle**\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to Mantle through any of the following means:\\n\\n### \\n\\n**Calculating $ETH Balance**\\n\\nOn Mantle network, the $ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address `0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111`. You can still access it using the standard APIs.\\n\\n### \\n\\n**Calculating $MNT Balance**\\n\\n### \\n\\n**Token Addresses**\\n\\nThe ERC-20 contract address for a token on Mantle may be different from the address for the same token on Ethereum. The list of tokens and their addresses is [here](https://github.com/mantlenetworkio/mantle-token-lists#mantle-token-list).\\n\\nTo get the total ERC-20 token balance of a user for a specific token we listed, you need to:\\n\\n*   Connect to a standard Ethereum endpoint and send a `balanceOf` query to the L1 token address.\\n    \\n*   Connect to a Mantle endpoint and send a `balanceOf` query to address.\\n    \\n\\n### \\n\\n**Deposits and Withdrawals on Mantle**\\n\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\n\\n### \\n\\n**Transaction Fees**\\n\\nMost of the cost of a Mantle transaction is not the gas consumed by the transaction itself (which is priced at a very low level), but the cost of writing the transaction in Ethereum. That cost is deducted automatically from the user's balance on Mantle. If you charge your users the cost of withdrawals, you have to account for it.\\n\\nYou can read more about this subject at [Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2). You can also find relevant code samples on our [Mantle Tutorial page](https://mantlenetworkio.github.io/mantle-tutorial/).\\n\\n### \\n\\n**Deposits and Withdrawals Across Chains**\\n\\nAs a centralized exchange, there will be times that withdrawals of $ETH/$MNT token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network.\\n\\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this [tutorial for bridging ETH](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-eth/), or this [tutorial for bridging ERC-20 tokens](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\n\\nWhen an ERC-20 token does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this [tutorial for bridging standard ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-standard-token/). If you need to implement some kind of custom logic, see this [tutorial for bridging custom ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-custom-token/).\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-a-custom-bridge-to-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"loadedTime\": \"2025-02-15T20:32:46.179Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"title\": \"Adding a Custom Bridge to Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding a Custom Bridge to Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/YWqrd9BpoClBDUlVGXkH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZjI1Y2E1MDQtZTA2Yy00MTk0LThlZTMtOWM2YTJiZDQ3MzBl' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=SLlLa4JbsUaiFK6Pn5biUe95wxRnKlRefc6SE5lylrfp%2BfGb1UNOnxlzd3sBe4bT03otpMSBS8m8yp8JSpNDqfOCHAI4i2OvHRwUuQ21UZkN18%2Fz3wilgaEfvioFFIYpsFbLFdVQm1XGLw2hiJny\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae0d299c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding a Custom Bridge to Mantle\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nUsing the Standard Bridge\\nWe suggest considering using the Standard Bridge first before deciding to develop a custom bridge solution. \\nIn the standard bridge when ERC-20 is deposited on Layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the Layer 2 (L2) token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\nBuilding a Custom Bridge\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the Bridging basics article, and also the tutorial on depositing and withdrawing ERC-20 tokens between L1 and L2.\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the IL1ERC20Bridge interface in the L1 bridge contract and IL2ERC20Bridge interface in the L2 bridge contract. This ensures the Mantle Gateway can support token deposits and withdrawals via this custom bridge.\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle token list repository. Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Adding a Custom Bridge to Mantle\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**Using the Standard Bridge**\\n\\nWe suggest considering using the [Standard Bridge](https://bridge.mantle.xyz/) first before deciding to develop a custom bridge solution.\\n\\nIn the standard bridge when ERC-20 is deposited on Layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the Layer 2 (L2) token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\n\\n### \\n\\n**Building a Custom Bridge**\\n\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the [Bridging basics article](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-comm/), and also the tutorial on [depositing and withdrawing ERC-20 tokens between L1 and L2](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\n\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the `IL1ERC20Bridge` interface in the L1 bridge contract and `IL2ERC20Bridge` interface in the L2 bridge contract. This ensures the Mantle Gateway can support token deposits and withdrawals via this custom bridge.\\n\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle [token list repository.](https://github.com/mantlenetworkio/mantle-token-lists#mantle-token-list) Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata\",\n    \"loadedTime\": \"2025-02-15T20:32:46.274Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata\",\n    \"title\": \"How to Update the NFT Metadata | Network\",\n    \"description\": \"A tutorial showing how to update NFT metadata via Mantle Explorer\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Update the NFT Metadata | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"A tutorial showing how to update NFT metadata via Mantle Explorer\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/KAfsgkVz8JQzMxd0RyEb\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTQ2MmE2ZDctNGM4Yi00YzI4LTgzN2MtYWYzNzk4Y2MwNWY1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=rXebwLZUQ4DNyD78T0Jw0dSsZq0gppMeR9p90cECcLwevys3qHN76sKuseFDSpCYiZmpwKuCY53Rb6BvKex6t%2FcZv5oocGnym6OeXefTtqBfopXVM6nvSn4p3d%2BvIpnCCdFGNBJwGsqLR8ZvBvDP\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae2cbc059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Update the NFT Metadata\\nA tutorial showing how to update NFT metadata via Mantle Explorer\\nLast updated 11 months ago\",\n  \"markdown\": \"# How to Update the NFT Metadata\\n\\nA tutorial showing how to update NFT metadata via Mantle Explorer\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/data-availability\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/data-availability\",\n    \"loadedTime\": \"2025-02-15T20:32:46.454Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/data-availability\",\n    \"title\": \"Data Availability | Network\",\n    \"description\": \"Unlocking hyper-scaled data availability on a Layer 2 rollup\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Data Availability | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Unlocking hyper-scaled data availability on a Layer 2 rollup\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/pCYk6oI41VP2CVjsK4Ml\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTQ3ZjY3M2ItYWFkMS00M2NiLTllMTgtYjU4ZDc5YWRjYmM2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=V6xPRphOIun3qpMxBs17SGrS8pQcw%2FnRb%2FTBXm6bAZYi9Hr%2Fa9%2Fc9YydjOAcI4XiSUI5ZjhH0b%2BC6FicrnfquN009bmIsHWdjDl%2FWupoFgvt1jEjPBwP1bq2t%2F1GdKY3c1p301J8GOrE465a%2B57W\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae3f573b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Data Availability | Network\\nUnlocking hyper-scaled data availability on a Layer 2 rollup\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWhat is Data Availability?\\nBy \\\"Data Availability\\\" (DA) we are referring to the ability for any node in the Mantle network to access the transaction history posted by the Sequencer. Access to block data for all network participants is a major scalability issue that must be addressed, especially in the case of blockchains that operate on a rollup architecture to eliminate the possibility of block data being withheld, maliciously or otherwise. So the challenge of maintaining a trustless L2 network is distilled into ensuring that transaction data remains available!\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding here. \\nTrust Minimization\\nOne of the foundational pillars of blockchain design is trustlessness. When we say \\\"trustless\\\", we mean that a user on a blockchain should be able to accomplish their tasks without placing unnecessary trust in third-parties. \\nThis explains why blockchains use cryptography. Instead of relying on soft agreements and social contracts with other network participants (aka trust), blockchains use hard rules and code to enforce expected behavior. What this means practically is that blockchains are designed so that any user can verify whether a network participant has followed the rules. \\nOn a network like Ethereum, this means a certain reliance on full nodes. Full nodes will publicly store the entire history of blockchain data so that all other network participants can verify the state transition of the chain was correct.\\nIn the case of Mantle, transactions are submitted and executed on the L2 chain. This means that Mantle nodes need access to the L2 transaction data in order to verify the state transition. This verification is enabled by having the Sequencer publish the full transaction data and cryptographic evidence of the state transition (a Merkle Proof) on Ethereum.\\nThe reliability of Ethereum's trust network is derived from its widespread validator network running a solid consensus algorithm, adoption that ensures security, combined with the value of the relatively well-distributed $ETH token. \\nEigenLayer\\nEigenLayer, a re-staking protocol, leverages Ethereum's existing trust network for enabling any rollup-based L2 to guarantee data availability to its execution layer, while maintaining the same level of security as the Ethereum mainnet. This is achieved through a re-staking mechanism, where L1 validators can opt in to provide data availability services being subjected to additional performance conditions using their staked $ETH as collateral.\\nThink of it as an Ethereum middleware platform.\\nJust as optimistic rollups use economic incentives to maintain system integrity, this mechanism also puts incentives in place for Ethereum validators to provide their services for additional yield opportunities. Read more on EigenLayer here. \\nMantle DA - Powered by EigenDA Technology\\nEigenLayer is a protocol built on Ethereum that introduces restaking, a new primitive in cryptoeconomic security. EigenDA (Data Availability), built by EigenLabs, is one core application on EigenLayer, which we have selected for Mantle Network's data availability module.\\nThe current version of MantleDA is powered by EigenDA technology and licensed by EigenLabs. The Mantle team has been working with the support of the EigenLayer team on this simplified solution until the canonical solution is ready for mainnet launch.\\nWe plan to migrate to EigenDA after EigenDA mainnet launches.\\nNote that: Mantle DA, allows permissioned nodes to provide data availability services to the Mantle network and requires $MNT staking.\\nSee the section on DA Nodes to find out more about how the different participating actors that are part of the Mantle DA module function.\\nMantle DA Characteristics\\nAllows decoupling of the data availability layer from the consensus layer\\nEmploys a unicast channel for data exchange between network participants to deliver efficiency gains both in terms of data transmission and storage\\nMaintaining an erasure rate ensures pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\nThis approach will provide the high throughput and low gas cost necessary for next-generation applications in blockchain gaming, decentralized social networks, and more.\\nMantle Explorer displays the transaction batch details for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Data Availability | Network\\n\\nUnlocking hyper-scaled data availability on a Layer 2 rollup\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nWhat is Data Availability?\\n\\nBy \\\"Data Availability\\\" (DA) we are referring to the ability for any node in the Mantle network to access the transaction history posted by the Sequencer. Access to block data for all network participants is a major scalability issue that must be addressed, especially in the case of blockchains that operate on a rollup architecture to eliminate the possibility of block data being withheld, maliciously or otherwise. So the challenge of maintaining a _trustless_ L2 network is distilled into ensuring that transaction data remains available!\\n\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding [here](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding).\\n\\n## \\n\\nTrust Minimization\\n\\nOne of the foundational pillars of blockchain design is _trustlessness_. When we say \\\"trustless\\\", we mean that a user on a blockchain should be able to accomplish their tasks _without placing unnecessary trust_ in third-parties.\\n\\nThis explains why blockchains use cryptography. Instead of relying on soft agreements and social contracts with other network participants (aka trust), blockchains use hard rules and code to enforce expected behavior. What this means practically is that blockchains are designed so that any user can verify whether a network participant has followed the rules.\\n\\nOn a network like Ethereum, this means a certain reliance on **full nodes.** Full nodes will publicly store the entire history of blockchain data so that all other network participants can verify the state transition of the chain was correct.\\n\\nIn the case of Mantle, transactions are submitted and executed on the L2 chain. This means that Mantle nodes need access to the L2 transaction data in order to verify the state transition. This verification is enabled by having the Sequencer **publish** the full transaction data and cryptographic evidence of the state transition (a Merkle Proof) on Ethereum.\\n\\nThe reliability of Ethereum's trust network is derived from its widespread validator network running a solid consensus algorithm, adoption that ensures security, combined with the value of the relatively well-distributed $ETH token.\\n\\n## \\n\\nEigenLayer\\n\\n[**EigenLayer**](https://www.eigenlayer.com/)**,** a re-staking protocol, leverages Ethereum's existing trust network for enabling **any** rollup-based L2 to guarantee data availability to its execution layer, while maintaining the same level of security as the Ethereum mainnet. This is achieved through a **re-staking** mechanism, where L1 validators can opt in to provide data availability services being subjected to additional performance conditions using their staked $ETH as collateral.\\n\\nThink of it as an Ethereum middleware platform.\\n\\nJust as optimistic rollups use economic incentives to maintain system integrity, this mechanism also puts incentives in place for Ethereum validators to provide their services for additional yield opportunities. Read more on EigenLayer [here](https://ethresear.ch/t/an-eigenlayer-centric-roadmap-or-cancel-sharding/14141#what-is-eigenlayer-1).\\n\\n## \\n\\nMantle DA - Powered by EigenDA Technology\\n\\n1.  [EigenLayer](https://www.eigenlayer.xyz/) is a protocol built on Ethereum that introduces restaking, a new primitive in cryptoeconomic security. EigenDA (Data Availability), built by EigenLabs, is one core application on EigenLayer, which we have selected for Mantle Network's data availability module.\\n    \\n2.  The current version of MantleDA is powered by EigenDA technology and licensed by EigenLabs. The Mantle team has been working with the support of the EigenLayer team on this simplified solution until the canonical solution is ready for mainnet launch.\\n    \\n\\n4.  We plan to migrate to EigenDA after EigenDA mainnet launches.\\n    \\n\\nNote that: **Mantle DA**, allows permissioned nodes to provide data availability services to the Mantle network and requires $MNT staking.\\n\\nSee the section on [DA Nodes](https://docs.mantle.xyz/network/network/for-validators/network-roles#da-nodes) to find out more about how the different participating actors that are part of the **Mantle DA** module function.\\n\\n## \\n\\nMantle DA Characteristics\\n\\n*   Allows **decoupling** of the **data availability layer** from the **consensus layer**\\n    \\n*   Employs a **unicast channel** for **data exchange** between network participants to deliver efficiency gains both in terms of data transmission and storage\\n    \\n*   Maintaining an **erasure rate** ensures pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\n    \\n\\nThis approach will provide the **high throughput** and **low gas cost** necessary for next-generation applications in blockchain gaming, decentralized social networks, and more.\\n\\n**Mantle Explorer** displays the [transaction batch details](https://explorer.mantle.xyz/eigenda-batches) for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme\",\n    \"loadedTime\": \"2025-02-15T20:32:46.566Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme\",\n    \"title\": \"Threshold Signature Scheme | Network\",\n    \"description\": \"Implementing TSS node modules on L2 to minimize the trust risk of execution results\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Threshold Signature Scheme | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Implementing TSS node modules on L2 to minimize the trust risk of execution results\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/YNhyKLeWMlWp30JNJoHN\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODAxM2Q3ODItM2U1ZC00Y2FjLWFlODAtMDM3NGNhZmNlY2Nm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jlwkbpMdDXrSZruJdzKUB9jMF65ZVec7iezxe00QxMYjPkX5m0FNkyow%2FYDUpGUPMPTzIlRLr%2B39DxkhyZdsQPyO%2ByDBW8FNE2V02KgmRnmIfzmAhw3%2BUewM4WKQjNtdAecIFF9IHEvINW0A5Lf4\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae1d1d82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Threshold Signature Scheme | Network\\nImplementing TSS node modules on L2 to minimize the trust risk of execution results\\nLast updated 11 months ago\",\n  \"markdown\": \"# Threshold Signature Scheme | Network\\n\\nImplementing TSS node modules on L2 to minimize the trust risk of execution results\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/troubleshooting\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/troubleshooting\",\n    \"loadedTime\": \"2025-02-15T20:32:47.088Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/troubleshooting\",\n    \"title\": \"Troubleshooting | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Troubleshooting | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/gZgi8yvsoz1BRgHs9veS\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:47 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZGM3NGYwYWQtMTU3MS00YWYwLWE2ZjktY2E1MTQ0NWJhYTMw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=5l10ZHWGjIIMnD2xeB9l6O%2FgjKfetUUB%2BnVfzX5UUCHdYFLvQsmYcXHHBqG%2BKxj4sQkq1Z1Z7ldL4h86HX411Tf5CvtGnqOYfEOSsHl9m6mPKIYtI2Bmh0iUnGg4NIBI8pPydcL2qSnT0fHBozee\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811b48bbb82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Troubleshooting | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nGeneral\\n- Status code: 429 { \\\"error\\\": \\\"API rate limit exceeded\\\" }\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: Node RPC Providers\\n- RPC call Error: timeout\\nWhile calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\nSo under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set hingher timeout parameter accordingly to solve the timeout issue.\\nSmart Contracts\\n- Contract deploy error: ProviderError: too many arguments, want at most 1\\nIf you run into this issue when deploying your contract, you're probably running a newer version of Hardhat. Try manually specifying the gas limit when deploying your contract, like so: \\nconst MyNFT = await hre.ethers.deployContract(\\\"ContractName\\\", { gasLimit: \\\"0x1000000\\\", });\\nIf the issue persists, we recommend initializing your project with an older version of \\bHardhat (v2.14) by running the following command:\\n- Contract verification error: Hardhat found multiple contracts in the project (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode\\nIf you see this error, try verifying the contract again by specifying the name of the contract that you're looking to verify. You can do this using the --contract option. Here's an example:\\nnpx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\n- Contract invocation error: Bytecode does not match, please try again\\nIf you encounter this error, check the following:\\nWhether the compiler version is the same\\nWhether the optimization runs match (if you've enabled optimization)\\nWhether the contract name matches exactly as specified in the source code\\nStandard Bridge\\n- Error when withdrawing: no bridge found for token pair\\nTry switching to a different RPC provider. Available RPCs: Node RPC Providers\\nExplorer\\n- Error: Awaiting internal transactions for reason\\nYou may encounter this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Troubleshooting | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nGeneral\\n\\n### \\n\\n\\\\- Status code: 429 { \\\"error\\\": \\\"API rate limit exceeded\\\" }\\n\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers)\\n\\n### \\n\\n\\\\- RPC call Error: timeout\\n\\nWhile calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\n\\nSo under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set hingher timeout parameter accordingly to solve the timeout issue.\\n\\n## \\n\\nSmart Contracts\\n\\n### \\n\\n\\\\- Contract deploy error: **ProviderError: too many arguments, want at most 1**\\n\\nIf you run into this issue when deploying your contract, you're probably running a newer version of Hardhat. Try manually specifying the gas limit when deploying your contract, like so:\\n\\n```\\nconst MyNFT = await hre.ethers.deployContract(\\\"ContractName\\\", {\\n    gasLimit: \\\"0x1000000\\\",\\n  });\\n```\\n\\nIf the issue persists, we recommend initializing your project with an older version of \\bHardhat (v2.14) by running the following command:\\n\\n### \\n\\n\\\\- Contract verification error: Hardhat found multiple contracts in the project (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode\\n\\nIf you see this error, try verifying the contract again by specifying the name of the contract that you're looking to verify. You can do this using the `--contract` option. Here's an example:\\n\\n```\\nnpx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\n```\\n\\n### \\n\\n\\\\- Contract invocation error: Bytecode does not match, please try again\\n\\nIf you encounter this error, check the following:\\n\\n*   Whether the compiler version is the same\\n    \\n*   Whether the optimization runs match (if you've enabled optimization)\\n    \\n*   Whether the contract name matches exactly as specified in the source code\\n    \\n\\n## \\n\\nStandard Bridge\\n\\n### \\n\\n\\\\- Error when withdrawing: no bridge found for token pair\\n\\nTry switching to a different RPC provider. Available RPCs: [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers)\\n\\n## \\n\\nExplorer\\n\\n### \\n\\n\\\\- Error: Awaiting internal transactions for reason\\n\\nYou may encounter this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs\",\n    \"loadedTime\": \"2025-02-15T20:32:47.195Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs\",\n    \"title\": \"Fraud Proofs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fraud Proofs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/jzfxTGtICBgiOVnOt9Bq\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:47 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWQwMmZjMmQtNmQ3Mi00M2QwLTk4MjktNGZmMmY1MTAwZTY5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=nLoAq47W%2BkX85td8pTGGCr2nI6SxOIZsyLOlaMNXii4KjK9Yd9OiG7M81dQoENk%2F%2FnWgMoettGwjxSsY8RruB4K2uT9YKA6RcASjOwyQIUn4W%2Fa7QUiQMpteXzY%2BjYOmt9OZdY%2BMLDZZ60tn4axp\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811b55efd3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fraud Proofs | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nOptimistic Rollups assume state transition validity for all Layer-2 (L2) transactions, unless proven otherwise. Hence, they’re also called assertions, since their validity hasn’t been established per se. The verification logic takes evidence of an invalid state transition to initiate the validation process, and fraud proofs are the medium to provide that. The protocol allows for a dispute window during which a network actor can come forward and submit a fraud proof disputing a state they deem to be incorrect. This challenge period is roughly 7 days for most optimistic rollup protocols. Any transaction that isn’t disputed within this time frame is assumed to be valid by default.\\nTypes of Fraud Proofs\\nFraud proofs can be classified into two distinct categories: non-interactive and interactive. Let's go over the differences in these two types of proving mechanisms.\\nNon-interactive Fraud Proofs\\nNon-interactive fraud proofs use a method where no other parties are needed to prove the incorrectness of an assertion. They basically run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\nInteractive Fraud Proofs\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem to verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back and forth introduces a new level of complexity in the protocol, and can be harder to design safely. But it has the advantage of not placing any limitations on L1, due to a much smaller volume of actual on-chain execution.\\nImproved Fraud Proofs on Mantle Network\\nFor Mainnet Alpha, fraud proofs are currently not enabled and are currently in development. Refer to our Testnet or Github for the latest progress.\\nIn the currently popular model for fraud proofs, the contract that settles disputes — the on-chain verifier — can only execute instructions in a lower-level virtual machine such as MIPS or WASM. This forces an Ethereum Virtual Machine (EVM) client to re-compile their fraud proof into the lower-level language to be interpretable to the on-chain verifier. This means that the content of a fraud proof is generated outside the scope of the EVM. \\nThe implication here is that because of the low-level transpiling, there is no way to guarantee that a fraud proof's contents are derived directly from a compliant EVM client. In other words, the on-chain verifier is blind to the producer of the fraud proof! This blind spot interferes with the trust-minimization that is imbued into the Ethereum client to begin with. It would be far better for a fraud proof to be evaluated using EVM instructions directly. \\nThis is precisely the sort of system that Mantle network implements. Mantle network establishes transaction validity using the interactive fraud proof mechanism, and by compiling and verifying fraud proofs with EVM-level instructions we register a number of benefits:\\nAllow all Ethereum clients to interact with a common proof system, permissionlessly.\\nReduce trust assumptions across verifiers, clients, and compilers.\\nThe particular fraud proof model that is employed by Mantle network (testnet) is akin to the one deployed by Specular Network. You can learn more about it here.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Fraud Proofs | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nOptimistic Rollups assume state transition validity for all Layer-2 (L2) transactions, unless proven otherwise. Hence, they’re also called assertions, since their validity hasn’t been established per se. The verification logic takes evidence of an invalid state transition to initiate the validation process, and fraud proofs are the medium to provide that. The protocol allows for a dispute window during which a network actor can come forward and submit a fraud proof disputing a state they deem to be incorrect. This challenge period is roughly 7 days for most optimistic rollup protocols. Any transaction that isn’t disputed within this time frame is assumed to be valid by default.\\n\\n## \\n\\nTypes of Fraud Proofs\\n\\nFraud proofs can be classified into two distinct categories: non-interactive and interactive. Let's go over the differences in these two types of proving mechanisms.\\n\\n### \\n\\nNon-interactive Fraud Proofs\\n\\nNon-interactive fraud proofs use a method where no other parties are needed to prove the incorrectness of an assertion. They basically run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\n\\n### \\n\\nInteractive Fraud Proofs\\n\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem to verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back and forth introduces a new level of complexity in the protocol, and can be harder to design safely. But it has the advantage of not placing any limitations on L1, due to a much smaller volume of actual on-chain execution.\\n\\n## \\n\\nImproved Fraud Proofs on Mantle Network\\n\\nFor Mainnet Alpha, fraud proofs are currently not enabled and are currently **in development**. Refer to our Testnet or Github for the latest progress.\\n\\nIn the currently popular model for fraud proofs, the contract that settles disputes — the **on-chain verifier** — can only execute instructions in a lower-level virtual machine such as MIPS or WASM. This forces an Ethereum Virtual Machine (EVM) client to re-compile their fraud proof into the lower-level language to be interpretable to the on-chain verifier. This means that the content of a fraud proof is generated _outside the scope of the EVM_.\\n\\nThe implication here is that because of the low-level transpiling, there is no way to guarantee that a fraud proof's contents are derived directly from a compliant EVM client. In other words, the on-chain verifier is blind to the producer of the fraud proof! This blind spot interferes with the trust-minimization that is imbued into the Ethereum client to begin with. It would be far better for a fraud proof to be evaluated using EVM instructions directly.\\n\\nThis is precisely the sort of system that Mantle network implements. Mantle network establishes transaction validity using the interactive fraud proof mechanism, and by compiling and verifying fraud proofs with EVM-level instructions we register a number of benefits:\\n\\n1.  Allow all Ethereum clients to interact with a common proof system, permissionlessly.\\n    \\n2.  Reduce trust assumptions across verifiers, clients, and compilers.\\n    \\n\\nThe particular fraud proof model that is employed by Mantle network (testnet) is akin to the one deployed by Specular Network. You can learn more about it [here](https://medium.com/@SpecularL2/towards-secure-trust-minimized-optimistic-rollups-18f32a767aed).\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/support\",\n    \"loadedTime\": \"2025-02-15T20:32:48.359Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/support\",\n    \"title\": \"Support | Network\",\n    \"description\": \"Get in touch with us\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Support | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Get in touch with us\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VMr1DE9J3Dvyr7B4wh6h\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTlmYzNkNmItZTI4NC00YTc3LWFiNjUtMTc0ZWNjNjFlZTEw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=v%2BdtLBdbC0wfmoeMIJDHlNNyp9%2Fd0KIM34zzQgyHZH9%2Fcv7MtpEhFLAakLZ18zSH9AZWGFcWc2dwb7t6Rqa9apfB0bpcXG1KfbXB4Bxof%2BYTylHwCjd7S07UXI%2BYISRJ4Ttr3CcI9xWxfuK3mffb\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811bc5c3882e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Support | Network\\nGet in touch with us\\nIn case you have any questions, or if you run into any issues during your development journey, feel free to reach out to us through any of the following channels.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Support | Network\\n\\nGet in touch with us\\n\\nIn case you have any questions, or if you run into any issues during your development journey, feel free to reach out to us through any of the following channels.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/bridging\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/bridging\",\n    \"loadedTime\": \"2025-02-15T20:32:48.384Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/bridging\",\n    \"title\": \"Bridging | Network\",\n    \"description\": \"Enabling interactions and token transfers between chains\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Enabling interactions and token transfers between chains\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/7e4d57sFomMfsNsQLnqi\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTFjMmI5MGMtOGQzMS00YWM3LTgwOGMtYWEzNWZhNmQ4YWI5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=tEJKpjVGUMKMrB8Ny1VxUP4MVlZTixaeRnoHXiHlflog2b0cY3MvFNjKgpPt6Rgc7TxMRZpOecF83BWY%2BdgIrXF%2F0z9xZZbhBn6OkQ2H%2FQtTVf723JS37Ji6XhscWsLpgGKNACJ1DNmjcp8jRR%2Fl\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811babc693b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging | Network\\nEnabling interactions and token transfers between chains\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWhat is a \\\"Bridge\\\"?\\nApp developers and users commonly need to move data and assets between Layer 1 (L1) and Layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\". \\nHere is a good explanation of bridging from Ethereum Documentation:\\n\\\"Bridges work just like the bridges we know in the physical world. Just as a physical bridge connects two physical locations, a blockchain bridge connects two blockchain ecosystems. Bridges facilitate communication between blockchains through the transfer of information and assets.\\nLet's consider an example:\\nYou're from the USA and are planning a trip to Europe. You have USD, but you need EUR to spend. To exchange your USD for EUR you can use a currency exchange for a small fee.\\\"\\nWhy Do We Need a Bridge? \\nMantle (L2) is a separate blockchain system from Ethereum (L1). Similar to exchanging USD for EUR, we need a way to move $ETH and other tokens from Ethereum to Mantle so the blockchain system will recognize and accept it in a verifiable and secure way. \\nIn order to move assets into or out of Mantle network you can use the Mantle Bridge. \\nFor deeper explanations on bridging we encourage you to explore the following resources (external links):\\nLast updated 11 months ago\",\n  \"markdown\": \"# Bridging | Network\\n\\nEnabling interactions and token transfers between chains\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\nWhat is a \\\"Bridge\\\"?\\n\\nApp developers and users commonly need to move data and assets between Layer 1 (L1) and Layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\".\\n\\nHere is a good explanation of bridging from [Ethereum Documentation](https://ethereum.org/en/bridges/):\\n\\n`\\\"Bridges work just like the bridges we know in the physical world. Just as a physical bridge connects two physical locations, a blockchain bridge connects two blockchain ecosystems. Bridges facilitate communication between blockchains through the transfer of information and assets.`\\n\\n`Let's consider an example:`\\n\\n`You're from the USA and are planning a trip to Europe. You have USD, but you need EUR to spend. To exchange your USD for EUR you can use a currency exchange for a small fee.\\\"`\\n\\n### \\n\\n**Why Do We Need a Bridge?**\\n\\nMantle (L2) is a separate blockchain system from Ethereum (L1). Similar to exchanging USD for EUR, we need a way to move **$ETH** and other tokens from Ethereum to Mantle so the blockchain system will recognize and accept it in a verifiable and secure way.\\n\\nIn order to move assets into or out of Mantle network you can use the Mantle Bridge.\\n\\n**For deeper explanations on bridging we encourage you to explore the following resources (external links):**\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/solidity-support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/solidity-support\",\n    \"loadedTime\": \"2025-02-15T20:32:48.758Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/solidity-support\",\n    \"title\": \"Solidity Support | Network\",\n    \"description\": \"Solidity support and EVM compatibility on Mantle network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Solidity Support | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Solidity support and EVM compatibility on Mantle network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JrwUSyhHhPFGfakETJ9j\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWVhZjE2MzAtYjY5My00ODMwLTljOTItMzdhZTc3N2I5YTk1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=08anYDv2dZZS0%2BNgfplwM4hZSwMCrvySEqAtmepmnYob%2B1nJ0DfQGhNk9L2A77SjK%2F8VBc8rhGrJzUXtbHxeReH4q1sKwr9xKlvwa8cGS93DLmoTPdGqnwYH9BQfBMVE7tJqNmcZdUCJB3nKI%2FEX\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811befeeb82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Solidity Support | Network\\nSolidity support and EVM compatibility on Mantle network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nSince Mantle network is EVM compatible, you can deploy any contract written in Solidity, Vyper, or any other contract development language as long as it can be compiled to EVM bytecode.\\nThere are some key differences in Solidity opcode behavior on L1 Ethereum and L2 Mantle VM. This can impact certain operations and features when deploying your dApps on Mantle. The following table lists the opcodes that behave differently accompanied with a description.\\nOpcode Differences\\nOpcode\\nSolidity Equivalent\\nBehaviour\\nNot supported currently, and so Solidity version 0.8.20 and higher cannot be used with the default shanghai EVM version. Configuring the EVM version: For Solc, refer here For Hardhat, refer here\\nReturns latest L2 block number\\nNot supported currently, will be available with EIP-1559 update\\nLast updated 11 months ago\",\n  \"markdown\": \"# Solidity Support | Network\\n\\nSolidity support and EVM compatibility on Mantle network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nSince Mantle network is EVM compatible, you can deploy any contract written in Solidity, Vyper, or any other contract development language as long as it can be compiled to EVM bytecode.\\n\\nThere are some key differences in Solidity opcode behavior on L1 Ethereum and L2 Mantle VM. This can impact certain operations and features when deploying your dApps on Mantle. The following table lists the opcodes that behave differently accompanied with a description.\\n\\n## \\n\\nOpcode Differences\\n\\nOpcode\\n\\nSolidity Equivalent\\n\\nBehaviour\\n\\nNot supported currently, and so Solidity version `0.8.20` and higher cannot be used with the default `shanghai` EVM version. Configuring the EVM version: For Solc, [refer here](https://docs.soliditylang.org/en/v0.8.20/using-the-compiler.html#setting-the-evm-version-to-target) For Hardhat, [refer here](https://hardhat.org/hardhat-runner/docs/guides/compile-contracts#configuring-the-compiler)\\n\\nReturns latest L2 block number\\n\\nNot supported currently, will be available with EIP-1559 update\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/additional-documents/audits\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/audits\",\n    \"loadedTime\": \"2025-02-15T20:32:48.862Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/audits\",\n    \"title\": \"Audits | Network\",\n    \"description\": \"Security audit reports on different Mantle Network components\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Audits | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Security audit reports on different Mantle Network components\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/b1WrC0clD2W8Kr3AL6Kz\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTFiZTE4OWMtODQxNC00NWY3LWFkM2EtMWFjYWYyODI0NjA4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=1elpv7jswENTiyIuPcFBh0iHxvs9Qi7AtYrDDeslKATIQRhaT1cI9OMrQ4aJ%2FLANYbO4NJ115EZVufSPAoiFIPxNqWS%2F09TCHOJkQQhKdy%2BGpQiowltVP8nbxAgkfGF9ouJuZBuPvVe0lIyQK8ZG\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811bee8fe3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Audits | Network\\nSecurity audit reports on different Mantle Network components\\nComponent Definitions\\nMigrator: Refers to the migrator contract that migrates $BIT to $MNT 1:1.\\nMantle Network: Refers to the code and the contracts that implement Mantle Network's core rollup protocol. Can be found on Github.\",\n  \"markdown\": \"# Audits | Network\\n\\nSecurity audit reports on different Mantle Network components\\n\\n## \\n\\nComponent Definitions\\n\\n*   **Migrator:** Refers to the [migrator contract](https://etherscan.io/address/0xffb94c81d9a283ab4373ab4ba3534dc4fb8d1295#code) that migrates $BIT to $MNT 1:1.\\n    \\n*   **Mantle Network:** Refers to the code and the contracts that implement Mantle Network's core rollup protocol. Can be found on [Github](https://github.com/mantlenetworkio/mantle#directory-structure).\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling\",\n    \"loadedTime\": \"2025-02-15T20:32:48.956Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling\",\n    \"title\": \"Resources and Tooling | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Resources and Tooling | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/Btd852xtYsMad23PMAmh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NmE4ODdjODgtZWU1Yy00MGIwLTliNWYtYTc1MGM2MjlhOGQz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=y2egE9KTmadh2RP4Q60vdCXcoARg2Tic7E4eqISIpEZz%2BXg08orjzgG4nN%2F5uPJ4wAAMZ6nuTJ867OSAjVeOJH86GRbWs4BwlsEyB47Bp8zIsrjWIhnROPJ4vWLBXnIL%2BfIQN93JWQfXkxtalIDf\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811bf0942059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Resources and Tooling | Network\\nMantle v1\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Resources and Tooling | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network/network)\\n\\nMantle v1\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-devs/resources-and-tooling?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/additional-documents/official-links\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/official-links\",\n    \"loadedTime\": \"2025-02-15T20:32:49.355Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/official-links\",\n    \"title\": \"Official Links | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Official Links | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VMAyfI6A8YglCf5R8suD\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTg1MmY3M2YtMWNhOC00OGRjLWI3MjktMDgwOTQ0OGUwZDRm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pZy41jKR2LGOYad%2BEBs1HI6M%2FFlXbMWU4c7BByt8fAlNxkxLKfdlc4cZ5JcQaco8QU1nBmnWYSrtkNxTolhG2kngbs9T1iIrGoODNaj2DXO4yMQuTUsLzv0Ooo68kiFDWPZ5ZITStL%2Bv5UB%2BHHkC\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c2fb5e82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Official Links | Network\\nCommunication and Socials\\nWebsite: https://mantle.xyz\\nTwitter: https://twitter.com/0xMantle\\nTelegram: https://t.me/mantlenetwork\\nDiscord: https://discord.com/invite/0xMantle\\nReddit: https://reddit.com/r/0xMantle/\\nBlog: https://www.mantle.xyz/blog\\nYouTube: https://www.youtube.com/@0xMantle\\nLinkedIn: https://www.linkedin.com/company/0xmantle/\\nGitHub: https://github.com/mantlenetworkio\",\n  \"markdown\": \"# Official Links | Network\\n\\n### \\n\\nCommunication and Socials\\n\\n**Website:** [https://mantle.xyz](https://mantle.xyz/)\\n\\n**Twitter:** [https://twitter.com/0xMantle](https://twitter.com/0xMantle)\\n\\n**Telegram:** [https://t.me/mantlenetwork](https://t.me/mantlenetwork)\\n\\n**Discord:** [https://discord.com/invite/0xMantle](https://discord.com/invite/0xMantle)\\n\\n**Reddit:** [https://reddit.com/r/0xMantle/](https://reddit.com/r/0xMantle/)\\n\\n**Blog:** [https://www.mantle.xyz/blog](https://www.mantle.xyz/blog)\\n\\n**YouTube:** [https://www.youtube.com/@0xMantle](https://www.youtube.com/@0xMantle)\\n\\n**LinkedIn:** [https://www.linkedin.com/company/0xmantle/](https://www.linkedin.com/company/0xmantle/)\\n\\n**GitHub:** [https://github.com/mantlenetworkio](https://github.com/mantlenetworkio)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers\",\n    \"loadedTime\": \"2025-02-15T20:32:49.796Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers\",\n    \"title\": \"Node RPC Providers | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Node RPC Providers | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/21UGbEmteWFLOaTJfktn\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2ZiODQ5M2ItMWQ5Ni00ZjhkLWIyMTUtMDBkNTQ3ZWEwNzBj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=HEzIhhveYqDLPHhqiEN32EQ%2F0HiDspjVlGhJAuGV9ivzaXrxnjR%2FtDBSftR45NvtyXakyf499CGSVBTaLHshV%2FbXem6AbwBah0oPJOvt8ACT96W4QDOwEu%2BN9pO51iVQaeePr1dNPey%2F7gRLxtRE\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c2ed383b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Node RPC Providers | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWe're working with popular node providers that you can use to connect your dApps or games to Mantle network. They enable convenient and scalable API access to Mantle nodes so you can focus on building without having to worry about the underlying infrastructure.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Node RPC Providers | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nWe're working with popular node providers that you can use to connect your dApps or games to Mantle network. They enable convenient and scalable API access to Mantle nodes so you can focus on building without having to worry about the underlying infrastructure.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"loadedTime\": \"2025-02-15T20:32:49.538Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"title\": \"Security Model and Roles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Security Model and Roles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/7WrNxL9H5OJw8Umndp4T\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Zjk4NTI2YjYtODAzMy00NmEzLThhY2UtZDFmMWJkYmYxMDFi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=OlAlVIjEbODb2QAAJqBSRgPxEMGzUt3Hzo6yZPtrJ0VLFOB1VKlynqp0Zo559qIeVHw8WW2CUcray3xlZtRoM%2BLCPRCGxi15p0Dyx6miqcVVNJrLkQT8HztOTzTJLq%2FkRrgkxccnv%2BHS%2FrLyWv6%2B\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c23cec059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Security Model and Roles | Network\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Security Model and Roles | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle\",\n    \"loadedTime\": \"2025-02-15T20:32:50.919Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle\",\n    \"title\": \"Transaction Lifecycle | Network\",\n    \"description\": \"A transaction's lifecycle on Mantle\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Transaction Lifecycle | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"A transaction's lifecycle on Mantle\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/soeRIMlX8RidUUIdTjkr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:50 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmE0MWNjYTAtOTFkYy00YjhiLWIxMWItMTQxNGY5MWRhZTIx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=O351i5kXl726fZDjVGGkHi6VMvNhxTPAFsKD8%2ByEahfWYidMBTkfP%2BYTtD2QldvylPBExW5LVrsRu4AO1AF6dwkjfExaTOugYN%2BOxFjqHcW5760Psz40fqVV%2FlUaEv9rkq0yk9gfmXlizfWvbwJI\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811cc1d3c82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Transaction Lifecycle | Network\\nA transaction's lifecycle on Mantle\\nMantle v2 Tectonic has been released, please move to the new documentation!\\n1. The Initiation\\nA wallet user, a dApp, or a script somewhere wants to use a blockchain based system to transfer funds, or perform a task. \\nIn the case of the user, they've already connected to the Mantle network by adding the RPC endpoint of a Sequencer node to their wallet. \\nThe dApp on the other hand has integrated the Mantle SDK and has already instantiated it to be able to talk to the Mantle network. They are both ready to send a request that contains a receiver's address and the amount they want to transfer.\\nJust like any service, this action requires a fee. And not just for making the transfer itself, but to also maintain a perpetual, immutable public record of it that can be verified by anybody. Their wallet, or dApp, must make sure they have enough balance to do this. \\nFor a wallet, things are simpler, since it's easier to calculate the fee required to be paid\\nA dApp needs to do more to carefully make that calculation. More details here.\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle network where a Sequencer is ready to process it. This is where the transaction first enters Mantle. More details here.\\n2. The Handling\\nThe transaction triggers a standard state verification process that is carried out by the Ethereum Virtual Machine (EVM) software running on these nodes. This is to make sure the transaction is valid in nature, has paid the necessary fees, and not doing something out of the ordinary.\\nThis transaction updates the local state (the ledger) and awaits further processing as part of a pending block. The process up until this point is particularly fast.\\nIn blockchain terms, this means instant transaction confirmations and state updates\\nMany such pending blocks are combined to form batches that will be sent to Ethereum to be finalized. The L2 chain achieves low transaction fees by spreading fixed costs over the multiple transactions in a batch. \\nThis block data is then verified for correctness by another module that's a part of the Sequencer network known as Threshold Signature Scheme (TSS) nodes. They verify the state roots submitted by the Sequencer as part of the blocks on L2. More details here.\\n3. The Storage\\nOnce signed off by TSS nodes, the batched block data is ready to be stored by Mantle DA nodes that use EigenDA technology, while the updated state root is published to L1 Ethereum. The state data is transmitted across the network by the Sequencer to be received by different actors on both L2 and L1. \\nOn L2, Rollup Verifiers are looking to sync this block data to make it accessible for other users and dApps. More details here.\\nOn Ethereum, there's an entire trust network ready to verify the updated state roots that are stored in a contract. Once the block goes through Ethereum's consensus mechanism, it is recorded on-chain where it's secure.\\nThe Data Availability nodes, or DA nodes, who will sync the block data and guarantee access to it at any given time in exchange for the $MNT rewards they're going to receive for providing this service. More details here.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Transaction Lifecycle | Network\\n\\nA transaction's lifecycle on Mantle\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\n1\\\\. The Initiation\\n\\nA wallet user, a dApp, or a script somewhere wants to use a blockchain based system to transfer funds, or perform a task.\\n\\n*   In the case of the user, they've already connected to the Mantle network by adding the RPC endpoint of a Sequencer node to their wallet.\\n    \\n*   The dApp on the other hand has integrated the [Mantle SDK](https://sdk.mantle.xyz/index.html) and has already instantiated it to be able to talk to the Mantle network. They are both ready to send a request that contains a receiver's address and the amount they want to transfer.\\n    \\n\\nJust like any service, this action requires a fee. And not just for making the transfer itself, but to also maintain a perpetual, immutable public record of it that can be verified by anybody. Their wallet, or dApp, must make sure they have enough balance to do this.\\n\\n*   For a wallet, things are simpler, since it's easier to calculate the fee required to be paid\\n    \\n*   A dApp needs to do more to carefully make that calculation. [**More details here.**](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2)\\n    \\n\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle network where a Sequencer is ready to process it. This is where the transaction first enters Mantle. [**More details here.**](https://docs.mantle.xyz/network/network/for-validators/network-roles#sequencers)\\n\\n## \\n\\n2\\\\. The Handling\\n\\nThe transaction triggers a standard state verification process that is carried out by the Ethereum Virtual Machine (EVM) software running on these nodes. This is to make sure the transaction is valid in nature, has paid the necessary fees, and not doing something out of the ordinary.\\n\\nThis transaction updates the local state (the ledger) and awaits further processing as part of a pending block. The process up until this point is particularly fast.\\n\\nIn blockchain terms, this means instant transaction confirmations and state updates\\n\\nMany such pending blocks are combined to form batches that will be sent to Ethereum to be finalized. The L2 chain achieves low transaction fees by spreading fixed costs over the multiple transactions in a batch.\\n\\nThis block data is then verified for correctness by another module that's a part of the Sequencer network known as Threshold Signature Scheme (TSS) nodes. They verify the state roots submitted by the Sequencer as part of the blocks on L2. [**More details here.**](https://docs.mantle.xyz/network/network/for-validators/network-roles#multi-party-computation-mpc-nodes)\\n\\n## \\n\\n3\\\\. The Storage\\n\\nOnce signed off by TSS nodes, the batched block data is ready to be stored by Mantle DA nodes that use EigenDA technology, while the updated state root is published to L1 Ethereum. The state data is transmitted across the network by the Sequencer to be received by different actors on both L2 and L1.\\n\\nOn L2, Rollup Verifiers are looking to sync this block data to make it accessible for other users and dApps. [**More details here.**](https://docs.mantle.xyz/network/network/for-validators/network-roles#rollup-verifiers)\\n\\nOn Ethereum, there's an entire trust network ready to verify the updated state roots that are stored in a contract. Once the block goes through Ethereum's consensus mechanism, it is recorded on-chain where it's secure.\\n\\nThe Data Availability nodes, or DA nodes, who will sync the block data and guarantee access to it at any given time in exchange for the $MNT rewards they're going to receive for providing this service. [**More details here.**](https://docs.mantle.xyz/network/network/introduction/concepts/data-availability#da-nodes)\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/network-faucet\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/network-faucet\",\n    \"loadedTime\": \"2025-02-15T20:32:50.973Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/network-faucet\",\n    \"title\": \"Network Faucet | Network\",\n    \"description\": \"Obtain testnet $MNT to get started\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Faucet | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Obtain testnet $MNT to get started\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/dIqZ5AotViRBtnxY2Zpv\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:50 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGViZDI3MmItZjAwMS00MWNhLTgzZDQtZjYxNTAwZWQyZDRh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=yKCeRsx8xmJXFGjmvAu5kAovutrfRvhMWKW5yMu1tZIHrUM4Tk6ofBPye%2Fcf7DnYLQRALtL4vB7sGOPw3spihYBmTrdYO9Pyd9iXZUvZA4YD9CDt5WpFHcBVO534glGx2r%2BrI%2BEOe78DSsllIU50\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ca1d853b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Faucet | Network\\nObtain testnet $MNT to get started\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nTestnet Faucets \\n$MNT Faucet\\nBefore moving forward please make sure your wallet has sufficient $gETH (Goerli ETH) to be used as gas for minting Goerli $MNT. \\nMantle Faucet is a simple faucet for Mantle testnet that drips $MNT. It requires the following steps:\\nAuthenticate with Twitter\\nEnter your wallet address\\nYou will automatically be sent $MNT to your wallet on testnet. \\nMake sure you import the $MNT token to your wallet using the contract address 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\n$gETH Faucet\\nYou can get $gETH (Goerli ETH) from any of the following faucets:\\nOnce you have some $gETH, you can use the Mantle bridge to transfer it to Mantle Goerli testnet.\\nMint Test $MNT on Etherscan\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\nNext, switch your wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\nFind and click on the mint() function in the list on the Etherscan page. It's on no.9.\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Network Faucet | Network\\n\\nObtain testnet $MNT to get started\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nTestnet Faucets\\n\\n### \\n\\n$MNT Faucet\\n\\nBefore moving forward please make sure your wallet has sufficient **$gETH (Goerli ETH)** to be used as gas for minting Goerli $MNT.\\n\\n[Mantle Faucet](https://faucet.testnet.mantle.xyz/) is a simple faucet for Mantle testnet that drips $MNT. It requires the following steps:\\n\\n1.  Authenticate with **Twitter**\\n    \\n2.  Enter your wallet address\\n    \\n\\nYou will automatically be sent $MNT to your wallet on testnet.\\n\\nMake sure you import the $MNT token to your wallet using the contract address `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n\\n### \\n\\n$gETH Faucet\\n\\nYou can get $gETH (Goerli ETH) from any of the following faucets:\\n\\nOnce you have some $gETH, you can use the [Mantle bridge](https://bridge.testnet.mantle.xyz/) to transfer it to Mantle Goerli testnet.\\n\\n## \\n\\nMint Test $MNT on Etherscan\\n\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\n\\n1.  Next, switch your wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n    \\n\\n3.  Find and click on the `mint()` function in the list on the Etherscan page. It's on no.9.\\n    \\n\\n1.  Now you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\n    \\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2\",\n    \"loadedTime\": \"2025-02-15T20:32:51.162Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2\",\n    \"title\": \"Transaction Fees on L2 | Network\",\n    \"description\": \"How transaction fees are calculated on Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Transaction Fees on L2 | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"How transaction fees are calculated on Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/TyVs1vgKd0Ko03ZY0VIf\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWNhYTFjNjYtNWJiMS00NDMzLWE4YjUtODIxZDViMTIwODNj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=G84%2F304%2FqmvqaGw6m23d0eNkajOFR6WrwoOhWuMm8hmC%2FLpQvzfKLK1jux8FsUcxYQ9998%2BWmYe3kVWCjCBvB%2BJEdGv9Ir%2FNkOdro8fg%2BrFWiaNzZp5q0LQMQLYid1ocT39mRGZXFHLVcNBfW1cC\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ce4fdc82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Transaction Fees on L2 | Network\\nHow transaction fees are calculated on Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nUnderstanding Fee Basics\\nTransaction fees on Mantle Network work similar to fees on Ethereum. As Mantle network is a Layer 2 (L2) blockchain, there are new paradigms in the fee structure that cause it to differ from Ethereum's fee. \\nSince Mantle Network is constantly perfecting EVM compatibility, dApps can conveniently handle any changes with minor modifications. Let's take a look at the two sources of transaction costs on Mantle.\\nThe L2 transaction fee for Layer-2 execution\\nThe L1 rollup fee to cover the cost of publishing rollup state roots to L1 (divided equally among users whose transactions were included in the rollup batch)\\nThe estimateGas API currently only returns L2 gas cost. The L1 gas estimate needs to be calculated separately. We will support fetching the total L1+L2 gas estimate through the estimateGas interface in a future network update.\\nThe L2 Transaction Fee\\nJust like Ethereum, transactions on Mantle network have to pay gas for the amount of computation and storage that they use. Every L2 transaction will pay some execution fee, equal to the amount of gas used by the transaction multiplied by the gas price attached to the transaction.\\nHere's the (simple) math:\\nL2ExecutionFee = L2GasPrice * L2GasUsed\\nThe amount of L2 gas used depends on the particular transaction that you're trying to send. Thanks to EVM compatibility, transactions typically use approximately the same amount of gas on Mantle Network as they do on Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 gas price on the public Mantle dashboard. Also, since gas fees on L2 Mantle Network are charged in $MNT, it means at the same gas price the transaction cost incurred will still be significantly lower than other L2 networks that use $ETH as the gas token.\\nThe L1 Rollup Fee\\nAll the state roots that are generated on L2 as result of transaction execution are published to Ethereum. This step is crucial to the security properties of Mantle because it means that all of the most up-to-date block data from L2 Mantle Network that you need to sync a node is always publicly available on L1 Ethereum.\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited amount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 transaction execution. As a result, for transactions with high complexity, this can even save upto ～70% of the cost compared to the original L1 rollup fee.\\nMantle publishes rollup states and some necessary transaction data to Ethereum by packaging transactions into batches, and the amount of $ETH spent during this process will be divided among the users whose transactions were included in the batch. The cost-per-user is significantly cheaper than it would be if the transactions were executed on L1. The L1 rollup fee is calculated from the following sub-factors:\\nThe current gas price on Ethereum.\\nA fixed overhead (auto-adjusted and set into gas oracle)\\nThe scaling factor (currently set to 1)\\nThe $ETH to $MNT conversion ratio\\nHere's the math:\\nL1RollupFee = L1GasPrice * Overhead * Ratio\\nThe transaction fees incurred by users is calculated and deducted as described below:\\nA connection is made to the RPC and the EstimateGas method is called to calculate the gas cost on L2 (if you use a wallet, such as MetaMask, this step will be executed automatically). This is the L2 Transaction Fee.\\nA transaction is signed and submitted\\nMantle node receives the transaction and checks if the account balance is sufficient, including the L2 Transaction Fee and L1 Rollup Fee*.\\nThe transaction is executed successfully, recording your interaction with Mantle Network.\\n*Note that there is currently no RPC interface that provides accurate estimates of L1 Rollup Fee, please ensure that wallets have sufficient balance, even though the amount needed is generally very small.\\nKeep in Mind\\nSending Transactions \\nSince Mantle supports Ethereum's JSON RPC interface, you can use the eth_gasPrice method to obtain recommended L2 gas price values. Similarly, you can use eth_estimateGas to estimate your L2 gas usage.\\nGas Price Updates\\nGas prices on L2 are set to 0.05 Gwei by default, it will be updated every once in a while with reference to the recent blocks on Ethereum.\\nEIP-1559 Support\\nCurrently, Mantle Network does NOT support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in.\\nDisplaying Fees to Users\\nYou can use the RPC method eth_getTransactionReceipt to obtain the fees for a particular transaction, where the L1 Rollup Fee portion is listed as the field l1fee.\\nEstimating the Total Fee \\nYou can estimate the total fee by combining your estimates for the L2 execution fee and L1 data fee.\\nCommon RPC Errors\\nInsufficient Funds\\nError code: -32000\\nError message: invalid transaction: insufficient funds for l1Fee + l2Fee + value \\nYou'll get this error when the account's $MNT balance is not enough to cover the transaction fee and the transfer amount. Check the account balance to ensure that the minimum amount requirements are met.\\nGas Price Too Low\\nError code: -32000 \\nError message: gas price too low: X wei, use at least tx.gasPrice = Y wei \\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too low. Currently, at least 0.05 Gwei is required, which can be obtained from the GasOracle contract 0x420000000000000000000000000000000000000F\\nGas Price Too High\\nError code: -32000 \\nError message: gas price too high: X wei, use at most tx.gasPrice = Y wei \\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too high. Currently limit is set at 200 Gwei.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Transaction Fees on L2 | Network\\n\\nHow transaction fees are calculated on Mantle Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\n**Understanding Fee Basics**\\n\\nTransaction fees on Mantle Network work similar to fees on Ethereum. As Mantle network is a Layer 2 (L2) blockchain, there are new paradigms in the fee structure that cause it to differ from Ethereum's fee.\\n\\nSince Mantle Network is constantly perfecting EVM compatibility, dApps can conveniently handle any changes with minor modifications. Let's take a look at the two sources of transaction costs on Mantle.\\n\\n1.  The L2 transaction fee for Layer-2 execution\\n    \\n2.  The L1 rollup fee to cover the cost of publishing rollup state roots to L1 (divided equally among users whose transactions were included in the rollup batch)\\n    \\n\\nThe `estimateGas` API currently only returns L2 gas cost. The L1 gas estimate needs to be calculated separately. We will support fetching the total L1+L2 gas estimate through the `estimateGas` interface in a future network update.\\n\\n### \\n\\n**The L2 Transaction Fee**\\n\\nJust like Ethereum, transactions on Mantle network have to pay gas for the amount of computation and storage that they use. Every L2 transaction will pay some **execution fee**, equal to the amount of gas used by the transaction multiplied by the gas price attached to the transaction.\\n\\nHere's the (simple) math:\\n\\n```\\nL2ExecutionFee = L2GasPrice * L2GasUsed\\n```\\n\\nThe amount of L2 gas used depends on the particular transaction that you're trying to send. Thanks to EVM compatibility, transactions typically use approximately the same amount of gas on Mantle Network as they do on Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 gas price on the public Mantle dashboard. Also, since gas fees on L2 Mantle Network are charged in $MNT, it means at the same gas price the transaction cost incurred will still be significantly lower than other L2 networks that use $ETH as the gas token.\\n\\n### \\n\\n**The L1 Rollup Fee**\\n\\nAll the state roots that are generated on L2 as result of transaction execution are published to Ethereum. This step is crucial to the security properties of Mantle because it means that all of the most up-to-date block data from L2 Mantle Network that you need to sync a node is always publicly available on L1 Ethereum.\\n\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited amount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 transaction execution. As a result, for transactions with high complexity, this can even save upto ～70% of the cost compared to the original L1 rollup fee.\\n\\nMantle publishes rollup states and some necessary transaction data to Ethereum by packaging transactions into batches, and the amount of $ETH spent during this process will be divided among the users whose transactions were included in the batch. The cost-per-user is significantly cheaper than it would be if the transactions were executed on L1. The L1 rollup fee is calculated from the following sub-factors:\\n\\n1.  The current gas price on Ethereum.\\n    \\n2.  A fixed overhead (auto-adjusted and set into gas oracle)\\n    \\n3.  The scaling factor (currently set to 1)\\n    \\n4.  The $ETH to $MNT conversion ratio\\n    \\n\\nHere's the math:\\n\\n```\\nL1RollupFee = L1GasPrice * Overhead * Ratio\\n```\\n\\nThe transaction fees incurred by users is calculated and deducted as described below:\\n\\n1.  A connection is made to the RPC and the `EstimateGas` method is called to calculate the gas cost on L2 (if you use a wallet, such as MetaMask, this step will be executed automatically). This is the L2 Transaction Fee.\\n    \\n2.  A transaction is signed and submitted\\n    \\n3.  Mantle node receives the transaction and checks if the account balance is sufficient, including the L2 Transaction Fee and L1 Rollup Fee\\\\*.\\n    \\n4.  The transaction is executed successfully, recording your interaction with Mantle Network.\\n    \\n\\n_\\\\*Note that there is currently no RPC interface that provides accurate estimates of L1 Rollup Fee, please ensure that wallets have sufficient balance, even though the amount needed is generally very small._\\n\\n## \\n\\nKeep in Mind\\n\\n### \\n\\n**Sending Transactions**\\n\\nSince Mantle supports Ethereum's JSON RPC interface, you can use the `eth_gasPrice` method to obtain recommended L2 gas price values. Similarly, you can use `eth_estimateGas` to estimate your L2 gas usage.\\n\\n### \\n\\n**Gas Price Updates**\\n\\nGas prices on L2 are set to **0.05 Gwei** by default, it will be updated every once in a while with reference to the recent blocks on Ethereum.\\n\\n### \\n\\nEIP-1559 Support\\n\\nCurrently, Mantle Network does **NOT** support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in.\\n\\n### \\n\\n**Displaying Fees to Users**\\n\\nYou can use the RPC method `eth_getTransactionReceipt` to obtain the fees for a particular transaction, where the L1 Rollup Fee portion is listed as the field `l1fee`.\\n\\n#### \\n\\n**Estimating the Total Fee**\\n\\nYou can estimate the total fee by combining your estimates for the L2 execution fee and L1 data fee.\\n\\n## \\n\\nCommon RPC Errors\\n\\n### \\n\\nInsufficient Funds\\n\\n**Error code:** -32000\\n\\n**Error message:** invalid transaction: insufficient funds for l1Fee + l2Fee + value\\n\\nYou'll get this error when the account's $MNT balance is not enough to cover the transaction fee and the transfer amount. Check the account balance to ensure that the minimum amount requirements are met.\\n\\n### \\n\\nGas Price Too Low\\n\\n**Error code:** -32000\\n\\n**Error message:** gas price too low: X wei, use at least tx.gasPrice = Y wei\\n\\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too low. Currently, at least **0.05 Gwei** is required, which can be obtained from the `GasOracle` contract `0x420000000000000000000000000000000000000F`\\n\\n### \\n\\nGas Price Too High\\n\\nError code: -32000\\n\\nError message: gas price too high: X wei, use at most tx.gasPrice = Y wei\\n\\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too high. Currently limit is set at **200 Gwei.**\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-node-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-node-api\",\n    \"loadedTime\": \"2025-02-15T20:32:51.758Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-node-api\",\n    \"title\": \"Mantle Node API | Network\",\n    \"description\": \"RPC API Reference\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Node API | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"RPC API Reference\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JkNThJJrsyCURf0dpPcy\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWM4MDIzM2ItMDM5NS00YjIzLWFhZGItYWVmNDdkMWVmOTNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sJPrfeBEbH27Aro6p8%2BfYDHEHQruelokQt5CD1qyhmHW6ex%2FvizLNj96oasKKOs%2BHj9OWByBFCBZmlcozOUhwDWlfvTK8GbE7kpPpINAwhSrQVSMnKpuGWIQtYsFi%2FoxCOIB%2BU7zjxN6UC47K4hp\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ce9ae53b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Node API | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Network shares the same JSON-RPC API implementation as Ethereum.\\nYou can refer to the common endpoints here. \\nWe've also introduced custom methods to simplify certain Mantle-specific interactions.\\nAll methods can be accessed via https and websocket.\\nThe websocket supports an access method equivalent to the https interface, along with event subscription and cancellation. See here for reference.\\nReturns block info for multiple blocks, takes a block range as parameter\\nReturns the current L1 and L2 gas prices that a Sequencer node would use to calculate gas fees \\nReturns the block info in the form of an array of block objects for multiple blocks within a specified range. (See eth_getBlockByHash for the structure of a block object) \\nNo.\\nParameter\\nType\\nDescription\\nIf true, returns full transaction objects If false, returns transaction hashes only\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\":\\\"2.0\\\", \\\"id\\\":1, \\\"result\\\":[ { \\\"difficulty\\\":\\\"0x2\\\", \\\"extraData\\\":\\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\", \\\"gasLimit\\\":\\\"0xe4e1c0\\\", \\\"gasUsed\\\":\\\"0x3183d\\\", \\\"hash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"logsBloom\\\":\\\"0xminer\\\":\\\"0x0000000000000000000000000000000000000000\\\", \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\":\\\"0x0000000000000000\\\", \\\"number\\\":\\\"0x1\\\", \\\"parentHash\\\":\\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\", \\\"receiptsRoot\\\":\\\"0xf4c97b1186b690ad3318f907c0cdaf46f4598f27f711a5609064b2690a767287\\\", \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\":\\\"0x30c\\\", \\\"stateRoot\\\":\\\"0xd3ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\", \\\"timestamp\\\":\\\"0x618d4769\\\", \\\"totalDifficulty\\\":\\\"0x3\\\", \\\"transactions\\\":[\\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\"], \\\"transactionsRoot\\\":\\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\", \\\"uncles\\\":[] }, { \\\"difficulty\\\":\\\"0x2\\\", \\\"extraData\\\":\\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a5e2910fe64b41801\\\", \\\"gasLimit\\\":\\\"0xe4e1c0\\\", \\\"gasUsed\\\":\\\"0x1c60d\\\", \\\"hash\\\":\\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\", \\\"logsBloom\\\":\\\"0xminer\\\":\\\"0x0000000000000000000000000000000000000000\\\", \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\":\\\"0x0000000000000000\\\", \\\"number\\\":\\\"0x2\\\", \\\"parentHash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"receiptsRoot\\\":\\\"0x2057c8fb79c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\", \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\":\\\"0x30c\\\", \\\"stateRoot\\\":\\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\", \\\"timestamp\\\":\\\"0x618d8837\\\", \\\"totalDifficulty\\\":\\\"0x5\\\", \\\"transactions\\\":[\\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\"], \\\"transactionsRoot\\\":\\\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f4c5ca6f56a7d9a45b9904ea1c69\\\", \\\"uncles\\\":[] } ] }\\nReturns various pieces of information in the form of an Object for a specified node. \\nNode's mode of operation - \\\"sequencer\\\" or \\\"verifier\\\"\\ntrue if the node is currently syncing false otherwise\\nNested object. Contains blockNumber and timestamp\\nBlock no. of the latest known L1 block\\nTimestamp of the latest known L1 block\\nNested object. Contains queueIndex, index, and verifiedIndex\\nIndex within the CTC of the last L1 to L2 message ingested\\nIndex of the last L2 transaction processed\\nIndex of the last transaction that was ingested from a batch that was posted to L1\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\":\\\"2.0\\\", \\\"id\\\":1, \\\"result\\\":{ \\\"mode\\\":\\\"verifier\\\", \\\"syncing\\\":false, \\\"ethContext\\\":{ \\\"blockNumber\\\":10743302, \\\"timestamp\\\":1957082793 }, \\\"rollupContext\\\":{ \\\"index\\\":11287, \\\"queueIndex\\\":14362, \\\"verifiedIndex\\\":0 } } }\\nReturns an Object containing the L1 and L2 gas prices used by the Sequencer to calculate transaction gas fees.\\nL1 gas price in wei (used to estimate L1 calldata costs)\\nL2 gas price in wei (used to estimate L2 execution costs)\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_gasPrices\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\":\\\"2.0\\\", \\\"id\\\":1, \\\"result\\\":{ \\\"l1GasPrice\\\":\\\"0x254aa66732\\\", \\\"l2GasPrice\\\":\\\"0xf3792\\\" } }\",\n  \"markdown\": \"# Mantle Node API | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Network shares the same **JSON-RPC API** implementation as Ethereum.\\n\\nYou can refer to the common endpoints [**here**](https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods).\\n\\nWe've also introduced custom methods to simplify certain Mantle-specific interactions.\\n\\nAll methods can be accessed via **https** and **websocket.**\\n\\nThe websocket supports an access method equivalent to the **https** interface, along with event subscription and cancellation. See [**here**](https://ethereum.org/en/developers/tutorials/using-websockets/) for reference.\\n\\nReturns block info for multiple blocks, takes a block range as parameter\\n\\nReturns the current L1 and L2 gas prices that a [Sequencer](https://docs.mantle.xyz/network/network/for-validators/network-roles#sequencers) node would use to calculate [gas fees](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2#understanding-fee-basics)\\n\\nReturns the block info in the form of an array of `block` objects for multiple blocks within a specified range. (See [`eth_getBlockByHash`](https://eth.wiki/json-rpc/API#eth_getblockbyhash) for the structure of a `block` object)\\n\\nNo.\\n\\nParameter\\n\\nType\\n\\nDescription\\n\\nIf `true`, returns full transaction objects If `false`, returns transaction hashes only\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\":\\\"2.0\\\",\\n  \\\"id\\\":1,\\n  \\\"result\\\":[\\n    {\\n      \\\"difficulty\\\":\\\"0x2\\\",\\n      \\\"extraData\\\":\\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\",\\n      \\\"gasLimit\\\":\\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\":\\\"0x3183d\\\",\\n      \\\"hash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000400000000000100000000000000200000000002000000000000001000000000000000000004000000000000000000000000000040000400000100400000000000000100000000000000000000000000000020000000000000000000000000000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000088000000080000000000010000000000000000000000000000800008000120000000000000000000000000000000002000\\\",\\n      \\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\":\\\"0x0000000000000000\\\",\\n      \\\"number\\\":\\\"0x1\\\",\\n      \\\"parentHash\\\":\\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\",\\n      \\\"receiptsRoot\\\":\\\"0xf4c97b1186b690ad3318f907c0cdaf46f4598f27f711a5609064b2690a767287\\\",\\n      \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\":\\\"0x30c\\\",\\n      \\\"stateRoot\\\":\\\"0xd3ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\",\\n      \\\"timestamp\\\":\\\"0x618d4769\\\",\\n      \\\"totalDifficulty\\\":\\\"0x3\\\",\\n      \\\"transactions\\\":[\\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\"],\\n      \\\"transactionsRoot\\\":\\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\",\\n      \\\"uncles\\\":[]\\n    },\\n    {\\n      \\\"difficulty\\\":\\\"0x2\\\",\\n      \\\"extraData\\\":\\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a5e2910fe64b41801\\\",\\n      \\\"gasLimit\\\":\\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\":\\\"0x1c60d\\\",\\n      \\\"hash\\\":\\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\",\\n      \\\"logsBloom\\\":\\\"0x00080000000200000000000000000008000000000000000000000100008000000000000000000000000000000000000000000000000000000000400000000000100000000000000000000000020000000000000000000000000000000000004000000000000000000000000000000000400000000400000000000000100000000000000000000000000000020000000000000000000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008400000000000000000010000000000000000020000000020000000000000000000000000000000000000000000002000\\\",\\n      \\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\":\\\"0x0000000000000000\\\",\\n      \\\"number\\\":\\\"0x2\\\",\\n      \\\"parentHash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"receiptsRoot\\\":\\\"0x2057c8fb79c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\",\\n      \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\":\\\"0x30c\\\",\\n      \\\"stateRoot\\\":\\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\",\\n      \\\"timestamp\\\":\\\"0x618d8837\\\",\\n      \\\"totalDifficulty\\\":\\\"0x5\\\",\\n      \\\"transactions\\\":[\\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\"],\\n      \\\"transactionsRoot\\\":\\\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f4c5ca6f56a7d9a45b9904ea1c69\\\",\\n      \\\"uncles\\\":[]\\n    }\\n  ]\\n}\\n```\\n\\nReturns various pieces of information in the form of an `Object` for a specified node.\\n\\nNode's mode of operation - `\\\"sequencer\\\"` or `\\\"verifier\\\"`\\n\\n`true` if the node is currently syncing `false` otherwise\\n\\nNested object. Contains `blockNumber` and `timestamp`\\n\\nBlock no. of the latest known L1 block\\n\\nTimestamp of the latest known L1 block\\n\\nNested object. Contains `queueIndex`, `index`, and `verifiedIndex`\\n\\nIndex within the CTC of the last L1 to L2 message ingested\\n\\nIndex of the last L2 transaction processed\\n\\nIndex of the last transaction that was ingested from a batch that was posted to L1\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\":\\\"2.0\\\",\\n  \\\"id\\\":1,\\n  \\\"result\\\":{\\n    \\\"mode\\\":\\\"verifier\\\",\\n    \\\"syncing\\\":false,\\n    \\\"ethContext\\\":{\\n      \\\"blockNumber\\\":10743302,\\n      \\\"timestamp\\\":1957082793\\n    },\\n    \\\"rollupContext\\\":{\\n      \\\"index\\\":11287,\\n      \\\"queueIndex\\\":14362,\\n      \\\"verifiedIndex\\\":0\\n    }\\n  }\\n}\\n```\\n\\nReturns an `Object` containing the L1 and L2 gas prices used by the Sequencer to calculate transaction gas fees.\\n\\nL1 gas price in _wei_ (used to estimate L1 calldata costs)\\n\\nL2 gas price in _wei_ (used to estimate L2 execution costs)\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_gasPrices\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\":\\\"2.0\\\",\\n  \\\"id\\\":1,\\n  \\\"result\\\":{\\n    \\\"l1GasPrice\\\":\\\"0x254aa66732\\\",\\n    \\\"l2GasPrice\\\":\\\"0xf3792\\\"\\n  }\\n}\\n```\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides\",\n    \"loadedTime\": \"2025-02-15T20:32:51.854Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides\",\n    \"title\": \"How-to Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How-to Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VUsLytKu6DCsOZQKU47s\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDg4MzFkYTYtNTA2ZC00MjJhLWFjMzgtYzg5MjA2OTMzMGNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=8cqtHQ141gbR36cwb%2B8pYqrD9bxS95I5MAQ7JlabKjaRgKB9qstDRV0FJQ401YqWyJ4A8WP19i6B4bG7ZmS0hirFwl5Uy9NeF6hYuWVpp%2BsnCJu2Vhn%2Fnw1fAXLujcwvQ1tgdtKDKM28P6hIAqwk\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811cf793a9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How-to Guides | Network\\nMantle v1\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# How-to Guides | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network/network)\\n\\nMantle v1\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/how-to-guides?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/how-to-guides?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap\",\n    \"loadedTime\": \"2025-02-15T20:32:50.176Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap\",\n    \"title\": \"Architecture and Roadmap | Network\",\n    \"description\": \"Components and modules part of Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Architecture and Roadmap | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Components and modules part of Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/QFJbXoEhnBm6shI7iCJY\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzFhM2M5NWQtN2IzMy00NGNjLWE2NGMtOTVkOGMzYTA4Njhm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=eZAuW31UwcpbY05%2FwLCGNjFTnF4aesd1g1Kn7urQlWTWvEb%2BIyR3I9lA%2FqTYtdi5qB66uQrkbCx1ZwWsE6atJKk7TXsF3QuRIXtBPEl0bRY5hxQzw5f8FWkBb6d%2B0f5nKcGhNNSIaN1twyPrazfJ\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c24cde4d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Architecture and Roadmap | Network\\nComponents and modules part of Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nNetwork Architecture\\nThis diagram illustrates how different network modules and components interact with each other going through transaction execution and eventually published updated state data to Ethereum L1, and storing the rollup data on the Mantle Data Availability (DA) powered by EigenDA technology. Let's go over the process of transaction handling to better understand how each module works.\\nUsers send signed transactions via an available RPC node.\\nThe Sequencer receives transactions and pack them into blocks. The DTL (Data Transport Layer) service syncs this block data. Verifiers sync the L2 block data from the DTL.\\nThe batch submitter fetches updated state roots and sends them to the Threshold Signature Scheme (TSS) module to be verified and signed. Verifiers can also fetch the state root data and confirm their validity.\\nOnce TSS nodes establish the validity of the updated state roots and sign off on the rollup batches, the batch submitter publishes the state root data to the State Commitment Chain (SCC) contract on L1 Ethereum.\\nThe rollup transaction data is stored on Mantle DA. Verifiers can fetch this data at any point and verify its validity. This action is performed when issuing fraud proof challenges.\\nMantle DA nodes also post the validity certificates to L1 guaranteeing liveness and availability with each new batch.\\nIn case the state root validity is challenged with a fraud proof, L2 data is posted to the contract on L1 to perform the execution and check state transition validity.\\nFor more details on the role played by each network component, check out the Network Roles page.\\nRoadmap\\nThe following table tentatively summarizes our current approach to different network components and actions on L2 and L1 for our initial mainnet version, and other potential implementations that we're considering for future mainnet upgrades.\\nFailure Handling\\nL2 Sequencer Failure\\nIn the event of L2 Sequencing issues, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\nEnqueue via L1**: Users can submit transactions to an L1 queue, but can't force them. The sequencer can selectively skip transactions, but cannot stop processing the queue entirely. In other words, if the sequencer censors or is down, it affects everyone.\\nForce via L1: Users can force sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for X period, users can use the exit hatch to withdraw their funds.\\nSelf Sequence: In the event of sequencer failure, users can force transactions to be included on L2 by sending them to L1.\\n** denotes approach of the initial Mantle Network Mainnet version\\nL2 Batch Submitter / Proposer Failure\\nThe Batch Submitter, or Proposer, is responsible for submitting the L2 state and necessary transaction data to L1. In the event it is offline, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\nPropose blocks: Anyone can become a Proposer after X period of inactivity from currently whitelisted Proposers.\\nEscape hatch: Users have the ability to withdraw their funds on L1 by submitting a Merkle proof or ZK proof of funds.\\nNo automated mechanism**: If whitelisted Proposers are offline, withdrawals cannot be processed. In such cases, a new Proposer has to be whitelisted by the L2 core contributor team, potentially involving a DAO governance process. The transition is controlled by the DevOps team with measures in place to minimize downtime.\\n** denotes approach of the initial Mantle Network Mainnet version\\nLast updated 11 months ago\",\n  \"markdown\": \"# Architecture and Roadmap | Network\\n\\nComponents and modules part of Mantle Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nNetwork Architecture\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FFy6C3ovnOVcv0QvxrUsb%252Fupdated%2520architecture%281%29.jpg%3Falt%3Dmedia%26token%3D2a8c7381-f513-4df8-a500-f24d90dd9734&width=768&dpr=4&quality=100&sign=314d62ee&sv=2)\\n\\nThis diagram illustrates how different network modules and components interact with each other going through transaction execution and eventually published updated state data to Ethereum L1, and storing the rollup data on the Mantle Data Availability (DA) powered by EigenDA technology. Let's go over the process of transaction handling to better understand how each module works.\\n\\n1.  Users send signed transactions via an available RPC node.\\n    \\n2.  The Sequencer receives transactions and pack them into blocks. The DTL (Data Transport Layer) service syncs this block data. Verifiers sync the L2 block data from the DTL.\\n    \\n3.  The batch submitter fetches updated state roots and sends them to the Threshold Signature Scheme (TSS) module to be verified and signed. Verifiers can also fetch the state root data and confirm their validity.\\n    \\n4.  Once TSS nodes establish the validity of the updated state roots and sign off on the rollup batches, the batch submitter publishes the state root data to the State Commitment Chain (SCC) contract on L1 Ethereum.\\n    \\n5.  The rollup transaction data is stored on Mantle DA. Verifiers can fetch this data at any point and verify its validity. This action is performed when issuing fraud proof challenges.\\n    \\n6.  Mantle DA nodes also post the validity certificates to L1 guaranteeing liveness and availability with each new batch.\\n    \\n7.  In case the state root validity is challenged with a fraud proof, L2 data is posted to the contract on L1 to perform the execution and check state transition validity.\\n    \\n\\nFor more details on the role played by each network component, check out the [Network Roles](https://docs.mantle.xyz/network/network/for-validators/network-roles) page.\\n\\n## \\n\\nRoadmap\\n\\nThe following table tentatively summarizes our current approach to different network components and actions on L2 and L1 for our initial mainnet version, and other potential implementations that we're considering for future mainnet upgrades.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FgzjikNwNgXcIczY5LQID%252Fimage.png%3Falt%3Dmedia%26token%3D8a2d4f63-c650-4fd3-b35d-07168668ef1f&width=768&dpr=4&quality=100&sign=ad7f177a&sv=2)\\n\\n## \\n\\nFailure Handling\\n\\n### \\n\\nL2 Sequencer Failure\\n\\nIn the event of L2 Sequencing issues, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\n\\n*   **Enqueue via L1\\\\*\\\\*:** Users can submit transactions to an L1 queue, but can't force them. The sequencer can selectively skip transactions, but cannot stop processing the queue entirely. In other words, if the sequencer censors or is down, it affects everyone.\\n    \\n*   **Force via L1:** Users can force sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for X period, users can use the exit hatch to withdraw their funds.\\n    \\n*   **Self Sequence:** In the event of sequencer failure, users can force transactions to be included on L2 by sending them to L1.\\n    \\n\\n_\\\\*\\\\* denotes approach of the initial Mantle Network Mainnet version_\\n\\n### \\n\\n**L2 Batch Submitter / Proposer Failure**\\n\\nThe Batch Submitter, or Proposer, is responsible for submitting the L2 state and necessary transaction data to L1. In the event it is offline, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\n\\n*   **Propose blocks:** Anyone can become a Proposer after X period of inactivity from currently whitelisted Proposers.\\n    \\n*   **Escape hatch:** Users have the ability to withdraw their funds on L1 by submitting a Merkle proof or ZK proof of funds.\\n    \\n*   **No automated mechanism\\\\*\\\\*:** If whitelisted Proposers are offline, withdrawals cannot be processed. In such cases, a new Proposer has to be whitelisted by the L2 core contributor team, potentially involving a DAO governance process. The transition is controlled by the DevOps team with measures in place to minimize downtime.\\n    \\n\\n_\\\\*\\\\* denotes approach of the initial Mantle Network Mainnet version_\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api\",\n    \"loadedTime\": \"2025-02-15T20:32:55.062Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api\",\n    \"title\": \"Mantle Bridge API | Network\",\n    \"description\": \"A guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Bridge API | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"A guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/2q9co3CuKhNg0PZo5Zae\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzVkNDBiOWItOWUyMS00NTM1LThhNjktNDdjMmU5MmU2MjVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ldyiJxRBSE2HMEeJ4%2FGJZOWA4vqIJAz0c0oePtGYlmMlzQNr7uWT%2BJMJ6mc0oawh6ySfPLlyEYxoepY83uQqnTjd0INipSN2GJ9n7yQXioFZKYzIK4DzcZyCJ1NRijbnSgu1dHcYyJl%2FKHJnrImg\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e68b149c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Bridge API | Network\\nA guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nThe Mantle SDK implements methods to make contract calls for both:\\nLocking $MNT/ERC20/ERC721 tokens on Layer 1 (L1) and minting equivalent tokens on Layer 2 (L2)\\nLocking $MNT/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\nUse this link to navigate to our SDK reference docs.\\nBridge Contracts\\nThe Mantle Bridge is composed of two main contracts:\\nSDK Tutorials\\nYou can follow the links below to refer step-by-step guides on how to use the Mantle SDK to bridge assets between Mantle network and Ethereum.\\nDeposits\\n$MNT/$ETH/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\nYou must first approve the Mantle Bridge to use the amount of $MNT/$ETH/ERC20/ERC721 tokens that you are moving to L2, or the deposit will fail.\\n$ETH deposits can alternatively be triggered by sending $ETH directly to the L1StandardBridge. Your account will be funded with the corresponding amount once the transaction is detected and finalized.\\nWithdrawals\\n$MNT/$ETH/ERC20/ERC721 token withdrawals from L2 to the Ethereum mainnet can be triggered using the following SDK methods.\\nAll withdrawals use $MNT for gas fees. \\nToken Type\\nSDK Methods\\nL2 Token Address\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\nThe Token List\\nThe Mantle Bridge allows a one-to-many mapping between L1 and L2 tokens, meaning that there can be multiple Mantle implementations of an L1 token. \\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on the Mantle token list. The token list is used as the source of truth for the Mantle Bridge which is the main portal for moving assets between Layer 1 and Layer 2.\\nAdding a Token to the List\\nIf you want to have your token added to the token list, you'll need to make a pull request against the Mantle token list repository . You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.\\nSending Messages\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Mantle Bridge API | Network\\n\\nA guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nThe Mantle SDK implements methods to make contract calls for both:\\n\\n*   Locking $MNT/ERC20/ERC721 tokens on Layer 1 (L1) and minting equivalent tokens on Layer 2 (L2)\\n    \\n*   Locking $MNT/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\n    \\n\\nUse [this link](https://sdk.mantle.xyz/index.html) to navigate to our SDK reference docs.\\n\\n## \\n\\nBridge Contracts\\n\\nThe Mantle Bridge is composed of two main contracts:\\n\\n## \\n\\nSDK Tutorials\\n\\nYou can follow the links below to refer step-by-step guides on how to use the Mantle SDK to bridge assets between Mantle network and Ethereum.\\n\\n## \\n\\nDeposits\\n\\n$MNT/$ETH/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\n\\nYou must first approve the Mantle Bridge to use the amount of $MNT/$ETH/ERC20/ERC721 tokens that you are moving to L2, or the deposit will fail.\\n\\n$ETH deposits can alternatively be triggered by sending $ETH directly to the [L1StandardBridge](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol). Your account will be funded with the corresponding amount once the transaction is detected and finalized.\\n\\n## \\n\\nWithdrawals\\n\\n$MNT/$ETH/ERC20/ERC721 token withdrawals from L2 to the Ethereum mainnet can be triggered using the following SDK methods.\\n\\nAll withdrawals use $MNT for gas fees.\\n\\nToken Type\\n\\nSDK Methods\\n\\nL2 Token Address\\n\\n`0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`\\n\\n`0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111`\\n\\n## \\n\\nThe Token List\\n\\nThe Mantle Bridge allows a one-to-many mapping between L1 and L2 tokens, meaning that there can be multiple Mantle implementations of an L1 token.\\n\\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on the [Mantle token list](https://token-list.mantle.xyz/mantle.tokenlist.json). The token list is used as the source of truth for the [Mantle Bridge](https://bridge.mantle.xyz/) which is the main portal for moving assets between Layer 1 and Layer 2.\\n\\n### \\n\\nAdding a Token to the List\\n\\nIf you want to have your token added to the token list, you'll need to make a pull request against the [Mantle token list repository](https://github.com/mantlenetworkio/mantle-token-lists) . You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.\\n\\n## \\n\\nSending Messages\\n\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:55.273Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk\",\n    \"title\": \"Thirdweb SDK | Network\",\n    \"description\": \"How to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Thirdweb SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"How to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/ffPSYsAswSfw6iV5raRv\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGI1N2Y3NjEtYjg2NS00ZjcwLTgwZDYtMGNmMDdiNTZiN2Ux' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=1iHWP8xPNyz7iMySXhir59ttP8co2zg4TZ%2F7sIylPqjjzks0Qe7bjqPTvnlPKmQ7D4HwE%2FPfh3uqUXXEt0meTNetP1HTOfoVcEA5FRZzd2Z3O2SlEKhZzjJfcrJOVzCaFUgKm4nZNXoPBE1VGpiM\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e6bd2f2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Thirdweb SDK | Network\\nHow to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\\nLast updated 11 months ago\",\n  \"markdown\": \"# Thirdweb SDK | Network\\n\\nHow to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge\",\n    \"loadedTime\": \"2025-02-15T20:32:55.190Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge\",\n    \"title\": \"Using Mantle Bridge | Network\",\n    \"description\": \"How to deposit and withdraw assets using official Mantle Bridge\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Using Mantle Bridge | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"How to deposit and withdraw assets using official Mantle Bridge\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/1I5t3ta72w0xKeGiPgXz\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2I3NzNjZWEtMDFiMS00M2JmLWFiOWQtMTk1NjBhOWQwZmU3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=uOg8PUvkuYllD1mOckAMcnzt6wYjF7x7CQpC7tKfmaxuVgw4qb5ZNmsORai8CsX3lMJkwq4JwCpOWbUb438lT869Ny9Bhr1Ev89cMWgZTyfUZJqe8L%2FdXNPyEVFZIZoBCNL8GkGIwY8unojR44B4\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e6bb67a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Using Mantle Bridge | Network\\nHow to deposit and withdraw assets using official Mantle Bridge\\nLast updated 11 months ago\",\n  \"markdown\": \"# Using Mantle Bridge | Network\\n\\nHow to deposit and withdraw assets using official Mantle Bridge\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/fetching-test-tokens\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/fetching-test-tokens\",\n    \"loadedTime\": \"2025-02-15T20:32:55.299Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/fetching-test-tokens\",\n    \"title\": \"Fetching Test Tokens | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fetching Test Tokens | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/kcfhkl8BW9sOWIyAGKVh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTVmNGIwZjgtYmMzYy00ZWMyLThlYjgtZTVjM2E2ZmYwMzM4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=vyse0sUamAi8sAYG7Cs2XYN%2FsTHfyhEr7vP1Y8VDDslY6u8QAXkyh3zUnfQccJDZExwrkSngPbVKKu4lxltpuOb2zNpDfIwVP%2FiXOU4%2F4mtGMfkSl2VgoRlfWHa817tePlLnXzHdusEAz09P%2B0Te\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e68da5059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fetching Test Tokens | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nFaucets\\nTo begin transacting on Mantle Testnet, you must acquire Goerli $ETH and testnet $MNT and bridge it across.\\nYou can obtain Goerli $ETH from the following faucets: \\nYou can receive testnet $MNT tokens from the Mantle faucet. \\nMake sure to import the $MNT token to your Goerli wallet to see the current balance. The contract address is 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\nDiscord\\nAlternatively, you can also acquire test $MNT on Goerli from our Discord server. Once you've joined the server, navigate to the #faucet channel and send the following message to receive your test $MNT. \\n$faucet [your erc20 address]\\nYou can make a claim to any ERC-20 address every 4 hours\\nMint $MNT on Goerli via Etherscan\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\nNext, switch your wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\nFind and click on the mint() function in the list on the Etherscan page. It's on no.9.\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Fetching Test Tokens | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nFaucets\\n\\nTo begin transacting on Mantle Testnet, you must acquire Goerli $ETH and testnet $MNT and bridge it across.\\n\\nYou can obtain Goerli $ETH from the following faucets:\\n\\nYou can receive testnet $MNT tokens from the [Mantle faucet](https://faucet.testnet.mantle.xyz/).\\n\\nMake sure to import the $MNT token to your Goerli wallet to see the current balance. The contract address is `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n\\n## \\n\\nDiscord\\n\\nAlternatively, you can also acquire test $MNT on Goerli from our [Discord server](https://discord.gg/0xmantle). Once you've joined the server, navigate to the **#faucet** channel and send the following message to receive your test $MNT.\\n\\n```\\n$faucet [your erc20 address]\\n```\\n\\nYou can make a claim to any ERC-20 address every 4 hours\\n\\n## \\n\\nMint $MNT on Goerli via Etherscan\\n\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\n\\n1.  Next, switch your wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n    \\n\\n3.  Find and click on the `mint()` function in the list on the Etherscan page. It's on no.9.\\n    \\n\\n1.  Now you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\n    \\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/faqs\",\n    \"loadedTime\": \"2025-02-15T20:32:55.494Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/1mY5ebLSu86Hd6Muduey\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YjMzNmM2MTYtY2I3NC00ODQ1LWJhNTMtZWM3NGNiZWQzOTVm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=0eycm%2Bj3LAD1c1anzIMxteErcdJUCKblWrOJtUft8ctMtIk%2Fc6u28ckwTvIDmp1DFSV8bj8iCdAEZDIxp8No5mQsX2k7NjOlZIEIJS0IIp5IlF0ll9TETRRdcamZB9myEceK38Jynk5LTpmG27JK\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e85d659c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nGeneral\\nQ. Can I use Truffle, Hardhat, and Remix to deploy contracts on Mantle Network?\\nYes. All the EVM-compatible Web3 libraries, IDEs, developments frameworks can be used to deploy on and connect to Mantle Network. This includes, but isn't limited to, popular tools such as:\\nQ. What signature algorithm does Mantle Network use?\\nMantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\nQ. What is the block gas limit on Mantle Network?\\nThe block gas limit is currently set to 30,000,000, or 30M units.\\nQ. What's the average block time on Mantle Network?\\nNew blocks are generated on L2 every time a new transaction is received, and each block contains a single transaction. Thus, the block time on Mantle Network depends on the transaction volume at any given time.\\nQ. How does transaction finality work on Mantle Network?\\nTransaction/block finality on L2 is instantaneous\\nTransaction/block finality on L1 connects to the challenge period, which is currently set at 7 days \\nQ. Are fraud proofs online on Mantle Network?\\nAs of mainnet alpha release, fraud proofs are in development. For more details on Mantle Network's implementation, check out the page on Fraud Proofs\\nQ. How does modular data availability bring down transaction costs?\\nThe majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\nQ. Can I fetch DA transaction details with an API?\\nCurrently, the only way see DA transaction history is via the Explorer frontend. Here's the link: https://explorer.mantle.xyz/eigenda-batches\\nQ. Where can I find the brand resources for Mantle Network?\\nYou can access brand resources by following this link.\\nProtocol\\nQ. Do Rollup Verifier nodes verify every piece of block data processed by the Sequencer?\\nYes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\nQ. Do Rollup Verifiers sync rollup data from the Sequencer?\\nNo. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1. \\nQ. Before fraud proofs are online on Mantle Network, what happens if a Rollup Verifier detects that L2 block data doesn't match with the data being submitted to L1?\\nIf Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling here: Failure Handling.\\nSmart Contracts\\nQ. Where can I find multicall contracts on Mantle Network?\\nMainnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\nTestnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\nQ. Does Mantle Network support contract creation using CREATE2 and CREATE3 ?\\nWe currently support CREATE2, and are working on supporting CREATE3 in a future update. Check out the section on opcode differences to learn more.\\nQ. What's the $WMNT token contract address?\\nMainnet:\\n0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8 - Explorer link\\nTestnet:\\n0xa4c4cb2A072eE99f77212Fa18c2B7Ca26DA23905 - Explorer link\\nTransactions\\nQ. What's the transaction lifecycle like on Mantle Network?\\nA wallet or dApp initiates a transaction\\nSequencer executes transaction\\nTSS network signs state roots guaranteeing correctness\\nState root data is posted to L1 Ethereum, transaction data is posted to Mante DA\\nFor a detailed description, check out the page on Transaction Lifecycle\\nQ. I noticed unknown gas fee being deducted from my wallet when sending transactions. Why is that?\\nOur gas oracle API currently only supports fetching L2 gas fee. The extra fee being deducted is the L1 rollup fee. This will be fixed soon in a future update!\\nQ. Why does my transaction fail when I try to send a transaction with the \\\"Max\\\" amount from my wallet?\\nA transaction sent with the \\\"Max\\\" amount fails with an error stating that the transaction is underpriced because our gas oracle currently only supports fetching L2 gas fee estimation, which is why the wallet undercalculates the actual gas fee that needs to paid since it is not including the L1 rollup fee. This issue will be addressed with a future network update. In the meantime, we recommend leaving at least 0.5 $MNT in your wallet to pay for L1 rollup fees. \\nFor example, if you have 10 $MNT in your wallet, please limit the transaction amount to a maximum of 9.5 $MNT for a single transaction.\\nQ. Are there any limits set for batch transaction size?\\nThe maximum batch transaction size is derived from the target gas configuration. Mantle Network is the same as Ethereum in this regard.\\nQ. Are there any limits on the gas price that can be paid when sending transactions on Mantle Network?\\nCurrently, the gas range has been set to 0.05 - 200 Gwei in order to protect users from overpaying gas fees. This limit is active on Mantle Mainnet, and will soon be applied to testnet as well.\\nQ. Does Mantle Network support EIP-1559?\\nCurrently, Mantle Network does NOT support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in.\\nQ. Does Mantle Network support transactions that aren't signed with the chain ID?\\nNo, Mantle Network does not support pre-EIP155 transactions that aren't signed with the chain ID.\\nExplorer\\nQ. Does the RPC rate limit affect Explorer API usage too?\\nYes. Once the RPC rate limit is reached, access to Explorer API will also be limited.\\nNode operators\\nQ. How big is the current testnet state?\\nYou can find details on this subject here:\",\n  \"markdown\": \"# FAQs | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nGeneral\\n\\n### \\n\\nQ. Can I use Truffle, Hardhat, and Remix to deploy contracts on Mantle Network?\\n\\nYes. All the EVM-compatible Web3 libraries, IDEs, developments frameworks can be used to deploy on and connect to Mantle Network. This includes, but isn't limited to, popular tools such as:\\n\\n### \\n\\nQ. What signature algorithm does Mantle Network use?\\n\\nMantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\n\\n### \\n\\nQ. What is the block gas limit on Mantle Network?\\n\\nThe block gas limit is currently set to 30,000,000, or 30M units.\\n\\n### \\n\\nQ. What's the average block time on Mantle Network?\\n\\nNew blocks are generated on L2 every time a new transaction is received, and each block contains a single transaction. Thus, the block time on Mantle Network depends on the transaction volume at any given time.\\n\\n### \\n\\nQ. How does transaction finality work on Mantle Network?\\n\\n*   Transaction/block finality on L2 is instantaneous\\n    \\n*   Transaction/block finality on L1 connects to the challenge period, which is currently set at 7 days\\n    \\n\\n### \\n\\nQ. Are fraud proofs online on Mantle Network?\\n\\nAs of mainnet alpha release, fraud proofs are **in development**. For more details on Mantle Network's implementation, check out the page on [Fraud Proofs](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs)\\n\\n### \\n\\nQ. How does modular data availability bring down transaction costs?\\n\\nThe majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\n\\n### \\n\\nQ. Can I fetch DA transaction details with an API?\\n\\nCurrently, the only way see DA transaction history is via the Explorer frontend. Here's the link: [https://explorer.mantle.xyz/eigenda-batches](https://explorer.mantle.xyz/eigenda-batches)\\n\\n### \\n\\nQ. Where can I find the brand resources for Mantle Network?\\n\\nYou can access brand resources by following [this link](https://drive.google.com/drive/folders/1GGyOmob0i86mEUqBTPvZLAhgnzt3Oxaa).\\n\\n## \\n\\nProtocol\\n\\n### \\n\\nQ. Do Rollup Verifier nodes verify every piece of block data processed by the Sequencer?\\n\\nYes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\n\\n### \\n\\nQ. Do Rollup Verifiers sync rollup data from the Sequencer?\\n\\nNo. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1.\\n\\n### \\n\\nQ. Before fraud proofs are online on Mantle Network, what happens if a Rollup Verifier detects that L2 block data doesn't match with the data being submitted to L1?\\n\\nIf Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling here: [Failure Handling](https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap#failure-handling).\\n\\n## \\n\\nSmart Contracts\\n\\n### \\n\\nQ. Where can I find multicall contracts on Mantle Network?\\n\\n*   Mainnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\n    \\n*   Testnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\n    \\n\\n### \\n\\nQ. Does Mantle Network support contract creation using CREATE2 and CREATE3 ?\\n\\nWe currently support CREATE2, and are working on supporting CREATE3 in a future update. Check out the section on [opcode differences](https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle#opcode-differences-between-evm-and-mantle-vm) to learn more.\\n\\n### \\n\\nQ. What's the $WMNT token contract address?\\n\\n**Mainnet:**\\n\\n`0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8` - [Explorer link](https://explorer.mantle.xyz/address/0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8)\\n\\nTestnet:\\n\\n`0xa4c4cb2A072eE99f77212Fa18c2B7Ca26DA23905` - [Explorer link](https://explorer.testnet.mantle.xyz/address/0xa4c4cb2A072eE99f77212Fa18c2B7Ca26DA23905)\\n\\n## \\n\\nTransactions\\n\\n### \\n\\nQ. What's the transaction lifecycle like on Mantle Network?\\n\\n1.  A wallet or dApp initiates a transaction\\n    \\n2.  Sequencer executes transaction\\n    \\n3.  TSS network signs state roots guaranteeing correctness\\n    \\n4.  State root data is posted to L1 Ethereum, transaction data is posted to Mante DA\\n    \\n\\nFor a detailed description, check out the page on [Transaction Lifecycle](https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle)\\n\\n### \\n\\nQ. I noticed unknown gas fee being deducted from my wallet when sending transactions. Why is that?\\n\\nOur gas oracle API currently only supports fetching L2 gas fee. The extra fee being deducted is the L1 rollup fee. This will be fixed soon in a future update!\\n\\n### \\n\\nQ. Why does my transaction fail when I try to send a transaction with the \\\"Max\\\" amount from my wallet?\\n\\nA transaction sent with the \\\"Max\\\" amount fails with an error stating that the transaction is underpriced because our gas oracle currently only supports fetching L2 gas fee estimation, which is why the wallet undercalculates the actual gas fee that needs to paid since it is not including the L1 rollup fee. This issue will be addressed with a future network update. In the meantime, we recommend leaving at least 0.5 $MNT in your wallet to pay for L1 rollup fees.\\n\\nFor example, if you have 10 $MNT in your wallet, please limit the transaction amount to a maximum of 9.5 $MNT for a single transaction.\\n\\n### \\n\\nQ. Are there any limits set for batch transaction size?\\n\\nThe maximum batch transaction size is derived from the target gas configuration. Mantle Network is the same as Ethereum in this regard.\\n\\n### \\n\\nQ. Are there any limits on the gas price that can be paid when sending transactions on Mantle Network?\\n\\nCurrently, the gas range has been set to 0.05 - 200 Gwei in order to protect users from overpaying gas fees. This limit is active on Mantle Mainnet, and will soon be applied to testnet as well.\\n\\n### \\n\\nQ. Does Mantle Network support EIP-1559?\\n\\nCurrently, Mantle Network does **NOT** support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in.\\n\\n### \\n\\nQ. Does Mantle Network support transactions that aren't signed with the chain ID?\\n\\nNo, Mantle Network does not support pre-[EIP155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md) transactions that aren't signed with the chain ID.\\n\\n## \\n\\nExplorer\\n\\n### \\n\\nQ. Does the RPC rate limit affect Explorer API usage too?\\n\\nYes. Once the RPC rate limit is reached, access to Explorer API will also be limited.\\n\\n## \\n\\nNode operators\\n\\n### \\n\\nQ. How big is the current testnet state?\\n\\nYou can find details on this subject here:\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/connecting-wallet-to-mantle-network\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"loadedTime\": \"2025-02-15T20:32:55.379Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"title\": \"Connecting Wallet to Mantle Network | Network\",\n    \"description\": \"Adding Mantle Network configuration and the $MNT token to your wallet\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Connecting Wallet to Mantle Network | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Adding Mantle Network configuration and the $MNT token to your wallet\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/8SJzFIqbxB556MIDhtqf\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGRkZWRmYWItYjQzZi00YjYwLWJhNDEtMzE2MTI5MDM2ZTU0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lWJrJpsVY%2FYek5lGCYb3NqhbIJXSepMF19NNYr65DyMPkA0bvRGgfyoRhETBlGDWOEScGlCZRXeJL1lZFMpjrclWw5O%2BHPt9yin1A8MKkHgYx8kwDh9wvSwlPRYbmB%2FYmPCqulsKYV2qHwfQF9tb\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e6bce682e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Connecting Wallet to Mantle Network\\nAdding Mantle Network configuration and the $MNT token to your wallet\\nLast updated 11 months ago\",\n  \"markdown\": \"# Connecting Wallet to Mantle Network\\n\\nAdding Mantle Network configuration and the $MNT token to your wallet\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/multisig-wallet\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/multisig-wallet\",\n    \"loadedTime\": \"2025-02-15T20:32:55.573Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/multisig-wallet\",\n    \"title\": \"Multisig Wallet | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Multisig Wallet | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VC98TX69DIsTfN2zBtbB\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzUyNGMxOWMtODA5YS00ZjEyLThhNzAtMmU3MDA1ZjcxMDg0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=TUUHPcRBFjbIT9IwN7sL6UY4%2FM%2FeBBi0RgPI3h0%2FvBXB%2FGKLbu418dzIknN8apHAsySRN%2BRn8Wkbozoq%2FZyxpWlAI2PeaqJjs1TSrJTVqR3AJWrVrEN%2BGM3RNyNVoKb6aaLw4Ipefo7cbBFzGp0q\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e69e3d3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Multisig Wallet | Network\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Multisig Wallet | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node\",\n    \"loadedTime\": \"2025-02-15T20:32:57.676Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node\",\n    \"title\": \"Deploy a Node | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploy a Node | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/FZehKFHgP6PAb740kWBC\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDc5MzJkNWUtMTU4My00MjE3LWEyYjQtMDlmZDM4YzhjOWU2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=d%2FWD7HrW72B%2BFVziwBISFU31K4%2B7hVIlTI8f97X%2FVmSTORQnLW9a1o9ATLNcrrXMEZEXb33aDJ1NuE6ojz4CezXCbMAN784djPjrQiW2srhzXKRfB2G9xo4zLo7YTEEVQayvplaBwGn5Tp7sq%2Bu1\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f719a5059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploy a Node | Network\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Deploy a Node | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-roles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-roles\",\n    \"loadedTime\": \"2025-02-15T20:32:57.967Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-roles\",\n    \"title\": \"Network Roles | Network\",\n    \"description\": \"Understanding the network protocol through its active participants\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Roles | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Understanding the network protocol through its active participants\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/78ck2OordEWylUgQSIZu\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:56 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTVmN2Y1NzItMWZlZi00Njc0LTgyYzktZjVkNjIzZmFkNzYw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=PsFSnpFrYRXLSk8jy5OruuE6ico1XlCV8mg88%2B3zwwIzkDaQw6AndNAUCMOwF%2B29fvlkO7qYh2Fm2ovLeONtLGNHBdT9wBKdjW9akD6TKFqHmFJKQMNOCExZ%2FsmXs0F2S66X10ULFLeDEgafHNmn\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f2eb203b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Roles | Network\\nUnderstanding the network protocol through its active participants\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nDefining Network Roles\\nThere are currently four roles for nodes on Mantle network, namely Sequencers, Threshold Signature Scheme (TSS) nodes, Rollup Verifiers/Replica Nodes, and Data Availability (DA) nodes. Here's a simple description of their responsibilities.\\nSequencers\\nReceive and record transactions sent by users in real time\\nProduce blocks on L2\\nRollup transactions to generate batches with execution state roots\\nGet blocks validated by the TSS module\\nBroadcast block data across the network (L1 and L2)\\nIn the initial phases of release, Mantle core team will operate its own centralized Sequencer. However, as part of our roadmap we will be decentralizing the Sequencer eventually, creating another opportunity for nodes to contribute to Mantle.\\nThreshold Signature Scheme (TSS) Nodes\\n\\\"Sign off\\\" transaction batches produced by Sequencers to be sent to L1\\nBroadcast batches across the L2 network after verification\\nTSS nodes verify the state roots generated by Sequencers to determine their correctness. The state roots MUST be signed by a TSS node before they are sent to Ethereum to be recorded.\\nDuring the initial phases of release, TSS nodes are run by a group of reputable institutions, but will eventually be voted in via Mantle governance permissionlessly.\\nRollup Verifiers / Replica Nodes\\nSync rollup data from Mantle's trusted sequencer\\nVerify the state roots submitted by Sequencers on L2\\nInitiate fraud proofs when invalid state data is found\\nServe rollup data to users\\nFraud proofs are a part of our roadmap and the feature will be added eventually via a Mainnet upgrade.\\nDA Nodes\\nOpt into taking the responsibility of storing a copy of Mantle transaction data to have it ready for access whenever necessary\\nMake a commitment by signing the block data they provide using the BLS signature scheme guaranteeing its usability. These signatures are verified by an EigenDA contract on Ethereum\\nMantle DA powered by EigenDA technology consists of a set of supported interactions between four major components as described below.\\nOperators\\nThe service providers of the DA network and need to confirm their commitment through digital signatures, which place staked assets as a collateral guarantee on their participation. An Operator carries out the following tasks:\\nRun nodes which store chunks of data for a pre-defined time period and serve these chunks upon request\\nDispersers\\nThey're the users of Mantle DA's data availability service, paying for its economic guarantees of data availability. This role may be played by a rollup Sequencer. A Disperser performs the following tasks:\\nEncodes its data into chunks, posts funds for making the data available for a fixed amount of time, and distributes the encoded chunks to Mantle DA operators\\nAggregates signatures from the operators and posts an attestation to the blockchain, confirming availability of the data of interest for the specified time period\\nChallengers\\nThey're interested parties who play an important role in the Proof of Custody protocol. Challengers perform the following tasks:\\nMonitor certain verifiable operations of the protocol (which in the optimistic case are not verified or resolved on-chain) \\nPermissionlessly force problematic operations to be resolved on-chain, resulting in an operator’s stake being slashed\\nThe Proof of Custody protocol is in development stage and will go online with a future Mainnet upgrade.\\nMantleLayer and MantleDA Smart Contracts\\nThe collection of DA-related smart contracts running on Ethereum take care of the following:\\nEnsure that data is only accepted as available when a group of operators having a sufficient amount of stake has collectively signed\\nImplement the proof-of-custody protocol and provide mechanisms for a challenger to disclose data on chain\\nVerify the validity of data submitted by Challengers against a signed commitment, and enact slashing as dictated by the proof-of-custody protocol\\nThe data storage process on Mantle DA is as follows:\\nEncoding: Disperser encodes data chunks and generates KZG multireveal proofs which will allow Operators to verify the correctness of their chunk.\\nDispersal: Disperser sends data chunks to respective DA Operators\\nAttestation: Operators verify their chunks against the global commitment. If the verification is successful, the Operator proceeds to store their chunk of data for the duration specified by the Disperser and sends back an attestation\\nAggregation: If enough signatures are received, the Disperser aggregates the signatures and publishes them to L1 Ethereum.\\nWhy Run a Rollup Verifier Node?\\nThere are multiple advantages of running a Rollup Verifier node.\\nIt grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions locally without rate-limiting (public RPCs may face such limitations).\\nAllows anyone to verify the work performed by Sequencers by re-deriving output roots and comparing them against those submitted by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mainnet.\\ndApp builders are encouraged to consider the value addition of running a Rollup Verifier node given that the overhead costs tend to be low.\\nThe diagram below illustrates how the Sequencer and Rollup Verifier fit together. Note that actions in red are performed by a Sequencer, while actions in blue are performed by a Rollup Verifier:\\nLast updated 11 months ago\",\n  \"markdown\": \"# Network Roles | Network\\n\\nUnderstanding the network protocol through its active participants\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nDefining Network Roles\\n\\nThere are currently four roles for nodes on Mantle network, namely **Sequencers**, **Threshold Signature Scheme (TSS) nodes**, **Rollup Verifiers/Replica Nodes, and Data Availability (DA) nodes**. Here's a simple description of their responsibilities.\\n\\n### \\n\\nSequencers\\n\\n*   Receive and record transactions sent by users in real time\\n    \\n*   Produce blocks on L2\\n    \\n*   Rollup transactions to generate batches with execution state roots\\n    \\n*   Get blocks validated by the TSS module\\n    \\n*   Broadcast block data across the network (L1 and L2)\\n    \\n\\nIn the initial phases of release, Mantle core team will operate its own centralized Sequencer. However, as part of our roadmap we will be decentralizing the Sequencer eventually, creating another opportunity for nodes to contribute to Mantle.\\n\\n### \\n\\nThreshold Signature Scheme (TSS) Nodes\\n\\n*   \\\"Sign off\\\" transaction batches produced by Sequencers to be sent to L1\\n    \\n*   Broadcast batches across the L2 network after verification\\n    \\n\\nTSS nodes verify the state roots generated by Sequencers to determine their correctness. The state roots **MUST** be signed by a TSS node before they are sent to Ethereum to be recorded.\\n\\nDuring the initial phases of release, TSS nodes are run by a group of reputable institutions, but will eventually be voted in via Mantle governance permissionlessly.\\n\\n### \\n\\nRollup Verifiers / Replica Nodes\\n\\n*   Sync rollup data from Mantle's trusted sequencer\\n    \\n*   Verify the state roots submitted by Sequencers on L2\\n    \\n*   Initiate fraud proofs when invalid state data is found\\n    \\n*   Serve rollup data to users\\n    \\n\\nFraud proofs are a part of our [roadmap](https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap#roadmap) and the feature will be added eventually via a Mainnet upgrade.\\n\\n### \\n\\nDA Nodes\\n\\n*   Opt into taking the responsibility of storing a copy of Mantle transaction data to have it ready for access whenever necessary\\n    \\n*   Make a commitment by signing the block data they provide using the [BLS signature scheme](https://en.wikipedia.org/wiki/BLS_digital_signature) guaranteeing its usability. These signatures are verified by an EigenDA contract on Ethereum\\n    \\n\\nMantle DA powered by EigenDA technology consists of a set of supported interactions between four major components as described below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FAsnGr1cXLy9Og1JIVxE8%252Fupdated%2520da%2520interaction.jpg%3Falt%3Dmedia%26token%3D1718a0e4-4941-4255-a886-c8c5af2fdfef&width=768&dpr=4&quality=100&sign=4935a0e1&sv=2)\\n\\n#### \\n\\nOperators\\n\\nThe service providers of the DA network and need to confirm their commitment through digital signatures, which place staked assets as a collateral guarantee on their participation. An Operator carries out the following tasks:\\n\\n*   Run nodes which store chunks of data for a pre-defined time period and serve these chunks upon request\\n    \\n\\n#### \\n\\nDispersers\\n\\nThey're the users of Mantle DA's data availability service, paying for its economic guarantees of data availability. This role may be played by a rollup [Sequencer](https://docs.mantle.xyz/network/network/for-validators/network-roles#sequencers). A Disperser performs the following tasks:\\n\\n*   Encodes its data into chunks, posts funds for making the data available for a fixed amount of time, and distributes the encoded chunks to Mantle DA operators\\n    \\n*   Aggregates signatures from the operators and posts an attestation to the blockchain, confirming availability of the data of interest for the specified time period\\n    \\n\\n#### \\n\\nChallengers\\n\\nThey're interested parties who play an important role in the Proof of Custody protocol. Challengers perform the following tasks:\\n\\n*   Monitor certain verifiable operations of the protocol (which in the optimistic case are not verified or resolved on-chain)\\n    \\n*   Permissionlessly force problematic operations to be resolved on-chain, resulting in an operator’s stake being slashed\\n    \\n\\nThe Proof of Custody protocol is in development stage and will go online with a future Mainnet upgrade.\\n\\n#### \\n\\n`MantleLayer` and `MantleDA` Smart Contracts\\n\\nThe collection of DA-related smart contracts running on Ethereum take care of the following:\\n\\n*   Ensure that data is only accepted as available when a group of operators having a sufficient amount of stake has collectively signed\\n    \\n*   Implement the proof-of-custody protocol and provide mechanisms for a challenger to disclose data on chain\\n    \\n*   Verify the validity of data submitted by Challengers against a signed commitment, and enact slashing as dictated by the proof-of-custody protocol\\n    \\n\\nThe data storage process on Mantle DA is as follows:\\n\\n1.  Encoding: Disperser encodes data chunks and generates KZG multireveal proofs which will allow Operators to verify the correctness of their chunk.\\n    \\n2.  Dispersal: Disperser sends data chunks to respective DA Operators\\n    \\n3.  Attestation: Operators verify their chunks against the global commitment. If the verification is successful, the Operator proceeds to store their chunk of data for the duration specified by the Disperser and sends back an attestation\\n    \\n4.  Aggregation: If enough signatures are received, the Disperser aggregates the signatures and publishes them to L1 Ethereum.\\n    \\n\\n## \\n\\n**Why Run a Rollup Verifier Node?**\\n\\nThere are multiple advantages of running a Rollup Verifier node.\\n\\n1.  It grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions locally **without rate-limiting** (public RPCs may face such limitations)**.**\\n    \\n2.  Allows anyone to verify the work performed by Sequencers by **re-deriving output roots** and **comparing** them against those submitted by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mainnet.\\n    \\n\\n**dApp builders** are encouraged to consider the value addition of running a Rollup Verifier node given that the overhead costs tend to be low.\\n\\nThe diagram below illustrates how the Sequencer and Rollup Verifier fit together. Note that actions in red are performed by a **Sequencer**, while actions in blue are performed by a **Rollup Verifier**:\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api\",\n    \"loadedTime\": \"2025-02-15T20:32:57.863Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api\",\n    \"title\": \"Covalent Data Indexing API | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Covalent Data Indexing API | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/wZPzcTKJKBHAnj65yr7c\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YmY0ZjIxZGYtMGY4YS00Mjk1LTkzZDAtOWM5ZThjNDViZjUz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=fk4JHh4yrH%2FlZPvLtkqgBh9V9Qtw8VlLvBjESyXh5RGEJywjqtzsg%2FrmUeqdmdGKkwKgzO0x8UX6PNqqq6H%2B9pE4uotl2C2dEA9dBhXjIW6vdChqceRRUXTcYOZdniND5nUnoWpCTtS0n0Hj3Y2Z\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f2fb5e82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Covalent Data Indexing API | Network\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Covalent Data Indexing API | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging\",\n    \"loadedTime\": \"2025-02-15T20:32:58.285Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging\",\n    \"title\": \"Cross-chain Messaging | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Cross-chain Messaging | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/W1ZRdv9KNQ9Hk1bCqXKq\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OWYyNjFhYzEtOTc5Mi00ZjE5LWJlMjktNjVhYWZjYWQ2ZTI0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=0d2BLR%2FZtN5KiVw5ML1FvcupocH2YiYwGRNpVCCcGaQcXjh5SKfoLLLLqQdIzUU6NEiGQdYHIu4BGn7mpcfMbcVlgAqUePK4T7ZgZAd4okd55RZt4YXdhP5rWvgE9N%2FXfMWh3dLeSULC%2FIltTEj8\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fa5b913b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Cross-chain Messaging | Network\\nLayerZero\\nLayerZero is an omnichain interoperability protocol that enables cross-chain messaging. Applications built on Mantle Network can use the LayerZero protocol to connect to 35+ supported blockchains seamlessly. \\nLayerZero Endpoint has been deployed on Mantle Network, and developers building on Mantle can leverage the LayerZero protocol to build cross-chain capabilities. LayerZero’s Endpoint ULNv2 validation library relies on two parties, the Oracle and Relayer, to transfer messages between on-chain endpoints. When LayerZero sends a message from Mantle to chain X, the message is routed through the endpoint on Mantle to the ULNv2 validation library. The ULNv2 library notifies the Oracle and Relayer of the message and its destination chain X. The Oracle forwards the packet hash to the endpoint on chain X, and the Relayer submits the packet to be verified on-chain against the hash and delivers the message.\\nAs a developer, LayerZero Endpoint is the only interface for your User Application (UA). The Endpoint allows UAs to configure the Messaging Library for sending and receiving verified messages and guarantees the message-delivering ordering across all messaging libraries.\\nSend(): the message will be sent through the endpoint first and then redirected to the UA-configured Messaging Library.\\nReceive(): the message will be verified at the Messaging Library first then forwarded to the endpoint and eventually delivered to the UA. \\nLinks\\nFind examples on LayerZero's Github.\\nAxelar\\nAxelar is a decentralized cross-chain communication network that enables interoperability by connecting different heterogenous chains. It is secured by a Proof-of-Stake (PoS) consensus mechanism and can enable asset transfer and message passing between chains by allowing contracts to interact with each other using General Message Passing (GMP).\\nSquid x Axelar\\nSquid is the cross-chain swap and liquidity routing protocol on Axelar Network. It supports canonically swapping and sending any native token between chains. Swaps are composable with Axelar's generalized message passing, so Squid can enable one-click transactions between any application and any user, using any asset. This can be done using Squid's TS SDK, the Squid web app, or the contracts directly.\\nLinks\\nAxelar\\nSee examples of how to use Axelar to implement common dApp use cases in an EVM environment in this GitHub repo.\\nYou can find more descriptive guides in the Axelar dev docs:\\nOther reference material can also be found in the Axelar dev docs:\\nIf you're looking for support:\\nSquid\",\n  \"markdown\": \"# Cross-chain Messaging | Network\\n\\n## \\n\\nLayerZero\\n\\n[LayerZero](https://layerzero.gitbook.io/docs/) is an omnichain interoperability protocol that enables cross-chain messaging. Applications built on Mantle Network can use the LayerZero protocol to connect to 35+ supported blockchains seamlessly.\\n\\nLayerZero Endpoint has been deployed on Mantle Network, and developers building on Mantle can leverage the LayerZero protocol to build cross-chain capabilities. LayerZero’s Endpoint ULNv2 validation library relies on two parties, the Oracle and Relayer, to transfer messages between on-chain endpoints. When LayerZero sends a message from Mantle to chain X, the message is routed through the endpoint on Mantle to the ULNv2 validation library. The ULNv2 library notifies the Oracle and Relayer of the message and its destination chain X. The Oracle forwards the packet hash to the endpoint on chain X, and the Relayer submits the packet to be verified on-chain against the hash and delivers the message.\\n\\nAs a developer, LayerZero Endpoint is the only interface for your User Application (UA). The Endpoint allows UAs to configure the Messaging Library for sending and receiving verified messages and guarantees the message-delivering ordering across all messaging libraries.\\n\\n*   `Send()`: the message will be sent through the endpoint first and then redirected to the UA-configured Messaging Library.\\n    \\n*   `Receive()`: the message will be verified at the Messaging Library first then forwarded to the endpoint and eventually delivered to the UA.\\n    \\n\\n### \\n\\nLinks\\n\\n*   Find examples on LayerZero's [Github](https://github.com/LayerZero-Labs/solidity-examples).\\n    \\n\\n## \\n\\nAxelar\\n\\n[Axelar](https://docs.axelar.dev/) is a decentralized cross-chain communication network that enables interoperability by connecting different heterogenous chains. It is secured by a Proof-of-Stake (PoS) consensus mechanism and can enable asset transfer and message passing between chains by allowing contracts to interact with each other using [General Message Passing (GMP)](https://docs.axelar.dev/dev/general-message-passing/overview).\\n\\n### \\n\\nSquid x Axelar\\n\\nSquid is the cross-chain swap and liquidity routing protocol on [Axelar Network](https://axelar.network/). It supports canonically swapping and sending any native token between chains. Swaps are composable with Axelar's generalized message passing, so Squid can enable _one-click_ transactions between any application and any user, using any asset. This can be done using [Squid's TS SDK](https://www.npmjs.com/package/@0xsquid/sdk), the [Squid web app](https://app.squidrouter.com/), or the contracts directly.\\n\\n### \\n\\nLinks\\n\\n#### \\n\\nAxelar\\n\\n*   See examples of how to use Axelar to implement common dApp use cases in an EVM environment in this [GitHub repo](https://github.com/axelarnetwork/axelar-examples/blob/main/examples/evm/README.md).\\n    \\n*   You can find more descriptive guides in the Axelar dev docs:\\n    \\n*   Other reference material can also be found in the Axelar dev docs:\\n    \\n\\n*   If you're looking for support:\\n    \\n\\n#### \\n\\nSquid\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates\",\n    \"loadedTime\": \"2025-02-15T20:32:58.352Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates\",\n    \"title\": \"Network Updates | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Updates | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JLhGcGX5qnQrpzfea544\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWUxNDM0MzktZTJkNi00MDViLWJlMDgtNTIxYzVhZmU5ZTdm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=UG79%2BJnblkcKnnYrhslY6A3zaHI45YnFzqyAMzXu8E48bdu406xmWtC2RqV5%2BGH3hpWQWjpqzKinqmAkQMw%2FW1IaQkad6qUtwk%2BU7UNU9YzFfsucd%2ByQZYYK6z0IYG2OFuoI%2FHyYZFBtydydkF%2Fu\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fb5d0a82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Updates | Network\\nTestnet v0.4.3Testnet v0.4.0Testnet v0.3.2\\nPreviousDeploying a Rollup Verifier/Replica NodeNextTestnet v0.4.3\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Network Updates | Network\\n\\n[Testnet v0.4.3](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3)[Testnet v0.4.0](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0)[Testnet v0.3.2](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2)\\n\\n[PreviousDeploying a Rollup Verifier/Replica Node](https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node)[NextTestnet v0.4.3](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3)\\n\\nLast updated 1 year ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node\",\n    \"loadedTime\": \"2025-02-15T20:32:58.235Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node\",\n    \"title\": \"Deploying a Rollup Verifier/Replica Node | Network\",\n    \"description\": \"Deploy a verifier node and sync rollup data as a part of Mantle network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Rollup Verifier/Replica Node | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Deploy a verifier node and sync rollup data as a part of Mantle network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JnSZfB8IQqS1sZmQ1oqi\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2E0ZWVjN2UtZjQ2MC00YjNlLTllNGEtNTUwOWI5NGJhMjg5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=m8aue8pekzPMTeq42AX5uo0BzypKgmg8zap87rmFM9WzrXgXzDz8m3RohM%2B4W0rucjo6L0gPZd2zG686RiGxfjpoVIoLt3Ru7uGSE2HpsXqWb2M3dxjeGK8ff%2B%2BDT7Wm1U5aHctDsVPgGvdLGuDu\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f8fbda059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Rollup Verifier/Replica Node\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nIn order to build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\nRunning Your Own Node\\nIf you run a node, please keep a close eye on the latest update on our GitHub Release page\\nHardware Requirements\\nNodes need to store the transaction history of Mantle and run l2geth. \\nRecommended specs:\\nCPU - min. 4 cores, 8th Gen. or higher\\nRAM - min. 16 GB\\nStorage - min. 100 GB disk space free (HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download\\nApproximate Disk Usage\\nUsage as of 2022-09-21:\\nArchive node: ~800gb\\nFull node: ~60gb\\nSnapshot\\nWe recommend that you start the node with the latest snapshot, so that you don't need to wait a long time to sync data.\\nDeployment\\nThe recommended method to create a replica is to use Docker and the Docker images we provide. They include all the configuration settings. We use these images for our own systems, and as such they will be more thoroughly tested than any other configuration.\\nNode Configuration\\nYou can find instructions to build and operate your node on Mantle testnet and mainnet by following the links below:\\nTo compile a Mantle node locally and participate in the network as a Verifier, follow these steps:\\n1. Install Go and C Compiler\\nMake sure Go (version 1.19) and a C compiler are installed on your system. You can use your preferred package manager (e.g., apt, yum, brew) to install them.\\n2. Clone the Mantle Repository\\nClone the Mantle GitHub repository using the following command:\\ngit clone https://github.com/mantlenetworkio/mantle.git\\n3. Navigate to the l2geth Directory\\nNavigate to the l2geth directory within the Mantle repository:\\n4. Compile the Mantle Geth Node\\nChoose a stable release here and compile the Mantle Geth node using the Makefile with the following command:\\ngit checkout v0.4.3-5 make geth\\n5. Setup the environment\\ngit clone https://github.com/mantlenetworkio/networks.git cd networks cd mainnet/envs set -a . ./geth.env set +a mkdir ~/mantle_l2geth_data cd ../.. export ETH1_HTTP=https://rpc.ankr.com/eth # change this export SEQUENCER_CLIENT_HTTP=https://rpc.mantle.xyz export ROLLUP_STATE_DUMP_PATH=https://mantlenetworkio.github.io/networks/mainnet/genesis.json export ROLLUP_CLIENT_HTTP=https://dtl.mantle.xyz export ROLLUP_BACKEND='l2' export ETH1_CTC_DEPLOYMENT_HEIGHT=8 export RETRIES=60 export ROLLUP_VERIFIER_ENABLE='true' export DATADIR=~/mantle_l2geth_data cp ../mantle/l2geth/build/bin/geth . export PATH=$PATH:$(pwd)\\nYou need to change ETH1_HTTP to your own rpc\\nYou need to change DATADIR to where you want to store data\\nIf the sync speed is slow, try to change your DTL URL, you can check more details here.\\nStart as a Verifier\\nStart the node as a Verifier to join the Mantle network:\\nThis command launches a local node configured as a Verifier to participate in the validation process within Mantle network.\\nAppendix\\nNetwork DTL URL\\nYou can change the DTL service URL based on the network your node is going to connect to by updating the ROLLUP_CLIENT_HTTP value in the docker-compose.yml file for the Docker way and the ./mainnet/envs/geth.env for the binary way.\",\n  \"markdown\": \"# Deploying a Rollup Verifier/Replica Node\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nIn order to build an app on Mantle network, you'll need access to a Mantle node. There are multiple public [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers) that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\n\\n## \\n\\nRunning Your Own Node\\n\\nIf you run a node, please keep a close eye on the latest update on our [GitHub Release](https://github.com/mantlenetworkio/mantle/releases) page\\n\\n#### \\n\\n**Hardware Requirements**\\n\\nNodes need to store the transaction history of Mantle and run `l2geth`.\\n\\nRecommended specs:\\n\\n*   **CPU** \\\\- min. 4 cores, 8th Gen. or higher\\n    \\n*   **RAM** - min. 16 GB\\n    \\n*   **Storage** - min. 100 GB disk space free (HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download\\n    \\n\\n#### \\n\\nApproximate Disk Usage\\n\\nUsage as of 2022-09-21:\\n\\n*   Archive node: ~800gb\\n    \\n*   Full node: ~60gb\\n    \\n\\n#### \\n\\nSnapshot\\n\\nWe recommend that you start the node with the latest [snapshot](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnet.md#download-latest-snapshot-from-mantle), so that you don't need to wait a long time to sync data.\\n\\n### \\n\\nDeployment\\n\\nThe recommended method to create a replica is to use [Docker](https://www.docker.com/) and the [Docker images we provide](https://hub.docker.com/u/mantlenetworkio). They include all the configuration settings. We use these images for our own systems, and as such they will be more thoroughly tested than any other configuration.\\n\\n#### \\n\\nNode Configuration\\n\\nYou can find instructions to build and operate your node on Mantle testnet and mainnet by following the links below:\\n\\nTo compile a Mantle node locally and participate in the network as a Verifier, follow these steps:\\n\\n#### \\n\\n1\\\\. Install Go and C Compiler\\n\\nMake sure Go (version 1.19) and a C compiler are installed on your system. You can use your preferred package manager (e.g., apt, yum, brew) to install them.\\n\\n#### \\n\\n2\\\\. Clone the Mantle Repository\\n\\nClone the Mantle GitHub repository using the following command:\\n\\n```\\ngit clone https://github.com/mantlenetworkio/mantle.git\\n```\\n\\n#### \\n\\n3\\\\. Navigate to the `l2geth` Directory\\n\\nNavigate to the `l2geth` directory within the Mantle repository:\\n\\n#### \\n\\n4\\\\. Compile the Mantle Geth Node\\n\\nChoose a stable release here and compile the Mantle Geth node using the Makefile with the following command:\\n\\n```\\ngit checkout v0.4.3-5\\nmake geth\\n```\\n\\n#### \\n\\n5\\\\. Setup the environment\\n\\n```\\ngit clone https://github.com/mantlenetworkio/networks.git\\ncd networks\\ncd mainnet/envs\\nset -a\\n. ./geth.env\\nset +a \\nmkdir ~/mantle_l2geth_data\\ncd ../..\\nexport ETH1_HTTP=https://rpc.ankr.com/eth # change this\\nexport SEQUENCER_CLIENT_HTTP=https://rpc.mantle.xyz\\nexport ROLLUP_STATE_DUMP_PATH=https://mantlenetworkio.github.io/networks/mainnet/genesis.json\\nexport ROLLUP_CLIENT_HTTP=https://dtl.mantle.xyz\\nexport ROLLUP_BACKEND='l2'\\nexport ETH1_CTC_DEPLOYMENT_HEIGHT=8\\nexport RETRIES=60\\nexport ROLLUP_VERIFIER_ENABLE='true'\\nexport DATADIR=~/mantle_l2geth_data\\n\\ncp ../mantle/l2geth/build/bin/geth .\\nexport PATH=$PATH:$(pwd)\\n```\\n\\n1.  You need to change `ETH1_HTTP` to your own rpc\\n    \\n2.  You need to change `DATADIR` to where you want to store data\\n    \\n3.  If the sync speed is slow, try to change your DTL URL, you can check more details [here](https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node#network-dtl-url).\\n    \\n\\n1.  #### \\n    \\n    Start as a Verifier\\n    \\n\\nStart the node as a Verifier to join the Mantle network:\\n\\nThis command launches a local node configured as a Verifier to participate in the validation process within Mantle network.\\n\\n## \\n\\nAppendix\\n\\n### \\n\\nNetwork DTL URL\\n\\nYou can change the DTL service URL based on the network your node is going to connect to by updating the `ROLLUP_CLIENT_HTTP` value in the `docker-compose.yml` file for the Docker way and the `./mainnet/envs/geth.env` for the binary way.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/graph-endpoints\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/graph-endpoints\",\n    \"loadedTime\": \"2025-02-15T20:32:58.528Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/graph-endpoints\",\n    \"title\": \"Graph Endpoints | Network\",\n    \"description\": \"Graph service endpoint reference\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Graph Endpoints | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Graph service endpoint reference\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/XId80x4ZnYpLaZDSUkax\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"local-IAD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MmRlZWE2YWUtZDcwYi00MGZiLWI1OWYtMTk5MGQzZDVkZDJk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Is0NGwYZhFLncapoNa5eZRxlvgYJ3PRG%2FPFscg4%2FcTmJnAIOq2sBtpiw5e0o3V9ktVCslOJvjKwWbkhPbaC1Iv%2BQZWUObABhV7NUW6VwN%2BNu5r2hkTcJo8YoU8lXeObYrx2u8PXkt9NONWETVEUY\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ef9e7f9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Graph Endpoints | Network\\nGraph service endpoint reference\\nLast updated 11 months ago\",\n  \"markdown\": \"# Graph Endpoints | Network\\n\\nGraph service endpoint reference\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/oracles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/oracles\",\n    \"loadedTime\": \"2025-02-15T20:32:58.773Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/oracles\",\n    \"title\": \"Oracles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Oracles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/pCuweFib8QdTZ8ToCcfa\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzNlYWEyYWQtZWQ4Ny00ODEzLTg1MDYtOTEyZDE5NDUyYWRj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=YPMnsCMP0gSxF7UkD49DxfmINnSmqP7ei2i%2FYLUiuOSvIvE8PfAEc%2F8yHywH5O7hvCPlDRLJf6g4sVTOyhZYLDlK71UIJG0dvV9%2BkErfmyr1GR3tHWJz9RO%2Fe8S%2BxJdl9hzTvslCpPydv6OHCa8V\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fb6b522d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Oracles | Network\\nPreviousCross-chain MessagingNextParticle AA SDK\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Oracles | Network\\n\\n[PreviousCross-chain Messaging](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging)[NextParticle AA SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk)\\n\\nLast updated 1 year ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:59.960Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk\",\n    \"title\": \"Particle AA SDK | Network\",\n    \"description\": \"Particle Network Smart Wallet-as-a-Service Integration\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Particle AA SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Particle Network Smart Wallet-as-a-Service Integration\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/WKKXFqt1xSNNKYpUqmbw\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:59 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YzFmNTFkNmEtYjBmOS00NzdmLWI0OTctZDM3YzhlZTY0MzNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=uE7YCEqB4a1NLYUi2ggrfIVfh5C33Pfy106BbXrpfqIgedG5okR%2F785Pwo4CCtz8nHy6QxEWu8SbMVB%2F8Ej2r%2FKzloW9uzLh8LFWtz1v6w12PPZYI3QeKlzzLe5STNFTKykP7QPwEYgL7Os1WxkH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281203bc6d2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Particle AA SDK | Network\\nParticle Network Smart Wallet-as-a-Service Integration\\nParticle Network is an intent-centric, modular access layer of web3 applications. With Particle's Smart Wallet-as-a-Service, developers can curate an unparalleled user experience through modular and customizable EOA/AA embedded wallet components. Using MPC-TSS for key management, Particle can streamline user onboarding via familiar web2 accounts - such as Google accounts, email addresses, and phone numbers.\\nParticle supports Mantle Mainnet and Testnet through both EOA interactions and native ERC-4337 SimpleAccount implementations.\\nUsing Particle Network Wallet-as-a-Service for a secure, flexible embedded EOA wallet implementation on Mantle Mainnet and Testnet is quite simple and can be achieved through a mechanism like the one below.\\nCreate a ParticleNetwork instance.\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\"; import { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\"; import { SmartAccount } from \\\"@particle-network/aa\\\"; // Retrieved from https://dashboard.particle.network const config = { projectId: \\\"xx\\\", clientKey: \\\"xx\\\", appId: \\\"xx\\\", }; const particle = new ParticleNetwork({ ...config, chainName: Mantle.name, chainId: Mantle.id, }); await particle.auth.login() // Initiates social login\\nIntroducing ERC-4337 account abstraction into Particle instance. Instead facilitating interaction with Mantle through a smart account can be achieved through the following:\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\"; import { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\"; import { SmartAccount } \\\"@particle-network/aa\\\"; // Retrieved from https://dashboard.particle.network const config = { projectId: \\\"xx\\\", clientKey: \\\"xx\\\", appId: \\\"xx\\\", }; const particle = new ParticleNetwork({ ...config, chainName: Mantle.name, chainId: Mantle.id, }); // If using AA const smartAccount = new SmartAccount(new ParticleProvider(particle.auth), { ...config, aaOptions: { simple: [{ chainId: Mantle.id, version: '1.0.0' }] } }); particle.setERC4337({ name: 'SIMPLE', version: '1.0.0' }); await particle.auth.login() // Initiates social login\\nGet Started\",\n  \"markdown\": \"# Particle AA SDK | Network\\n\\nParticle Network Smart Wallet-as-a-Service Integration\\n\\n[**Particle Network**](https://particle.network/) is an intent-centric, modular access layer of web3 applications. With Particle's Smart Wallet-as-a-Service, developers can curate an unparalleled user experience through modular and customizable EOA/AA embedded wallet components. Using MPC-TSS for key management, Particle can streamline user onboarding via familiar web2 accounts - such as Google accounts, email addresses, and phone numbers.\\n\\nParticle supports Mantle Mainnet and Testnet through both EOA interactions and native ERC-4337 SimpleAccount implementations.\\n\\nUsing Particle Network Wallet-as-a-Service for a secure, flexible embedded EOA wallet implementation on Mantle Mainnet and Testnet is quite simple and can be achieved through a mechanism like the one below.\\n\\n1.  **Create a ParticleNetwork instance.**\\n    \\n\\n```\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\";\\nimport { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\";\\nimport { SmartAccount } from \\\"@particle-network/aa\\\";\\n\\n// Retrieved from https://dashboard.particle.network\\nconst config = {\\n\\tprojectId: \\\"xx\\\",\\n\\tclientKey: \\\"xx\\\",\\n\\tappId: \\\"xx\\\",\\n};\\n\\nconst particle = new ParticleNetwork({\\n\\t...config,\\n\\tchainName: Mantle.name,\\n\\tchainId: Mantle.id,\\n});\\n\\nawait particle.auth.login() // Initiates social login\\n```\\n\\n1.  **Introducing** [**ERC-4337**](https://eips.ethereum.org/EIPS/eip-4337) **account abstraction into Particle instance.** Instead facilitating interaction with Mantle through a smart account can be achieved through the following:\\n    \\n\\n```\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\";\\nimport { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\";\\nimport { SmartAccount } \\\"@particle-network/aa\\\";\\n\\n// Retrieved from https://dashboard.particle.network\\nconst config = {\\n\\tprojectId: \\\"xx\\\",\\n\\tclientKey: \\\"xx\\\",\\n\\tappId: \\\"xx\\\",\\n};\\n\\nconst particle = new ParticleNetwork({\\n\\t...config,\\n\\tchainName: Mantle.name,\\n\\tchainId: Mantle.id,\\n});\\n\\n\\n// If using AA\\nconst smartAccount = new SmartAccount(new ParticleProvider(particle.auth), {\\n\\t...config,\\n\\taaOptions: {\\n\\tsimple: [{ chainId: Mantle.id, version: '1.0.0' }]\\n\\t}\\n});\\n\\nparticle.setERC4337({\\n\\tname: 'SIMPLE',\\n\\tversion: '1.0.0'\\n});\\n\\nawait particle.auth.login() // Initiates social login\\n```\\n\\n### \\n\\nGet Started\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-client-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-client-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:56.186Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-client-sdk\",\n    \"title\": \"Mantle Client SDK | Network\",\n    \"description\": \"Helping devs familiarize with the available tools\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Client SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Helping devs familiarize with the available tools\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/hnCW0tavsFwBELZTFmRO\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTY3MTVmNGUtYjBkMS00M2JkLWJmNjQtMjI0YzJmN2MwNmY0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pKG9JztU7RaPLSmXWXIqklI6KPo4u%2FqYosro5g%2BMt616YwQv%2Bjq8WAuDy0WPMGB7dk1at3yW8vrfiL%2FpstA3pRsq%2BaFAFiL0NMWTcK15FP0p43dP4SUH4gI7jALmq5rQtxQGR3LQIVXXM%2FvA1GBG\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e7f8ed4d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Client SDK | Network\\nHelping devs familiarize with the available tools\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWe recommend reading the following sections prior to using the SDK.\\nTo understand the opcode behaviour differences between Mantle Network and Ethereum read Solidity Support\\nTo understand how gas fees are calculated read Transaction Fees on L2\\nJavascript SDK\\nUse the link below to navigate to our SDK reference docs.\\n@mantleio/sdk\\nSDK Tutorials\\nBridging $MNT using Mantle SDKViewing Transactions between Layers\\nPreviousMantle Bridge APINextThirdweb SDK\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Mantle Client SDK | Network\\n\\nHelping devs familiarize with the available tools\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nWe recommend reading the following sections prior to using the SDK.\\n\\n*   To understand the opcode behaviour differences between Mantle Network and Ethereum read [Solidity Support](https://docs.mantle.xyz/network/network/for-devs/solidity-support)\\n    \\n*   To understand how gas fees are calculated read [Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2)\\n    \\n\\n## \\n\\nJavascript SDK\\n\\nUse the link below to navigate to our SDK reference docs.\\n\\n[@mantleio/sdk](https://sdk.mantle.xyz/)\\n\\n## \\n\\nSDK Tutorials\\n\\n[Bridging $MNT using Mantle SDK](https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk)[Viewing Transactions between Layers](https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers)\\n\\n[PreviousMantle Bridge API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api)[NextThirdweb SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk)\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3\",\n    \"loadedTime\": \"2025-02-15T20:33:04.542Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3\",\n    \"title\": \"Testnet v0.4.3 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet v0.4.3 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/xvWTFUYRioCQJyPx0jaS\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YzJiMTc0N2YtYjQ4Ni00NzhkLWIwODctZDFkMTA0MDA2MGNj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RNf6WKJE%2FvdldNCissuRvfkjl3MEUb%2BPAzB%2FntWovUrDWK7cKp211whRJJHeIwr83MdpW0MNEzcesnrbp%2B50E8Nvr6213D093hAiYT%2F9upAawZxUoNRxMTKMSinVMs6nzWEmc5dcnr4HlGOUxt1%2B\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912812203b7e2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Testnet v0.4.3 | Network\\nThis network update brings about the following changes:\\nOptimized layer-2 (L2) transaction fee, allowing users to customize transaction fees within a wider range to support Account Abstraction (AA)\\nOptimized rollup submission strategy to achieve lower gas fees in scenarios with higher TPS\\nOptimized gas oracle data update strategy to ensure that the L2 network has a more stable real-time adjustment ability for transaction fees.\\nAdded Mantle audit report files\\nFor more details on how the aforementioned features were included in the codebase, follow the links below to navigate to the Mantle GitHub repo. GitHub Links：\\nInstructions for Node Operators\\nPlease follow the steps below to upgrade your node：\\nStop current docker service\\nChange the image tag in the docker-compose.yml, Replace the current image from mantlenetworkio/l2geth:v0.4.0-1 to mantlenetworkio/l2geth:v0.4.3\\nStart new docker service\\nCheck logs to see status\",\n  \"markdown\": \"# Testnet v0.4.3 | Network\\n\\nThis network update brings about the following changes:\\n\\n*   Optimized layer-2 (L2) transaction fee, allowing users to customize transaction fees within a wider range to support Account Abstraction (AA)\\n    \\n*   Optimized rollup submission strategy to achieve lower gas fees in scenarios with higher TPS\\n    \\n*   Optimized gas oracle data update strategy to ensure that the L2 network has a more stable real-time adjustment ability for transaction fees.\\n    \\n*   Added Mantle audit report files\\n    \\n\\nFor more details on how the aforementioned features were included in the codebase, follow the links below to navigate to the Mantle GitHub repo. **GitHub Links：**\\n\\n## \\n\\nInstructions for Node Operators\\n\\nPlease follow the steps below to upgrade your node：\\n\\n1.  Stop current docker service\\n    \\n2.  Change the image tag in the `docker-compose.yml`_,_ Replace the current image from `mantlenetworkio/l2geth:v0.4.0-1` to [`mantlenetworkio/l2geth:v0.4.3`](https://hub.docker.com/r/mantlenetworkio/l2geth/tags)\\n    \\n3.  Start new docker service\\n    \\n\\n1.  Check logs to see status\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials\",\n    \"loadedTime\": \"2025-02-15T20:33:04.405Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials\",\n    \"title\": \"Tutorials | Network\",\n    \"description\": \"Examples and walkthroughs to refer to and follow along\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Tutorials | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Examples and walkthroughs to refer to and follow along\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/GxnzFO4CpuEOWTCOFoNH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MjRlZWE5MDktNDVkYy00NDZkLTg5OTgtYmFkMmE4ODM0YzY2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Ouqh%2FVIsmEtqytVZleBUjr9Q5MO4SDF%2FN2PF6ufgkW8WH%2Bsobn8NJrNAgP9xUw%2FbypLRW7Tqhj%2Boj%2FWEiImV9WBY4asrLuhmrm2Xb%2FPhf4ngjv237jgV2i0hxZ8pZfP8R%2Bv%2FcI%2BwMA8nAifJnJbH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128122099759c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Tutorials | Network\\nExamples and walkthroughs to refer to and follow along\\nDeploying ContractsVerifying ContractsDebugging Contracts with FoundryMigrating $BIT to $MNT on GoerliViewing Transactions between LayersBridging Custom ERC20 Tokens Using Standard BridgeBridging $MNT using Mantle SDKEstimating Transaction FeesHow to Update the NFT Metadata\\nPreviousParticle AA SDKNextDeploying Contracts\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Tutorials | Network\\n\\nExamples and walkthroughs to refer to and follow along\\n\\n[Deploying Contracts](https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts)[Verifying Contracts](https://docs.mantle.xyz/network/network/for-devs/tutorials/verifying-contracts)[Debugging Contracts with Foundry](https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry)[Migrating $BIT to $MNT on Goerli](https://docs.mantle.xyz/network/network/for-devs/tutorials/migrating-usdbit-to-usdmnt-on-goerli)[Viewing Transactions between Layers](https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers)[Bridging Custom ERC20 Tokens Using Standard Bridge](https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge)[Bridging $MNT using Mantle SDK](https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk)[Estimating Transaction Fees](https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees)[How to Update the NFT Metadata](https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata)\\n\\n[PreviousParticle AA SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk)[NextDeploying Contracts](https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts)\\n\\nLast updated 1 year ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2\",\n    \"loadedTime\": \"2025-02-15T20:33:04.830Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2\",\n    \"title\": \"Testnet v0.3.2 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet v0.3.2 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/bKVkBnm9TaXoJVLdqIVE\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Mjk4NmI3NDktMDk0OC00NzI0LWE3NjItYjkyMjU5MmM2MzBj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Sm7VKB58IlePcLT7cN9tOUj3Wo0yb5%2FBXeRgFC7Ky5yrOo%2BWKeROn6nczcy9o6ZlkOMDLVZwvglvZUaMo9mkqZldE73xw6542jx54rCUyGmdU11cGj7vc6XyyaSuX8bfoG3eWL6hUiSr0kCfaCSl\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912812224f52e646-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Testnet v0.3.2 | Network\\nThis network update brings about the following changes:\\nReduces the amount of data published to L1 Ethereum using EigenLayer\\nLower transactions fees on L2\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\nGitHub Links\\nInstructions for Node Operators\\nThis update includes changes that will effect take once you sync your node using the updated Docker image. Follow the steps below to proceed.\\n1. Modify the DTL configuration in docker-compose.yaml\\nUpdate the image. You can do this by either adding DOCKER_TAG_DATA_TRANSPORT_LAYER = 0.3.2 in goerli/env/dtl.env, or updating image to mantlenetworkio/data-transport-layer: 0.3.2\\nAdd the following attributes: DATA_TRANSPORT_LAYER__EIGEN_UPGRADE_ENABLE: true and DATA_TRANSPORT_LAYER__SYNC_TO_DA: false\\nAdd a new element as shown below.\\nvolume: volumes: - ./data/db:/db\\n2. Modify the verifer or replica setting in docker-compose.yaml\\nSet image version to image: mantlenetworkio/l2geth: 0.3.2\\nAdd the following attribute: ROLLUP_EIGEN_DA_BLOCK: \\\"8280000\\\"\\n3. Check node height\\nIf your current node height happens to be higher than 8280000, which is the block height for this update, you'll need to download the backup data from the previous day and extract it, and then use it to replace your node's chaindata. For instance, if you're performing this action on 2023-05-25, you download the data from 2023-05-24 using the following link:\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\nMake sure to update the date in the URL based on your current date before starting the download. Also, the data directory depends on your local configuration. It should be of the form ./data/verifier/chaindata\\n4. Sync node\\nRun the following command and wait for your node to complete the sync.\\ndocker-compose up --force-recreate -d\\nDeploying a New Node Instance\\nIf you encounter issues updating your node version with the process described above, you'll need to use the previous day's snapshot and deploy a new node instance. Follow the steps below to do that.\\n1. Configure DTL\\nIf you're going to run a new node instance, you can just use Mantle's public DTL service to sync chain data. Use the docker-compose.replica.yml file from this pull request.\\n2. Check node height\\nYou'll still need to download the backup data from the previous day, extract it, and then use it to replace your node's chaindata. For instance, if you're performing this action on 2023-05-25, you download the data from 2023-05-24 using the following link:\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\nMake sure to update the date in the URL based on your current date before starting the download. Also, the data directory depends on your local configuration. It should be of the form ./data/verifier/chaindata\\n3. Run node\\nYou'll need to download the docker-compose.replica.yml file to spin your new node instance. Once you've download the file from here, run the following command to start your node and sync it.\\ndocker-compose -f docker-compose.replica.yml up -d\",\n  \"markdown\": \"# Testnet v0.3.2 | Network\\n\\nThis network update brings about the following changes:\\n\\n*   Reduces the amount of data published to L1 Ethereum using EigenLayer\\n    \\n*   Lower transactions fees on L2\\n    \\n\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\n\\n#### \\n\\nGitHub Links\\n\\n## \\n\\nInstructions for Node Operators\\n\\nThis update includes changes that will effect take once you sync your node using the updated Docker image. Follow the steps below to proceed.\\n\\n#### \\n\\n1\\\\. Modify the DTL configuration in `docker-compose.yaml`\\n\\n*   Update the image. You can do this by either adding `DOCKER_TAG_DATA_TRANSPORT_LAYER = 0.3.2` in `goerli/env/dtl.env`, or updating `image` to `mantlenetworkio/data-transport-layer: 0.3.2`\\n    \\n*   Add the following attributes: `DATA_TRANSPORT_LAYER__EIGEN_UPGRADE_ENABLE: true` and `DATA_TRANSPORT_LAYER__SYNC_TO_DA: false`\\n    \\n*   Add a new element as shown below.\\n    \\n\\n```\\nvolume:\\n  volumes:\\n    - ./data/db:/db\\n```\\n\\n#### \\n\\n2\\\\. Modify the `verifer` or `replica` setting in `docker-compose.yaml`\\n\\n*   Set image version to `image: mantlenetworkio/l2geth: 0.3.2`\\n    \\n*   Add the following attribute: `ROLLUP_EIGEN_DA_BLOCK: \\\"8280000\\\"`\\n    \\n\\n#### \\n\\n3\\\\. Check node height\\n\\nIf your current node height happens to be higher than 8280000, which is the block height for this update, you'll need to download the backup data from the previous day and extract it, and then use it to replace your node's `chaindata`. For instance, if you're performing this action on 2023-05-25, you download the data from 2023-05-24 using the following link:\\n\\n```\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\n```\\n\\nMake sure to update the date in the URL based on your current date before starting the download. Also, the data directory depends on your local configuration. It should be of the form `./data/verifier/chaindata`\\n\\n#### \\n\\n4\\\\. Sync node\\n\\nRun the following command and wait for your node to complete the sync.\\n\\n```\\ndocker-compose up --force-recreate -d\\n```\\n\\n## \\n\\nDeploying a New Node Instance\\n\\nIf you encounter issues updating your node version with the process described above, you'll need to use the previous day's snapshot and deploy a new node instance. Follow the steps below to do that.\\n\\n#### \\n\\n1\\\\. Configure DTL\\n\\nIf you're going to run a new node instance, you can just use Mantle's public DTL service to sync chain data. Use the `docker-compose.replica.yml` file from this [pull request](https://github.com/mantlenetworkio/networks/pull/7/files).\\n\\n#### \\n\\n2\\\\. Check node height\\n\\nYou'll still need to download the backup data from the previous day, extract it, and then use it to replace your node's `chaindata`. For instance, if you're performing this action on 2023-05-25, you download the data from 2023-05-24 using the following link:\\n\\n```\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\n```\\n\\nMake sure to update the date in the URL based on your current date before starting the download. Also, the data directory depends on your local configuration. It should be of the form `./data/verifier/chaindata`\\n\\n#### \\n\\n3\\\\. Run node\\n\\nYou'll need to download the `docker-compose.replica.yml` file to spin your new node instance. Once you've download the file from [here](https://github.com/mantlenetworkio/networks/pull/7/files), run the following command to start your node and sync it.\\n\\n```\\ndocker-compose -f docker-compose.replica.yml up -d\\n```\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases\",\n    \"loadedTime\": \"2025-02-15T20:33:04.558Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases\",\n    \"title\": \"Common Use Cases | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Common Use Cases | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/kmmo7eEdHvm2s2nWLsO9\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzJlYjAwYjYtYzNiYy00OTMwLWI3NDEtNmJiZWJiMjlmNGQ0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=KA5ga1GoDJvuLEzvA5ob2idDiMdajSdye28B4lpIcv7%2BuNBQihzvpJzon5VhO9KtxDPbemYzHndX9%2BN%2BIg4BS0ImP%2BgXq2ZXIdRDPMYcAeY7wtjDrFaCWf1Bvo%2BwH6cgC%2FNeTbO10t62yyO9z6kC\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221ccf1059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Common Use Cases | Network\\nMantle v1\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Common Use Cases | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network/network)\\n\\nMantle v1\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-devs/common-use-cases?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-devs/common-use-cases?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/chain-data-and-monitoring\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/chain-data-and-monitoring\",\n    \"loadedTime\": \"2025-02-15T20:33:01.960Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/chain-data-and-monitoring\",\n    \"title\": \"Chain Data and Monitoring | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Chain Data and Monitoring | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/yhvTVOcfGXWXpqyIkTqV\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODdlZTg3ZDUtZTZmOS00YTY5LWJhM2QtY2E3NDVlYjgyNTg2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zLTJ5yn27f3m8t2A49qOba41V%2BURxXZdD%2FH%2F9ivmdiV%2BbKJtNcZFI8U0TrAiN4WAA%2B5yQ1SmsJ9arh2HfF7TiQGI0gs%2BFFFvm82hSRWhHj2KHhACklIfOkEA%2FTO049h1eQS7%2BEViKDZowIyGOexE\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fb4a734d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Chain Data and Monitoring | Network\\nBlock Explorers\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\nCovalent\\nCovalent collects and indexes historical data points from over a 100 different chain networks and makes them available via one unified API. This can come in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\nStructured and enhanced on-chain data well beyond what you get from RPC providers\\nBroad and deep multi-chain data at scale\\nEnterprise-grade performance\\nSign up here to start building on Mantle. Here's a guide to help you get started:\\nCovalent Data Indexing API\\nCheck out their docs by following the link below.\\nUnmarshal\\nUnmarshal provides an API, TS and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics data available at a glance for multiple chain, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\nDefiLlama\\nDefiLlama is a multi-chain TVL stats dashboard, where data connectors contributed and maintained by a community. Follow the link below to see data for Mantle Network.\\nSubQuery\\nSubQuery is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across multiple chains, including Mantle Network. Follow the link below to get started.\\nDEXTools\\nDEXTools is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed to Mantle Network and other chains using different decentralized exchanges.\\nDEX Screener\\nDEX Screener is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\nDeBank\\nDeBank is a defi dashboard that enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\",\n  \"markdown\": \"# Chain Data and Monitoring | Network\\n\\n## \\n\\nBlock Explorers\\n\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\n\\n## \\n\\nCovalent\\n\\nCovalent collects and indexes historical data points from over a 100 different chain networks and makes them available via one unified API. This can come in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\n\\n*   Structured and enhanced on-chain data well beyond what you get from RPC providers\\n    \\n*   Broad and deep multi-chain data at scale\\n    \\n*   Enterprise-grade performance\\n    \\n\\n[**Sign up here to start building on Mantle**](https://www.covalenthq.com/platform/?utm_source=mantle&utm_medium=partner-docs)**.** Here's a guide to help you get started:\\n\\n[Covalent Data Indexing API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api)\\n\\nCheck out their docs by following the link below.\\n\\n## \\n\\nUnmarshal\\n\\nUnmarshal provides an API, TS and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics data available at a glance for multiple chain, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\n\\n## \\n\\nDefiLlama\\n\\nDefiLlama is a multi-chain TVL stats dashboard, where data connectors contributed and maintained by a community. Follow the link below to see data for Mantle Network.\\n\\n## \\n\\nSubQuery\\n\\n[SubQuery](https://academy.subquery.network/) is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across [multiple chains](https://subquery.network/networks), including Mantle Network. Follow the link below to get started.\\n\\n## \\n\\nDEXTools\\n\\nDEXTools is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed to Mantle Network and other chains using different decentralized exchanges.\\n\\n## \\n\\nDEX Screener\\n\\nDEX Screener is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\n\\n## \\n\\nDeBank\\n\\nDeBank is a defi dashboard that enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry\",\n    \"loadedTime\": \"2025-02-15T20:33:05.365Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry\",\n    \"title\": \"Debugging Contracts with Foundry | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Debugging Contracts with Foundry | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/NIMwPef4sJQdhALtKZET\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2Y3YmMzOWMtZWZiMS00ZDQxLTgyYTktODI3NjFiMzM1YjU2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=2OKhz3%2BFtuCWwncZfNv6Jiva%2BvZMY6VQlKzYyuzZJ41A9XPwG50PpPQixIMGjyJebqap72Op3l2yPRIAWmwWCBM4oBYTre1bencXpdgKt4rEQusDZkg6woPDcUO2WbNb6zsyMu%2FAsS%2FKJSmnAoEy\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221cd69a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Debugging Contracts with Foundry | Network\\nWhat is Foundry\\nFoundry is a Solidity Framework for building, testing, fuzzing, debugging and deploying Solidity smart contracts. It can manage dependencies, compile your project, run tests, deploy contracts, and lets you interact with the chain from the command-line and via Solidity scripts.Foundry comes with the following tools that can be used to debugging:\\nAnvil: Used to deploy a local Ethereum node\\nCast: Used to send RPC calls and interact with the chain\\nForge: Used to build, compile, and test smart contracts\\nYou can install Foundry by running the following commands:\\nLinux/Mac:\\ncurl -L https://foundry.paradigm.xyz | bash foundryup\\nWindows: (Requires Rust, install from https://rustup.rs/)\\ncargo install --git https://github.com/foundry-rs/foundry --bins --locked\\nDocker:\\ndocker pull ghcr.io/foundry-rs/foundry:latest\\nAnvil\\nAnvil deploys a local Ethereum node in your environment that can be used to deploy a node. Simply run anvil to deploy one. \\nIt has a few useful properties. It allows you to fork a network at the latest, or any specific height. You can run the following command to fork the Mantle mainnet environment for debugging your code:\\nexport RPC_URL=\\\"https://rpc.mantle.xyz\\\" anvil --fork-url $RPC_URL\\nCall traces are more detailed, i.e., we can see which functions are being executed in remote contracts, i.e., the functions that executed by every contract.\\nNote that it isn't necessary to use an Anvil node to use Foundry. You can use other local nodes like Hardhat, Ganache, etc. as well.\\nCast\\nYou can use the following cast commands to interact with the chain.\\nThe examples below are based on Anvil. If you have Anvil up and running, try invoking the following cases in another command line window. This will allow you to debug online contracts using the mantle mainnet.\\ncast call / cast send\\ncast send can be used to sign and publish a transaction on the chain.You can use it make an arbitrary contract method call, like so:\\ncast send $contract_address \\\"someFunc(unit256)\\\" 0x... \\\\--private-key $wallet_private_key\\ncast call on the other hand can be used to perform an account call without publishing it to the chain, and that's why you don't need to specify a private key.So for instance, you can make a contract method call, like so:\\ncast call $contract_address \\\"someFunc(uint, args[])\\\" $number \\\"[arg_1, ... , arg_n]\\\"\\nexport WMNT=0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8 cast call $WMNT \\\"balanceOf(address)\\\" 0x1858d52cf57c07A018171D7a1E68DC081F17144f //0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d cast --to-dec 0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d //8234949754837270014026605\\ncast run\\ncast run can be used to run a published transaction in a local environment and print the trace. For example:\\ncast run $TX_HASH\\ncast run 0xf500a3c8e08960aa28ccdd557730087b1d9b618a42b9595c7800ceeff53dddaa\\nYou can also replay transactions in the debugger using the --debug flag, like so:\\ncast run --debug $TX_HASH\\nTaking this deposit transaction as an example:\\ncast run 0x16a3d14f54fc36097184b2b774b0d30e35e03e033805eb3180a0ee8d4c5427ef --debug\\nLearn more about the debugger interface here: https://book.getfoundry.sh/forge/debugger\\ncast block / cast tx\\ncast block can be used to fetch block information from the chain. Running cast block returns block info for the latest block.\\ncast tx can be used to fetch transaction information from the chain using the transaction hash. The command structure is as follows:\\ncast tx $TX_HASH\\ncast rpc\\ncast rpc can be used to send a raw JSON-RPC request to a node.Since Mantle Network supports Ethereum's JSON-RPC interface, you can use the following command to call eth_getBlockByNumber and fetch information for the latest block:\\ncast rpc --rpc-url https://rpc.mantle.xyz/ eth_getBlockByNumber \\\"latest\\\" \\\"false\\\"\\ncast storage & cast index\\ncast storage can be used to fetch the raw value of a contract's storage slot. cast-index can compute the storage slot location for an entry in a mapping.The cast index calculates the storage location based on the KEY_TYPE, KEY, and SLOT_NUMBER.For example, to fetch the value of slot 0 for a contract:\\ncast storage $contract_address 0\\nWe'll take the balance of account 0x1858d52cf57c07A018171D7a1E68DC081F17144f about $WMNT as an example, which can be obtained in two ways:\\nConventional function call method This has already been implemented in the aforementioned cast call.\\nReading contract slot storage method First, based on the WMNT source code, it's determined that the balanceOf state variable is located at the 0th slot with KEY_TYPE being 'address'.\\ncontract WMANTLE is ERC20 { constructor() ERC20(\\\"Wrapped Mantle\\\", \\\"WMNT\\\") {} event Deposit(address indexed dst, uint256 wad); event Withdrawal(address indexed src, uint256 wad); ... contract ERC20 is Context, IERC20, IERC20Metadata { mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; ...\\n＃ For KEY 0x1858d52cf57c07A018171D7a1E68DC081F17144f and slot 0, the corresponding storage location. cast index address 0x1858d52cf57c07A018171D7a1E68DC081F17144f 0 //0x2edcadc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b ＃ Retrieve the raw data from the corresponding storage location, converting from address to integer, address=>int cast storage $WMNT 0x2edcadc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b 0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\ncast abi-decode / cast abi-encode\\ncast abi-decode can be used to decode any ABI-encoded data. For example, to decode the output data for a balanceOf call:\\ncast abi-decode \\\"balanceOf(address)(uint256)\\\" \\\\0x000000000000000000000000000000000000000000000000000000000000000a\\ncast abi-encode can be used to ABI encode any given function arguments, excluding the selector. For example, to ABI-encode the arguments for a function call:\\ncast abi-encode \\\"someFunc(address,uint256)\\\" 0x... 1\\nforge\\n5.1 Initialize the project.-forge init\\nforge init <dir_name>forge init —template <template_path> <dir_name>\\nView the current directory structure.\\n(base) ➜ tree -L 2 . └── hello_foundry ├── foundry.toml ├── lib ├── script ├── src └── test\\n5.2 forge build\\nThe corresponding compile command is\\ncd hello_foundry forge build forge build -w\\nTypically, two panes are opened in tmux. The first pane is used to view real-time coding status, monitoring in real-time with the -w option. In the second pane, code is written. After each code modification, once saved, the first pane will display in real-time whether the compilation has passed.\\n5.3 Automated testing-forge test\\n# You can print logs using the -v level, -vv level, and -vvv level. forge test -v /-vv / -vvv ＃ Use -w for watch mode. forge test -v /-vv / -vvv -w\\nFor more detailed procedures on testing, please refer to. https://book.getfoundry.sh/reference/forge/forge-test\\nForge debug\\nForge ships with an interactive debugger.\\nforge debug --debug $FILE --sig $FUNC\\nIn the newly initialized project, we can enter the following command to enable the interactive debugger.\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5\\nIf you want to debug on the forked mainnet, you can enter the following command.\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5 -f http://127.0.0.1:8545\\nor\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5 --fork-url https://rpc.mantle.xyz\\nbreakpoint\\nPlaces a breakpoint to jump to in the debugger view.Calling vm.breakpoint('<char>, true) is equivalent to vm.breakpoint('<char>), but calling vm.breakpoint('<char, false) will erase the breakpoint at '<char.If the char is overwritten, only the last one that was visited in the execution steps is considered.\\nExample\\nfunction testBreakpoint() public { vm.breakpoint(\\\"a\\\"); }\\nOpening up the debugger in a test environment and pressing 'a will then place the debugger step at the place where the breakpoint cheatcode was called.\\nBy integrating Anvil and Cast, you can fork and test by interacting with contracts on the live network.\",\n  \"markdown\": \"# Debugging Contracts with Foundry | Network\\n\\n### \\n\\nWhat is Foundry\\n\\nFoundry is a Solidity Framework for building, testing, fuzzing, debugging and deploying Solidity smart contracts. It can manage dependencies, compile your project, run tests, deploy contracts, and lets you interact with the chain from the command-line and via Solidity scripts.Foundry comes with the following tools that can be used to debugging:\\n\\n*   Anvil: Used to deploy a local Ethereum node\\n    \\n*   Cast: Used to send RPC calls and interact with the chain\\n    \\n*   Forge: Used to build, compile, and test smart contracts\\n    \\n\\nYou can install Foundry by running the following commands:\\n\\n**Linux/Mac**:\\n\\n```\\ncurl -L https://foundry.paradigm.xyz | bash\\nfoundryup\\n```\\n\\n**Windows**: (Requires Rust, install from [https://rustup.rs/](https://rustup.rs/))\\n\\n```\\ncargo install --git https://github.com/foundry-rs/foundry --bins --locked\\n```\\n\\n**Docker**:\\n\\n```\\ndocker pull ghcr.io/foundry-rs/foundry:latest\\n```\\n\\n#### \\n\\nAnvil\\n\\nAnvil deploys a local Ethereum node in your environment that can be used to deploy a node. Simply run anvil to deploy one.\\n\\nIt has a few useful properties. It allows you to fork a network at the latest, or any specific height. You can run the following command to fork the Mantle mainnet environment for debugging your code:\\n\\n```\\nexport RPC_URL=\\\"https://rpc.mantle.xyz\\\"\\nanvil --fork-url $RPC_URL\\n```\\n\\nCall traces are more detailed, i.e., we can see which functions are being executed in remote contracts, i.e., the functions that executed by every contract.\\n\\nNote that it isn't necessary to use an Anvil node to use Foundry. You can use other local nodes like Hardhat, Ganache, etc. as well.\\n\\n#### \\n\\nCast\\n\\nYou can use the following cast commands to interact with the chain.\\n\\nThe examples below are based on Anvil. If you have Anvil up and running, try invoking the following cases in another command line window. This will allow you to debug online contracts using the mantle mainnet.\\n\\n**cast call / cast send**\\n\\n[cast send](https://book.getfoundry.sh/reference/cast/cast-send) can be used to sign and publish a transaction on the chain.You can use it make an arbitrary contract method call, like so:\\n\\n> cast send $contract\\\\_address \\\"someFunc(unit256)\\\" 0x... \\\\\\\\--private-key $wallet\\\\_private\\\\_key\\n\\n[cast call](https://book.getfoundry.sh/reference/cast/cast-call) on the other hand can be used to perform an account call without publishing it to the chain, and that's why you don't need to specify a private key.So for instance, you can make a contract method call, like so:\\n\\n> cast call $contract\\\\_address \\\"someFunc(uint, args\\\\[\\\\])\\\" $number \\\"\\\\[arg\\\\_1, ... , arg\\\\_n\\\\]\\\"\\n\\n```\\nexport WMNT=0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8\\ncast call $WMNT \\\"balanceOf(address)\\\" 0x1858d52cf57c07A018171D7a1E68DC081F17144f\\n//0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\ncast --to-dec 0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\n//8234949754837270014026605\\n```\\n\\n**cast run**\\n\\n[cast run](https://book.getfoundry.sh/reference/cast/cast-run) can be used to run a published transaction in a local environment and print the trace. For example:\\n\\n> cast run $TX\\\\_HASH\\n\\n```\\ncast run 0xf500a3c8e08960aa28ccdd557730087b1d9b618a42b9595c7800ceeff53dddaa\\n```\\n\\nYou can also replay transactions in the debugger using the `--debug` flag, like so:\\n\\n> cast run --debug $TX\\\\_HASH\\n\\nTaking this deposit transaction as an example:\\n\\n```\\ncast run 0x16a3d14f54fc36097184b2b774b0d30e35e03e033805eb3180a0ee8d4c5427ef --debug\\n```\\n\\nLearn more about the debugger interface here: [https://book.getfoundry.sh/forge/debugger](https://book.getfoundry.sh/forge/debugger)\\n\\n**cast block / cast tx**\\n\\n[`cast block`](https://book.getfoundry.sh/reference/cast/cast-block) can be used to fetch block information from the chain. Running `cast block` returns block info for the latest block.\\n\\n[`cast tx`](https://book.getfoundry.sh/reference/cast/cast-tx) can be used to fetch transaction information from the chain using the transaction hash. The command structure is as follows:\\n\\n> cast tx $TX\\\\_HASH\\n\\n**cast rpc**\\n\\n[`cast rpc`](https://book.getfoundry.sh/reference/cast/cast-rpc) can be used to send a raw JSON-RPC request to a node.Since Mantle Network supports Ethereum's JSON-RPC interface, you can use the following command to call `eth_getBlockByNumber` and fetch information for the latest block:\\n\\n> cast rpc --rpc-url https://rpc.mantle.xyz/ eth\\\\_getBlockByNumber \\\"latest\\\" \\\"false\\\"\\n\\n#### \\n\\ncast storage & cast index\\n\\n[`cast storage`](https://book.getfoundry.sh/reference/cast/cast-storage) can be used to fetch the raw value of a contract's storage slot. cast-index can compute the storage slot location for an entry in a mapping.The cast index calculates the storage location based on the KEY\\\\_TYPE, KEY, and SLOT\\\\_NUMBER.For example, to fetch the value of slot 0 for a contract:\\n\\n> cast storage $contract\\\\_address 0\\n\\nWe'll take the balance of account 0x1858d52cf57c07A018171D7a1E68DC081F17144f about $WMNT as an example, which can be obtained in two ways:\\n\\n*   **Conventional function call method** This has already been implemented in the aforementioned cast call.\\n    \\n*   **Reading contract slot storage method** First, based on the WMNT source code, it's determined that the balanceOf state variable is located at the 0th slot with KEY\\\\_TYPE being 'address'.\\n    \\n\\n```\\ncontract WMANTLE is ERC20  {\\n    constructor() ERC20(\\\"Wrapped Mantle\\\", \\\"WMNT\\\") {}\\n    event  Deposit(address indexed dst, uint256 wad);\\n    event  Withdrawal(address indexed src, uint256 wad);\\n...\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n...\\n```\\n\\n```\\n＃ For KEY 0x1858d52cf57c07A018171D7a1E68DC081F17144f and slot 0, the corresponding storage location.\\ncast index address 0x1858d52cf57c07A018171D7a1E68DC081F17144f 0\\n//0x2edcadc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b\\n\\n＃　Retrieve the raw data from the corresponding storage location, converting from address to integer, address=>int\\ncast storage $WMNT 0x2edcadc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b\\n0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\n```\\n\\n**cast abi-decode / cast abi-encode**\\n\\n[`cast abi-decode`](https://book.getfoundry.sh/reference/cast/cast-abi-decode) can be used to decode any ABI-encoded data. For example, to decode the output data for a `balanceOf` call:\\n\\n> cast abi-decode \\\"balanceOf(address)(uint256)\\\" \\\\\\\\0x000000000000000000000000000000000000000000000000000000000000000a\\n\\n[`cast abi-encode`](https://book.getfoundry.sh/reference/cast/cast-abi-encode) can be used to ABI encode any given function arguments, excluding the selector. For example, to ABI-encode the arguments for a function call:\\n\\n> cast abi-encode \\\"someFunc(address,uint256)\\\" 0x... 1\\n\\n### \\n\\nforge\\n\\n#### \\n\\n5.1 Initialize the project.**\\\\-forge init**\\n\\n> forge init <dir\\\\_name>forge init —template <template\\\\_path> <dir\\\\_name>\\n\\nView the current directory structure.\\n\\n```\\n(base) ➜ tree -L 2\\n.\\n└── hello_foundry\\n    ├── foundry.toml\\n    ├── lib\\n    ├── script\\n    ├── src\\n    └── test\\n```\\n\\n#### \\n\\n5.2 **forge build**\\n\\nThe corresponding compile command is\\n\\n```\\ncd hello_foundry\\nforge build\\nforge build -w\\n```\\n\\nTypically, two panes are opened in tmux. The first pane is used to view real-time coding status, monitoring in real-time with the `-w` option. In the second pane, code is written. After each code modification, once saved, the first pane will display in real-time whether the compilation has passed.\\n\\n#### \\n\\n5.3 Automated testing**\\\\-forge test**\\n\\n```\\n# You can print logs using the -v level, -vv level, and -vvv level.\\nforge test -v /-vv / -vvv\\n\\n＃ Use -w for watch mode.\\nforge test -v /-vv / -vvv　-w\\n```\\n\\nFor more detailed procedures on testing, please refer to. [https://book.getfoundry.sh/reference/forge/forge-test](https://book.getfoundry.sh/reference/forge/forge-test)\\n\\n#### \\n\\nForge debug\\n\\nForge ships with an interactive debugger.\\n\\n> forge debug --debug $FILE --sig $FUNC\\n\\nIn the newly initialized project, we can enter the following command to enable the interactive debugger.\\n\\n```\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5\\n```\\n\\nIf you want to debug on the forked mainnet, you can enter the following command.\\n\\n```\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5 -f http://127.0.0.1:8545\\n```\\n\\nor\\n\\n```\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5 --fork-url https://rpc.mantle.xyz\\n```\\n\\n**breakpoint**\\n\\nPlaces a breakpoint to jump to in the debugger view.Calling `vm.breakpoint('<char>, true)` is equivalent to `vm.breakpoint('<char>)`, but calling `vm.breakpoint('<char, false)` will erase the breakpoint at `'<char`.If the char is overwritten, only the last one that was visited in the execution steps is considered.\\n\\n#### \\n\\nExample\\n\\n```\\nfunction testBreakpoint() public {\\n    vm.breakpoint(\\\"a\\\");\\n}\\n```\\n\\nOpening up the debugger in a test environment and pressing `'a` will then place the debugger step at the place where the breakpoint cheatcode was called.\\n\\nBy integrating Anvil and Cast, you can fork and test by interacting with contracts on the live network.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle\",\n    \"loadedTime\": \"2025-02-15T20:33:05.162Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle\",\n    \"title\": \"Developing on Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Developing on Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/PIhaIiuLMKRHx68ohhb1\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YzNjNDdiOTYtZjBhMC00ODNlLTljMDEtMmYwYjIzNzZiNTIw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LlEKqm3qiJGZbyiSXWB8qTr7R%2F1TyFS4Z94J88Pyb2DvkYmyAJKCUUFwUFwI%2B4pjpbRkBEY6xnQ%2FsbcaVXC75gp7%2Fj%2BQANqkjR25kzoxn0QQw3tWADCwGnNORlmTrPS2Ihk2S%2BNKIYKFfb81651T\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128122278d905dd-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Developing on Mantle | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nCheck out our repository of Mantle-specific tutorials on the Mantle GitHub!\\nNetwork Details\\nwss://ws.testnet.mantle.xyz\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: Node RPC Providers\\nContract Addresses\\nThe most updated list of addresses of the contracts deployed on Ethereum and Mantle Network are available on Github. Follow the links below to navigate to the respective address repos.\\nPlease note that there are some common ERC20 contract operations currently inactive for the native $MNT token, namely:\\ntransfer()\\napprove()\\ntransferFrom()\\nincreaseAllowance()\\ndecreaseAllowance()\\nIf your dApps use any of the above operations, we recommend using the wrapped token $WMNT instead. The L2 Mainnet contract address for $WMNT is 0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8 \\nConnecting to Mantle Testnet\\nUse the info listed in the Network Details table above to connect your wallets and apps to Mantle testnet.\\nTest $MNT Faucets\\nThe official Mantle Network faucet is deployed on Goerli, and so you'll need to bridge the minted $MNT if you want to use it on L2. Also, make sure you have sufficient test Goerli $ETH in your wallet before minting tokens. You can use the Paradigm or Alchemy faucet to acquire test $ETH on Goerli.\\nGitHub\\nOur GitHub is a good place to familiarize yourself with the Mantle tech stack and find tools and usage examples for reference that'll help you set up a local development environment, integrate our SDK, invoke node RPC endpoints, and more.\\nTooling Quick Access\\nFind the complete list of tools that will help you develop and deploy your dApps on Mantle Network here: Resources and Tooling\\nChain Data and Monitoring\\nAxelar integration: Axelar\\nMantle SDK\\nYou can learn more about the Mantle SDK in Mantle Client SDK. The SDK provides support for the following:\\nInter-network message-passing\\nToken deposit and withdrawal between Layer 1 (L1) and Layer 2 (L2) networks\\nCreation of ERC-20 tokens on L2 mapping to L1 token\\nMonitoring of contract calls, emit messages, etc.\\nBy combining SDK modules, Mantle network can be easily connected to wallets, exchanges, and other application scenarios. Use the link below to navigate to our SDK docs.\\nThirdweb SDK\\nThe thirdweb web3 development framework supports deploying apps to Mantle Network. Learn more about how to use the thirdweb CLI to deploy contracts, and the thirdweb SDK to build your applications connecting to Mantle Network on the Thirdweb SDK page.\\nUsing Mantle Node API\\ndApps need access to nodes to fetch block data and send transactions. Mantle network supports Ethereum's JSON-RPC API implementation with some added custom methods and can be connected to using HTTPS and WebSocket. Find out more on the Mantle Node API page.\\nTutorials\\nInter-layer Message Passing\\nGraph Node\\nQuery subgraph using name\\nOpcode Differences Between EVM and Mantle VM\\n0x40 range - ‘BASEFEE’\\nIntroduced in EIP1559\\n// 0x40 range - block operations. \\nconst ( \\nBLOCKHASH OpCode = 0x40 \\nCOINBASE OpCode = 0x41 \\nTIMESTAMP OpCode = 0x42 \\nNUMBER OpCode = 0x43 \\nDIFFICULTY OpCode = 0x44 \\nRANDOM OpCode = 0x44 // Same as DIFFICULTY \\nGASLIMIT OpCode = 0x45 \\nCHAINID OpCode = 0x46 \\nSELFBALANCE OpCode = 0x47 \\nBASEFEE OpCode = 0x48 \\n)\\nconst ( \\nBLOCKHASH OpCode = 0x40 + iota\\nCOINBASE \\nTIMESTAMP \\nNUMBER \\nDIFFICULTY \\nGASLIMIT \\nCHAINID = 0x46 \\nSELFBALANCE = 0x47\\nL1BLOCKNUMBER = 0x4B \\n)\\n0x50 range - ‘PUSH0’\\nIntroduced in EIP3855\\n// 0x50 range - 'storage' and execution.\\nconst ( \\nPOP OpCode = 0x50 \\nMLOAD OpCode = 0x51 \\nMSTORE OpCode = 0x52 \\nMSTORE8 OpCode = 0x53 \\nSLOAD OpCode = 0x54 \\nSSTORE OpCode = 0x55 \\nJUMP OpCode = 0x56 \\nJUMPI OpCode = 0x57 \\nPC OpCode = 0x58 \\nMSIZE OpCode = 0x59\\nGAS OpCode = 0x5a \\nJUMPDEST OpCode = 0x5b \\nPUSH0 OpCode = 0x5f \\n)\\n// 0x50 range - 'storage' and execution. const ( \\nPOP OpCode = 0x50 + iota \\nMLOAD \\nMSTORE \\nMSTORE8 \\nSLOAD \\nSSTORE \\nJUMP \\nJUMPI \\nPC \\nMSIZE \\nGAS \\nJUMPDEST \\n)\\n0xf0 range - ‘INVALID’\\nIntroduced in EIP141\\n// 0xf0 range - closures. \\nconst ( \\nCREATE OpCode = 0xf0 \\nCALL OpCode = 0xf1 \\nCALLCODE OpCode = 0xf2 \\nRETURN OpCode = 0xf3 \\nDELEGATECALL OpCode = 0xf4\\nCREATE2 OpCode = 0xf5\\nSTATICCALL OpCode = 0xfa \\nREVERT OpCode = 0xfd \\nINVALID OpCode = 0xfe \\nSELFDESTRUCT OpCode = 0xff \\n)\\n// 0xf0 range - closures. \\nconst ( \\nCREATE OpCode = 0xf0 + iota \\nCALL \\nCALLCODE \\nRETURN \\nDELEGATECALL \\nCREATE2 \\nSTATICCALL = 0xfa\\nREVERT = 0xfd \\nSELFDESTRUCT = 0xff \\n)\\nTroubleshooting\\nFollow the link below to see solutions and fixes for issues that hackers commonly encounter.\\nTroubleshooting\\nSupport\\nIf you’re a partner - Please get in touch with us by tagging any relevant team members in \\\"Mantle <> your org’s\\\" telegram chat\\nIf you’re a hacker building on Mantle Network - Please reach out to us via our official Discord channel or Mantle Devs telegram channel\\nIf you’re a developer just trying out the network - Please reach out to us via Discord in the #dev-discussions channel, or raise a ticket for fast response\\nLast updated 11 months ago\",\n  \"markdown\": \"# Developing on Mantle | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nCheck out our repository of Mantle-specific tutorials on the [Mantle GitHub](https://github.com/mantlenetworkio/mantle-tutorial/)!\\n\\n## \\n\\nNetwork Details\\n\\nwss://ws.testnet.mantle.xyz\\n\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers)\\n\\n## \\n\\nContract Addresses\\n\\nThe most updated list of addresses of the contracts deployed on Ethereum and Mantle Network are available on Github. Follow the links below to navigate to the respective address repos.\\n\\nPlease note that there are some common ERC20 contract operations currently inactive for the native $MNT token, namely:\\n\\n*   `transfer()`\\n    \\n*   `approve()`\\n    \\n*   `transferFrom()`\\n    \\n*   `increaseAllowance()`\\n    \\n*   `decreaseAllowance()`\\n    \\n\\nIf your dApps use any of the above operations, we recommend using the wrapped token $WMNT instead. The L2 Mainnet contract address for $WMNT is [`0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8`](https://explorer.mantle.xyz/address/0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8)\\n\\n## \\n\\nConnecting to Mantle Testnet\\n\\nUse the info listed in the [Network Details](https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle#network-details) table above to connect your wallets and apps to Mantle testnet.\\n\\n## \\n\\n**Test $MNT Faucets**\\n\\nThe official Mantle Network faucet is deployed on **Goerli**, and so you'll need to [bridge](https://bridge.testnet.mantle.xyz/) the minted $MNT if you want to use it on L2. Also, make sure you have sufficient test Goerli $ETH in your wallet before minting tokens. You can use the [Paradigm](https://faucet.paradigm.xyz/) or [Alchemy](https://goerlifaucet.com/) faucet to acquire test $ETH on Goerli.\\n\\n## \\n\\nGitHub\\n\\nOur [GitHub](https://github.com/mantlenetworkio/mantle) is a good place to familiarize yourself with the Mantle tech stack and find tools and usage examples for reference that'll help you set up a local development environment, integrate our SDK, invoke node RPC endpoints, and more.\\n\\n## \\n\\nTooling Quick Access\\n\\nFind the complete list of tools that will help you develop and deploy your dApps on Mantle Network here: [Resources and Tooling](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling)\\n\\n**Chain Data and Monitoring**\\n\\n*   Axelar integration: [Axelar](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging#axelar)\\n    \\n\\n## \\n\\n**Mantle SDK**\\n\\nYou can learn more about the Mantle SDK in [Mantle Client SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-client-sdk). The SDK provides support for the following:\\n\\n*   Inter-network message-passing\\n    \\n*   Token deposit and withdrawal between Layer 1 (L1) and Layer 2 (L2) networks\\n    \\n*   Creation of ERC-20 tokens on L2 mapping to L1 token\\n    \\n*   Monitoring of contract calls, emit messages, etc.\\n    \\n\\nBy combining SDK modules, Mantle network can be easily connected to wallets, exchanges, and other application scenarios. Use the link below to navigate to our SDK docs.\\n\\n## \\n\\nThirdweb SDK\\n\\nThe [thirdweb](https://portal.thirdweb.com/sdk) web3 development framework supports deploying apps to Mantle Network. Learn more about how to use the thirdweb CLI to deploy contracts, and the thirdweb SDK to build your applications connecting to Mantle Network on the [Thirdweb SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk) page.\\n\\n## \\n\\nUsing Mantle Node API\\n\\ndApps need access to nodes to fetch block data and send transactions. Mantle network supports Ethereum's JSON-RPC API implementation with some added custom methods and can be connected to using HTTPS and WebSocket. Find out more on the [Mantle Node API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-node-api) page.\\n\\n## \\n\\nTutorials\\n\\n**Inter-layer Message Passing**\\n\\n## \\n\\nGraph Node\\n\\nQuery subgraph using name\\n\\n## \\n\\nOpcode Differences Between EVM and Mantle VM\\n\\n### \\n\\n0x40 range - ‘`BASEFEE`’\\n\\nIntroduced in [EIP1559](https://eips.ethereum.org/EIPS/eip-1559)\\n\\n// 0x40 range - block operations.\\n\\nconst (\\n\\nBLOCKHASH OpCode = 0x40\\n\\nCOINBASE OpCode = 0x41\\n\\nTIMESTAMP OpCode = 0x42\\n\\nNUMBER OpCode = 0x43\\n\\nDIFFICULTY OpCode = 0x44\\n\\nRANDOM OpCode = 0x44 // Same as DIFFICULTY\\n\\nGASLIMIT OpCode = 0x45\\n\\nCHAINID OpCode = 0x46\\n\\nSELFBALANCE OpCode = 0x47\\n\\nBASEFEE OpCode = 0x48\\n\\n)\\n\\nconst (\\n\\nBLOCKHASH OpCode = 0x40 + iota\\n\\nCOINBASE\\n\\nTIMESTAMP\\n\\nNUMBER\\n\\nDIFFICULTY\\n\\nGASLIMIT\\n\\nCHAINID = 0x46\\n\\nSELFBALANCE = 0x47\\n\\nL1BLOCKNUMBER = 0x4B\\n\\n)\\n\\n### \\n\\n0x50 range - ‘`PUSH0`’\\n\\nIntroduced in [EIP3855](https://eips.ethereum.org/EIPS/eip-3855)\\n\\n// 0x50 range - 'storage' and execution.\\n\\nconst (\\n\\nPOP OpCode = 0x50\\n\\nMLOAD OpCode = 0x51\\n\\nMSTORE OpCode = 0x52\\n\\nMSTORE8 OpCode = 0x53\\n\\nSLOAD OpCode = 0x54\\n\\nSSTORE OpCode = 0x55\\n\\nJUMP OpCode = 0x56\\n\\nJUMPI OpCode = 0x57\\n\\nPC OpCode = 0x58\\n\\nMSIZE OpCode = 0x59\\n\\nGAS OpCode = 0x5a\\n\\nJUMPDEST OpCode = 0x5b\\n\\nPUSH0 OpCode = 0x5f\\n\\n)\\n\\n// 0x50 range - 'storage' and execution. const (\\n\\nPOP OpCode = 0x50 + iota\\n\\nMLOAD\\n\\nMSTORE\\n\\nMSTORE8\\n\\nSLOAD\\n\\nSSTORE\\n\\nJUMP\\n\\nJUMPI\\n\\nPC\\n\\nMSIZE\\n\\nGAS\\n\\nJUMPDEST\\n\\n)\\n\\n### \\n\\n0xf0 range - ‘`INVALID`’\\n\\nIntroduced in [EIP141](https://eips.ethereum.org/EIPS/eip-141)\\n\\n// 0xf0 range - closures.\\n\\nconst (\\n\\nCREATE OpCode = 0xf0\\n\\nCALL OpCode = 0xf1\\n\\nCALLCODE OpCode = 0xf2\\n\\nRETURN OpCode = 0xf3\\n\\nDELEGATECALL OpCode = 0xf4\\n\\nCREATE2 OpCode = 0xf5\\n\\nSTATICCALL OpCode = 0xfa\\n\\nREVERT OpCode = 0xfd\\n\\nINVALID OpCode = 0xfe\\n\\nSELFDESTRUCT OpCode = 0xff\\n\\n)\\n\\n// 0xf0 range - closures.\\n\\nconst (\\n\\nCREATE OpCode = 0xf0 + iota\\n\\nCALL\\n\\nCALLCODE\\n\\nRETURN\\n\\nDELEGATECALL\\n\\nCREATE2\\n\\nSTATICCALL = 0xfa\\n\\nREVERT = 0xfd\\n\\nSELFDESTRUCT = 0xff\\n\\n)\\n\\n## \\n\\nTroubleshooting\\n\\nFollow the link below to see solutions and fixes for issues that hackers commonly encounter.\\n\\n[Troubleshooting](https://docs.mantle.xyz/network/network/for-devs/troubleshooting)\\n\\n## \\n\\nSupport\\n\\n*   If you’re a partner - Please get in touch with us by tagging any relevant team members in **\\\"Mantle <> your org’s\\\"** telegram chat\\n    \\n*   If you’re a hacker building on Mantle Network - Please reach out to us via our official Discord channel or Mantle Devs telegram channel\\n    \\n*   If you’re a developer just trying out the network - Please reach out to us via Discord in the **#dev-discussions** channel, or raise a ticket for fast response\\n    \\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0\",\n    \"loadedTime\": \"2025-02-15T20:33:05.256Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0\",\n    \"title\": \"Testnet v0.4.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet v0.4.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/AwK0UfcCfAiIRVraawqk\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YzEzYWZhOTUtODEwNy00NzNkLTg4YjktYjRhZGQzNWFkZjgx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=VcLgyfUpDUpiKCgVYzErULGWBgNfOQ8Xn3LrTQAXUjRCpIBa3vqEKLnIHNfIHlfnqQJlmb%2FM6Sy9BoW4FEY3jllxMCaQdFgAGrW2gHu3Mecy7DbDwyNyGu7TmlRF0arkdaGQXF%2BqJaKBpKpXSk22\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221ebd8c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Testnet v0.4.0 | Network\\nThis network update brings about the following changes:\\nRebranding of the native $BIT token to $MNT\\nAdds fraud proof features\\nEnables delegation for fraud proof and TSS modules\\nOpens up the Mantle DA network for external parties\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\nGitHub Links\\nInstructions for Node Operators\\nThe testnet update is planned to go online at block height 11,000,000. Node operators need to update their node software before that block height to avoid unexpected node behavior.\\nYou can update your node version to v0.4.0 using Docker. The image tags are as follows:\\nFor L2 nodes - l2geth:v0.4.0-1\\nFor DTL service - dtl:v0.4.0\\nYou can also find the updated Docker images here:\\nIf your node continues to sync normally after the node version update, you're good to go! Please get in touch with us if you encounter any issues during the process.\",\n  \"markdown\": \"# Testnet v0.4.0 | Network\\n\\nThis network update brings about the following changes:\\n\\n*   Rebranding of the native $BIT token to $MNT\\n    \\n*   Adds fraud proof features\\n    \\n*   Enables delegation for fraud proof and TSS modules\\n    \\n*   Opens up the Mantle DA network for external parties\\n    \\n\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\n\\n#### \\n\\nGitHub Links\\n\\n## \\n\\nInstructions for Node Operators\\n\\nThe testnet update is planned to go online at block height **11,000,000.** Node operators need to update their node software before that block height to avoid unexpected node behavior.\\n\\nYou can update your node version to v0.4.0 using Docker. The image tags are as follows:\\n\\n*   **For L2 nodes** - `l2geth:v0.4.0-1`\\n    \\n*   **For DTL service** - `dtl:v0.4.0`\\n    \\n\\nYou can also find the updated Docker images here:\\n\\nIf your node continues to sync normally after the node version update, you're good to go! Please [get in touch with us](https://discord.com/invite/0xMantle) if you encounter any issues during the process.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/verifying-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/verifying-contracts\",\n    \"loadedTime\": \"2025-02-15T20:33:04.745Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/verifying-contracts\",\n    \"title\": \"Verifying Contracts | Network\",\n    \"description\": \"Different ways to verify your contracts on Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Verifying Contracts | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Different ways to verify your contracts on Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/nsHkF0YYRFgCx0RCBugp\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWNiZDIwNjYtZTM5NC00OTgzLWE1ZTMtOTExYzQ0MjliYzc2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=A2XmtKARiWY7kM7JU26IGBvJZHa98JDeCarfZnBA6zhYd%2FK8bMGnyQn6C3RBGsdHNVaqy5ax7pXdRewfft%2BRPGo6xKhg7ml1fp3LSMndSOt3wdfVrwxM3b864F77aV6a8ErZUPX%2F3QAZZYpPCWmr\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221891982e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Verifying Contracts | Network\\nDifferent ways to verify your contracts on Mantle Network\\nVerifying a contract means making its source code public, along with the compiler settings you used, which allows anyone to compile it and compare the generated bytecode with the one that is deployed on-chain.\\nUsing Hardhat\\nTo verify your contracts using Hardhat, you'll need an Etherscan API key and custom network configuration in your hardhat.config.ts file. Feel free to refer to the configuration from Mantle Hardhat Starter Kit.\\nYou'll need to modify the hardhat.config.ts configuration to include customChains before moving forward.\\nconst config: HardhatUserConfig = { solidity: \\\"0.8.19\\\", // solidity version defaultNetwork: \\\"mantleTest\\\", networks: { mantle: { url: \\\"https://rpc.mantle.xyz\\\", //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], }, mantleTest: { url: \\\"https://rpc.testnet.mantle.xyz\\\", // testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''] } }, etherscan: { apiKey: process.env.API_KEY, customChains: [ { network: \\\"mantleTest\\\", chainId: 5001, urls: { apiURL: \\\"https://explorer.testnet.mantle.xyz/api\\\", browserURL: \\\"https://explorer.testnet.mantle.xyz\\\" } } ] }, };\\nRun the following command to verify the contract located in the \\\"contracts\\\" directory:\\nnpx hardhat verify --network <network> DEPLOYED_CONTRACT_ADDRESS \\\"Constructor arguments\\\"\\nHere's a sample request and the command line output it produces:\\nnpx hardhat verify --network mantleTest 0x4ECd62E55... Successfully submitted source code for contract contracts/Storage.sol:Storage at 0x4ECd62E55... for verification on the block explorer. Waiting for verification result... Successfully verified contract Storage on the block explorer. https://explorer.testnet.mantle.xyz/address/0x4ECd62E554dF15d3E9A69b97A127A89155E84E18#code\\nIf you see an error that says \\\"Hardhat found multiple contracts in the project...\\\", see the fix on the troubleshooting page.\\nUsing Foundry\\nUse the following forge command to verify the contract you've deployed on Mantle Testnet:\\nforge verify-contract --verifier blockscout --watch \\\\ --verifier-url \\\"https://explorer.testnet.mantle.xyz/api?module=contract&action=verify\\\" \\\\ --compiler-version \\\"v0.8.19+commit.7dd6d404\\\" \\\\ --num-of-optimizations 200 \\\\ --constructor-args $(cast abi-encode <constructor> <param>) --chain 5001 \\\\ <your contract address> <path>:<contract>\\nUsing Remix IDE\\nStart by installing and activating the \\\"Etherscan - Contract Verification\\\" plugin in your Remix IDE from the plugin manager that can be accessed by clicking the icon\\nOnce activated, you can access the plugin by clicking on the icon. Enter your Etherscan API key and save the setting\\nSelect the \\\"Injected Provider - MetaMask\\\" environment to connect to Mantle Testnet under the \\\"Deploy and Run Transactions\\\" tab\\nNow navigate to the \\\"Etherscan - Contract Verification\\\" tab, select the contract you want to verify, and enter the constructor parameters (in hexadecimal), and the contract address. Then click the button\\nObtaining Constructor Parameters\\nConsider the following sample contract code:\\n// SPDX-License-Identifier: GPL-3.0 pragma solidity >=0.7.0 <0.9.0; contract Name { constructor(string memory name) {} }\\nIn order to obtain the hex encoded constructor parameters, first you'll need to compile your code. Then, navigate to the \\\"Deploy and Run Transactions\\\" tab, enter the string parameter in the field next to the \\\"Deploy\\\" button, and then bring up the drop-down menu. \\nClick on the button to copy the hex encoded parameter value, and continue with the verification process.\\nUsing Explorer\\nThere are multiple methods of verification available via Mantle Explorer. \\nLet's go over the steps involved in using the most popular methods.\\nVia Flattened Source Code\\nYou can use Remix, or any other tool, to flatten your contract code.\\nFlatten Using Remix\\nIn Remix, right click on the contract file and click on \\\"Flatten\\\".\\nFlattening a contract with imports will generate a new Solidity file with the flattened code that you can copy, as shown below.\\nFlatten Using Hardhat\\nIf you're using Hardhat to flatten your contract, you can use the following command:\\nnpx hardhat flatten contracts/Airdrop.sol > asAirdropFlatten.sol\\nYou can copy the flattened contract code from the newly generated file.\\nFlatten Using Foundry\\nIf you're using Foundry to flatten your contract, you can use the following command:\\nforge flatten --output src/Storage.flattened.sol src/Storage.sol\\nYou can copy the flattened contract code from the newly generated file.\\nPlugging Flattened Code Into Explorer\\nOnce you have obtained the flattened code, fill in the contract address, contract name, the flattened code, and other fields on Mantle Explorer and proceed with verifying your contract.\\nMake sure to select the correct EVM version\\nVia Standard Input JSON\\nYou can obtain the standard input JSON file by compiling your contract using any of the tools we've used so far. Let's see where the input value code can be found in each case.\\nCompiled Using Remix\\nThe file can be found under the \\\"Solidity Compiler\\\" tab that can be accessed by clicking on the button. Click on the button to bring up a menu from where you can copy the \\\"COMPILERINPUT\\\" code, as shown below.\\nYou can paste and save the copied JSON code in a separate file that can later be imported to the Explorer.\\nCompiled Using Hardhat\\nOnce you've successfully compiled your contract code, you'll be able to find a JSON file (with a long name in hexadecimal) in the \\\"../artifacts/build-info\\\" directory, as shown below. \\nWithin this JSON file, you'll need to copy the input field, as shown below, and then paste the copied code into a new empty JSON file. You can import this file to the Explorer later.\\nCompiled Using Foundry\\nWith Foundry, you'll need to run the following command to obtain the input and output information for your contract code.\\nYou'll then be able to find a JSON file (with a long name in hexadecimal) in the \\\"../out/build-info\\\" directory, as shown below. Copy the input field and paste it in a new empty JSON file, which you can then import to the Explorer.\\nImporting JSON File to Explorer\\nOnce you've obtained the standard input JSON values in a file, you can import it to the Explorer, as shown below.\",\n  \"markdown\": \"# Verifying Contracts | Network\\n\\nDifferent ways to verify your contracts on Mantle Network\\n\\nVerifying a contract means making its source code public, along with the compiler settings you used, which allows anyone to compile it and compare the generated bytecode with the one that is deployed on-chain.\\n\\n## \\n\\nUsing Hardhat\\n\\nTo verify your contracts using Hardhat, you'll need an [Etherscan API key](https://docs.etherscan.io/getting-started/viewing-api-usage-statistics) and custom network configuration in your `hardhat.config.ts` file. Feel free to refer to the configuration from [Mantle Hardhat Starter Kit](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/mantle-hardhat-starter-kit).\\n\\nYou'll need to modify the `hardhat.config.ts` configuration to include `customChains` before moving forward.\\n\\n```\\nconst config: HardhatUserConfig = {\\n    solidity: \\\"0.8.19\\\", // solidity version\\n    defaultNetwork: \\\"mantleTest\\\",\\n    networks: {\\n        mantle: {\\n        url: \\\"https://rpc.mantle.xyz\\\", //mainnet\\n        accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n        },\\n        mantleTest: {\\n        url: \\\"https://rpc.testnet.mantle.xyz\\\", // testnet\\n        accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? '']\\n        }\\n    },\\n    etherscan: {\\n        apiKey: process.env.API_KEY,\\n        customChains: [\\n            {\\n                network: \\\"mantleTest\\\",\\n                chainId: 5001,\\n                urls: {\\n                apiURL: \\\"https://explorer.testnet.mantle.xyz/api\\\",\\n                browserURL: \\\"https://explorer.testnet.mantle.xyz\\\"\\n                }\\n            }\\n        ]\\n    },\\n};\\n```\\n\\nRun the following command to verify the contract located in the **\\\"contracts\\\"** directory:\\n\\n```\\nnpx hardhat verify --network <network> DEPLOYED_CONTRACT_ADDRESS \\\"Constructor arguments\\\"\\n```\\n\\nHere's a sample request and the command line output it produces:\\n\\n```\\nnpx hardhat verify --network mantleTest 0x4ECd62E55...\\nSuccessfully submitted source code for contract\\ncontracts/Storage.sol:Storage at 0x4ECd62E55...\\nfor verification on the block explorer. Waiting for verification result...\\n\\nSuccessfully verified contract Storage on the block explorer.\\nhttps://explorer.testnet.mantle.xyz/address/0x4ECd62E554dF15d3E9A69b97A127A89155E84E18#code\\n```\\n\\nIf you see an error that says **\\\"Hardhat found multiple contracts in the project...\\\"**, see the fix on the [troubleshooting page](https://docs.mantle.xyz/network/network/for-devs/troubleshooting#contract-verification-error-hardhat-found-multiple-contracts-in-the-project-your-mytokencontract-and).\\n\\n## \\n\\nUsing Foundry\\n\\nUse the following `forge` command to verify the contract you've deployed on Mantle Testnet:\\n\\n```\\n   forge verify-contract --verifier blockscout --watch \\\\\\n   --verifier-url \\\"https://explorer.testnet.mantle.xyz/api?module=contract&action=verify\\\" \\\\\\n   --compiler-version \\\"v0.8.19+commit.7dd6d404\\\" \\\\\\n   --num-of-optimizations 200 \\\\\\n   --constructor-args $(cast abi-encode <constructor> <param>)\\n   --chain 5001 \\\\\\n   <your contract address> <path>:<contract>\\n```\\n\\n## \\n\\nUsing Remix IDE\\n\\n1.  Start by installing and activating the \\\"Etherscan - Contract Verification\\\" plugin in your Remix IDE from the plugin manager that can be accessed by clicking the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FsqEtM08KX0g8tuK6NXcL%252Fimage.png%3Falt%3Dmedia%26token%3Dfd868613-f800-475a-af4b-32bd3ba23e98&width=40&dpr=4&quality=100&sign=f86ab68&sv=2) icon\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FsaKwZDthR67GjwaoIW4Q%252Fimage.png%3Falt%3Dmedia%26token%3D4cd1560e-932f-430a-85f2-459aafe1022b&width=768&dpr=4&quality=100&sign=c306883e&sv=2)\\n\\n1.  Once activated, you can access the plugin by clicking on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FS22UDsWa0j31ZC1SxgRS%252Fimage.png%3Falt%3Dmedia%26token%3D90ac3c9b-5b11-49a2-a3e4-30ace5429b97&width=40&dpr=4&quality=100&sign=d6edf163&sv=2) icon. Enter your Etherscan API key and save the setting\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FhQADI1bitVrfIDjwsIAV%252Fimage.png%3Falt%3Dmedia%26token%3De2d6cb0b-3066-4b73-9120-e5ef985914e4&width=768&dpr=4&quality=100&sign=81380630&sv=2)\\n\\n1.  Select the **\\\"Injected Provider - MetaMask\\\"** environment to connect to Mantle Testnet under the **\\\"Deploy and Run Transactions\\\"** tab\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FVl6K13qohzeXa0SEGNcK%252Fimage.png%3Falt%3Dmedia%26token%3Deef7eefd-dcb4-40d2-983a-ac304737815f&width=768&dpr=4&quality=100&sign=288479c6&sv=2)\\n\\n1.  Now navigate to the **\\\"Etherscan - Contract Verification\\\"** tab, select the contract you want to verify, and enter the constructor parameters (in hexadecimal), and the contract address. Then click the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FN0dYm4J2aztj2WJtMRdd%252Fimage.png%3Falt%3Dmedia%26token%3D754dcd63-de71-4e4b-a1bc-841d1e60bf75&width=100&dpr=4&quality=100&sign=6e466488&sv=2) button\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FKn0jLekRLL76ycE1jjvU%252Fimage.png%3Falt%3Dmedia%26token%3Ded17602c-c9b9-43ec-91de-69502bf52b3b&width=768&dpr=4&quality=100&sign=eefe7441&sv=2)\\n\\n#### \\n\\nObtaining Constructor Parameters\\n\\nConsider the following sample contract code:\\n\\n```\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Name {\\n    constructor(string memory name) {}\\n}\\n```\\n\\nIn order to obtain the hex encoded constructor parameters, first you'll need to compile your code. Then, navigate to the **\\\"Deploy and Run Transactions\\\"** tab, enter the string parameter in the field next to the **\\\"Deploy\\\"** button, and then bring up the drop-down menu.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252F6JcgSPbq3XvlTNHEGcXv%252Fimage.png%3Falt%3Dmedia%26token%3Dd3d85273-0f8f-4c1e-a47e-723dbdc50b95&width=768&dpr=4&quality=100&sign=b461cbe1&sv=2)\\n\\nClick on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FFRCefPUZFXeY5dak9fEs%252Fimage.png%3Falt%3Dmedia%26token%3D3560df9a-c737-44ff-b1e4-d03f9b140b5f&width=125&dpr=4&quality=100&sign=15f2cb82&sv=2) button to copy the hex encoded parameter value, and continue with the verification process.\\n\\n## \\n\\nUsing Explorer\\n\\nThere are multiple methods of verification available via Mantle Explorer.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FTQLxl58xUWI52AQd9A8O%252Fimage.png%3Falt%3Dmedia%26token%3D1a48d84a-e907-4c23-8c13-add5aa96530d&width=768&dpr=4&quality=100&sign=d09fb746&sv=2)\\n\\nLet's go over the steps involved in using the most popular methods.\\n\\n### \\n\\nVia Flattened Source Code\\n\\nYou can use Remix, or any other tool, to flatten your contract code.\\n\\n#### \\n\\nFlatten Using Remix\\n\\n1.  In Remix, right click on the contract file and click on **\\\"Flatten\\\"**.\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252Fu4qNlK5CKQGHijtq8AVM%252Fimage.png%3Falt%3Dmedia%26token%3D9a96e728-eb7b-4f8b-b99e-0bb0b8baf045&width=768&dpr=4&quality=100&sign=f9daa9fd&sv=2)\\n\\n1.  Flattening a contract with imports will generate a new Solidity file with the flattened code that you can copy, as shown below.\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252F96GV2wfbKEoNWkb28xnJ%252Fimage.png%3Falt%3Dmedia%26token%3D4af4100c-24ff-4289-934b-f9de872faac2&width=768&dpr=4&quality=100&sign=4c098a23&sv=2)\\n\\n#### \\n\\nFlatten Using Hardhat\\n\\nIf you're using Hardhat to flatten your contract, you can use the following command:\\n\\n```\\nnpx hardhat flatten contracts/Airdrop.sol > asAirdropFlatten.sol\\n```\\n\\nYou can copy the flattened contract code from the newly generated file.\\n\\n#### \\n\\nFlatten Using Foundry\\n\\nIf you're using Foundry to flatten your contract, you can use the following command:\\n\\n```\\nforge flatten --output src/Storage.flattened.sol src/Storage.sol\\n```\\n\\nYou can copy the flattened contract code from the newly generated file.\\n\\n#### \\n\\nPlugging Flattened Code Into Explorer\\n\\nOnce you have obtained the flattened code, fill in the contract address, contract name, the flattened code, and other fields on Mantle Explorer and proceed with verifying your contract.\\n\\nMake sure to select the correct EVM version\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FtxkPqafhUDP4ZfbEPPgM%252Fimage.png%3Falt%3Dmedia%26token%3D0004d3b9-b89e-4ed7-93bd-0d34b1e00791&width=768&dpr=4&quality=100&sign=8205e122&sv=2)\\n\\n### \\n\\nVia Standard Input JSON\\n\\nYou can obtain the standard input JSON file by compiling your contract using any of the tools we've used so far. Let's see where the input value code can be found in each case.\\n\\n#### \\n\\nCompiled Using Remix\\n\\nThe file can be found under the **\\\"Solidity Compiler\\\"** tab that can be accessed by clicking on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FboLEJb0dEHaNaEtZPuGK%252Fimage.png%3Falt%3Dmedia%26token%3D8497549c-e434-496b-81ef-82edc0750136&width=41&dpr=4&quality=100&sign=e8df46f4&sv=2) button. Click on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252Fr8BSEYIOxpXRsZd1Qyks%252Fimage.png%3Falt%3Dmedia%26token%3D7bd4ea96-4e53-44ea-ac9a-210f8d6cc195&width=253&dpr=4&quality=100&sign=799074ef&sv=2) button to bring up a menu from where you can copy the **\\\"COMPILERINPUT\\\"** code, as shown below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FMPSn502a6RhgX64U4fAa%252Fimage.png%3Falt%3Dmedia%26token%3D7c6fa014-6804-483b-9d0b-2b3222ea0916&width=768&dpr=4&quality=100&sign=9c8e3d5c&sv=2)\\n\\nYou can paste and save the copied JSON code in a separate file that can later be imported to the Explorer.\\n\\n#### \\n\\nCompiled Using Hardhat\\n\\nOnce you've successfully compiled your contract code, you'll be able to find a JSON file (with a long name in hexadecimal) in the **\\\"../artifacts/build-info\\\"** directory, as shown below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FCIOcyVXuuMe5zZAI1M7v%252Fimage.png%3Falt%3Dmedia%26token%3D53e9025f-2fc6-465c-9fbd-c6824e40819f&width=768&dpr=4&quality=100&sign=49a87d35&sv=2)\\n\\nWithin this JSON file, you'll need to copy the `input` field, as shown below, and then paste the copied code into a **new** empty JSON file. You can import this file to the Explorer later.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FufY8vd3kY8YfgZvgOPHI%252Fimage.png%3Falt%3Dmedia%26token%3D80c2bef0-a552-4b31-ba40-12f2895d1120&width=768&dpr=4&quality=100&sign=a27cc49c&sv=2)\\n\\n#### \\n\\nCompiled Using Foundry\\n\\nWith Foundry, you'll need to run the following command to obtain the input and output information for your contract code.\\n\\nYou'll then be able to find a JSON file (with a long name in hexadecimal) in the **\\\"../out/build-info\\\"** directory, as shown below. Copy the `input` field and paste it in a **new** empty JSON file, which you can then import to the Explorer.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FUz84HGkU3UIYsz7gwYZI%252Fimage.png%3Falt%3Dmedia%26token%3D7ab1fe90-f159-4a1a-bcb2-dd2c4c184718&width=768&dpr=4&quality=100&sign=b8d5fabe&sv=2)\\n\\n#### \\n\\nImporting JSON File to Explorer\\n\\nOnce you've obtained the standard input JSON values in a file, you can import it to the Explorer, as shown below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FifGpVMK490RWMGicanp8%252Fimage.png%3Falt%3Dmedia%26token%3D54a0b22b-0f9d-4d92-b0b6-d2fcbba153bb&width=768&dpr=4&quality=100&sign=e5f85b5f&sv=2)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts\",\n    \"loadedTime\": \"2025-02-15T20:33:04.635Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts\",\n    \"title\": \"Deploying Contracts | Network\",\n    \"description\": \"Different ways to deploy your contracts to Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying Contracts | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Different ways to deploy your contracts to Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/ht4g839cqTNWNybYw8i7\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzI0Mzk4YTktYmM1ZS00YzQ5LTgxOGEtY2VlOTJlNWU5ZjVj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pOkslZvRYfffLcQxEe0xzQz%2FHxyxMZNtuvC%2BtgLnpB2ze1M4dZnk%2Fc8CHeeXCIm5Xa5BH7YX6T2Oaf%2Bc4op2k%2B5sadvg7wwTQ1SDmn1OcG0WrjaZ0UUwb6Vy%2FkFgOlOa7Z075cM5qahZ%2FhX94EVX\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221bf943b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying Contracts | Network\\nDifferent ways to deploy your contracts to Mantle Network\\nLast updated 11 months ago\",\n  \"markdown\": \"# Deploying Contracts | Network\\n\\nDifferent ways to deploy your contracts to Mantle Network\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers\",\n    \"loadedTime\": \"2025-02-15T20:33:08.560Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers\",\n    \"title\": \"Viewing Transactions between Layers | Network\",\n    \"description\": \"Look up transactions passed between Mantle and Ethereum\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Viewing Transactions between Layers | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Look up transactions passed between Mantle and Ethereum\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/TdiWhufTWjMVR6zXGrHD\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTMzMDk0MzktMGI5ZS00NGY4LWE2ZDktOTUwZWI1NDdjZGEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=XQK7kdOpT5lkccQgiRLlOA7lBGM6IWltcF8YYO2fHzs3TqsIPFc9GrO822iq40T98awDOqTX8UAbxTAjNXPA%2Flyuski5oj151mlsaj7%2FU%2B5oZmJbcfmT24CAJ4x5rtKwtTdrLFwLOnxft9J3cd3c\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128123a0ccbc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Viewing Transactions between Layers | Network\\nLook up transactions passed between Mantle and Ethereum\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nIn this tutorial, we'll be going over how to use the Mantle SDK to view transactions passed between Mantle network (L2) and Ethereum (L1). This function is particularly useful for dApps that make contract calls between L2 and L1.\\nSet up local environment\\nBefore moving ahead, please make sure you have Node.js, Yarn, and Git installed and configured in your environment. We'll need to use them to download and run our example script.\\nLet's download the JS script that we'll be using to make SDK calls. The easiest way is to download the files from the Mantle GitHub repo using a Git command like so:\\ngit clone https://github.com/mantlenetworkio/mantle.git\\nWe need to configure the wallet that we're going to be using to send transactions. In the main directory, you'll see a .env.testnet file. You can specify your wallet private key in the PRIV_KEY field, and an L1_RPC URL for Goerli network. \\nNow, navigate to the ./sdk-view-tx directory and run the yarn command to download the necessary dependencies to your local environment, such as the ethers.js library, the SDK modules, and more. They can all be found in the node_modules directory once you successfully run Yarn.\\nLet's go over the files in the ./sdk-view-tx directory and see what purpose each of them serves.\\nindex.js: the main JS script that sends requests to node RPCs on L1 and L2 to query on-chain data\\npackage.json: specifies dependencies and commands for script automation\\nyarn.lock: specifies dependencies\\nScript Logic\\nWe can now start looking at the code in index.js. \\n#! /usr/local/bin/node const ethers = require(\\\"ethers\\\") const mantleSDK = require(\\\"@mantleio/sdk\\\") // Global variable because we need them almost everywhere let crossChainMessenger const setup = async () => { crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet }) }\\nWe first create a crossChainMessenger object that we'll use to fetch and view transaction information. This operation is limited to fetching public on-chain data using view functions, so we don't need signers to send these requests. However, we do need chain ID values to direct requests to the correct node RPC.\\n// Only the part of the ABI we need to get the symbol const ERC20ABI = [ { \\\"constant\\\": true, \\\"inputs\\\": [], \\\"name\\\": \\\"symbol\\\", \\\"outputs\\\": [ { \\\"name\\\": \\\"\\\", \\\"type\\\": \\\"string\\\" } ], \\\"payable\\\": false, \\\"stateMutability\\\": \\\"view\\\", \\\"type\\\": \\\"function\\\" } ] const getSymbol = async l1Addr => { if (l1Addr == '0x0000000000000000000000000000000000000000') return \\\"ETH\\\" if (l1Addr == '0xc1dC2d65A2243c22344E725677A3E3BEBD26E604') return \\\"MNT\\\"\\nIf the l1Addr field contains all zeroes, this implies the transferred token was $ETH. We also check the l1Addr for $MNT token's contract address.\\nconst l1Contract = new ethers.Contract(l1Addr, ERC20ABI, crossChainMessenger.l1SignerOrProvider) return await l1Contract.symbol() }\\nOtherwise, we fetch the token symbol from the contract. The same query logic can be used for both L1 and L2 contracts.\\n// Describe a cross domain transaction, either deposit or withdrawal const describeTx = async tx => { console.log(`tx:${tx.transactionHash}`) // Assume all tokens have decimals = 18 console.log(`\\\\tAmount: ${tx.amount / 1e18} ${await getSymbol(tx.l1Token)}`) console.log(`\\\\tRelayed: ${await crossChainMessenger.getMessageStatus(tx.transactionHash) == mantleSDK.MessageStatus.RELAYED}`) }\\nThe response of crossDomainMessenger.getMessageStatus()is a MessageStatus enumerated value. What we're checking for is whether the deposit/withdrawal transaction is completed or still in progress.\\nconst main = async () => { await setup() const deposits = await crossChainMessenger.getDepositsByAddress(l1Wallet.address) console.log(`Deposits by address ${addr}`) for (var i=0; i<deposits.length; i++) await describeTx(deposits[i]) const withdrawals = await crossChainMessenger.getWithdrawalsByAddress(l1Wallet.address) console.log(`\\\\n\\\\n\\\\nWithdrawals by address ${addr}`) for (var i=0; i<withdrawals.length; i++) await describeTx(withdrawals[i]) } \\nThe crossChainMessenger.getDepositsByAddress() function call returns records of all deposit transactions made by an address, and crossChainMessenger.getWithdrawalsByAddress() returns records of all withdrawal transactions sent by an address. Finally, we print the deposit and withdraw records to the console.\\nRunning the Script\\nWith L1 and L2 RPC endpoints and the wallet private key configured, you can go ahead and run the index.js script by simply running the yarn testnet command. If you have a local L2 or L1 instance running in your environment, you can switch up the respective RPC URLs in the .env.local configuration file in the main directory and use the yarn local command to run the script locally.\\nResults\\nThe output would look something like:\\nDeposits by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f tx:0x3979f14c8e890aec790fa3743c2d7ae736b48aebfc9dc990e84b77cfaf744525 Amount: 1 L1EPT Relayed: true Withdrawals by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f tx:0xe650064362f163a394d3123e20029ed1b03846a6ae62e4cc8e962482c9cd4814 Amount: 1 L1EPT Relayed: false\\nConclusion\\nAt this point, you should be able to look up deposits and withdrawals performed by any specific address. There are some additional tracing functions in CrossChainMessenger, but they are very similar in terms of operation.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Viewing Transactions between Layers | Network\\n\\nLook up transactions passed between Mantle and Ethereum\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nIn this tutorial, we'll be going over how to use the [Mantle SDK](https://sdk.mantle.xyz/) to view transactions passed between Mantle network (L2) and Ethereum (L1). This function is particularly useful for dApps that make contract calls between L2 and L1.\\n\\n## \\n\\nSet up local environment\\n\\nBefore moving ahead, please make sure you have [Node.js](https://nodejs.org/en/), [Yarn](https://classic.yarnpkg.com/lang/en/), and [Git](https://git-scm.com/) installed and configured in your environment. We'll need to use them to download and run our example script.\\n\\nLet's download the JS script that we'll be using to make SDK calls. The easiest way is to download the files from the Mantle GitHub repo using a Git command like so:\\n\\n```\\ngit clone https://github.com/mantlenetworkio/mantle.git\\n```\\n\\nWe need to configure the wallet that we're going to be using to send transactions. In the main directory, you'll see a `.env.testnet` file. You can specify your wallet private key in the `PRIV_KEY` field, and an `L1_RPC` URL for [Goerli network](https://chainlist.org/chain/5).\\n\\nNow, navigate to the `./sdk-view-tx` directory and run the `yarn` command to download the necessary dependencies to your local environment, such as the ethers.js library, the SDK modules, and more. They can all be found in the `node_modules` directory once you successfully run `Yarn`.\\n\\nLet's go over the files in the `./sdk-view-tx` directory and see what purpose each of them serves.\\n\\n*   `index.js`: the main JS script that sends requests to node RPCs on L1 and L2 to query on-chain data\\n    \\n*   `package.json`: specifies dependencies and commands for script automation\\n    \\n*   `yarn.lock`: specifies dependencies\\n    \\n\\n## \\n\\nScript Logic\\n\\nWe can now start looking at the code in `index.js`.\\n\\n```\\n#! /usr/local/bin/node\\n\\nconst ethers = require(\\\"ethers\\\")\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\")\\n\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger\\n\\nconst setup = async () => {\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({\\n    l1ChainId: process.env.L1_CHAINID,\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet,\\n    l2SignerOrProvider: l2Wallet\\n  })\\n}\\n```\\n\\nWe first create a `crossChainMessenger` object that we'll use to fetch and view transaction information. This operation is limited to fetching public on-chain data using `view` functions, so we don't need signers to send these requests. However, we do need chain ID values to direct requests to the correct node RPC.\\n\\n```\\n// Only the part of the ABI we need to get the symbol\\nconst ERC20ABI = [\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"symbol\\\",\\n    \\\"outputs\\\": [\\n        {\\n            \\\"name\\\": \\\"\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\\n\\nconst getSymbol = async l1Addr => {\\n  if (l1Addr == '0x0000000000000000000000000000000000000000')\\n    return \\\"ETH\\\"\\n  if (l1Addr == '0xc1dC2d65A2243c22344E725677A3E3BEBD26E604')\\n    return \\\"MNT\\\"\\n```\\n\\nIf the `l1Addr` field contains all zeroes, this implies the transferred token was $ETH. We also check the `l1Addr` for $MNT token's contract address.\\n\\n```\\n const l1Contract = new ethers.Contract(l1Addr, ERC20ABI, crossChainMessenger.l1SignerOrProvider)\\n  return await l1Contract.symbol()\\n}\\n```\\n\\nOtherwise, we fetch the token symbol from the contract. The same query logic can be used for both L1 and L2 contracts.\\n\\n```\\n// Describe a cross domain transaction, either deposit or withdrawal\\n\\nconst describeTx = async tx => {\\n  console.log(`tx:${tx.transactionHash}`)\\n  // Assume all tokens have decimals = 18\\n  console.log(`\\\\tAmount: ${tx.amount / 1e18} ${await getSymbol(tx.l1Token)}`)\\n  console.log(`\\\\tRelayed: ${await crossChainMessenger.getMessageStatus(tx.transactionHash)\\n    == mantleSDK.MessageStatus.RELAYED}`)\\n}\\n```\\n\\nThe response of `crossDomainMessenger.getMessageStatus()`is a `MessageStatus` enumerated value. What we're checking for is whether the deposit/withdrawal transaction is completed or still in progress.\\n\\n```\\nconst main = async () => {    \\n    await setup()\\n    const deposits = await crossChainMessenger.getDepositsByAddress(l1Wallet.address)\\n        console.log(`Deposits by address ${addr}`)\\n    for (var i=0; i<deposits.length; i++)\\n      await describeTx(deposits[i])\\n\\n    const withdrawals = await crossChainMessenger.getWithdrawalsByAddress(l1Wallet.address)\\n        console.log(`\\\\n\\\\n\\\\nWithdrawals by address ${addr}`)\\n    for (var i=0; i<withdrawals.length; i++)\\n      await describeTx(withdrawals[i])\\n} \\n```\\n\\nThe `crossChainMessenger.getDepositsByAddress()` function call returns records of all deposit transactions made by an address, and `crossChainMessenger.getWithdrawalsByAddress()` returns records of all withdrawal transactions sent by an address. Finally, we print the deposit and withdraw records to the console.\\n\\n## \\n\\nRunning the Script\\n\\nWith L1 and L2 RPC endpoints and the wallet private key configured, you can go ahead and run the `index.js` script by simply running the `yarn testnet` command. If you have a local L2 or L1 instance running in your environment, you can switch up the respective RPC URLs in the `.env.local` configuration file in the main directory and use the `yarn local` command to run the script locally.\\n\\n## \\n\\nResults\\n\\nThe output would look something like:\\n\\n```\\nDeposits by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f\\ntx:0x3979f14c8e890aec790fa3743c2d7ae736b48aebfc9dc990e84b77cfaf744525\\n        Amount: 1 L1EPT\\n        Relayed: true\\n\\nWithdrawals by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f\\ntx:0xe650064362f163a394d3123e20029ed1b03846a6ae62e4cc8e962482c9cd4814\\n        Amount: 1 L1EPT\\n        Relayed: false\\n```\\n\\n## \\n\\nConclusion\\n\\nAt this point, you should be able to look up deposits and withdrawals performed by any specific address. There are some additional tracing functions in [`CrossChainMessenger`](https://github.com/mantlenetworkio/mantle/blob/4e2e3fe64fc0ba62a473235ec617b4ac2fefd89c/packages/sdk/src/cross-chain-messenger.ts#L58), but they are very similar in terms of operation.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/migrating-usdbit-to-usdmnt-on-goerli\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/migrating-usdbit-to-usdmnt-on-goerli\",\n    \"loadedTime\": \"2025-02-15T20:33:12.454Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/migrating-usdbit-to-usdmnt-on-goerli\",\n    \"title\": \"Migrating $BIT to $MNT on Goerli | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Migrating $BIT to $MNT on Goerli | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/vNnIUfUZwPG81dMToGjH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDA0OGQ0OTgtNDQzOS00NDVhLWFhYzUtODIwYjY2ZDU5NmZm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=qN%2Bjxb312cG2aHxYYDyItNhimk3Rsoaup7LxYzLNFW9dLk%2FVcQr3p9lneYXREhn7%2FBygmQssc7rP1aL0XxMaK%2Fn03pyzjONO6zI0MTgL4qfG5gC684orv0qcNFX494m6aIsbmkYUKCFsYkIC0XbI\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128123f6aef4d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Migrating $BIT to $MNT on Goerli\\nWith the v0.4.0 update on June 9, 2023, we have created a new $MNT token contract on Goerli, since $MNT will serve as the native token of the Mantle ecosystem moving forward. The $BIT contract remains unchanged.\\nHere’s a list of contract addresses on Goerli that we’ll interact with in this guide:\\nIn this short guide, we’ll go over how to migrate your test $BIT to $MNT on Goerli. This is to enable access to $MNT for developers and teams with existing dApps on Goerli testnet that utilize $BIT.\\nWe recommend users without developer experience to wait for the official migration tool to go live and use that to migrate tokens instead!\\nStep 1: Install Foundry and Cast\\nThe first step would be to install Foundry, since we’re going to be using a command line tool, which is part of the foundry developer toolkit, called cast to initiate $BIT approval transactions.\\nTo confirm cast is correctly installed, run this command:\\nIf cast was installed correctly, it will print out the current version, like this:\\ncast 0.2.0 (6cd6618 2022-08-11T00:05:44.416299Z)\\nStep 2: Get an API Key\\nOnce we've installed Foundry, we need to obtain an API key for a Goerli RPC node provider. For this guide, we'll use Infura.\\nCreate an API Key by clicking the “Create new API Key” button, then select “Web3 API” from the Network dropdown menu.\\nAfter entering the name of your key, move to the “Endpoints” tab where you’ll see your API Key!\\nCopy and save it somewhere! You'll need it for the next step.\\nStep 3: Approve $BIT Spending for Migration Contract\\nNow, use the following command to send a transaction to approve $BIT spending for the migration contract. You'll need to replace the arguments with your wallet address containing the $BIT tokens, private key, the amount of $BIT you want to approve, and your API key.\\nNote that the amount of $BIT needs to be specified in wei, which means 1 $BIT will need to be specified as 10^18, or 1 followed by 18 zeroes. You can use this tool for an accurate conversion. \\nThe amount you pass here is important because this is the maximum amount of $BIT the migration contract will be able to migrate. \\nMake sure your wallet has sufficient $gETH to send this transaction\\ncast send --from \\\"your address\\\" --private-key \\\"your private key\\\" 0x5a94dc6cc85fda49d8e9a8b85dde8629025c42be \\\"approve(address,uint256)\\\" 0x144D9B7F34a4e3133C6F347886fBe2700c4cb268 “amount” --rpc-url https://goerli.infura.io/v3/\\\"your api key\\\"\\nUpon running the command, you'll see a response like the following:\\nStep 4: Migrate $BIT to $MNT\\nWe can call the migration contract from Etherscan.\\nFollow the link below to navigate to the migration contract on Etherscan.\\nConnect your wallet to the webpage.\\nYou can now use the migrateAllBIT function is you've approved all the available $BIT in your wallet. To specify an amount, use the migrateBIT function and enter the amount in wei. This means 1 $BIT will be denoted as 10^18, or 1 followed by 18 zeroes. You can use this tool for an accurate conversion. Use the \\\"+\\\" button to select and enter an initial value automatically.\\nClick on the write button to send the transaction.\\nOnce the transaction is sent out successfully, you'll see the $MNT balance update in your wallet.\\nIf you don't see the balance updates, make sure you're connected to Goerli and have imported the $MNT token to your wallet. If you haven't, you can do so using the $MNT token contract address: 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\",\n  \"markdown\": \"# Migrating $BIT to $MNT on Goerli\\n\\nWith the v0.4.0 update on June 9, 2023, we have created a new $MNT token contract on Goerli, since $MNT will serve as the native token of the Mantle ecosystem moving forward. The $BIT contract remains unchanged.\\n\\nHere’s a list of contract addresses on Goerli that we’ll interact with in this guide:\\n\\nIn this short guide, we’ll go over how to migrate your test $BIT to $MNT on Goerli. This is to enable access to $MNT for developers and teams with existing dApps on Goerli testnet that utilize $BIT.\\n\\nWe recommend users without developer experience to wait for the official migration tool to go live and use that to migrate tokens instead!\\n\\n## \\n\\nStep 1: Install Foundry and Cast\\n\\nThe first step would be to install Foundry, since we’re going to be using a command line tool, which is part of the foundry developer toolkit, called `cast` to initiate $BIT approval transactions.\\n\\n2.  To confirm `cast` is correctly installed, run this command:\\n    \\n\\nIf cast was installed correctly, it will print out the current version, like this:\\n\\n```\\ncast 0.2.0 (6cd6618 2022-08-11T00:05:44.416299Z)\\n```\\n\\n## \\n\\nStep 2: Get an API Key\\n\\nOnce we've installed Foundry, we need to obtain an API key for a Goerli RPC node provider. For this guide, we'll use Infura.\\n\\n2.  Create an API Key by clicking the “Create new API Key” button, then select “Web3 API” from the Network dropdown menu.\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Flh3.googleusercontent.com%2FXamXVurDlaoPj8zsh8f-0Zr2zrNk8D4Ay0L4FhcVjNtWFGE5ZQJDdtT2GZJdlZS_ZqZLn79e1cRFzquzRvbU_hxGHCAtzqJXe2rfD2-FmWwGyqNmr0PhHBCjGDqCaBEQf-0d1FcgTKW4Tk8SO2ctqc8&width=768&dpr=4&quality=100&sign=74d1a928&sv=2)\\n\\n1.  After entering the name of your key, move to the “Endpoints” tab where you’ll see your API Key!\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Flh4.googleusercontent.com%2FnC5d8mUDUlCq5XUpBsn0x-TrQdBIyXeJcK69Qssx0QXlfVQvsAYr69GWCASP_U1YBI9lQzCZpcZ2WgYXhyYPWDmiaG_eodTm4cT4oajvKI3CgkftJ4xqwUTzmWlvKnqoYSaFllpo32_LEvRnVls3YxU&width=768&dpr=4&quality=100&sign=39e05051&sv=2)\\n\\nCopy and save it somewhere! You'll need it for the next step.\\n\\n## \\n\\nStep 3: Approve $BIT Spending for Migration Contract\\n\\nNow, use the following command to send a transaction to approve $BIT spending for the migration contract. You'll need to replace the arguments with your wallet address containing the $BIT tokens, private key, the amount of $BIT you want to approve, and your API key.\\n\\nNote that the amount of $BIT needs to be specified in _**wei**_, which means 1 $BIT will need to be specified as 10^18, or 1 followed by 18 zeroes. You can use [this tool](https://eth-converter.com/) for an accurate conversion.\\n\\nThe amount you pass here is important because this is the maximum amount of $BIT the migration contract will be able to migrate.\\n\\nMake sure your wallet has sufficient $gETH to send this transaction\\n\\n```\\ncast send --from \\\"your address\\\" --private-key \\\"your private key\\\" 0x5a94dc6cc85fda49d8e9a8b85dde8629025c42be \\\"approve(address,uint256)\\\" 0x144D9B7F34a4e3133C6F347886fBe2700c4cb268 “amount” --rpc-url https://goerli.infura.io/v3/\\\"your api key\\\"\\n```\\n\\nUpon running the command, you'll see a response like the following:\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Flh6.googleusercontent.com%2F6MnQtj-iY3y-_hW2O6xxt40NPkEFl9_HjjmjlpQHRXupH_OHJAoDzs2sSLZttmM6Pic-T1mvFRlbYs5RMUjb91RQoFirSJQx3o5wvsnT8a5_daWgDMiIyisYbhzNrJvK4xix6p5xLaW-ZPmV4JeJVJ4&width=768&dpr=4&quality=100&sign=11716ea0&sv=2)\\n\\n## \\n\\nStep 4: Migrate $BIT to $MNT\\n\\nWe can call the migration contract from Etherscan.\\n\\n1.  Follow the link below to navigate to the migration contract on Etherscan.\\n    \\n\\n1.  Connect your wallet to the webpage.\\n    \\n2.  You can now use the `migrateAllBIT` function is you've approved all the available $BIT in your wallet. To specify an amount, use the `migrateBIT` function and enter the amount in _**wei**__._ This means 1 $BIT will be denoted as 10^18, or 1 followed by 18 zeroes. You can use [this tool](https://eth-converter.com/) for an accurate conversion. Use the \\\"+\\\" button to select and enter an initial value automatically.\\n    \\n3.  Click on the write button to send the transaction.\\n    \\n\\nOnce the transaction is sent out successfully, you'll see the $MNT balance update in your wallet.\\n\\nIf you don't see the balance updates, make sure you're connected to Goerli and have imported the $MNT token to your wallet. If you haven't, you can do so using the $MNT token contract address: `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs\",\n    \"loadedTime\": \"2025-02-15T20:34:42.368Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"depth\": 3\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:34:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2ZjN2Q2MGItOTFjNC00ZDA0LWExODAtMzY0ZjEwOTdmYjE4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Y1ZqN5wvT8nu8KCjf6tQGs5RkA8ZPgngtjBTyYsceEW2oMfRmBBHiYdoapv%2FMRV68HD%2B9xflw6WuPSgOY25F7DGKFhOWkiJ554NsMYeFhFIahs%2B4WF2ih5UT9LORieMo%2FUsq82wQqOfihvYvWfgr\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814830f47059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme\",\n    \"loadedTime\": \"2025-02-15T20:34:42.657Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"depth\": 3\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:34:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGY2NzFmOWMtMGY5Ni00Nzg5LWI4YTYtYjc1ZmU0ZTc3NTQ0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=h%2BaSIa%2F7KG4gyVrB21j1vQ3FkK%2BpQsvMf8scU9u2P7PfaGFzDYIapqp68MBSJ63feSH3avKVsD0VAqw6G6Un9a%2F%2FDfyuSI%2Fuhozdc6zXPubhOW%2BBii6ptLBpZ0xp8zHaHeVjhx9N00cbEIj3Dsc4\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814839a87a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/additional-documents/audits\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/additional-documents/audits\",\n    \"loadedTime\": \"2025-02-15T20:34:43.782Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"depth\": 3,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/additional-documents/audits\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:34:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWVjNmMwOTItZGRjNy00MDczLWI1MjMtZDY1ODM1MzE2OTUw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dCQc9Xi0eC5DIwwgo8D5QzpZn3C4MbHwyGQ9omiU76xBWx1gcASup3v8qc%2BFBEXexbvpueeebiHUMWuanhTr08xqOD%2BnE81K%2FRSApmo3R7YO63WK0tt7RQjuyKBw67EdAf953rYlvy2bmPSbdyvb\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814830ee9b023-ATL\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nPage not found\\nThe page you are looking for doesn't exist.\",\n  \"markdown\": \"# Network\\n\\n## Page not found\\n\\nThe page you are looking for doesn't exist.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/concepts/data-availability\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/data-availability\",\n    \"loadedTime\": \"2025-02-15T20:34:48.562Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"depth\": 3\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/data-availability\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:34:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2Q3OTgyNWUtNTJhZC00NWQ2LTg4MzEtOTM3Zjc1NGExYzJk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=M649YA5p2JyOROb74G%2FM%2Fjb5%2FBhCpCxSpkzN%2Bm3Tvon4uc5z3CYJmHaB756ThFhAcFtDp8C1wi7XBSieOAiXtM2J%2FPR9p1%2FduRf6MI795cOU%2FR5aqc96oSog%2Fy%2BuRujCDPDTJ07Zmu8m82uP5LiV\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814aaddb5a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/concepts/data-availability?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/concepts/data-availability?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n}]"
  ],
  "chunks": [
    "[{\n  \"url\": \"https://docs.mantle.xyz/network\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network\",\n    \"loadedTime\": \"2025-02-15T20:30:40.288Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 0,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network\",\n    \"title\": \"Overviews | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Overviews | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/TQqhQCjyixjwZ5DGBjGS\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n ",
    "     \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTkyZjk2OWItMDE2My00MWQxLTkzODQtNGVkYWYxZTRmOTMz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors ",
    "https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=1PGqB2Bf04aOUGnnjxZgpJwip0nDJy5NyktXZT%2BIwpqjt%2Fyo2HUxQT%2BNR9qCsRI8AlQ5iB4BOCM36MDO1AT3NtwNexFbdxZ%2BmiTSJNv20qhNpSiQCy7LifbPC3Hj4m7XgJKF%2BfmRPgRgyu%2BxNMyj\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280e6bdfb1f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Overviews | Network\\nMantle Network is dedicated to building an EVM-",
    "compatible scaling solution for Ethereum. This means that all contracts and tools running on Ethereum can operate on the Mantle Network with minimal modifications. Taking advantage of its modular architecture, Mantle Network combines an optimistic rollup with various innovative data availability solutions, providing cheaper and more accessible data availability while inheriting the security of Ethereum.\\nOur protocol design philosophy aims to offer users a less costly and more user-friendly experience, provide developers with a simpler and more flexible development environment, and deliver a comprehensive set of infrastructure for the next wave of mass-adopted dApps.\\nKey Features of Mantle Network\\nBuilt as a Rollup\\nUtilizes Ethereum validators and consensus protocols to significantly reduce gas fees, decrease latency, and increase throughput. Users can customize transaction confirmation requirements to provide near real-time confirmation latency with minimal security settings.\\nModu",
    "lar Architecture\\nUnlike traditional monolithic chains that execute transaction execution, consensus, settlement, and storage at the same network layer, Mantle separates these functions into individual modules as a modular chain. These include an EVM-compatible execution layer developed by Mantle for transaction execution, a consensus layer and settlement layer completed on Ethereum, and an external DA component (currently Mantle DA powered by EigenDA technology; we will switch to EigenDA upon its mainnet stable launch).\\nSecured by Ethereum\\nL2 state transitions are verified by Ethereum validators, undergoing the same consensus and settlement processes as L1 transactions.\\nModular Data Availability\\nIndependent DA modules, such as Mantle DA powered by EigenLayer's EigenDA technology. According to internal assessments, this translates to potential cost savings of more than 90% compared to on-chain L1.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Overviews | Network\\n\\nMantle Network i",
    "s dedicated to building an EVM-compatible scaling solution for Ethereum. This means that all contracts and tools running on Ethereum can operate on the Mantle Network with minimal modifications. Taking advantage of its modular architecture, Mantle Network combines an optimistic rollup with various innovative data availability solutions, providing cheaper and more accessible data availability while inheriting the security of Ethereum.\\n\\nOur protocol design philosophy aims to offer users a less costly and more user-friendly experience, provide developers with a simpler and more flexible development environment, and deliver a comprehensive set of infrastructure for the next wave of mass-adopted dApps.\\n\\n## \\n\\nKey Features of Mantle Network\\n\\n*   **Built as a Rollup**\\n    \\n    *   Utilizes Ethereum validators and consensus protocols to significantly reduce gas fees, decrease latency, and increase throughput. Users can customize transaction confirmation requirements to provide near re",
    "al-time confirmation latency with minimal security settings.\\n        \\n    \\n*   **Modular Architecture**\\n    \\n    *   Unlike traditional [monolithic chains](https://docs.mantle.xyz/network/more/glossary#monolithic-chains) that execute transaction execution, consensus, settlement, and storage at the same network layer, Mantle separates these functions into individual modules as a [modular chain](https://docs.mantle.xyz/network/more/glossary#modular-chains). These include an EVM-compatible execution layer developed by Mantle for transaction execution, a consensus layer and settlement layer completed on Ethereum, and an external DA component (currently Mantle DA powered by EigenDA technology; we will switch to EigenDA upon its mainnet stable launch).\\n        \\n    \\n*   **Secured by Ethereum**\\n    \\n    *   L2 state transitions are verified by Ethereum validators, undergoing the same consensus and settlement processes as L1 transactions.\\n        \\n    \\n*   **Modular Data Availabil",
    "ity**\\n    \\n    *   Independent DA modules, such as Mantle DA powered by EigenLayer's EigenDA technology. According to internal assessments, this translates to potential cost savings of more than **90%** compared to on-chain L1.\\n        \\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/updated-notices/eigenda-migration-for-mantle-sepolia\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/eigenda-migration-for-mantle-sepolia\",\n    \"loadedTime\": \"2025-02-15T20:30:40.288Z\",\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/eigenda-migration-for-mantle-sepolia\",\n    \"title\": \"EigenDA Migration for Mantle Sepolia | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:tit",
    "le\",\n        \"content\": \"EigenDA Migration for Mantle Sepolia | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/pGoJIJRxRDln6HW4FSV5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:36 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-N2M4ZGExMTYtMzA4NS00ZWFhLWI3OGEtMjVlOWUyNTYxODg3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://st",
    "atic.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=d8dUGH05QWmRl6yAT5hf2xKikc63r%2FO2tE6TKxMoaBojQ4qv4%2FdDUDZzPNOj6HDqbb7yjb5GpNVitA%2FDTDhdL3E5CQUF57pAuXSfXUbcdy8kocaA%2BFXTBPKWYkDupd2Z8AJyjjlEsFxsXqSqE7ni\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\":",
    " \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280e86285cf0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"EigenDA Migration for Mantle Sepolia\\nThis hardfork upgrade is currently only happening on the Mantle Sepolia test network.\\nWelcome to the upgrade guide for migrating your node and applications from v1.0.0 to v1.0.1. Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\nWhat's New in This Upgrade?​\\nIn this hardfork upgrade we will include the following upgrades:\\nMigrate Mantle DA to EigenDA - With the launch of EigenDA, we will switch Mantle DA powered by EigenDA to EigenDA for a better and more stable",
    " DA service!\\nFix some bugs of MetaTX service - MetaTX, as a gasless service for Mantle, was found to have a few bugs, which we've modified.\\nFor Node Operators​\\nNode operators should restart their nodes using the new version of Mantle v2 Tectonic (v1.0.1). Please follow the node running tutorial we provide, which contains the running environment requirements and the corresponding steps.\\nChangelogs corresponding to this hardfork upgrade is available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\nFor Developers​\\nIn this upgrade, we have addressed and optimized a series of bugs and issues that were occurring with the MetaTX service. These improvements are aimed at enhancing the overall stability and performance of MetaTX, ensuring a smoother and more reliable experience for developers utilizing this service.\\nWhile upgrade operations may cause temporary inconvenience, we believe that with your support and coopera",
    "tion, we can smoothly finish this upgrade.\\nIf you have any questions or need further assistance regarding to this upgrade, feel free to contact our support team.\\nHappy upgrading! 🎉🎉🎉\\nLast updated 3 months ago\",\n  \"markdown\": \"# EigenDA Migration for Mantle Sepolia\\n\\nThis hardfork upgrade is currently only happening on the Mantle Sepolia test network.\\n\\nWelcome to the upgrade guide for migrating your node and applications from v1.0.0 to v1.0.1. Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\n\\n## \\n\\nWhat's New in This Upgrade?[​](https://docs-v2.mantle.xyz/intro/migration-guides-sepolia#whats-new-in-this-upgrade)\\n\\nIn this hardfork upgrade we will include the following upgrades:\\n\\n*   **Migrate Mantle DA to EigenDA** - With the launch of EigenDA, we will switch Mantle DA powered by EigenDA to EigenDA for a better and more stable DA service!\\n    \\n*   **Fix some bugs of MetaTX service** - MetaTX, as a gasless service for M",
    "antle, was found to have a few bugs, which we've modified.\\n    \\n\\n## \\n\\nFor Node Operators[​](https://docs-v2.mantle.xyz/intro/migration-guides-sepolia#for-node-operators)\\n\\n**Node operators should restart their nodes using the new version of Mantle v2 Tectonic (v1.0.1).** Please follow the node running [tutorial](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker) we provide, which contains the running environment requirements and the corresponding steps.\\n\\n[Changelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2) corresponding to this hardfork upgrade is available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\n\\n## \\n\\nFor Developers[​](https://docs-v2.mantle.xyz/intro/migration-guides-sepolia#for-developers)\\n\\nIn this upgrade, we have addressed and optimized a se",
    "ries of bugs and issues that were occurring with the MetaTX service. These improvements are aimed at enhancing the overall stability and performance of MetaTX, ensuring a smoother and more reliable experience for developers utilizing this service.\\n\\n* * *\\n\\nWhile upgrade operations may cause temporary inconvenience, we believe that with your support and cooperation, we can smoothly finish this upgrade.\\n\\nIf you have any questions or need further assistance regarding to this upgrade, feel free to contact our support team.\\n\\nHappy upgrading! 🎉🎉🎉\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/updated-notices\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices\",\n    \"loadedTime\": \"2025-02-15T20:30:40.078Z\",\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices\",\n    \"title",
    "\": \"Updated Notices | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Updated Notices | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/qZc1p7pVfA1hjogEYqRo\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWMyZWJkZDktNDgyOS00ZDg4LTgxZTQtNThkM2E1ZDA4ZWJl'",
    " 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=vCu%2FixkcKeKOQwJrCHqpopuzRQzt1%2BJWEvoOhqQfKkwB%2FDR4GGkSQN9Alk0jsKnybN1V%2Bii",
    "yAjIjVT8Gld7%2FHAGnb4f79Un9IPwVQnOkqp3e8CjQlknG2%2B2L91iQwJbTcWA3jwWf6RuYMLrRryI%2B\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280e6c8cb2474c-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Updated Notices | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Updated Notices | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%",
    "252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/updated-notices?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/updated-notices?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://d",
    "ocs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:30:48.483Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n    \"depth\": 0,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts\",\n    \"title\": \"Use Remix to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"ope",
    "nGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Remix to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/OFzjOgnLlK7O6i5cJxGT\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-N2RmODgwY2MtY2ZjOC00MTA4LWFlZTMtOGVjNGMyMmM0NTZh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https",
    "://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=r2YVBaav8vh5hIGYggVVawT1FF6iIpOFuZWgQ7tNlNhYuL2SjEGHAtmGJvDGrjikIDFjPoCjK88DMCqQZBFG76sJ4OcXx%2BZC2ey0ZOlNEVe0uogJcWgJ82fXgBRqSCoQmT1mRb79L%2Bjjz1pYByMq\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":",
    "604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ec49815f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Remix to Deploy Smart Contracts\\nRemix's web-based IDE supports writing, testing, debugging, and deploying smart contracts written in Solidity, Yul, and other popular contract development languages.\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Faucet page\\nDeploy your contract​\\nStart by opening Remix in your browser. Create a new .sol file under the \\\"Contracts\\\" folder and start writing your code. This tutorial will use the initial example cont",
    "ract Storage.sol.\\nOnce ready, you can proceed with compiling the contract by either clicking the Compile button on the top, or clicking on the blue button that says \\\"Compile <file_name>\\\", which you can access by navigating to the \\\"Solidity Compiler\\\" tab by clicking on the left.\\nIf the compilation was successful (A green checkmark will appear on the left side), you'll be able to deploy the contract from the \\\"Deploy & run transactions\\\" tab, which can be accessed by clicking on the left.\\nSwitch to Mantle Network in your MetaMask wallet and select \\\"Injected Provider - MetaMask\\\" from the \\\"Environment\\\" dropdown list and select a wallet account that will be used to pay the gas fees. Remix will automatically connect to the network that the wallet is currently connected to. Click on the Deploy button to send the deploy transaction.\\nUpon successful deployment, you'll be able to see the transaction and contract info in the terminal at the bottom, like so:\\nNow you can head over to M",
    "antle blockchain explorer to check the contract details.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Remix to Deploy Smart Contracts\\n\\n[Remix's web-based IDE](https://remix.ethereum.org/) supports writing, testing, debugging, and deploying smart contracts written in Solidity, Yul, and other popular contract development languages.\\n\\n## \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/remix#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nDeploy your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/remix#deploy-your-contract)\\n\\nStart by opening Remix in your browser. Create a new `.sol` file under the **\\\"Contracts\\\"** folder and start writing your code. This tutorial will use the initial example contract `Storage.sol`.\\n\\nOnce ready, you can proceed with compi",
    "ling the contract by either clicking the **Compile** button on the top, or clicking on the blue button that says **\\\"Compile <file\\\\_name>\\\"**, which you can access by navigating to the **\\\"Solidity Compiler\\\"** tab by clicking on the left.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3885809119-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FQliZlRNwHhmzesDU1Ksq%252Fuploads%252FOmnGd1wlX6XOvi7GCPQE%252Fimage.png%3Falt%3Dmedia%26token%3Db42de9e2-e010-4f95-bbd4-cdb2e88b5956&width=300&dpr=4&quality=100&sign=d9d7a656&sv=2)\\n\\nIf the compilation was successful (A green checkmark will appear on the left side), you'll be able to deploy the contract from the **\\\"Deploy & run transactions\\\"** tab, which can be accessed by clicking on the left.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fremix-2-f6db30a606a1a715ab07e0e3f18bedb8.png&width=300&dpr=4&quality=100&sign=dba8aa0a&sv=2)\\n",
    "\\nSwitch to Mantle Network in your MetaMask wallet and select **\\\"Injected Provider - MetaMask\\\"** from the **\\\"Environment\\\"** dropdown list and select a wallet account that will be used to pay the gas fees. Remix will automatically connect to the network that the wallet is currently connected to. Click on the **Deploy** button to send the deploy transaction.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fremix-3-1206181ef7742e278ee23c494c3e69a6.png&width=300&dpr=4&quality=100&sign=4d2f94f2&sv=2)\\n\\nUpon successful deployment, you'll be able to see the transaction and contract info in the terminal at the bottom, like so:\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fremix-4-04e1ed4b15f163c32d2853c9fe5f2219.png&width=300&dpr=4&quality=100&sign=5df2951c&sv=2)\\n\\nNow you can head over to [Mantle blockchain explorer](https://mantlescan.xyz/) to check the contract details.\\n\\nLa",
    "st updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:30:48.692Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n    \"depth\": 0,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts\",\n    \"title\": \"Use Explorer to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"pro",
    "perty\": \"og:title\",\n        \"content\": \"Use Explorer to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/0xfWnUEm04NnZpyFwty5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZGMwMWM4NzktYWJhZC00MGI5LWEwYTAtNzkzMGUxN2EwYmEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src ",
    "'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=vUaMjppHAo7PAuRpPkGj3FH8z8PgfFFbCDbulRnoZoRFC80GT0a4kMYfsBdl6Vp2SNp3JUziJ51r%2BWWhtCCZwVZla%2BhARoQY2YKkGmW2xMIV9MY5awP2AqmgzgSitqIujoa66eI%2FT2sGwAzPIkvJ\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content",
    "-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ec06d83f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Explorer to Verify Smart Contracts\\nThere are multiple methods of verification available via Mantle Explorer.\\nVia Source Code​\\nPlugging Code Into Explorer​\\nOnce you have obtained the source code, fill in the contract address, contract name, the flattened code, and other fields on Mantle Explorer and proceed with verifying your contract.\\nMake sure to select the correct compiler for your contract, the proper EVM version and the optimization number.\\nVia Standard Input JSON​\\nGet JSON file​\\nThe file can be found under the \\\"Solidit",
    "y Compiler\\\" tab that can be accessed by clicking on the left navigate bar.\\nClick on the Compilation Details button to bring up a menu from where you can copy the COMPILERINPUT code, as shown below.\\nImporting JSON file to Explorer​\\nOnce you've obtained the standard input JSON values in a file, you can import it to the explorer, as shown below.\\nChoose \\\"Solidity (Standard-Json-Input)\\\" as the compiler type. \\nUpload the json file and verify it.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Explorer to Verify Smart Contracts\\n\\nThere are multiple methods of verification available via [Mantle Explorer](https://mantlescan.xyz/verifyContract).\\n\\n## \\n\\nVia Source Code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#via-source-code)\\n\\n### \\n\\nPlugging Code Into Explorer[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#plugging-code-into-explorer)\\n\\nOnce you have obtained the source code, fill in the contract address, contract name, the flat",
    "tened code, and other fields on [Mantle Explorer](https://mantlescan.xyz/verifyContract) and proceed with verifying your contract.\\n\\nMake sure to select the correct compiler for your contract, the proper EVM version and the optimization number.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-3-9893936ecddd85016c449f96b7f3a985.png&width=768&dpr=4&quality=100&sign=1dfae141&sv=2)\\n\\n## \\n\\nVia Standard Input JSON[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#via-standard-input-json)\\n\\n### \\n\\nGet JSON file[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#get-json-file)\\n\\n1.  The file can be found under the **\\\"Solidity Compiler\\\"** tab that can be accessed by clicking on the left navigate bar.\\n    \\n    ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-4-eb99e50581b67f4a3c7f2ce943b096cf.png&width=768&dpr=4&quality=100&sig",
    "n=8e647521&sv=2)\\n    \\n2.  Click on the **Compilation Details** button to bring up a menu from where you can copy the `COMPILERINPUT` code, as shown below.\\n    \\n    ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-5-7a9fd705b6a549cba5041f677a8835b7.png&width=768&dpr=4&quality=100&sign=74c36abc&sv=2)\\n    \\n\\n### \\n\\nImporting JSON file to Explorer[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/explorer#importing-json-file-to-explorer)\\n\\nOnce you've obtained the standard input JSON values in a file, you can import it to the explorer, as shown below.\\n\\nChoose \\\"Solidity (Standard-Json-Input)\\\" as the compiler type.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fexplorer-11-b97590c291ac8713469c3111eab3eea4.png&width=768&dpr=4&quality=100&sign=4af0d611&sv=2)\\n\\nUpload the json file and verify it.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%",
    "2F3885809119-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FQliZlRNwHhmzesDU1Ksq%252Fuploads%252Fbe0yiM6g7sAxKzT9zlUx%252Fimage.png%3Falt%3Dmedia%26token%3Dbe4f6c42-4711-408a-a5b6-05c57b2d72ea&width=768&dpr=4&quality=100&sign=23d2e0ba&sv=2)\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"loadedTime\": \"2025-02-15T20:30:53.256Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network\",\n    \"title\": \"Overview | Network\",\n    \"description\": \"Your one-stop guide to understanding the different modules that make up Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"prop",
    "erty\": \"og:title\",\n        \"content\": \"Overview | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Your one-stop guide to understanding the different modules that make up Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/smaoJ5knZHPOtFm81Vkg\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MjlmZDgzY2UtODE3Yy00MDUwLWIxMjEtZDI0MGRkMTllNDY3' ",
    "'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lRBXJvCnQPG5D1fHJX%2BIYd%2FbMkc%2BDHCTTEEXzrBlwDsMnrrasqGPfjykRMCaTGrs3snys6kMxl",
    "76nYCj3AIC0EtgvyRT%2BQJlkOlbP6%2FYFk%2B0iGaJQL0aY9P%2B0MraBUJNg%2BYxOdFQeFQAZ2OXfcqF\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ecf4b72f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Overview | Network\\nYour one-stop guide to understanding the different modules that make up Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nMantle Network is a technology stack for scaling Ethereum, and we strive to be EVM-compatible while doing so. Being EVM-compatible means all the contracts and tools that work on Ethereum also work on Mantle N",
    "etwork with minimal modifications. Users can experiment with exciting web3 apps, and developers can deploy smart contracts in an efficient, low-fee environment. \\nAt its core, Mantle Network has been built with a modular architecture that combines an optimistic rollup protocol with an innovative data availability solution. This allows Mantle Network to inherit security from Ethereum AND offer cheaper and more accessible data availability. \\nIf you find any of these terms unfamiliar, we encourage you to visit Optimistic Rollups and the pages that follow where we go over blockchain, rollups, and Mantle's key innovations in a more approachable way. \\nOn the other hand, if these terms make you excited for the future of blockchain scaling we encourage you to keep reading! \\nMantle Network vs. Non-Rollup Chains\\nEthereum rollups, including Mantle Network, leverage the Ethereum validator set and consensus protocol, which is widely regarded as more secure compared to other layer-1 (L1) validat",
    "or sets. This grants Mantle Network several advantages, such as:\\nCanonical bridging without relying on third-party bridges\\nCensorship resistance\\nFund recovery options even in the event of critical issues on layer-2 (L2)\\nSecured by Ethereum\\nMantle Network is an L2 scalability solution built on top of Ethereum. The validator nodes collect transactions from users and commit them to Ethereum in the form of a \\\"compressed block\\\". This compression saves users expensive gas fees and increases the total possible throughput for transactions. \\nBy building on top of Ethereum, Mantle Network inherits desirable features like-\\nSecured by Ethereum: L2 state transitions are verified by Ethereum validators, going through the same consensus and settlement process as L1 transactions.\\nCommon developer infrastructure: Smart contract development frameworks like Truffle, Hardhat, Foundry, Remix, etc., languages like Solidity, Vyper, Yul, etc., and libraries like Web3.js and ethers.js, etc. can all b",
    "e used on Mantle.\\nAt the same time, Mantle Network offers a superior user experience with multiple other benefits as compared to L1, such as-\\nSignificantly lower gas fees: Users enjoy over 80% reduction in gas fees which are achieved through data compression and modular data availability.\\nReduced latency and improved throughput: Users can customize transaction confirmation requirements, with the lowest security setting providing near real-time confirmation latencies (~10 milliseconds versus Ethereum's ~12 seconds). Additionally, Mantle Network achieves a transaction throughput some 20 times greater than Ethereum (500 TPS versus Ethereum's ~25 TPS)\\nModular Architecture\\nMantle Network takes a modular approach with chain design. While monolithic chains perform transaction execution, consensus, settlement, and storage at the same network layer, these processes are handled by separate modules on Mantle Network. In its initial Mainnet version, Mantle Network functions as a Smart Contrac",
    "t Rollup with modular data availability. Hence,\\nMantle's execution layer provides an EVM-compatible environment for transaction execution where the sequencer produces blocks on L2 and sends state root data to L1\\nConsensus and settlement take place on L1 Ethereum\\nData availability services are provided to network actors through Mantle DA powered by EigenDA technology that stores callback data that would be published to L1 in traditional rollups\\nSequencer Properties\\nThe centralized sequencer on Mantle Network produces L2 blocks by including transactions in them in the order they are received by the nodes. It also publishes updated state roots to L1.\\nWe include can additional sequencer module referred to as Threshold Signature Scheme(TSS). This module consists of a set of whitelisted node operators who sign blocks and contribute to multi-party signatures that help improve the correctness of off-chain transaction execution results. In the event that an N of M threshold is not met, th",
    "e sequencer may re-sequence a batch of L2 blocks, or transition to a backup sequencer.\\nThe transition to a backup sequencer is controlled by the core DevOps team, with measures in place to minimize downtime.\\nFraud Proofs\\nOptimistic Rollups execute transactions that result in state transitions, and updated state data are published to L1 Ethereum assuming their validity and without providing any direct proofs for the same. Mantle Network sends updated state data to a State Commitment Chain (SCC) contract on L1, where network actors can challenge its validity within a challenge period (currently set to 7 days). If the state data goes unchallenged, it is considered valid and final and withdrawal requests that rely on this state data can be processed by other smart contracts.\\nIf a commitment gets challenged, a verifier interacts with the challenger to narrow down the invalidity to a single state transition, at which point its validity is established by executing it. In case of a success",
    "ful challenge, the state transition is discarded and the contract accepts the valid version of the updated state submitted by the challenger.\\nTo learn more about the advantages of this mechanism, check out the Fraud Proofs page talking about it in detail.\\nData Availability\\nData availability (of L2 batch data) is a critical aspect of Ethereum rollups, such that L1 validators can verify the L2 state. DA is generally the most expensive component of rollups, as it requires Ethereum L1 block space. Common industry approaches to data availability include:\\nOn-Chain L1: All data that is needed for proof construction is available on L1.\\nCentralized DA Committees: Data for proof construction is not available on L1. There exists a committee tasked with supplying the data. This approach presents significant cost savings to the rollup, at the risk that data becomes unavailable.\\nModular Data Availability**: Standalone DA modules, like Mantle DA powered by EigenLayer's EigenDA technology. Data ",
    "availability is enabled via DA economic game theory involving rewards and stake slashing. Based on internal evaluations, this translates to a 30-70% cost savings compared to on-chain L1.\\n** denotes approach of the initial Mantle Network Mainnet version\\nCheck out the page on Data Availability to learn more about how modular Data Availability is implemented on Mantle Network.\\nWhere do I get started?\\nMantle Network's L2 rollup infrastructure is being developed to meet the needs of the growing $MNT ecosystem. \\nGet in touch with our growth team here for support.\\nYou can find essential info on how to link your wallet to Mantle Network, acquiring testnet tokens, dev tutorials, and more in the How-to Guides section. If you're a developer, the Developing on Mantle page is a great place to start.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Overview | Network\\n\\nYour one-stop guide to understanding the different modules that make up Mantle Network\\n\\nMantle v2 Tectonic has been released,",
    " please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nMantle Network is a technology stack for scaling Ethereum, and we strive to be EVM-compatible while doing so. Being EVM-compatible means all the contracts and tools that work on Ethereum also work on Mantle Network with minimal modifications. Users can experiment with exciting web3 apps, and developers can deploy smart contracts in an efficient, low-fee environment.\\n\\nAt its core, Mantle Network has been built with a modular architecture that combines an optimistic rollup protocol with an innovative data availability solution. This allows Mantle Network to inherit security from Ethereum AND offer cheaper and more accessible data availability.\\n\\nIf you find any of these terms unfamiliar, we encourage you to visit [Optimistic Rollups](https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups) and the pages that follow where we go over blockchain, rollups, and Mantle's key innovations in a mo",
    "re approachable way.\\n\\nOn the other hand, if these terms make you excited for the future of blockchain scaling we encourage you to keep reading!\\n\\n## \\n\\nMantle Network vs. Non-Rollup Chains\\n\\nEthereum rollups, including Mantle Network, leverage the Ethereum validator set and consensus protocol, which is widely regarded as more secure compared to other layer-1 (L1) validator sets. This grants Mantle Network several advantages, such as:\\n\\n*   Canonical bridging without relying on third-party bridges\\n    \\n*   Censorship resistance\\n    \\n*   Fund recovery options even in the event of critical issues on layer-2 (L2)\\n    \\n\\n## \\n\\nSecured by Ethereum\\n\\nMantle Network is an L2 scalability solution built on top of Ethereum. The validator nodes collect transactions from users and commit them to Ethereum in the form of a \\\"compressed block\\\". This compression saves users expensive gas fees and increases the total possible throughput for transactions.\\n\\nBy building on top of Ethereum,",
    " Mantle Network inherits desirable features like-\\n\\n*   **Secured by Ethereum:** L2 state transitions are verified by Ethereum validators, going through the same consensus and settlement process as L1 transactions.\\n    \\n*   **Common developer infrastructure:** Smart contract development frameworks like Truffle, Hardhat, Foundry, Remix, etc., languages like Solidity, Vyper, Yul, etc., and libraries like Web3.js and ethers.js, etc. can all be used on Mantle.\\n    \\n\\nAt the same time, Mantle Network offers a superior user experience with multiple other benefits as compared to L1, such as-\\n\\n*   **Significantly lower gas fees:** Users enjoy over 80% reduction in gas fees which are achieved through data compression and modular data availability.\\n    \\n*   **Reduced latency and improved throughput:** Users can customize transaction confirmation requirements, with the lowest security setting providing near real-time confirmation latencies (~10 milliseconds versus Ethereum's ~12 seconds)",
    ". Additionally, Mantle Network achieves a transaction throughput some 20 times greater than Ethereum (500 TPS versus Ethereum's ~25 TPS)\\n    \\n\\n## \\n\\nModular Architecture\\n\\nMantle Network takes a modular approach with chain design. While monolithic chains perform transaction execution, consensus, settlement, and storage at the same network layer, these processes are handled by separate modules on Mantle Network. In its initial Mainnet version, Mantle Network functions as a Smart Contract Rollup with modular data availability. Hence,\\n\\n*   Mantle's execution layer provides an EVM-compatible environment for transaction execution where the sequencer produces blocks on L2 and sends state root data to L1\\n    \\n*   Consensus and settlement take place on L1 Ethereum\\n    \\n*   Data availability services are provided to network actors through Mantle DA powered by [EigenDA](https://eigenlayer.xyz/) technology that stores callback data that would be published to L1 in traditional rollups\\n",
    "    \\n\\n## \\n\\nSequencer Properties\\n\\nThe centralized sequencer on Mantle Network produces L2 blocks by including transactions in them in the order they are received by the nodes. It also publishes updated state roots to L1.\\n\\nWe include can additional sequencer module referred to as [Threshold Signature Scheme](https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme)(TSS). This module consists of a set of whitelisted node operators who sign blocks and contribute to multi-party signatures that help improve the correctness of off-chain transaction execution results. In the event that an _N of M_ threshold is not met, the sequencer may re-sequence a batch of L2 blocks, or transition to a backup sequencer.\\n\\nThe transition to a backup sequencer is controlled by the core DevOps team, with measures in place to minimize downtime.\\n\\n## \\n\\nFraud Proofs\\n\\nOptimistic Rollups execute transactions that result in state transitions, and updated state data are p",
    "ublished to L1 Ethereum assuming their validity and without providing any direct proofs for the same. Mantle Network sends updated state data to a State Commitment Chain (SCC) contract on L1, where network actors can challenge its validity within a challenge period (currently set to 7 days). If the state data goes unchallenged, it is considered valid and final and withdrawal requests that rely on this state data can be processed by other smart contracts.\\n\\nIf a commitment gets challenged, a verifier interacts with the challenger to narrow down the invalidity to a single state transition, at which point its validity is established by executing it. In case of a successful challenge, the state transition is discarded and the contract accepts the valid version of the updated state submitted by the challenger.\\n\\nTo learn more about the advantages of this mechanism, check out the [Fraud Proofs](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs) page talking about i",
    "t in detail.\\n\\n## \\n\\nData Availability\\n\\nData availability (of L2 batch data) is a critical aspect of Ethereum rollups, such that L1 validators can verify the L2 state. DA is generally the most expensive component of rollups, as it requires Ethereum L1 block space. Common industry approaches to data availability include:\\n\\n*   **On-Chain L1:** All data that is needed for proof construction is available on L1.\\n    \\n*   **Centralized DA Committees:** Data for proof construction is not available on L1. There exists a committee tasked with supplying the data. This approach presents significant cost savings to the rollup, at the risk that data becomes unavailable.\\n    \\n*   **Modular Data Availability\\\\*\\\\*:** Standalone DA modules, like Mantle DA powered by [EigenLayer's](https://www.eigenlayer.xyz/) EigenDA technology. Data availability is enabled via DA economic game theory involving rewards and stake slashing. Based on internal evaluations, this translates to a 30-70% cost saving",
    "s compared to on-chain L1.\\n    \\n\\n_\\\\*\\\\* denotes approach of the initial Mantle Network Mainnet version_\\n\\nCheck out the page on [Data Availability](https://docs.mantle.xyz/network/network/introduction/concepts/data-availability) to learn more about how modular Data Availability is implemented on Mantle Network.\\n\\n## \\n\\nWhere do I get started?\\n\\nMantle Network's L2 rollup infrastructure is being developed to meet the needs of the growing [**$MNT** ecosystem](https://mantle.xyz/).\\n\\nGet in touch with our growth team [**here**](https://airtable.com/shr9ATBlHZXCKDbPV) for support.\\n\\nYou can find essential info on how to link your wallet to Mantle Network, acquiring testnet tokens, dev tutorials, and more in the [How-to Guides](https://docs.mantle.xyz/network/network/introduction/how-to-guides) section. If you're a developer, the [Developing on Mantle](https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle) page is a great place to start.\\n\\nLast updated 11 months a",
    "go\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-20-tokens-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-20-tokens-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:30:58.576Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-20-tokens-with-the-mantle-sdk\",\n    \"title\": \"Bridging ERC-20 tokens with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging ERC-20 tokens with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/networ",
    "k/~gitbook/ogimage/wI0OA3mE5WgUMBU1uO00\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGFhZGFkNzUtMjUwYi00MDA5LTljMjQtNWVlNzQxYTg5ZGY4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src *",
    " 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=EbtGgD3cDN9HnBvHBuuoz32d0RFCoifF80IZYq8vh9X8pz%2Fce%2BD%2BnYgWX%2FE0fuezvXd5tVoK%2BQ32HPAzG7napnIN6pJ12NgyCuQkJaEyp3%2FK93ENwY4TN9dPHIhZiDPdS8O2uhsx0Ssfbyv%2FferB\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\"",
    ": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f04cd22f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging ERC-20 tokens with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial teaches you how to use the Mantle SDK to transfer ERC-20 tokens between layer 1 (L1) and layer 2 (L2). While you could use the bridge contracts directly. Check the complete code here.\\nSetup​\\nEnsure your computer has:\\nStart L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.",
    "com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC here and replace the L1 RPC URL in the .env file.\\nClone this repository and enter it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-erc20\\nInstall the necessary packages.\\nRun the sample code​\\nThe sample code is in index.js, the whole execution flow will automatically start after running it.\\nNode Environment​\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file .env.local.tmp then use yarn local to execute index.js.\\nIf you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow does it work?​\\nImport the Necessary Libraries​\\nconst ethers = require('ethers'); const mantleSDK = require(",
    "'@mantleio/sdk'); const fs = require('fs');\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nfs: The Node.js fs module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\nNetwork Configuration and Wallet Setup​\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the .env file.\\nconst l1bridge = process.env.L1_BRIDGE; const l2bridge = process.env.L2_BRIDGE; const key = process.env.PRIV_",
    "KEY;\\nl1bridge and l2bridge: Environment variables representing the addresses of the layer 1 (L1) and layer 2 (L2) bridges.\\nkey: The private key retrieved from the environment variables.\\nWe need to deploy the ERC-20 token by ourselves, so we need to create a factory contract at first.\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('L1TestERC20.json')); const L2StandardERC20 = JSON.parse(fs.readFileSync('L2StandardERC20.json')); const factory__L1_ERC20 = new ethers.ContractFactory( L1TestERC20.abi, L1TestERC20.bytecode, ); const factory__L2_ERC20 = new ethers.ContractFactory( L2StandardERC20.abi, L2StandardERC20.bytecode, );\\nThe configuration parameters required for transfers.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let l1ERC20, l2ERC20; let ourAddr;\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2R",
    "pcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wallet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nSetup CrossChainMessenger Object​\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\nourAddr = l1Wallet.address; crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, });\\nDeploy the ERC-20 token on L1.\\nconsole.log('#################### Deploy ERC20 ####################'); console.log('Deploying L1 ERC20...'); const L1_ERC20 = await factory__L1_ERC20 .connect(l1Wallet) .deploy('L1 TEST TOKEN', 'LTT'); await L1_ERC20.deployTransaction.wait(); console.log('L1 ERC20 Contract ExampleToken Address: ', L1_ERC20.address);\\nMi",
    "nt the ERC-20 token on L1.\\nlet amount = ethers.utils.parseEther('10'); await L1_ERC20.connect(l1Wallet).mint(amount); balance = ( await L1_ERC20.connect(l1Wallet).balanceOf(l1Wallet.address) ).toString(); console.log('mint to ', l1Wallet.address, balance, ' success');\\nApprove the ERC-20 token on L1.\\nawait L1_ERC20.connect(l1Wallet).approve(l1bridge, amount); let allowance = await L1_ERC20.connect(l1Wallet).allowance( l1Wallet.address, l1bridge, ); console.log('allowance: ', allowance.toString());\\nDeploy the ERC-20 token on L2.\\nconsole.log('Deploying L2 ERC20...'); const L2_ERC20 = await factory__L2_ERC20 .connect(l2Wallet) .deploy(L1_ERC20.address); await L2_ERC20.deployTransaction.wait(); console.log( 'L2 ERC20 Contract BVM_L2DepositedERC20 Address: ', L2_ERC20.address, '\\\\n', ); l1ERC20 = L1_ERC20; l2ERC20 = L2_ERC20;\\nReport the Balances​\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after ",
    "deposit and withdraw operations.\\nconst reportERC20Balances = async () => { const l1Balance = await l1ERC20.balanceOf(ourAddr); const l2Balance = await l2ERC20.balanceOf(ourAddr); console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`); };\\nDeposit​\\nThe depositERC20 function deposits 1 ERC-20 token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated LTT balance on L1 and L2.\\nTo show that the deposit actually happened we show before and after balances.\\nconsole.log('#################### Deposit ERC20 ####################'); await reportERC20Balances();\\nTo enable the bridge to transfer ERC-20 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-20 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, the",
    "re is a custom bridge contract that needs to get the allowance.\\nconst start = new Date(); // Need the l2 address to know which bridge is responsible const allowanceResponse = await crossChainMessenger.approveERC20( l1ERC20.address, l2ERC20.address, oneToken, );\\nWait until the allowance transaction is processed and then report the time it took and the hash.\\nawait allowanceResponse.wait(); console.log(`Allowance given by tx ${allowanceResponse.hash}`); console.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\ncrossChainMessenger.depositERC20() creates and sends the deposit transaction on L1.\\nconst response = await crossChainMessenger.depositERC20( l1ERC20.address, l2ERC20.address, oneToken, );\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`); await response.wait();\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To sho",
    "w that the deposit actually happened we need to wait until the message is relayed. The waitForMessageStatus function does this for us.\\nconsole.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.RELAYED, );\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\nawait reportERC20Balances(); console.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`);\\nWithdraw​\\nThis function shows how to withdraw ERC-20 from L2 to L1.\\nTo show that the withdrawal actually happened we show before and after balances.\\nconsole.log('#################### Withdraw ERC20 ####################'); const start = new Date(); await reportERC20Balances();\\ncrossChainMessenger.withdrawERC20() creates and sends the withdraw transaction on L2.\\nconst respon",
    "se = await crossChainMessenger.withdrawERC20( l1ERC20.address, l2ERC20.address, oneToken, ); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\nWe need to wait until the message is ready to prove.\\nconsole.log('Waiting for status to be READY_TO_PROVE'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE, );\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log('Waiting for status to change to IN_CHALLENGE_PERIOD'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.Mes",
    "sageStatus.IN_CHALLENGE_PERIOD, ); console.log('In the challenge period, waiting for status READY_FOR_RELAY'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY, );\\nFinalizing the message also takes a bit of time.\\nconsole.log('Ready for relay, finalizing message now'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash); console.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nInvoke deposit and withdraw functions​\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nconst main = async () => { await setup(); await depositERC20(); await withdrawERC20(); }; main() .then(() => process.e",
    "xit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion​\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-20 assets between L1 and L2.\",\n  \"markdown\": \"# Bridging ERC-20 tokens with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial teaches you how to use the Mantle SDK to transfer ERC-20 tokens between layer 1 (L1) and layer 2 (L2). While you _could_ use [the bridge contracts](https://github.com/mantlenetworkio/mantle-v2/blob/develop/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol) directly. Check the complete code [here](https://github.com/mantlenetworkio/mantle-tutorial/blob/main/cross-dom-bridge-erc20/index.js).\\n\\n## \\n\\nSetup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bri",
    "dge-erc20#setup)\\n\\n1.  Ensure your computer has:\\n    \\n2.  Start L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # check status\\n    make ps\\n    ```\\n    \\n    **We highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and enter it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-erc20\\n    ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the sample code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#run-the-sample-code)\\n\\nThe sample code is ",
    "in `index.js`, the whole execution flow will automatically start after running it.\\n\\n### \\n\\nNode Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#node-environment)\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execute `index.js`.\\n\\nIf you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow does it work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#how-does-it-work)\\n\\n### \\n\\nImport the Necessary Libraries[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#import-the-necessary-libraries)\\n\\n```\\nconst ethers = require('ethers');\\nconst mantleSDK = require('@mantleio/sdk');\\nconst fs = require('fs');\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library fo",
    "r interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\n    \\n*   `fs`: The Node.js `fs` module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\n    \\n\\n### \\n\\nNetwork Configuration and Wallet Setup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#network-configuration-and-wallet-setup)\\n\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the `.env` file.\\n\\n```\\nconst l1bridge = process.env.L1_BRIDGE;\\nconst l2bridge = process.env.L2_BRIDGE;\\nco",
    "nst key = process.env.PRIV_KEY;\\n```\\n\\n*   `l1bridge` and `l2bridge`: Environment variables representing the addresses of the layer 1 (L1) and layer 2 (L2) bridges.\\n    \\n*   `key`: The private key retrieved from the environment variables.\\n    \\n\\nWe need to deploy the ERC-20 token by ourselves, so we need to create a factory contract at first.\\n\\n```\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('L1TestERC20.json'));\\nconst L2StandardERC20 = JSON.parse(fs.readFileSync('L2StandardERC20.json'));\\n\\nconst factory__L1_ERC20 = new ethers.ContractFactory(\\n  L1TestERC20.abi,\\n  L1TestERC20.bytecode,\\n);\\nconst factory__L2_ERC20 = new ethers.ContractFactory(\\n  L2StandardERC20.abi,\\n  L2StandardERC20.bytecode,\\n);\\n```\\n\\nThe configuration parameters required for transfers.\\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet l1ERC20, l2ERC20;\\nlet ourAddr;\\n```\\n\\nThen create wallet objects by passing the private key and RPC addresses as para",
    "meters for L1 and L2.\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\nSetup CrossChainMessenger Object[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#setup-crosschainmessenger-object)\\n\\nThe `CrossChainMessenger` object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n```\\nourAddr = l1Wallet.address;\\ncrossChainMessenger = new mantleSDK.CrossChainMessenger({\\n  l1ChainId: process.env.L1_CHAINID,\\n  l2ChainId: process.env.L2_CHAINID,\\n  l1SignerOrProvider: l1Wallet,\\n  l2SignerOrProvider: l2Wallet,\\n  bedrock: true,\\n});\\n```\\n\\nDeploy the ERC-20 token on L1.\\n\\n```\\nconsole.log('#################### Deploy ER",
    "C20 ####################');\\nconsole.log('Deploying L1 ERC20...');\\nconst L1_ERC20 = await factory__L1_ERC20\\n  .connect(l1Wallet)\\n  .deploy('L1 TEST TOKEN', 'LTT');\\nawait L1_ERC20.deployTransaction.wait();\\nconsole.log('L1 ERC20 Contract ExampleToken Address: ', L1_ERC20.address);\\n```\\n\\nMint the ERC-20 token on L1.\\n\\n```\\nlet amount = ethers.utils.parseEther('10');\\nawait L1_ERC20.connect(l1Wallet).mint(amount);\\nbalance = (\\n  await L1_ERC20.connect(l1Wallet).balanceOf(l1Wallet.address)\\n).toString();\\nconsole.log('mint to ', l1Wallet.address, balance, ' success');\\n```\\n\\nApprove the ERC-20 token on L1.\\n\\n```\\nawait L1_ERC20.connect(l1Wallet).approve(l1bridge, amount);\\nlet allowance = await L1_ERC20.connect(l1Wallet).allowance(\\n  l1Wallet.address,\\n  l1bridge,\\n);\\nconsole.log('allowance: ', allowance.toString());\\n```\\n\\nDeploy the ERC-20 token on L2.\\n\\n```\\nconsole.log('Deploying L2 ERC20...');\\nconst L2_ERC20 = await factory__L2_ERC20\\n  .connect(l2Wallet)\\n  .deploy(L1_",
    "ERC20.address);\\nawait L2_ERC20.deployTransaction.wait();\\nconsole.log(\\n  'L2 ERC20 Contract BVM_L2DepositedERC20 Address: ',\\n  L2_ERC20.address,\\n  '\\\\n',\\n);\\n\\nl1ERC20 = L1_ERC20;\\nl2ERC20 = L2_ERC20;\\n```\\n\\n### \\n\\nReport the Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#report-the-balances)\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n```\\nconst reportERC20Balances = async () => {\\n  const l1Balance = await l1ERC20.balanceOf(ourAddr);\\n  const l2Balance = await l2ERC20.balanceOf(ourAddr);\\n  console.log(`Token on L1:${l1Balance}     Token on L2:${l2Balance}`);\\n};\\n```\\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#deposit)\\n\\nThe `depositERC20` function deposits 1 ERC-20 token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for t",
    "he message to get relayed. Finally, we display the updated LTT balance on L1 and L2.\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Deposit ERC20 ####################');\\nawait reportERC20Balances();\\n```\\n\\nTo enable the bridge to transfer ERC-20 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-20 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, there is a custom bridge contract that needs to get the allowance.\\n\\n```\\nconst start = new Date();\\n\\n// Need the l2 address to know which bridge is responsible\\nconst allowanceResponse = await crossChainMessenger.approveERC20(\\n  l1ERC20.address,\\n  l2ERC20.address,\\n  oneToken,\\n);\\n```\\n\\nWait until the allowance transaction is processed and then report the time it took and the hash.\\n\\n```",
    "\\nawait allowanceResponse.wait();\\nconsole.log(`Allowance given by tx ${allowanceResponse.hash}`);\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\n```\\n\\n`crossChainMessenger.depositERC20()` creates and sends the deposit transaction on L1.\\n\\n```\\nconst response = await crossChainMessenger.depositERC20(\\n  l1ERC20.address,\\n  l2ERC20.address,\\n  oneToken,\\n);\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed. The `waitForMessageStatus` function does this for us.\\n\\n```\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessage",
    "Status(\\n  response.hash,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\n\\n```\\nawait reportERC20Balances();\\nconsole.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`);\\n```\\n\\n### \\n\\nWithdraw[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#withdraw)\\n\\nThis function shows how to withdraw ERC-20 from L2 to L1.\\n\\nTo show that the withdrawal actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Withdraw ERC20 ####################');\\nconst start = new Date();\\nawait reportERC20Balances();\\n```\\n\\n`crossChainMessenger.withdrawERC20()` creates and sends the withdraw transaction on L2.\\n\\n```\\nconst response = await crossChainMessenger.withdrawERC20(\\n  l1ERC20.address,\\n  l2ERC20.address,\\n  oneToken,\\n);\\nconsole.log(`Transaction hash (on L2): ${response.hash",
    "}`);\\nawait response.wait();\\n```\\n\\nWe need to wait until the message is ready to prove.\\n\\n```\\nconsole.log('Waiting for status to be READY_TO_PROVE');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE,\\n);\\n```\\n\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to IN_CHALLENGE_PERIOD');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD,\\n);\\n\\nconsole.log('In the challenge period, waiting for status R",
    "EADY_FOR_RELAY');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY,\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n```\\nconsole.log('Ready for relay, finalizing message now');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.finalizeMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\n### \\n\\nInvoke deposit and withdraw functions[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#invoke-deposit-and-withdraw-functions)\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n```\\nconst main = async () => {\\n  await setup();",
    "\\n  await depositERC20();\\n  await withdrawERC20();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-erc20#conclusion)\\n\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-20 assets between L1 and L2.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-721-tokens-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-721-tokens-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:31:00.460Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-erc-721-tokens-with-the-mantl",
    "e-sdk\",\n    \"title\": \"Bridging ERC-721 tokens with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging ERC-721 tokens with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/dIzLeBsyB0Jsjmas2UDP\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:30:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; ",
    "script-src 'self' 'nonce-ZDc2OTg5NTItMGQ4Yi00YjhkLThiODYtMmE2NmY5YzRjNmZm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IsT8P",
    "AsQQDPRGJ%2BvZRl%2FbxfBtHtBMCf9FrF6LkwvB61a1xcYrgvAEp2db3qg%2FgAG8s8GlKA10ibdv%2FHLtZyCK5V3GeCKpJwdNYf2elaBzvquIe2w52zzv39wYpcGnjMwF89KJAQI2E3glBqthryo\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f072b44f0b9-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging ERC-721 tokens with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial teaches you how to use the Ma",
    "ntlenetwork SDK to transfer ERC-721 token between layer 1 (L1) and layer 2 (L2). While you could use the bridge contracts directly\\nSetup\\nEnsure your computer has:\\nStart L1 and L2. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, you can apply your own L1 RPC here and replace the L1 RPC URL in the .env file.\\nClone this repository and enter it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-erc721\\nInstall the necessary packages.\\nRun the sample code\\nThe sample code is in index.js, execute it. This transaction should execute immediately after execution.\\nNode Environment\\nIf you want to test by using your own nodes, you should configure the missing or changing environment v",
    "ariables in file .env.local.tmp then use yarn local to execute index.js. If you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow does it work?\\n#! /usr/local/bin/node const ethers = require(\\\"ethers\\\"); const mantleSDK = require(\\\"@mantleio/sdk\\\"); const fs = require(\\\"fs\\\");\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nfs: The Node.js fs module for file system operations. It may be used later in the code for reading or writing files, although it's not",
    " explicitly used in the provided snippet.\\nNext, the code defines some configuration parameters:\\nconst key = process.env.PRIV_KEY;\\nkey: The private key retrieved from the environment variables.\\nconst L1TestERC721 = JSON.parse(fs.readFileSync(\\\"L1TestERC721.json\\\")); const L2TestERC721 = JSON.parse(fs.readFileSync(\\\"L2TestERC721.json\\\")); const L2ERC721Factory = JSON.parse( fs.readFileSync(\\\"OptimismMintableERC721.json\\\") ); const factory__L1_ERC721 = new ethers.ContractFactory( L1TestERC721.abi, L1TestERC721.bytecode );\\nThe factory of the ERC-721 token on L1.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let l1ERC721, l2ERC721; let tokenId; let ourAddr;\\nThe configuration parameters required for transfers.\\nCreateWallet\\nInitialize the signers of L1 and L2\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wa",
    "llet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nsetup\\nThis function sets up the parameters we need for transfers and then deploys ERC20 on L1 and L2.\\nourAddr = l1Wallet.address; crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, });\\nCreate the CrossChainMessenger object that we use to transfer assets.\\nconsole.log(\\\"#################### Deploy ERC721 ####################\\\"); console.log(\\\"Deploying L1 ERC721...\\\"); const tokenName = \\\"TEST NFT FOR SDK0\\\"; const tokenSymbol = \\\"TESTNFT0\\\"; const L1_ERC721 = await factory__L1_ERC721 .connect(l1Wallet) .deploy(tokenName, tokenSymbol); await L1_ERC721.deployTransaction.wait(); console.log(\\\"L1 ERC721 Contract ExampleToken Address: \\\", L1_ERC721.address);\\nDeploy the ERC-721 token on L1.\\nconst awardTx = await L1_ERC721.connect(l1Wallet).awardItem(l1Wall",
    "et.address, ''); tokenId = (await awardTx.wait()).events[0].args[2].toNumber(); console.log(\\\"award NFT\\\", l1Wallet.address, tokenId, \\\" success\\\");\\nAward the ERC-721 token on L1.\\nconsole.log(\\\"Deploying L2 ERC721...\\\"); const OptimismMintableERC721Factory = new ethers.Contract( L2_OPTIMISM_MINT_FACTORY_ADDRESS, L2ERC721Factory.abi, l2RpcProvider ); const tx = await OptimismMintableERC721Factory.connect( l2Wallet ).createOptimismMintableERC721(L1_ERC721.address, tokenName, tokenSymbol); await tx.wait(); console.log(\\\"depoly l2 erc721 tx hash\\\", tx.hash); const receipt = await l2RpcProvider.getTransactionReceipt(tx.hash); if (!receipt) { console.log(\\\"Transaction not found or not confirmed yet\\\"); return; } const iface = new ethers.utils.Interface(L2ERC721Factory.abi); const log = receipt.logs.find( (log) => log.address.toLowerCase() === L2_OPTIMISM_MINT_FACTORY_ADDRESS.toLowerCase() ); if (!log) { console.log(\\\"Could not find the event log for the new contract creation\\\"); return; } ",
    "const parsedLog = iface.parseLog(log); console.log(\\\"New ERC721 contract address:\\\", parsedLog.args[0]); const L2_ERC721 = new ethers.Contract( parsedLog.args[0], L2TestERC721.abi, l2RpcProvider ); l1ERC721 = L1_ERC721; l2ERC721 = L2_ERC721;\\nDeploy the ERC-721 token on L2.\\nreportERC721Balances\\nThis function reports the ERC-20 balances of the address on both layers.\\nconst reportERC721Balances = async () => { const l1Balance = await l1ERC721.balanceOf(ourAddr); const l2Balance = await l2ERC721.balanceOf(ourAddr); console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`); };\\ndepositERC721\\nThis function shows how to deposit an ERC-721 token from L1 to L2.\\nconsole.log(\\\"#################### Deposit ERC721 ####################\\\"); await reportERC721Balances();\\nTo show that the deposit actually happened we show before and after balances.\\nconst start = new Date(); // Need the l2 address to know which bridge is responsible const start = new Date(); const isApproved = await cross",
    "ChainMessenger.approval( l1ERC721.address, l2ERC721.address ); if (!isApproved) { const approveTx = await crossChainMessenger.approveERC721( l1ERC721.address, l2ERC721.address ); await approveTx.wait(); console.log(`approval given by tx ${approveTx.hash}`); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); }\\nTo enable the bridge to transfer ERC-721 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-721 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, there is a custom bridge contract that needs to get the allowance.\\nconst response = await crossChainMessenger.depositERC721( l1ERC721.address, l2ERC721.address, tokenId, { overrides: { gasLimit: 400000, }, } );\\ncrossChainMessenger.depositERC721() creates and sends the deposit transaction on L1.\\nconsole.log(`Deposit transaction hash (on L1): ${resp",
    "onse.hash}`); await response.wait();\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(\\\"Waiting for status to change to RELAYED\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.RELAYED );\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed. The waitForMessageStatus function does this for us.\\nawait reportERC721Balances() console.log(`depositERC721 took ${(new Date() - start) / 1000} seconds\\\\n`); // depositERC721()\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\nwithdrawERC721\\nThis function shows how to withdraw ERC-721 from L2 to L1.\\nconsole.log(\\\"#################### Withdraw ERC721 #",
    "###################\\\"); const start = new Date(); await reportERC721Balances(); const response = await crossChainMessenger.withdrawERC721( l1ERC721.address, l2ERC721.address, tokenId ); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\ncrossChainMessenger.withdrawERC721() creates and sends the withdraw transaction on L2.\\nconsole.log(\\\"Waiting for status to be READY_TO_PROVE\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE ); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY );\\nWait until the state that includes the ",
    "transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction.\\nconsole.log(\\\"Ready for relay, finalizing message now\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash,{ overrides: { gasLimit: 470000, }, }); console.log(\\\"Waiting for status to change to RELAYED\\\"); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED );\\nFinalizing the message also takes a bit of time.\\nmain\\nA main to run the setup followed by both operations.\\nconst main = async () => { await setup(); await depositERC721(); await withdrawERC721(); }; main() .then(() => process.exit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-721 assets between L1 and L2.\",\n  \"markdown",
    "\": \"# Bridging ERC-721 tokens with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial teaches you how to use the Mantlenetwork SDK to transfer ERC-721 token between layer 1 (L1) and layer 2 (L2). While you _could_ use [the bridge contracts](https://github.com/mantlenetworkio/mantle-v2/blob/5f86db304a9dff61510297223fa27317130d3c5d/packages/contracts-bedrock/contracts/L1/L1ERC721Bridge.sol#L4) directly\\n\\n## \\n\\nSetup\\n\\n1.  Ensure your computer has:\\n    \\n2.  Start L1 and L2. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # check status\\n    make ps\\n ",
    "   ```\\n    \\n    **We highly recommend using the testnet environment, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and enter it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-erc721\\n    ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the sample code\\n\\nThe sample code is in `index.js`, execute it. This transaction should execute immediately after execution.\\n\\n### \\n\\nNode Environment\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execute `index.js`. If you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow does it work?\\n\\n```\\n#! /usr/local/bin/node\\n\\nc",
    "onst ethers = require(\\\"ethers\\\");\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\");\\nconst fs = require(\\\"fs\\\");\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\n    \\n*   `fs`: The Node.js `fs` module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\n    \\n\\nNext, the code defines some configuration parameters:\\n\\n```\\nconst key = process.env.PRIV_KEY;\\n```\\n\\n*   `key`: The private key retrieved from the environment va",
    "riables.\\n    \\n\\n```\\nconst L1TestERC721 = JSON.parse(fs.readFileSync(\\\"L1TestERC721.json\\\"));\\nconst L2TestERC721 = JSON.parse(fs.readFileSync(\\\"L2TestERC721.json\\\"));\\nconst L2ERC721Factory = JSON.parse(\\n  fs.readFileSync(\\\"OptimismMintableERC721.json\\\")\\n);\\n\\n\\nconst factory__L1_ERC721 = new ethers.ContractFactory(\\n  L1TestERC721.abi,\\n  L1TestERC721.bytecode\\n);\\n```\\n\\nThe factory of the ERC-721 token on L1.\\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet l1ERC721, l2ERC721;\\nlet tokenId;\\nlet ourAddr;\\n```\\n\\nThe configuration parameters required for transfers.\\n\\n### \\n\\n`CreateWallet`\\n\\nInitialize the signers of L1 and L2\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\n`setup`\\n",
    "\\nThis function sets up the parameters we need for transfers and then deploys ERC20 on L1 and L2.\\n\\n```\\nourAddr = l1Wallet.address;\\ncrossChainMessenger = new mantleSDK.CrossChainMessenger({\\n  l1ChainId: process.env.L1_CHAINID,\\n  l2ChainId: process.env.L2_CHAINID,\\n  l1SignerOrProvider: l1Wallet,\\n  l2SignerOrProvider: l2Wallet,\\n  bedrock: true,\\n});\\n```\\n\\nCreate the `CrossChainMessenger` object that we use to transfer assets.\\n\\n```\\nconsole.log(\\\"#################### Deploy ERC721 ####################\\\");\\nconsole.log(\\\"Deploying L1 ERC721...\\\");\\nconst tokenName = \\\"TEST NFT FOR SDK0\\\";\\nconst tokenSymbol = \\\"TESTNFT0\\\";\\nconst L1_ERC721 = await factory__L1_ERC721\\n  .connect(l1Wallet)\\n  .deploy(tokenName, tokenSymbol);\\nawait L1_ERC721.deployTransaction.wait();\\nconsole.log(\\\"L1 ERC721 Contract ExampleToken Address: \\\", L1_ERC721.address);\\n```\\n\\nDeploy the ERC-721 token on L1.\\n\\n```\\nconst awardTx = await L1_ERC721.connect(l1Wallet).awardItem(l1Wallet.address, '');\\ntoke",
    "nId = (await awardTx.wait()).events[0].args[2].toNumber();\\nconsole.log(\\\"award NFT\\\", l1Wallet.address, tokenId, \\\" success\\\");\\n```\\n\\nAward the ERC-721 token on L1.\\n\\n```\\nconsole.log(\\\"Deploying L2 ERC721...\\\");\\nconst OptimismMintableERC721Factory = new ethers.Contract(\\n  L2_OPTIMISM_MINT_FACTORY_ADDRESS,\\n  L2ERC721Factory.abi,\\n  l2RpcProvider\\n);\\n\\nconst tx = await OptimismMintableERC721Factory.connect(\\n  l2Wallet\\n).createOptimismMintableERC721(L1_ERC721.address, tokenName, tokenSymbol);\\nawait tx.wait();\\nconsole.log(\\\"depoly l2 erc721 tx hash\\\", tx.hash);\\nconst receipt = await l2RpcProvider.getTransactionReceipt(tx.hash);\\nif (!receipt) {\\n  console.log(\\\"Transaction not found or not confirmed yet\\\");\\n  return;\\n}\\nconst iface = new ethers.utils.Interface(L2ERC721Factory.abi);\\nconst log = receipt.logs.find(\\n  (log) =>\\n    log.address.toLowerCase() ===\\n    L2_OPTIMISM_MINT_FACTORY_ADDRESS.toLowerCase()\\n);\\nif (!log) {\\n  console.log(\\\"Could not find the event log f",
    "or the new contract creation\\\");\\n  return;\\n}\\n\\nconst parsedLog = iface.parseLog(log);\\nconsole.log(\\\"New ERC721 contract address:\\\", parsedLog.args[0]);\\nconst L2_ERC721 = new ethers.Contract(\\n  parsedLog.args[0],\\n  L2TestERC721.abi,\\n  l2RpcProvider\\n);\\nl1ERC721 = L1_ERC721;\\nl2ERC721 = L2_ERC721;\\n```\\n\\nDeploy the ERC-721 token on L2.\\n\\n### \\n\\n`reportERC721Balances`\\n\\nThis function reports the ERC-20 balances of the address on both layers.\\n\\n```\\nconst reportERC721Balances = async () => {\\n  const l1Balance = await l1ERC721.balanceOf(ourAddr);\\n  const l2Balance = await l2ERC721.balanceOf(ourAddr);\\n  console.log(`Token on L1:${l1Balance}    Token on L2:${l2Balance}`);\\n};\\n```\\n\\n### \\n\\n`depositERC721`\\n\\nThis function shows how to deposit an ERC-721 token from L1 to L2.\\n\\n```\\nconsole.log(\\\"#################### Deposit ERC721 ####################\\\");\\nawait reportERC721Balances();\\n```\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n",
    "```\\nconst start = new Date();\\n\\n// Need the l2 address to know which bridge is responsible\\nconst start = new Date();\\n\\nconst isApproved = await crossChainMessenger.approval(\\n  l1ERC721.address,\\n  l2ERC721.address\\n);\\nif (!isApproved) {\\n  const approveTx = await crossChainMessenger.approveERC721(\\n    l1ERC721.address,\\n    l2ERC721.address\\n  );\\n  await approveTx.wait();\\n  console.log(`approval given by tx ${approveTx.hash}`);\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\n}\\n```\\n\\nTo enable the bridge to transfer ERC-721 tokens, it needs to get an allowance first. The reason to use the SDK here is that it looks up the bridge address for us. While most ERC-721 tokens go through the standard bridge, a few require custom business logic that has to be written into the bridge itself. In those cases, there is a custom bridge contract that needs to get the allowance.\\n\\n```\\nconst response = await crossChainMessenger.depositERC721(\\n  l1ERC721.address,\\n  l",
    "2ERC721.address,\\n  tokenId,\\n  {\\n    overrides: {\\n      gasLimit: 400000,\\n    },\\n  }\\n);\\n```\\n\\n[`crossChainMessenger.depositERC721()`](https://github.com/mantlenetworkio/mantle/blob/main/packages/sdk/src/cross-chain-messenger.ts#L986) creates and sends the deposit transaction on L1.\\n\\n```\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(\\\"Waiting for status to change to RELAYED\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.RELAYED\\n);\\n```\\n\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed. The [`waitForMessageStatus`](https://github.com/mantlenetworkio/mantle/blob/4e2",
    "e3fe64fc0ba62a473235ec617b4ac2fefd89c/packages/sdk/src/cross-chain-messenger.ts#L508) function does this for us.\\n\\n```\\nawait reportERC721Balances()\\nconsole.log(`depositERC721 took ${(new Date() - start) / 1000} seconds\\\\n`);\\n// depositERC721()\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\n\\n### \\n\\n`withdrawERC721`\\n\\nThis function shows how to withdraw ERC-721 from L2 to L1.\\n\\n```\\nconsole.log(\\\"#################### Withdraw ERC721 ####################\\\");\\nconst start = new Date();\\nawait reportERC721Balances();\\n\\nconst response = await crossChainMessenger.withdrawERC721(\\n  l1ERC721.address,\\n  l2ERC721.address,\\n  tokenId\\n);\\nconsole.log(`Transaction hash (on L2): ${response.hash}`);\\nawait response.wait();\\n```\\n\\n[`crossChainMessenger.withdrawERC721()`](https://github.com/mantlenetworkio/mantle/blob/main/packages/sdk/src/cross-chain-messenger.ts#L1015) creat",
    "es and sends the withdraw transaction on L2.\\n\\n```\\nconsole.log(\\\"Waiting for status to be READY_TO_PROVE\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE\\n);\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY\\n);\\n```\\n\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction.\\n\\n```\\nconsole.log(\\\"Ready for relay, finalizing message now\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.",
    "finalizeMessage(response.hash,{\\n    overrides: {\\n      gasLimit: 470000,\\n    },\\n  });\\n\\nconsole.log(\\\"Waiting for status to change to RELAYED\\\");\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n### \\n\\n`main`\\n\\nA `main` to run the setup followed by both operations.\\n\\n```\\nconst main = async () => {\\n  await setup();\\n  await depositERC721();\\n  await withdrawERC721();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion\\n\\nYou should now be able to write applications that use our SDK and bridge to transfer ERC-721 assets between L1 and L2.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/updated-notices/mantle-network-mainnet-v2-tectonic-up",
    "grade-guide\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/mantle-network-mainnet-v2-tectonic-upgrade-guide\",\n    \"loadedTime\": \"2025-02-15T20:31:08.200Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/updated-notices/mantle-network-mainnet-v2-tectonic-upgrade-guide\",\n    \"title\": \"Mantle Network Mainnet v2 Tectonic Upgrade Guide | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Network Mainnet v2 Tectonic Upgrade Guide | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Gf9SJflg5yLNf5zZQw5Q\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:05 GMT\",\n ",
    "     \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2JlMDI5ZWMtNDI2Ny00NTQ5LTg2MTUtZWIwNTFiNmVmZjNm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; ",
    "font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RyWB3bhZJ8EMkFaZRZMEq7GdEM46B8aIDtpJmCj%2FMWb6%2BkAf%2FYXIgJM346QSrSvUwAGuK0aj4hFvt94wt0wAVbRjjttLU3pAwKfkKOxYZvfmNGgLQ0zGKt1wK8SiRHjdLtgfZ2W%2Fu8U5PVIia93U\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91",
    "280f3c9ad42ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Network Mainnet v2 Tectonic Upgrade Guide\\nWelcome to the upgrade guide for migrating your node and applications from Mantle Network Mainnet Alpha v1 (Mantle v1) to Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic). Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\nFor Node Operators​\\nNode operators should restart their nodes using the new version of Mantle v2 Tectonic. Please follow the node running tutorial we provide, which contains the running environment requirements and the corresponding steps.\\nChangelogs corresponding to Mantle v2 Tectonic versions are available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\nFor Developers​\\nDevelopers should ensure your contracts adapt to new features and updates introduced in Man",
    "tle v2 Tectonic, such as gas estimation. Mantle v2 Tectonic supports multiple contract deployment tools, for more information please check here.\\nMantle v2 has modified and optimized fee mechanisms. When constructing transactions, remember to call the estimateGas interface to ensure your transactions execute smoothly and receive appropriate fees. More details here.\\nOur Goerli testnet has been upgraded to Mantle v2 Tectonic. Developers are advised to check the status of your contracts on this testnet. If any issues arise, it's essential to address and fix them to avoid potential problems on the mainnet and redeploy your contracts.\\nMantle v2 Tectonic introduces a new fee collection which will minimize your transaction fees, for information on optimizing gas fees, please check here.\\nFor Users​\\nUsers should suspend the use of on-chain products related to Mantle Netork during the upgrade process to avoid assets loss. For the new features of Mantle v2, please check here.\\nBridge Assets​\\",
    "nDuring the upgrade process, we will suspend the use of the bridge, so after the upgrade, you may face the following issues:\\nIf you have already applied to withdraw your assets on the mainnet and have completed the 7-days challenge period before the upgrade, please withdraw as soon as possible.\\nIf you haven't withdrawn your assets before the upgrade (no matter if you have completed your challenge period), you will need to prove your withdraw request after the upgrade and then wait for another 7 days.\\nIn Mantle v2 Tectonic, if you need to withdraw your assets via bridge, we have introduced a new two-step withdrawal process. Before entering the 7-days challenge period, you will also need to perform the \\\"prove\\\" operation. For more details, please refer to this.\\nIf you want to experience the ultimate trading experience and low transaction fees on Mantle v2 Tectonic, please configure your wallet, for more information please check here!\\nWhile upgrade operations may cause temporary inc",
    "onvenience, we believe that with your support and cooperation, we can smoothly transition from Mantle v1 to v2.\\nIf you have any questions or need further assistance regarding Mantle v2 Tectonic, feel free to contact our support team.\\nHappy upgrading! 🎉🎉🎉\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle Network Mainnet v2 Tectonic Upgrade Guide\\n\\nWelcome to the upgrade guide for migrating your node and applications from Mantle Network Mainnet Alpha v1 (Mantle v1) to Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic). Below, we provide tailored instructions for different user roles to ensure a smooth upgrade process.\\n\\n## \\n\\nFor Node Operators[​](https://docs-v2.mantle.xyz/intro/migration-guides#for-node-operators)\\n\\n**Node operators should restart their nodes using the new version of Mantle v2 Tectonic.** Please follow the node running [tutorial](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node",
    "-from-docker) we provide, which contains the running environment requirements and the corresponding steps.\\n\\n[Changelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.0) corresponding to Mantle v2 Tectonic versions are available, detailing changes and new features. Review these changelogs to understand post-upgrade alterations and optimizations.\\n\\n## \\n\\nFor Developers[​](https://docs-v2.mantle.xyz/intro/migration-guides#for-developers)\\n\\n**Developers should ensure your contracts adapt to new features and updates introduced in Mantle v2 Tectonic, such as** [**gas estimation**](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees#why-we-need-to-use-estimategas)**.** Mantle v2 Tectonic supports multiple contract deployment tools, for more information please check [here](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts).\\n\\n*   Mantle v2 has modified and optimized fee mec",
    "hanisms. When constructing transactions, remember to call the `estimateGas` interface to ensure your transactions execute smoothly and receive appropriate fees. More details [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees).\\n    \\n*   Our Goerli testnet has been upgraded to Mantle v2 Tectonic. Developers are advised to check the status of your contracts on this testnet. If any issues arise, it's essential to address and fix them to avoid potential problems on the mainnet and redeploy your contracts.\\n    \\n*   Mantle v2 Tectonic introduces a new fee collection which will minimize your transaction fees, for information on optimizing gas fees, please check [here](https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees).\\n    \\n\\n## \\n\\nFor Users[​](https://docs-v2.mantle.xyz/intro/migration-guides#for-users)\\n\\n**Users should suspend the use of on-chain products related to Mantle Netork during the upgrade process to avoid assets",
    " loss.** For the new features of Mantle v2, please check [here](https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic).\\n\\n#### \\n\\nBridge Assets[​](https://docs-v2.mantle.xyz/intro/migration-guides#bridge-assets)\\n\\nDuring the upgrade process, we will suspend the use of the bridge, so after the upgrade, you may face the following issues:\\n\\n*   If you have already applied to withdraw your assets on the mainnet and have completed the 7-days challenge period before the upgrade, please withdraw as soon as possible.\\n    \\n*   If you haven't withdrawn your assets before the upgrade (no matter if you have completed your challenge period), you will need to prove your withdraw request after the upgrade and then wait for another 7 days.\\n    \\n\\n*   In Mantle v2 Tectonic, if you need to withdraw your assets via bridge, we have introduced a new two-step withdrawal process. Before entering the 7-days challenge period, you will also need to perform the \\\"prove\\\" operation.",
    " For more details, please refer to [this](https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge#withdraw-mnt).\\n    \\n*   If you want to experience the ultimate trading experience and low transaction fees on Mantle v2 Tectonic, please configure your wallet, for more information please check [here](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network)!\\n    \\n\\nWhile upgrade operations may cause temporary inconvenience, we believe that with your support and cooperation, we can smoothly transition from Mantle v1 to v2.\\n\\nIf you have any questions or need further assistance regarding Mantle v2 Tectonic, feel free to contact our support team.\\n\\nHappy upgrading! 🎉🎉🎉\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/troubleshooting\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/troubleshooting\",\n    ",
    "\"loadedTime\": \"2025-02-15T20:31:10.358Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/troubleshooting\",\n    \"title\": \"Troubleshooting | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Troubleshooting | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/670ddQ5vacA3R3nOu551\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC,",
    " Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGJjMWUwMTEtNTNmNy00MmFiLWI2MjgtYjhlZjcyNzBkZDRh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\",
    "\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=73fO60yhftJzMb9lnyLzfPswXWHAQqIrmu%2BfRintGwsFnhw7wktOhlGUpTuftlfW3%2BG6B0BdwGflQO4sPZIWOIF475ssszfxTpHhfhsTwHdhzxiT3aaF%2BW4jcj93Ckwql%2F7tbam4aJFFnALCrucg\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f46ae9f2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Troubleshooting | Network\\nGeneral​\\nStatus code: 429 {\\\"error\\\": \\\"API rate limit exceeded\\\"}\\nThe official Mantle RPC employs rate limiting to ",
    "ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers here.\\nRPC call Error: timeout\\nWhile calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\nSo under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set higher timeout parameter accordingly to solve the timeout issue.\\nError: intrinsic gas too low\\nThis is due to your gaslimit being set too low. The ",
    "gaslimit setting needs to be taken seriously, and we explain why you need the right gaslimit here!\\nError: replacement transaction underpriced\\nThis error usually occurs when you need to replace a transaction with the same nonce. Note that if you need to replace an old transaction with a new transaction with the same nonce, you need to set the gasprice by 1.1x!\\nSmart Contracts​\\nDeployment Issues​\\nContract deploy error: \\\"max code size exceeded.\\\"\\nSet optimizer bigger. Such as:\\nmodule.exports = { solidity: { version: '0.8.4', settings: { optimizer: { enabled: true, runs: 10000, }, }, }, };\\n\\\"insufficient gas for l1Cost. Please use estimateGas to get gasLimit.\\\"\\nThe reason for this error is that Mantle's gas model is different from Ethereum, and the forge script command broadcasts the transaction without estimating the gas using the provided mantle rpc. You can fix this error by these 2 ways:\\nUpgrade your Foundry tools version to the latest.\\nAdd --skip-simulation to the forge sc",
    "ript command.\\nVerification Issues​\\nContract verification error: Hardhat found multiple contracts in the project (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode\\nIf you see this error, try verifying the contract again by specifying the name of the contract that you're looking to verify. You can do this using the --contract option. Here's an example:\\nnpx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\nContracts Call Issues\\nError: Failed to send transaction. Context: (code: -32000, message: failed to forward tx to sequencer, please try again. Error message: 'intrinsic gas too low', data: None)\\nThe reason for this error is that Mantle's gas model is different from Ethereum, and the forge script command broadcasts the transaction without estimating the gas using the provided mantle rpc. Two things should be noted when using ",
    "it:\\nSet the priority-gas-price to 0.\\nUpgrade your Foundry tools version to the latest or add --skip-simulation to the forge script command.\\nStandard Bridge​\\nError when withdrawing: no bridge found for token pair\\nTry switching to a different RPC provider.\\nExplorer​\\nError: Awaiting internal transactions for reason\\nYou may encounter this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\",\n  \"markdown\": \"# Troubleshooting | Network\\n\\n## \\n\\nGeneral[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#general)\\n\\n*   **Status code: 429 {\\\"error\\\": \\\"API rate limit exceeded\\\"}**\\n    \\n    The official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise d",
    "ue to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n*   **RPC call Error: timeout**\\n    \\n    While calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\n    \\n    So under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set higher timeout parameter accordingly to solve the timeout issue.\\n    \\n*   **Error: intrinsic gas too low**\\n    \\n    This is due to your `gaslimit` being set to",
    "o low. The `gaslimit` setting needs to be taken seriously, and we explain why you need the right `gaslimit` [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees#estimate-fees-in-mantle-v2-tectonic)!\\n    \\n*   **Error: replacement transaction underpriced**\\n    \\n    This error usually occurs when you need to replace a transaction with the same nonce. Note that if you need to replace an old transaction with a new transaction with the same nonce, you need to set the `gasprice` by **1.1x**!\\n    \\n\\n## \\n\\nSmart Contracts[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#smart-contracts)\\n\\n### \\n\\nDeployment Issues[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#deployment-issues)\\n\\n*   **Contract deploy error: \\\"max code size exceeded.\\\"**\\n    \\n    Set `optimizer` bigger. Such as:\\n    \\n    ```\\n    module.exports = {\\n      solidity: {\\n        version: '0.8.4',\\n        settings: {\\n          optimizer: {\\n            ena",
    "bled: true,\\n            runs: 10000,\\n          },\\n        },\\n      },\\n    };\\n    ```\\n    \\n\\n*   **\\\"insufficient gas for l1Cost. Please use estimateGas to get gasLimit.\\\"**\\n    \\n    The reason for this error is that Mantle's gas model is different from Ethereum, and the `forge script` command broadcasts the transaction without estimating the gas using the provided mantle rpc. You can fix this error by these 2 ways:\\n    \\n    1.  Upgrade your Foundry tools version to the latest.\\n        \\n    2.  Add `--skip-simulation` to the `forge script` command.\\n        \\n    \\n\\n### \\n\\nVerification Issues[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#verification-issues)\\n\\n*   **Contract verification error: Hardhat found multiple contracts in the project (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode**\\n    \\n    If you see this error, try verifying the cont",
    "ract again by specifying the name of the contract that you're looking to verify. You can do this using the --contract option. Here's an example:\\n    \\n    ```\\n    npx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\n    ```\\n    \\n\\n### \\n\\nContracts Call Issues\\n\\n*   **Error: Failed to send transaction. Context: (code: -32000, message: failed to forward tx to sequencer, please try again. Error message: 'intrinsic gas too low', data: None)**\\n    \\n    The reason for this error is that Mantle's gas model is different from Ethereum, and the `forge script` command broadcasts the transaction without estimating the gas using the provided mantle rpc. Two things should be noted when using it:\\n    \\n    1.  Set the `priority-gas-price` to 0.\\n        \\n    2.  Upgrade your Foundry tools version to the latest or add `--skip-simulation` to the `forge script` command.\\n        \\n    \\n\\n## \\n\\nStandard Bridge[​](https://docs-v2.mantle.xyz/",
    "devs/dev-guides/troubleshooting#standard-bridge)\\n\\n*   **Error when withdrawing: no bridge found for token pair**\\n    \\n    Try switching to a different [RPC provider](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n\\n## \\n\\nExplorer[​](https://docs-v2.mantle.xyz/devs/dev-guides/troubleshooting#explorer)\\n\\n*   **Error: Awaiting internal transactions for reason**\\n    \\n    You may encounter this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/faqs\",\n    \"loadedTime\": \"2025-02-15T20:31:11.554Z\",\n    \"referrerUrl\": \"https://docs.mantle.xy",
    "z/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/g5QMQeZ8bJiVgvdLpggK\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-se",
    "curity-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmI0ZTJjMGMtYmZmNC00ZDBlLTliMzUtZjcwNjQ4ZTBjYWEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{",
    "\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7dzWrLYB%2F%2Brcqy3r5adXoWF9UOICFfSaRTlYNy3Q65qf0ekcmMjnpgtFdyHbP8I8TghgaP7GBublqnA8%2F7YVzt6THyAM1blXlwXcXda2YlnuxDWGr%2FDTuKtGURgFeGNfgGtuksSq73ey%2Fs8u4vHU\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f4ea8d72ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nGeneral​\\nDoes Mantle Network support EIP-1559?\\nMantle Network supports EIP-1559. EIP-1559 is a new transaction method that will be introduced after the Bedrock upgrade of the OP Stack, and will allow transactions on Mantle Network to be execu",
    "ted in a more stable and controlled manner. See here for more information.\\nWhy is the gas fee very high for my transaction?\\nMantle v2 Tectonic introduces EIP-1559 type transactions and also to further reduce gas fees, the FIFO transaction ordering method is chosen to minimize the impact of the priorityfee, so you will need additional settings to optimize your handling fees, for more information check here.\\nWhy is the gas usage so high for my transaction?\\nUnlike most OP Stack-based chains, Mantle chooses to use the MNT native token as the fee for L2 transactions and covers the whole transaction cost (L1 + L2) when calculating the gas usage. Mantle introduces the tokenRatio parameter which helps regulate the price fluctuations between ETH and MNT, when calculating the gas fee, Mantle will multiply with the tokenRatio compared to the other L2s' gasUsed (based on ETH). For example, if tokenRatio is 3000, the gas usage will be calculated as L2GasUsed * 3000 + L1GasUsed * 3000 * scalar.\\",
    "nMeanwhile, the gas usage can't reflect the level of gas fees, Mantle still has one of the cheapest fees compared to other L2s.\\nWhy did I get an error when I tried to send a transaction on Mantle Network?\\nThere are various possibilities for transaction failures. Here, we kindly ask you to ensure that your transaction construction has not been affected by any modifications to fees in Mantle v2 Tectonic. For more details, please refer to this page.\\nWhy is the value I get by calling the contract's getL1fee method so much smaller than the actual L1 fee?\\nThis is due to the fact that MNT is used as the native gas fee token in Mantle, and you need to use the tokenRatio parameter to convert between MNT and ETH when calculating the L1 fee, for more information, please check here!\\nDev Tools​\\nCan I use Truffle, Hardhat, and Remix to deploy contracts on Mantle Network?\\nYes. All the EVM-compatible Web3 libraries, IDEs, development frameworks can be used to deploy on and connect to Mantle Net",
    "work. This includes, but isn't limited to, popular tools such as:\\nYou can check more tutorials here.\\nCan I fetch DA transaction details with an API?\\nCurrently, the only way to see DA transaction history is via the Explorer frontend. Here's the link for Mantle DA data storage: https://mantlescan.xyz/batches\\nDoes the RPC rate limit affect Explorer API usage too?\\nYes. Once the RPC rate limit is reached, access to Explorer API will also be limited.\\nAre there any limits set for batch transaction size?\\nThe maximum batch transaction size is derived from the target gas configuration. Mantle Network is the same as other OP Stack-based chains in this regard.\\nAre there any limits set on return log size for eth_getLogs RPC call?\\nYes, it's best practice to limit the range of blocks you are querying in a single request to prevent issues such as timeout errors or overly large responses, in Mantle Network — 10,000 blocks.\\nDoes Mantle explorer support proxy contracts？\\nIf the contract is dete",
    "cted as a proxy implementation, it can be supported.\\nHow to set the token image on Mantlescan?\\nYou can submit token update via https://mantlescan.xyz/tokenupdate/ or https://mantlescan.xyz/tokenupdate/<address> (append token contract address).\\nHow to add tokens on Mantle's official bridge？\\nYou'll need to make a pull request against the Mantle token list repository. After PR is approved, you need to wait a few minutes before you can check the tokens on the bridge. Check more details here.\\nDoes OpenZeppelin defender support EIP1559 transactions?\\nYes, OpenZeppelin defender support sending EIP1559 transactions now.\\nWhy do I get the error \\\"0x5e not defined\\\" when compiling contracts？\\nThis error occurs because Mantle's op-geth is not up to date, which doesn't support the MCOPY(0x5e) bytecode. To resolve this, specify the compiler version as 0.8.23 or below. And refer this to get more unsupported opcodes.\\nWhy do I get the error \\\"Missing etherscan key for chain 5000/5003\\\" when veri",
    "fying contracts on Mantlescan by using Foundry?\\nThis error occurs because Foundry had some bugs on this, we encourage developers to verify contracts via Mantlescan explorer rather than using forge, check this for more details.\\nIs the Opcode PUSH0 supported in Mantle?\\nYes, the PUSH0 opcode is supported in Mantle.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n## \\n\\nGeneral[​](https://docs-v2.mantle.xyz/devs/dev-guides/faqs#general)\\n\\n*   **Does Mantle Network support EIP-1559?**\\n    \\n    **Mantle Network supports EIP-1559.** EIP-1559 is a new transaction method that will be introduced after the Bedrock upgrade of the OP Stack, and will allow transactions on Mantle Network to be executed in a more stable and controlled manner. See [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support) for more information.\\n    \\n*   **Why is the gas fee very high for my transaction?**\\n    \\n    Mantle v2 Tectonic introduces EIP-1559 type transa",
    "ctions and also to further reduce gas fees, the FIFO transaction ordering method is chosen to minimize the impact of the `priorityfee`, so you will need additional settings to optimize your handling fees, for more information check [here](https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees).\\n    \\n*   **Why is the gas usage so high for my transaction?**\\n    \\n    Unlike most OP Stack-based chains, Mantle chooses to use the MNT native token as the fee for L2 transactions and covers the whole transaction cost (L1 + L2) when calculating the gas usage. Mantle introduces the [tokenRatio](https://docs.mantle.xyz/network/system-information/fee-mechanism#control-of-tokenratio) parameter which helps regulate the price fluctuations between ETH and MNT, when calculating the gas fee, Mantle will multiply with the `tokenRatio` compared to the other L2s' gasUsed (based on ETH). For example, if `tokenRatio` is `3000`, the gas usage will be calculated as `L2GasUsed * 3000 +",
    " L1GasUsed * 3000 * scalar`.\\n    \\n    Meanwhile, the gas usage can't reflect the level of gas fees, Mantle still has one of the [cheapest fees](https://docs.mantle.xyz/network/system-information/fee-mechanism#mantle-v2-tectonic-fee-showcase) compared to other L2s.\\n    \\n*   **Why did I get an error when I tried to send a transaction on Mantle Network?**\\n    \\n    There are various possibilities for transaction failures. Here, we kindly ask you to ensure that your transaction construction has not been affected by any modifications to fees in Mantle v2 Tectonic. For more details, please refer to [this page](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees).\\n    \\n*   **Why is the value I get by calling the contract's** `**getL1fee**` **method so much smaller than the actual L1 fee?**\\n    \\n    This is due to the fact that `MNT` is used as the native gas fee token in Mantle, and you need to use the `tokenRatio` parameter to convert between `MNT` and `ET",
    "H` when calculating the L1 fee, for more information, please check [here](https://docs.mantle.xyz/network/system-information/fee-mechanism#understanding-fees-on-mantle-v2-tectonic)!\\n    \\n\\n## \\n\\nDev Tools[​](https://docs-v2.mantle.xyz/devs/dev-guides/faqs#dev-tools)\\n\\n*   **Can I use Truffle, Hardhat, and Remix to deploy contracts on Mantle Network?**\\n    \\n    Yes. All the EVM-compatible Web3 libraries, IDEs, development frameworks can be used to deploy on and connect to Mantle Network. This includes, but isn't limited to, popular tools such as:\\n    \\n    You can check more tutorials [here](https://docs.mantle.xyz/network/for-node-operators/deployment-guides).\\n    \\n*   **Can I fetch DA transaction details with an API?**\\n    \\n    Currently, the only way to see DA transaction history is via the Explorer frontend. Here's the link for Mantle DA data storage: [https://mantlescan.xyz/batches](https://mantlescan.xyz/batches)\\n    \\n*   **Does the RPC rate limit affect Explorer API ",
    "usage too?**\\n    \\n    Yes. Once the RPC rate limit is reached, access to Explorer API will also be limited.\\n    \\n*   **Are there any limits set for batch transaction size?**\\n    \\n    The maximum batch transaction size is derived from the target gas configuration. Mantle Network is the same as other OP Stack-based chains in this regard.\\n    \\n*   **Are there any limits set on return log size for** `**eth_getLogs**` **RPC call?**\\n    \\n    Yes, it's best practice to limit the range of blocks you are querying in a single request to prevent issues such as timeout errors or overly large responses, in Mantle Network — 10,000 blocks.\\n    \\n*   **Does Mantle explorer support proxy contracts？**\\n    \\n    If the contract is detected as a proxy implementation, it can be supported.\\n    \\n*   **How to set the token image on Mantlescan?**\\n    \\n    You can submit token update via `https://mantlescan.xyz/tokenupdate/` or `https://mantlescan.xyz/tokenupdate/<address>` (append token contrac",
    "t address).\\n    \\n*   **How to add tokens on Mantle's official bridge？**\\n    \\n    You'll need to make a pull request against the Mantle token list repository. After PR is approved, you need to wait a few minutes before you can check the tokens on the bridge. Check more details [here](https://docs.mantle.xyz/network/for-developers/quick-access#adding-a-token-to-the-list).\\n    \\n*   **Does OpenZeppelin defender support EIP1559 transactions?**\\n    \\n    Yes, OpenZeppelin defender support sending EIP1559 transactions now.\\n    \\n*   **Why do I get the error \\\"0x5e not defined\\\" when compiling contracts？**\\n    \\n    This error occurs because Mantle's op-geth is not up to date, which doesn't support the `MCOPY(0x5e)` bytecode. To resolve this, specify the compiler version as **0.8.23** or below. And refer [this](https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle#unsupported-opcodes) to get more unsupported opcodes.\\n    \\n*   **Why do I get the error ",
    "\\\"Missing etherscan key for chain 5000/5003\\\" when verifying contracts on Mantlescan by using Foundry?**\\n    \\n    This error occurs because Foundry had [some bugs](https://github.com/foundry-rs/foundry/issues/7466) on this, we encourage developers to verify contracts via Mantlescan explorer rather than using forge, check [this](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-explorer-to-verify-smart-contracts#compiled-using-foundry) for more details.\\n    \\n*   **Is the Opcode** `**PUSH0**` **supported in Mantle?**\\n    \\n    Yes, the `PUSH0` opcode is supported in Mantle.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic\",\n    \"loadedTime\": \"2025-02-15T20:31:12.165Z\",\n    \"referrerUrl\": \"https://doc",
    "s.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/whats-new-in-mantle-v2-tectonic\",\n    \"title\": \"What's New in Mantle v2 Tectonic | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"What's New in Mantle v2 Tectonic | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/zvzCELEP7EG1xZzE1Vjl\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, ",
    "Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDdiNzk3M2UtZTY5MC00YmQ2LTk5MTktZDY1Y2I3MzZmN2Qw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n",
    "      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=6rosz9oUnNHeJDVYXdKbn8UXSf9I9QXWuPXW6U0RmBSyQpU%2FBoWxipECozqeIcG6wEfqjhTvgjWpCCwhljVl1iyUGedUm1fuewW8M3Hb5I2Fsk561w5lSHA4EhuMwlYf2JEkVjWMJrpSUqoKWKTz\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f5a8eab2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"What's New in Mantle v2 Tectonic\\nThe development of Mantle Network Mainnet Alpha v1 (Mantle v1) began in late 2022, utilizing the OVM codebase, and predated the introduction o",
    "f the OP Stack. It brought forth a novel concept of modularity, presenting diverse solutions across various system components. This modular approach aimed to offer flexibility and adaptability within the ecosystem.\\nHowever, with the release of OP Stack, Mantle chose to upgrade its network to a version based on the OP Stack Bedrock in order to better embrace the OP Stack ecosystem and lower the threshold of composability and interoperability, which is Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic).\\nEnhancements in Mantle v2 Tectonic Compared to Mantle v1​\\nEIP-1559 Support​\\nEIP-1559 was not supported in Mantle v1 and is supported in Mantle v2 Tectonic. By introducing EIP-1559, Mantle v2 Tectonic gains more efficient transaction fee price auctions while stabilizing block utilization and enhancing network security. For more details, please check here.\\nRemoval of Redundant Components​\\nMantle v2 Tectonic has eliminated redundant components such as the Data Transport Layer and ",
    "Threshold Signature Scheme, which were present in Mantle v1. These removals were made possible by the existence of similar functionalities in the new OP Stack architecture. For more details, please check here.\\nStable Block Time​\\nIn the design of Mantle v1, the block generation of layer 2 (L2) is transaction-dependent, and each block contains only one transaction, which causes the block time generated by L2 to become variable. In Mantle v2 Tectonic, the block generation of L2 is transaction-independent, and has a fixed time (2s) to generate blocks, so each block will contain multiple transactions.\\nBlock State Tagging​\\nDue to the change in the way blocks are generated, Mantle v2 Tectonic adopts the same tagging of blocks and block header states as OP Stack-based chains, including unsafe, safe, finalized.\\nDistinctions between Mantle v2 Tectonic and OP Stack Bedrock​\\nIndependent Data Availability (DA)​\\nTo mitigate high transaction fees associated with using Ethereum as the DA layer ",
    "and considering the ongoing development of EIP-4844, Mantle v2 Tectonic adopts Mantle DA, powered by EigenLayer's EigenDA technology. This significantly reduces transaction fees while making minimal compromises on security guarantees. For more details, please check here.\\nMigration of Native Tokens in L2​\\nIn Mantle v2 Tectonic, we introduce a highly anticipated feature — the migration of native tokens in L2. In Mantle v2 Tectonic, the flow of MNT tokens in L2 will no longer use the ERC-20 contract. Instead, MNT will be a native Mantle Network L2 asset, instead of a bridged version of its Ethereum ERC-20 counterpart. For more details, please check here.\\nFee Optimization Strategy​\\nMantle v2 Tectonic implements a fee optimization strategy using the tokenRatio parameter to adjust the impact of using $MNT as transaction fees. Additionally, we have optimized the estimateGas function to directly provide an estimate of the total cost of a transaction. For more details, please check here.\\nL",
    "ast updated 2 months ago\",\n  \"markdown\": \"# What's New in Mantle v2 Tectonic\\n\\nThe development of Mantle Network Mainnet Alpha v1 (Mantle v1) began in late 2022, utilizing the OVM codebase, and predated the introduction of the OP Stack. It brought forth a novel concept of modularity, presenting diverse solutions across various system components. This modular approach aimed to offer flexibility and adaptability within the ecosystem.\\n\\nHowever, with the release of OP Stack, Mantle chose to upgrade its network to a version based on the OP Stack Bedrock in order to better embrace the OP Stack ecosystem and lower the threshold of composability and interoperability, which is Mantle Network Mainnet v2 Tectonic (Mantle v2 Tectonic).\\n\\n## \\n\\nEnhancements in Mantle v2 Tectonic Compared to Mantle v1[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#enhancements-in-mantle-v2-tectonic-compared-to-mantle-v1)\\n\\n### \\n\\nEIP-1559 Support[​](https://docs-v2.mantle.xyz/intro/whats-new-in-ma",
    "ntle-v2#eip-1559-support)\\n\\nEIP-1559 was not supported in Mantle v1 and is supported in Mantle v2 Tectonic. By introducing EIP-1559, Mantle v2 Tectonic gains more efficient transaction fee price auctions while stabilizing block utilization and enhancing network security. For more details, please check [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support).\\n\\n### \\n\\nRemoval of Redundant Components[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#removal-of-redundant-components)\\n\\nMantle v2 Tectonic has eliminated redundant components such as the Data Transport Layer and Threshold Signature Scheme, which were present in Mantle v1. These removals were made possible by the existence of similar functionalities in the new OP Stack architecture. For more details, please check [here](https://docs.mantle.xyz/network/system-information/architecture).\\n\\n### \\n\\nStable Block Time[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#stable-blo",
    "ck-time)\\n\\nIn the design of Mantle v1, the block generation of layer 2 (L2) is transaction-dependent, and each block contains only one transaction, which causes the block time generated by L2 to become variable. In Mantle v2 Tectonic, the block generation of L2 is transaction-independent, and has a fixed time (2s) to generate blocks, so each block will contain multiple transactions.\\n\\n### \\n\\nBlock State Tagging[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#block-state-tagging)\\n\\nDue to the change in the way blocks are generated, Mantle v2 Tectonic adopts the same tagging of blocks and block header states as OP Stack-based chains, including `unsafe`, `safe`, `finalized`.\\n\\n## \\n\\nDistinctions between Mantle v2 Tectonic and OP Stack Bedrock[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#distinctions-between-mantle-v2-tectonic-and-op-stack-bedrock)\\n\\n### \\n\\nIndependent Data Availability (DA)[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#indepen",
    "dent-data-availability-da)\\n\\nTo mitigate high transaction fees associated with using Ethereum as the DA layer and considering the ongoing development of EIP-4844, Mantle v2 Tectonic adopts Mantle DA, powered by EigenLayer's EigenDA technology. This significantly reduces transaction fees while making minimal compromises on security guarantees. For more details, please check [here](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da).\\n\\n### \\n\\nMigration of Native Tokens in L2[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#migration-of-native-tokens-in-l2)\\n\\nIn Mantle v2 Tectonic, we introduce a highly anticipated feature — the migration of native tokens in L2. In Mantle v2 Tectonic, the flow of MNT tokens in L2 will no longer use the ERC-20 contract. Instead, MNT will be a native Mantle Network L2 asset, instead of a bridged version of its Ethereum ERC-20 counterpart. For more details, please check [here](https://docs.mantle.xyz/network/introduct",
    "ion/whats-new-in-mantle-v2-tectonic#migration-of-native-tokens-in-l2).\\n\\n### \\n\\nFee Optimization Strategy[​](https://docs-v2.mantle.xyz/intro/whats-new-in-mantle-v2#fee-optimization-strategy)\\n\\nMantle v2 Tectonic implements a fee optimization strategy using the tokenRatio parameter to adjust the impact of using $MNT as transaction fees. Additionally, we have optimized the `estimateGas` function to directly provide an estimate of the total cost of a transaction. For more details, please check [here](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/transaction-lifecycle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/transaction-lifecycle\",\n    \"loadedTime\": \"2025-02-15T20:31:19.184Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },",
    "\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/transaction-lifecycle\",\n    \"title\": \"Transaction Lifecycle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Transaction Lifecycle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/jCmCRKf6MuGbqsB0KvrU\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-secur",
    "ity-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWFhODYzZjItYTE0Zi00NjRkLWE1ZDMtMDJmMTMyOThlODRm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"u",
    "rl\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7JnniuJesh5iGp%2BE7upwoLX5EKd4Jrb7axus30SXYe25bl4Fmf8iAy1och4%2B2F9ctmko13aQEGAJ9jxg8LoidFbQ16sriUulrDY4S%2Fsz1Vhcoe0HdoujuwgW0SMAX1%2FUlaMTdf%2Bdcn6b%2FqFp90q9\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f800e552ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Transaction Lifecycle | Network\\nL2 -> L1 Workflow​\\n1. The Initiation​\\nWallet users, dApps, or some scripts may wish to utilize a blockchain-based system to transfer funds or execute tasks.\\nFor users, they have connected to Mantle network by adding the seque",
    "ncer node's RPC endpoint to their wallet.\\nOn the other hand, dApps have integrated the Mantle SDK and instantiated it to communicate with Mantle network. They are ready to send requests containing the recipient's address and the amount they want to transfer.\\nAs with any other service, this operation requires payment. It is not just for the transfer itself, but also for maintaining a permanent, immutable public record that anyone can verify. Their wallet or dApp must ensure there is a sufficient balance to execute this operation.\\nFor wallets, things are simpler; as it is easier to calculate the required fee.\\ndApps need to do more detailed calculations; for more information, please refer to this section.\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle Network where a sequencer is ready to process it. This is where the transaction first enters Mantle. More details here.\\n2. The Handling​\\nThe transaction triggers the standard s",
    "tate verification process, executed by the Ethereum Virtual Machine (EVM) software (op-geth) running on these nodes. This is to ensure that the transaction is fundamentally valid, the necessary fees have been paid, and nothing exceptional has occurred. After completing the state transition, the op-proposer proposes a new state's Merkle root and submits it to the corresponding L1 contract.\\nIt's important to note that state submission doesn't need to be executed after every transaction, but can be chosen to be submitted after a tx-batch.\\nThe transaction updates the local state (ledger) and waits for further processing as part of a pending block. So far, this process is particularly fast. Many such pending blocks are combined to form batches, which are encoded and compressed by op-batcher and sent to Ethereum for final settlement. L2 achieves low transaction fees by spreading fixed costs across multiple transactions in a batch.\\nFor details on the encoding and compression process of op-",
    "batcher, please refer to this spec.\\n3. The Storage​\\nUnlike typical Rollups, Mantle Network aims for more efficient and cost-effective Data Availability (DA) guarantees. Therefore, it opts for Mantle DA, developed based on a third-party DA component. op-batcher needs to submit all transaction data (not raw transactions) to Mantle DA to ensure the integrity and effectiveness of the L2 network. DA nodes synchronize block data and ensure access to it at any given time in exchange for $MNT rewards for providing this service. For more detailed information, please see this section.\\nMantle DA supports data storage and reverse derivation, ensuring data availability. In addition to data storage, state storage is also crucial.\\nOn Ethereum, there is a complete trust network ready to verify the updated state root stored in the contract. Once a block passes Ethereum's consensus mechanism, it is recorded on the secure chain. The state transition is considered valid once the uploaded state root pa",
    "sses the challenge period (typically 7 days).\\nLast updated 3 months ago\",\n  \"markdown\": \"# Transaction Lifecycle | Network\\n\\n## \\n\\nL2 -> L1 Workflow[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#l2---l1-workflow)\\n\\n### \\n\\n1\\\\. The Initiation[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#1-the-initiation)\\n\\nWallet users, dApps, or some scripts may wish to utilize a blockchain-based system to transfer funds or execute tasks.\\n\\n*   For users, they have connected to Mantle network by adding the sequencer node's RPC endpoint to their wallet.\\n    \\n*   On the other hand, dApps have integrated the [Mantle SDK](https://sdk.mantle.xyz/index.html) and instantiated it to communicate with Mantle network. They are ready to send requests containing the recipient's address and the amount they want to transfer.\\n    \\n\\nAs with any other service, this operation requires payment. It is not just for the transfer itself, but also for maintaining a permanent, immutable public",
    " record that anyone can verify. Their wallet or dApp must ensure there is a sufficient balance to execute this operation.\\n\\n*   For wallets, things are simpler; as it is easier to calculate the required fee.\\n    \\n*   dApps need to do more detailed calculations; for more information, please refer to this [section](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n    \\n\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle Network where a sequencer is ready to process it. This is where the transaction first enters Mantle. More details [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#sequencer).\\n\\n### \\n\\n2\\\\. The Handling[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#2-the-handling)\\n\\nThe transaction triggers the standard state verification process, executed by the Ethereum Virtual Machine (EVM) software ([`op-geth`](https://docs.mantle.xyz/network/system-inf",
    "ormation/off-chain-system/node-introduction#op-geth)) running on these nodes. This is to ensure that the transaction is fundamentally valid, the necessary fees have been paid, and nothing exceptional has occurred. After completing the state transition, the [`op-proposer`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer) proposes a new state's Merkle root and submits it to the corresponding L1 contract.\\n\\nIt's important to note that state submission doesn't need to be executed after every transaction, but can be chosen to be submitted after a tx-batch.\\n\\nThe transaction updates the local state (ledger) and waits for further processing as part of a pending block. So far, this process is particularly fast. Many such pending blocks are combined to form batches, which are encoded and compressed by [`op-batcher`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) and sent to Ethereum for final ",
    "settlement. L2 achieves low transaction fees by spreading fixed costs across multiple transactions in a batch.\\n\\nFor details on the encoding and compression process of op-batcher, please refer to this [spec](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/derivation.md#batch-submission).\\n\\n### \\n\\n3\\\\. The Storage[​](https://docs-v2.mantle.xyz/devs/concepts/tx-lifecycle#3-the-storage)\\n\\nUnlike typical Rollups, Mantle Network aims for more efficient and cost-effective Data Availability (DA) guarantees. Therefore, it opts for Mantle DA, developed based on a third-party DA component. `op-batcher` needs to submit all transaction data (not raw transactions) to Mantle DA to ensure the integrity and effectiveness of the L2 network. DA nodes synchronize block data and ensure access to it at any given time in exchange for $MNT rewards for providing this service. For more detailed information, please see this section.\\n\\nMantle DA supports data storage and reverse derivation, ",
    "ensuring data availability. In addition to data storage, state storage is also crucial.\\n\\nOn Ethereum, there is a complete trust network ready to verify the updated state root stored in the contract. Once a block passes Ethereum's consensus mechanism, it is recorded on the secure chain. The state transition is considered valid once the uploaded state root passes the challenge period (typically 7 days).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/how-to-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides\",\n    \"loadedTime\": \"2025-02-15T20:31:17.675Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides\",\n    \"title\": \"How-to Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null",
    ",\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How-to Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Lo5IHMerGjX8tRDSx6kA\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:15 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWE1MGUwNGYtYWVmMy00MDJjLTk3MzEtN2Y4MjIzZWNmODBh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.git",
    "book.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=NslhtTSEohT9JPamDpgj9SVWYFEewlm%2BrfJsqwwaF0L%2BiZVHZGSlvGOGzb1WP4vSm6Aq0sDlR9T7FR5IqwSsph8RrG2ymt7a98mNXaNsoWblU4aeQRW0iOwg8XvgLx0p1TgcJo8OWPhk8CHAGdzQ\\\"}], \\\"group\\\":\\\"cf-nel\\\"",
    ", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f79ee542ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How-to Guides | Network\\nConnecting Wallet to Mantle NetworkFetching Test TokensUsing Mantle Bridge\\nPreviousFAQsNextConnecting Wallet to Mantle Network\\nWas this helpful?\",\n  \"markdown\": \"# How-to Guides | Network\\n\\n[Connecting Wallet to Mantle Network](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network)[Fetching Test Tokens](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)[Using Mantle Bridge](https://docs.mantle.xyz/network/f",
    "or-users/how-to-guides/using-mantle-bridge)\\n\\n[PreviousFAQs](https://docs.mantle.xyz/network/for-developers/faqs)[NextConnecting Wallet to Mantle Network](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/architecture\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/architecture\",\n    \"loadedTime\": \"2025-02-15T20:31:19.254Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/architecture\",\n    \"title\": \"Architecture | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Architecture | Network\"\n      },\n   ",
    "   {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/VSKulsqMa6vFZXJRotZj\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTA1NDVmYzktZmVhYS00MjA1LTkzMjQtZTUxZDJlZTU1ZGE3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: f",
    "iles.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=W9BuHuWe2lja2T42rKrmkbdYTCpZUG9UGlpxi%2BIzm8HIxLSeAIBWgX7YzDBfX%2FKq%2FEO1tn4%2BDGDhj3KuXpmF79ed7UYD%2FEEuot1xJ0Dc3Vf6o1H7VqGdDNamz8vLczCWbiRu43b2hSTB6BP%2Bdd8h\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"",
    "x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f7d8b0e2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Architecture | Network\\nArchitecture Overviews​\\nThis diagram illustrates how different network modules and components interact through transaction execution in Mantle v2 Tectonic. It depicts the process of interacting with EigenDA-supported Mantle Data Availability (DA) to store Rollup data and eventually publish updated state data to the Ethereum L1.\\nLet's review the transaction processing process to better understand the functioning of each module.\\nUsers send signed transactions through available RPC nodes.\\nThe sequencer receives transactions and packs them into blocks. op-batcher obtains data from the sequencer, performs enc",
    "oding and compression, sends it to the DA module, and submits data validity information to the L1 contract.\\nSimilarly, op-proposer obtains the state root of packed blocks through the sequencer and sends it to the relevant contract L2OutputOracle on L1.\\nRollup transaction data is stored on Mantle DA. Verifiers can retrieve this data at any time and verify its validity, a process executed when issuing fraud-proof challenges.\\nTransaction Pool in Mantle​\\nIn Mantle v2 Tectonic, a transaction pool structure similar to Ethereum's mempool is introduced for the temporary storage of transactions until they are included in a block. The introduction of the transaction pool in L2 is aimed at improving transaction packing. With Mantle v2 Tectonic's support for EIP-1559 transaction types, users can control the transaction packing speed by manipulating the priority fee in transactions. The transaction pool is used to temporarily store those unpacked transactions.\\nHowever, the introduction of the ",
    "transaction pool also brings certain challenges, such as the impact of Miner Extractable Value (MEV). Therefore, in Mantle v2 Tectonic, the tx pool is designed to be private. If you want to submit a transaction, you need to configure op-geth to send the transaction to the sequencer. The sequencer will then process transactions in the transaction pool in the order of their base fee and priority fee.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Architecture | Network\\n\\n## \\n\\nArchitecture Overviews[​](https://docs-v2.mantle.xyz/intro/system-components/architecture#architecture-overviews)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/architecture-aab357575d8dca71a38e2a4cc78cd4d8.svg)\\n\\nThis diagram illustrates how different network modules and components interact through transaction execution in Mantle v2 Tectonic. It depicts the process of interacting with EigenDA-supported Mantle Data Availability (DA) to store Rollup data and eventually publish updated state data to the Ethereum L",
    "1.\\n\\nLet's review the transaction processing process to better understand the functioning of each module.\\n\\n1.  Users send signed transactions through available RPC nodes.\\n    \\n2.  The sequencer receives transactions and packs them into blocks. op-batcher obtains data from the sequencer, performs encoding and compression, sends it to the DA module, and submits data validity information to the L1 contract.\\n    \\n3.  Similarly, [`op-proposer`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer) obtains the state root of packed blocks through the sequencer and sends it to the relevant contract [`L2OutputOracle`](https://sepolia.etherscan.io/address/0x7DC1E47F1a367B6750802077632787181e70Bf8C) on L1.\\n    \\n4.  Rollup transaction data is stored on Mantle DA. Verifiers can retrieve this data at any time and verify its validity, a process executed when issuing fraud-proof challenges.\\n    \\n\\n## \\n\\nTransaction Pool in Mantle[​](https://docs",
    "-v2.mantle.xyz/devs/concepts/tx-lifecycle#transaction-pool-in-mantle)\\n\\nIn Mantle v2 Tectonic, a transaction pool structure similar to Ethereum's mempool is introduced for the temporary storage of transactions until they are included in a block. The introduction of the transaction pool in L2 is aimed at improving transaction packing. With Mantle v2 Tectonic's support for [EIP-1559 transaction types](https://docs.mantle.xyz/network/more/glossary#eip-1559-transaction), users can control the transaction packing speed by manipulating the priority fee in transactions. The transaction pool is used to temporarily store those unpacked transactions.\\n\\nHowever, the introduction of the transaction pool also brings certain challenges, such as the impact of Miner Extractable Value (MEV). Therefore, in Mantle v2 Tectonic, the tx pool is designed to be private. If you want to submit a transaction, you need to configure [`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/",
    "node-introduction#op-geth) to send the transaction to the sequencer. The sequencer will then process transactions in the transaction pool in the order of their base fee and priority fee.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"loadedTime\": \"2025-02-15T20:31:19.885Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"title\": \"Connecting Wallet to Mantle Network | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n   ",
    "     \"content\": \"Connecting Wallet to Mantle Network | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/oQVLjGt16FhnlA3UTw9v\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:18 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWYxYjkwNjEtNjcwNC00OGM0LTg0ZGEtOGU4ZDkwYzNkYzg0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitb",
    "ook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=T91GEsceh7BHL6gKzX4m6GTMzz4hDtYxUk5Ybei9AuKV2eNnv1a63mIbdmr9nnH5soggoZuw1d2g%2BhWIMFIBM1r9UVPpzjU7qnycx9SkaMhjES88TOiS7xLdGDXfFfvcEDyWZNqiMosz92AHk8L9\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n   ",
    "   \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280f87b8122ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Connecting Wallet to Mantle Network\\nYou can connect your wallet to the Mantle Network in different ways, here we present you the following two ways:\\nAdd by Using Chainlist​\\nYou can automatically add Mantle Network to your wallet with one click using Chainlist by navigating to the following pages:\\nSimply connect your wallet to the web page, click on the 'Add to Metamask' button that shows up, and approve the action in your wallet.\\nAdd Network Manually​\\nLaunch Metamask\\nLaunch MetaMask and login to your wallet.\\nAdd Network\\nThe default network setting for the wa",
    "llet is generally 'Ethereum Mainnet'. Click on the button in the top-left to bring up a dropdown menu. Click on 'Add Network' at the bottom of the dropdown menu.\\nChoose Manually\\nThis will take you the 'Add a network' page where you'll see multiple popular networks. Click on 'Add a network manually' to bring up a form\\nConfigure Network Infomation\\nFill in the following info and click 'Save' to finish. The network option will appear in the network setting dropdown menu once you're done.\\nAdd $MNT to Your Wallet​\\nPrepare To Import Tokens\\nNavigate to your wallet, switch to the Sepolia Testnet and click on the 'Import tokens' button at the bottom to bring up a form.\\nEnter the Token Address\\nEnter the $MNT token contract address 0x65e37B558F64E2Be5768DB46DF22F93d85741A9E , and as you do that the other two fields will get populated automatically.\\nFinish Importing\\nNext, click on the 'Next' button at the bottom, and then click 'Import' in the next window to finish. You should be able to",
    " see your current balance.\\nConfigure Your wallet​\\nMantle v2 Tectonic has the ultimate user experience by optimizing the fee mechanism. Users can set up basefee and priorityfee in MetaMask to greatly reduce the fee for transfers. Here is a detailed guide on how to configure your wallet.\\nCreate a Transaction\\nWhen you are ready to send a transaction using MetaMask, construct the transaction first, at which point we can see that the Estimated fee before it is set is a higher value.\\nPrepare Your Transaction Configuration\\nClick the Next button, and then click the red box to enter the setting interface.\\nConfigure the Gas Fee\\nSelect the Advanced button and we can see that we can set the Max base fee and Priority Fee, see here for the meaning of these two items. Here we set them to the lowest values, i.e. Max base fee is 0.02 gwei and Priority Fee is 0. Check the box below \\\"Save these values as my default for the Mantle sepolia network. \\\", and then click the ❌ button in the upper righ",
    "t corner.\\nConfirm thr Transaction\\nOnce the settings are complete, when you reconstruct the transaction, you will see that the Estimated fee will be very low, click Confirm to send the transaction.\\nWith this setup, you will enjoy extreamely high speed and low cost transaction processing in Mantle v2 Tectonic.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Connecting Wallet to Mantle Network\\n\\nYou can connect your wallet to the Mantle Network in different ways, here we present you the following two ways:\\n\\n## \\n\\nAdd by Using Chainlist[​](https://docs-v2.mantle.xyz/users/how-to/wallet#add-by-using-chainlist)\\n\\nYou can automatically add Mantle Network to your wallet with one click using **Chainlist** by navigating to the following pages:\\n\\nSimply connect your wallet to the web page, click on the '**Add to Metamask**' button that shows up, and approve the action in your wallet.\\n\\n## \\n\\nAdd Network Manually[​](https://docs-v2.mantle.xyz/users/how-to/wallet#add-network-manually)\\n\\n#",
    "## \\n\\nLaunch Metamask\\n\\nLaunch [MetaMask](https://metamask.io/download/) and login to your wallet.\\n\\n### \\n\\nAdd Network\\n\\nThe default network setting for the wallet is generally '**Ethereum Mainnet**'. Click on the button in the top-left to bring up a dropdown menu. Click on '**Add Network**' at the bottom of the dropdown menu.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-1-4c343f717ee5c76ceb3174cff4ff2daf.png&width=300&dpr=4&quality=100&sign=9b29829c&sv=2)\\n\\n### \\n\\nChoose Manually\\n\\nThis will take you the '**Add a network**' page where you'll see multiple popular networks. Click on '**Add a network manually**' to bring up a form\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-2-58c012d71feff3ce45912a680768ec70.png&width=300&dpr=4&quality=100&sign=2ec6366c&sv=2)\\n\\n### \\n\\nConfigure Network Infomation\\n\\nFill in the following info and click '**Save*",
    "*' to finish. The network option will appear in the network setting dropdown menu once you're done.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fadd-network-79b0d03f9e1209fd05311a364f12c958.png&width=300&dpr=4&quality=100&sign=16abb77c&sv=2)\\n\\n## \\n\\nAdd $MNT to Your Wallet[​](https://docs-v2.mantle.xyz/users/how-to/wallet#add-mnt-to-your-wallet)\\n\\n### \\n\\nPrepare To Import Tokens\\n\\nNavigate to your wallet, switch to the **Sepolia Testnet** and click on the '**Import tokens**' button at the bottom to bring up a form.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3885809119-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FQliZlRNwHhmzesDU1Ksq%252Fuploads%252FF4rJSqHzv9WZ0FJUUReJ%252Fimage.png%3Falt%3Dmedia%26token%3D4602cd23-72ac-4a62-9aef-60f57f5159a4&width=300&dpr=4&quality=100&sign=112c2ebb&sv=2)\\n\\n### \\n\\nEnter the Token Address\\n\\nEnter the `$MNT` token contract addr",
    "ess `0x65e37B558F64E2Be5768DB46DF22F93d85741A9E` , and as you do that the other two fields will get populated automatically.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fadd-custom-token-73776306b75c79729773510acad6d39a.png&width=300&dpr=4&quality=100&sign=a7077687&sv=2)\\n\\n### \\n\\nFinish Importing\\n\\nNext, click on the '**Next**' button at the bottom, and then click '**Import**' in the next window to finish. You should be able to see your current balance.\\n\\n## \\n\\nConfigure Your wallet[​](https://docs-v2.mantle.xyz/users/how-to/wallet#configure-your-wallet)\\n\\nMantle v2 Tectonic has the ultimate user experience by optimizing the fee mechanism. Users can set up `basefee` and `priorityfee` in MetaMask to greatly reduce the fee for transfers. Here is a detailed guide on how to configure your wallet.\\n\\n### \\n\\nCreate a Transaction\\n\\nWhen you are ready to send a transaction using MetaMask, construct the transaction first, at whic",
    "h point we can see that the `Estimated fee` before it is set is a higher value.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-5-307e0865a654cff6b32d0e0cbdf1f048.png&width=300&dpr=4&quality=100&sign=8a026053&sv=2)\\n\\n### \\n\\nPrepare Your Transaction Configuration\\n\\nClick the `Next` button, and then click the red box to enter the setting interface.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-6-c23111cc33bb16d7b70595aa341f73b7.png&width=300&dpr=4&quality=100&sign=6aa7777b&sv=2)\\n\\n### \\n\\nConfigure the Gas Fee\\n\\nSelect the `Advanced` button and we can see that we can set the `Max base fee` and `Priority Fee`, see [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support#application-of-eip-1559-in-mantle-v2-tectonic) for the meaning of these two items. Here we set them to the lowest values, i.e. `Max base fee` is 0.02 gwei an",
    "d `Priority Fee` is 0. Check the box below \\\"Save these values as my default for the Mantle sepolia network. \\\", and then click the ❌ button in the upper right corner.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-7-fa653c4a460d25d11d9fca15501c1452.png&width=300&dpr=4&quality=100&sign=66d97766&sv=2)\\n\\n### \\n\\nConfirm thr Transaction\\n\\nOnce the settings are complete, when you reconstruct the transaction, you will see that the `Estimated fee` will be very low, click `Confirm` to send the transaction.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fmetamask-8-c9fe29570f11a7151d1c723fb1a90919.png&width=300&dpr=4&quality=100&sign=d014e8a6&sv=2)\\n\\nWith this setup, you will enjoy extreamely high speed and low cost transaction processing in Mantle v2 Tectonic.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.m",
    "antle.xyz/network/for-users/how-to-guides/fetching-test-tokens\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens\",\n    \"loadedTime\": \"2025-02-15T20:31:24.864Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens\",\n    \"title\": \"Fetching Test Tokens | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fetching Test Tokens | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Ln7Ytu6SOSlGOziKHHA8\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:23 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status",
    "\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDI0ZDk1YmItMWY5MS00MmZmLTg4NWQtNTFlMWQ4NzM2MWNm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src",
    " *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dH%2BhvbCbyJlES4RbBvNFbDGcGEl%2F2vp4BZIi5dzom5b9DdEVOqFQGuXFHA8I47N7x%2F9qcdqf8JaQppNi32%2BXU7NkSpwR7HhL62KmLDmkBr9bQRFceBIDgvcI2M1j79dkbUb2xWN0KdOh03PCIdgG\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fa82a562ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-s",
    "pdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fetching Test Tokens | Network\\nFaucets​\\nTo begin transacting on Mantle v2 Tectonic Testnet, you must acquire Sepolia $ETH and testnet $MNT and bridge it across. You can obtain Sepolia $ETH from the following faucets:\\nPlease get Sepolia $ETH at first, the following steps need it to be the gas for the transactions. You can receive testnet $MNT tokens from the Mantle faucet.\\nMake sure to import the $MNT token to your Sepolia wallet to see the current balance. The contract address is 0x65e37B558F64E2Be5768DB46DF22F93d85741A9E. How to import tokens can be found here.\\nMint $MNT on Sepolia via Etherscan​\\nThis guide is not available on the Mantle v2 Tectonic Testnet right now. If you want to fetch test tokens, please check our faucet.\\nMake sure your wallet has enough Sepolia ETH to perform the mint action before moving forward.\\nNavigate to the Contract\\nFirst, you'll need to look up the test $MNT contract on Etherscan and naviga",
    "te to the 'Write as Proxy' section under the 'contract' tab. You can follow this link to get there directly.\\nImport MNT Token\\nNext, switch your wallet network to Sepolia, and import (if you haven't already) the $MNT token.\\nConnect Your Wallet\\nNow connect your wallet to Etherscan using the 'Connect to Web3' button.\\nChoose the Mint Function\\nFind and click on the mint() function in the list on the Etherscan page. It's on no.9.\\nEnter Your Address and Value\\nEnter the address of your wallet in the address field. Click on the '+' button next to the function name to input a value. The mint amount needs to be entered in wei units, so 1 $MNT token is represented as 10^18. Select 10^18 from the drop-down list, and click on the 'Add' button. That'll automatically enter 10^18 (1 followed by 18 zeroes) in the amount field.\\nMint\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\nFinish Minting\\nFinally, clic",
    "k on the 'Write' button to send a transaction. Confirm the action in your wallet, and after a few seconds your $MNT will show up there.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Fetching Test Tokens | Network\\n\\n## \\n\\nFaucets[​](https://docs-v2.mantle.xyz/users/how-to/faucet#faucets)\\n\\nTo begin transacting on Mantle v2 Tectonic Testnet, you must acquire Sepolia `$ETH` and testnet `$MNT` and bridge it across. You can obtain Sepolia `$ETH` from the following faucets:\\n\\n**Please get Sepolia** `**$ETH**` **at first, the following steps need it to be the gas for the transactions.** You can receive testnet `$MNT` tokens from the [Mantle faucet](https://faucet.sepolia.mantle.xyz/).\\n\\nMake sure to import the `$MNT` token to your Sepolia wallet to see the current balance. The contract address is `0x65e37B558F64E2Be5768DB46DF22F93d85741A9E`. How to import tokens can be found [here](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network#add-mnt-to-your",
    "-wallet).\\n\\n## \\n\\nMint $MNT on Sepolia via Etherscan[​](https://docs-v2.mantle.xyz/users/how-to/faucet#mint-mnt-on-sepolia-via-etherscan)\\n\\nThis guide is not available on the Mantle v2 Tectonic Testnet right now. If you want to fetch test tokens, please check our [faucet](https://faucet.sepolia.mantle.xyz/).\\n\\nMake sure your wallet has enough Sepolia ETH to perform the mint action before moving forward.\\n\\n### \\n\\nNavigate to the Contract\\n\\nFirst, you'll need to look up the test `$MNT` contract on Etherscan and navigate to the '**Write as Proxy**' section under the '**contract**' tab. You can follow [this link](https://sepolia.etherscan.io/address/0x65e37B558F64E2Be5768DB46DF22F93d85741A9E#writeProxyContract) to get there directly.\\n\\n### \\n\\nImport MNT Token\\n\\nNext, switch your wallet network to Sepolia, and [import](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network#add-mnt-to-your-wallet) (if you haven't already) the `$MNT` token.\\n\\n##",
    "# \\n\\nConnect Your Wallet\\n\\nNow connect your wallet to Etherscan using the '**Connect to Web3**' button.\\n\\n### \\n\\nChoose the Mint Function\\n\\nFind and click on the `mint()` function in the list on the Etherscan page. It's on no.9.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Ffaucet-4-b426051a807fa7c86c020634b043434f.png&width=300&dpr=4&quality=100&sign=500c3dcb&sv=2)\\n\\n### \\n\\nEnter Your Address and Value\\n\\nEnter the address of your wallet in the `address` field. Click on the '**+**' button next to the function name to input a value. The mint amount needs to be entered in _wei_ units, so 1 `$MNT` token is represented as 10^18. Select 10^18 from the drop-down list, and click on the '**Add**' button. That'll automatically enter 10^18 (1 followed by 18 zeroes) in the amount field.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Ffaucet-2-97cba3a14570abc851f81c0068f6e8a3.png",
    "&width=300&dpr=4&quality=100&sign=a588e3a2&sv=2)\\n\\n### \\n\\nMint\\n\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 `$MNT`, and so on.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Ffaucet-3-0f50cf2719283b5f35828a73be4738f3.png&width=300&dpr=4&quality=100&sign=ead3cec9&sv=2)\\n\\n### \\n\\nFinish Minting\\n\\nFinally, click on the '**Write**' button to send a transaction. Confirm the action in your wallet, and after a few seconds your `$MNT` will show up there.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/on-chain-system\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system\",\n    \"loadedTime\": \"2025-02-15T20:31:28.837Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canoni",
    "calUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system\",\n    \"title\": \"On-Chain System | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"On-Chain System | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/5mWCq9zj7fuqbluIZOi9\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:28 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/mid",
    "dleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGVlNjM4ZWUtM2ViNC00ODNjLWFlMmMtNjdkZTQ1NGY1OTAz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer",
    "-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=GWIBpv4QxPWJy%2FqA%2FFlsLLhjH9P8OqSW4jd0Dh9PiclN%2FP5CCWEwlasrXYBc%2FVcO8nrImyulglRsAyy7vVET2Wq9PUMOsrzFrtqcZecMrLwWleAl0r4BIMgp7iCGqAcBEM%2BovyYnC7vSz57RUYQt\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fcaeb9bc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"On-Chain System | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# On-Chain System | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/syste",
    "m-information/on-chain-system/contract-introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction\",\n    \"loadedTime\": \"2025-02-15T20:31:29.160Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction\",\n    \"title\": \"Contract Introduction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Contract Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/lNCcBBrAWYuuq8bLXL7H\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunke",
    "d\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTI5ZDY3MzgtNGY3OS00N2FkLTk2ZGYtNTZiNDg2ZWM1YjNk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://stat",
    "ic.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=8j12jqpG2ylGpr7JCpL%2FMQYNGcrauwdGJ8rLAJoJ1aLJqJueF9lOcSW6you1XVblW%2B3BAoNwIa2E792Ge0GZxjWkJjdRQM6TJo5iTeXd7rDvxa5AL4OK0jEfFP3Ct%2FjAOD3pRpfC35KNzZbG6Lga\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fcafa01a5f2-IA",
    "D\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Contract Introduction | Network\\nMantle Network's on-chain module contains a series of smart contracts that run on the blockchain to ensure decentralized and reliable execution. These contracts are responsible for handling the logic of various dApps interacting with the blockchain, as well as the interaction of the off-chain system with the on-chain system, including asset transfers, asset swaps, and so on.\\nContract Explained\\nL1CrossDomainMessengerProxy​\\nThis contract is a proxy for the L1CrossDomainMessenger contract on the L2, which can be used to the interaction with the L2 contract from L1.\\nThe L1CrossDomainMessenger contract is a high-level interface for sending messages to and receiving messages from Mantle Network (from L1 to L2).\\nL1StandardBridgeProxy​\\nThis contract is a proxy for the L1StandardBridge contract on the L2, which can be used to the interaction with the L2 bridge from L1.\\nThe L",
    "1StandardBridge is a standardized contract for transferring ERC20 tokens to/from Mantle Network\\nL1ERC721BridgeProxy​\\nThe proxy contract for transferring ERC721 tokens to/from Mantle Network.\\nL2OutputOracleProxy​\\nThe proxy contract of stores commitments to the state of Mantle Network, which can be used by contracts on L1 to access the L2 state\\nOptimismMintableERC20FactoryProxy​\\nThe proxy contract of factory contract for minting ERC20 tokens.\\nOptimismPortalProxy​\\nThe proxy contract of low-level message-passing interface.\\nProxyAdmin​\\nAdmin contract for the contracts, is the owner of all the proxy contracts. It can be used to upgrade the most system contracts in Mantle.\\nSystemConfigProxy​\\nThis is a proxy contract of the system contract that stores the configuration values for the on-chain system.\\nAddressManager​\\nAddressManager is a legacy contract that was used in the old version of the Mantle system to manage a registry of string names to addresses.\\nLast updated 3 months ag",
    "o\",\n  \"markdown\": \"# Contract Introduction | Network\\n\\nMantle Network's on-chain module contains a series of smart contracts that run on the blockchain to ensure decentralized and reliable execution. These contracts are responsible for handling the logic of various dApps interacting with the blockchain, as well as the interaction of the off-chain system with the on-chain system, including asset transfers, asset swaps, and so on.\\n\\n## \\n\\nContract Explained\\n\\n### \\n\\nL1CrossDomainMessengerProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l1crossdomainmessengerproxy)\\n\\nThis contract is a proxy for the L1CrossDomainMessenger contract on the L2, which can be used to the interaction with the L2 contract from L1.\\n\\nThe L1CrossDomainMessenger contract is a high-level interface for sending messages to and receiving messages from Mantle Network (from L1 to L2).\\n\\n### \\n\\nL1StandardBridgeProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l",
    "1standardbridgeproxy)\\n\\nThis contract is a proxy for the L1StandardBridge contract on the L2, which can be used to the interaction with the L2 bridge from L1.\\n\\nThe L1StandardBridge is a standardized contract for transferring ERC20 tokens to/from Mantle Network\\n\\n### \\n\\nL1ERC721BridgeProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l1erc721bridgeproxy)\\n\\nThe proxy contract for transferring ERC721 tokens to/from Mantle Network.\\n\\n### \\n\\nL2OutputOracleProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#l2outputoracleproxy)\\n\\nThe proxy contract of stores commitments to the state of Mantle Network, which can be used by contracts on L1 to access the L2 state\\n\\n### \\n\\nOptimismMintableERC20FactoryProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#optimismmintableerc20factoryproxy)\\n\\nThe proxy contract of factory contract for minting ERC20 tokens.\\n\\n### \\n\\nOptimismPortalProxy[​](https://docs-v2.mantle.xyz/",
    "intro/system-components/on-chain-system#optimismportalproxy)\\n\\nThe proxy contract of low-level message-passing interface.\\n\\n### \\n\\nProxyAdmin[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#proxyadmin)\\n\\nAdmin contract for the contracts, is the owner of all the proxy contracts. It can be used to upgrade the most system contracts in Mantle.\\n\\n### \\n\\nSystemConfigProxy[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#systemconfigproxy)\\n\\nThis is a proxy contract of the system contract that stores the configuration values for the on-chain system.\\n\\n### \\n\\nAddressManager[​](https://docs-v2.mantle.xyz/intro/system-components/on-chain-system#addressmanager)\\n\\nAddressManager is a legacy contract that was used in the old version of the Mantle system to manage a registry of string names to addresses.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-informatio",
    "n/on-chain-system/key-l1-contract-address\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/key-l1-contract-address\",\n    \"loadedTime\": \"2025-02-15T20:31:31.911Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/on-chain-system/key-l1-contract-address\",\n    \"title\": \"Key L1 Contract Address | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Key L1 Contract Address | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/9D2ZmwqE5FSDfwAv1Vcb\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:31 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\"",
    ",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGVlYTAxYjgtZDNlMC00ODgwLWE4NWEtM2VmYzdkNmQ1YzU0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static",
    ".gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=rDsWLJOtIpKgSaUQg6mmPuqFH5u3YVye%2FouiLeYrygsgC5pHhObFI%2BvY%2BYuMZtZzxlEwRpdK7vS72D3YZMdEN0AxbTxmesWdfNlC650FnZ0nPtYcEUZd0JFZz4vQPuFHprEMeRY3%2FbgxHtlpKPZO\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fdd0c9da5f2-IA",
    "D\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Key L1 Contract Address | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Key L1 Contract Address | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system\",\n    \"loadedTime\": \"2025-02-15T20:31:34.460Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system\",\n    \"title\": \"Off-Chain System | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Off-Chain System | Network\"\n      },\n      {\n        \"p",
    "roperty\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/cCPKPNIIsH60A58Dr3xo\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:34 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWFmNmVmOTgtZmQxNi00NTM1LTkxYzItZmJhZDExNDNlNzQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly;",
    " style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=4YiID5nm7Sld6l%2BRUZWlrVMIkzJCTcp4q63wSjPnE%2BtyDkig1KZZwz9cGU3w%2FOOFIDf%2B6foKBkcVJeVmWpC7lcd5mpy3ZKmILuq7EZqqfE63o%2BPJvmw4vsn8ulYYBREMWbGJSGIOG4IseplXeerz\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n     ",
    " \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280feebd9ba5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Off-Chain System | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Off-Chain System | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F",
    "3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/system-information/off-chain-system?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/system-information/off-chain-system?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/con",
    "tract-introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/contract-introduction\",\n    \"loadedTime\": \"2025-02-15T20:31:37.126Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/contract-introduction\",\n    \"title\": \"Contract Introduction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Contract Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/3tUF0SB94Npwr2Jc0RuH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:37 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-a",
    "live\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MTY5ZDdiOTYtYThkNy00MzFmLWJkZTUtOGU0MzkxMDE0MTg1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fon",
    "tawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=K%2FawDtFY%2BCxSjWBcNWo6Xay2Dx1OIynsDhbjGjAqGLqKRuCFD00IG0IhFVLNY9IKSEDKwWIS2adfHbaRVXKzUxOv5NrFIr8EHuhsmiyty9U%2BcxIrK7CVLRvPFZn44Z%2BjvYf93Q0dB%2B0Bd5khKXzP\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ffe3f84a5f2-IAD\",\n      \"content-encoding",
    "\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Contract Introduction | Network\\nThe off-chain System is another key module of the Mantle Network. It is responsible for executing specific tasks and logic in an environment outside of the blockchain, which is key to Layer 2's ability to scale L1 and provide more efficient and faster response and execution.\\nContract ​Explained\\nBVM_GasPriceOracle​\\nStores L2 gas price configuration values. Provide the tokenRatio parameter to keep the gas fees more stable.\\nL1_BLOCK_NUMBER​\\nStores L1 block context information (e.g., latest known L1 block hash)\\nL2CrossDomainMessenger​\\nHigh-level interface for sending messages to and receiving messages from L1\\nL2StandardBridge​\\nStandardized system for transferring ERC20 tokens to/from L1\\nL2_TO_L1_MESSAGE_PASSER​\\nLow-level message-passing interface\\nBaseFeeVault​\\nVault for L2 BaseFee transaction fees, more details here.\\nBVM_SequencerFeeVault​\\nVault for L2 transaction fees except for BaseFee,",
    " more details here.\\nL1Block​\\nThe L1Block gives users access to information about the last known L1 block.\\nOptimismMintableERC20Factory​\\nOptimismMintableERC20Factory is a factory contract that generates OptimismMintableERC20 contracts on the network it's deployed to.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Contract Introduction | Network\\n\\nThe off-chain System is another key module of the Mantle Network. It is responsible for executing specific tasks and logic in an environment outside of the blockchain, which is key to Layer 2's ability to scale L1 and provide more efficient and faster response and execution.\\n\\n## \\n\\nContract [​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#introduction)Explained\\n\\n### \\n\\nBVM\\\\_GasPriceOracle[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#bvm_gaspriceoracle)\\n\\nStores L2 gas price configuration values. Provide the tokenRatio parameter to keep the gas fees more stable.\\n\\n### \\n\\nL1\\\\_BLOCK\\\\",
    "_NUMBER[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l1_block_number)\\n\\nStores L1 block context information (e.g., latest known L1 block hash)\\n\\n### \\n\\nL2CrossDomainMessenger[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l2crossdomainmessenger)\\n\\nHigh-level interface for sending messages to and receiving messages from L1\\n\\n### \\n\\nL2StandardBridge[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l2standardbridge)\\n\\nStandardized system for transferring ERC20 tokens to/from L1\\n\\n### \\n\\nL2\\\\_TO\\\\_L1\\\\_MESSAGE\\\\_PASSER[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l2_to_l1_message_passer)\\n\\nLow-level message-passing interface\\n\\n### \\n\\nBaseFeeVault[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#basefeevault)\\n\\nVault for L2 BaseFee transaction fees, more details [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support#applicatio",
    "n-of-eip-1559-in-mantle-v2-tectonic).\\n\\n### \\n\\nBVM\\\\_SequencerFeeVault[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#bvm_sequencerfeevault)\\n\\nVault for L2 transaction fees except for BaseFee, more details [here](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support#application-of-eip-1559-in-mantle-v2-tectonic).\\n\\n### \\n\\nL1Block[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#l1block)\\n\\nThe L1Block gives users access to information about the last known L1 block.\\n\\n### \\n\\nOptimismMintableERC20Factory[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#optimismmintableerc20factory)\\n\\nOptimismMintableERC20Factory is a factory contract that generates OptimismMintableERC20 contracts on the network it's deployed to.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge\",\n  ",
    "\"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge\",\n    \"loadedTime\": \"2025-02-15T20:31:29.582Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge\",\n    \"title\": \"Using Mantle Bridge | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Using Mantle Bridge | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/xw61oCcgBCNbNGB0JshN\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:28 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https:",
    "//static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGZmOGQzY2YtMWMyNC00NjFjLWFlMWQtODExNmY5NTNjZmVl' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form",
    "-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=oq%2B6UIK7oyM%2F6xS2GHb0GyRoKOPMn8MkGft7Hmtkninf3YEuojRsPDspQ09HCRd0ct12utLB%2Bo23%2B1at20NX5DT11TqHVja7CIYvRUy%2FTvvgIOp%2Bh3xYrfENiMOllnbkOFLwdowa7H4jjEABf48G\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fcbdd6e2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Using Man",
    "tle Bridge | Network\\nYou can use the testnet bridge to get acquainted with the UI of the official Mantle bridge. The official Mantle Bridge on Mainnet operates in exactly the same way connecting to Ethereum Mainnet.\\nDeposit $MNT​\\nFollow the steps below to deposit your tokens from Sepolia to Mantle Testnet:\\nNavigate to the Bridge\\nNavigate to the testnet bridge and connect your wallet by clicking on the 'Connect Wallet' button in the top-right.\\nAllocate Allowance\\nSelect the 'Deposit' tab and enter the amount of $MNT you want to bridge over to Mantle Testnet, and then click on the button at the bottom to proceed with token approval.\\nEnter the Allowance Amount\\nEnter an amount to approve to the contract. You can choose an amount you're comfortable with, but make sure its equal to or greater than the amount you're depositing. Then click on the 'Next' button.\\nApprove Your Allowance\\nClick on the 'Approve' button to approve the amount you entered. Approval may take some time, about 1",
    "0 seconds or so.\\nDeposit Your Tokens\\nOnce approval is successful, you'll see the 'Deposit Tokens to L2' button. Click on it to proceed to confirmation.\\nConfirmation\\nHere you'll be able to see the deposit amount and approximate time it'll take to complete the deposit operation. Finally, click on the 'Confirm' button to send a deposit transaction. You'll need to confirm the transaction in your wallet too.\\nFinish Your Deposit\\nFeel free to check the transaction status by click on the 'Sepolia Explorer' button. Once complete the balance will be reflected in your L2 testnet wallet.\\nWithdraw $MNT​\\nFollow the steps below to withdraw your tokens from Mantle Testnet to Sepolia:\\nNavigate to the Bridge\\nNavigate to the testnet bridge and connect your wallet by clicking on the 'Connect Wallet' button in the top-right.\\nWithdraw Your Tokens\\nSelect the 'Withdraw' tab and enter the amount of $MNT you want to bridge over to Sepolia, and then click on the 'Withdraw Tokens from L2' button at th",
    "e bottom.\\nConfirm Your Withdrawal\\nYou'll be able to see the withdraw amount and an approximation for the amount of time it will take for the token transfer. Note that once complete, the amount still needs to be claimed on L1 for it to land in your wallet. Check the checkboxes, and click on the 'Confirm' button to send a withdraw transaction.\\nSubmit Your Proof\\nAfter we sign the transaction, which means you've initiated the withdrawal transaction, now we need to wait around 30 minutes for the transaction status to be ready to prove. Once the transaction is ready, you'll be able to submit prove the withdrawal.\\nClaim Your Withdrawal\\nThen we have to wait another 30 minutes for the transaction status to be ready to claim. Click on the 'claim' button and confirm the transaction in your wallet.\\nFinish Your Withdrawal\\nThe $MNT will show up in your Sepolia wallet once the transaction is successfully sent.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Using Mantle Bridge | Network\\n\\nYou ",
    "can use the [testnet bridge](https://app.mantle.xyz/bridge) to get acquainted with the UI of the official Mantle bridge. The [official Mantle Bridge](https://app.mantle.xyz/bridge) on Mainnet operates in exactly the same way connecting to Ethereum Mainnet.\\n\\n## \\n\\nDeposit $MNT[​](https://docs-v2.mantle.xyz/users/how-to/bridge#deposit-mnt)\\n\\nFollow the steps below to deposit your tokens from Sepolia to Mantle Testnet:\\n\\n### \\n\\nNavigate to the Bridge\\n\\nNavigate to the [testnet bridge](https://app.mantle.xyz/bridge) and connect your wallet by clicking on the '**Connect Wallet**' button in the top-right.\\n\\n### \\n\\nAllocate Allowance\\n\\nSelect the '**Deposit**' tab and enter the amount of `$MNT` you want to bridge over to Mantle Testnet, and then click on the button at the bottom to proceed with token approval.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-1-6a8e5a915f0626a3f218d96848ab077d.png&width=300&dpr=4&quality=10",
    "0&sign=9cb8b61c&sv=2)\\n\\n### \\n\\nEnter the Allowance Amount\\n\\nEnter an amount to approve to the contract. You can choose an amount you're comfortable with, but **make sure its equal to or greater than the amount you're depositing**. Then click on the '**Next**' button.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-2-a61890dd5534946c8a905e2a9de8b12c.png&width=300&dpr=4&quality=100&sign=828fb28e&sv=2)\\n\\n### \\n\\nApprove Your Allowance\\n\\nClick on the '**Approve**' button to approve the amount you entered. Approval may take some time, about 10 seconds or so.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-3-f8f82a02302593ef90089af14146e3e6.png&width=300&dpr=4&quality=100&sign=5b248e5a&sv=2)\\n\\n### \\n\\nDeposit Your Tokens\\n\\nOnce approval is successful, you'll see the '**Deposit Tokens to L2**' button. Click on it to proceed to confirmation.\\n\\n![](https://docs.man",
    "tle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-4-29cd71373214e7cd92d731d5cd8ca49d.png&width=300&dpr=4&quality=100&sign=475192c1&sv=2)\\n\\n### \\n\\nConfirmation\\n\\nHere you'll be able to see the deposit amount and approximate time it'll take to complete the deposit operation. Finally, click on the '**Confirm**' button to send a deposit transaction. You'll need to confirm the transaction in your wallet too.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-5-78a7e9f81dad621fcc6e481cc005b988.png&width=300&dpr=4&quality=100&sign=53833f8&sv=2)\\n\\n### \\n\\nFinish Your Deposit\\n\\nFeel free to check the transaction status by click on the '**Sepolia Explorer**' button. Once complete the balance will be reflected in your L2 testnet wallet.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-6-e0947037465a743f2aaa229d7025f758.png&width=300&dpr=",
    "4&quality=100&sign=eabf0a44&sv=2)\\n\\n## \\n\\nWithdraw $MNT[​](https://docs-v2.mantle.xyz/users/how-to/bridge#withdraw-mnt)\\n\\nFollow the steps below to withdraw your tokens from Mantle Testnet to Sepolia:\\n\\n### \\n\\nNavigate to the Bridge\\n\\nNavigate to the [testnet bridge](https://app.mantle.xyz/bridge) and connect your wallet by clicking on the '**Connect Wallet**' button in the top-right.\\n\\n### \\n\\nWithdraw Your Tokens\\n\\nSelect the '**Withdraw**' tab and enter the amount of `$MNT` you want to bridge over to Sepolia, and then click on the '**Withdraw Tokens from L2**' button at the bottom.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-7-c0a2fb06d2d69b772902ee36803cf7d9.png&width=300&dpr=4&quality=100&sign=1664813b&sv=2)\\n\\n### \\n\\nConfirm Your Withdrawal\\n\\nYou'll be able to see the withdraw amount and an approximation for the amount of time it will take for the token transfer. **Note that once complete, the amount stil",
    "l needs to be claimed on L1 for it to land in your wallet**. Check the checkboxes, and click on the '**Confirm**' button to send a withdraw transaction.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-8-cc1b21f365dcd8b64ef4d3e0d905f68b.png&width=300&dpr=4&quality=100&sign=395dd1dd&sv=2)\\n\\n### \\n\\nSubmit Your Proof\\n\\nAfter we sign the transaction, which means you've initiated the withdrawal transaction, now we need to wait around 30 minutes for the transaction status to be ready to prove. Once the transaction is ready, you'll be able to submit prove the withdrawal.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-9-fe6c7585097d541472fabf36c993b0b7.png&width=300&dpr=4&quality=100&sign=661e4c69&sv=2)\\n\\n### \\n\\nClaim Your Withdrawal\\n\\nThen we have to wait another 30 minutes for the transaction status to be ready to claim. Click on the '**claim**' button and confirm",
    " the transaction in your wallet.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-10-6a149c7afff3f2f76ada08426a7646ae.png&width=300&dpr=4&quality=100&sign=78d0b968&sv=2)\\n\\n### \\n\\nFinish Your Withdrawal\\n\\nThe `$MNT` will show up in your Sepolia wallet once the transaction is successfully sent.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fbridge-11-6ba2980c91ec9e0e5e124073a48b3f4b.png&width=300&dpr=4&quality=100&sign=ffe3c056&sv=2)\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/ecosystem\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/ecosystem\",\n    \"loadedTime\": \"2025-02-15T20:31:33.263Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xy",
    "z/network/for-users/ecosystem\",\n    \"title\": \"Ecosystem | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Ecosystem | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/3Et6MR94ZZY9IgFV9HqV\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:31 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTkwZDI2YWItZGU2Yy0",
    "0NjI5LTk1NzUtZjU0NWRiZDE3OTQ1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=s%2F0CnXCwlQNF5sR5ng999oUAsC54sadHGs4bg%2BRzz0v%2",
    "BP8Y1Al9HMIbPyNrlGsRGGfNoANded7gGI8el5nqhJBKX8p38AruW90BO6aMyZW%2BXWPG%2FlRM9Ej6hlT5mwVUaTG8OZ12Co3z3ALvybs5O\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fde7d9c2ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Ecosystem | Network\\nSupported Wallets\\nPreviousUsing Mantle BridgeNextSupported Wallets\\nWas this helpful?\",\n  \"markdown\": \"# Ecosystem | Network\\n\\n[Supported Wallets](https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets)\\n\\n[PreviousUsing Mantle Bridge](https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge)[NextSupported Wal",
    "lets](https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling\",\n    \"loadedTime\": \"2025-02-15T20:31:33.563Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling\",\n    \"title\": \"Resources & Tooling | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Resources & Tooling | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/mkdszHk74AxjmGyq3uJu\"\n      }\n    ],\n",
    "    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:31 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGMzMjYxY2EtMjlkZi00NDgyLWI0NDAtMTg2ZGZmYzFiZTQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.git",
    "book.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pPo7x86G1Rnhry0JkT0Qppz9V0hFUv1UDTp6nWu6WPzgq3343irgHJUu2pjcBm1t4X1OYWWC6uqgzGWZZcV84l%2BdMK79CzVhIczVJ0VaPg0GOPLQsX10defBVcuBwHgGYDOsoQm3%2Fd2bXFxaaSCo\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\":",
    " \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280fdfbef72ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Resources & Tooling | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Resources & Tooling | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpx",
    "snWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/resources-and-tooling?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/resources-and-tooling?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets\",\n    \"loadedTime\": \"2025-02-15T20:31:39.506Z\",\n    \"referr",
    "erUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/ecosystem/supported-wallets\",\n    \"title\": \"Supported Wallets | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Supported Wallets | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/9SPYH64Z0C4wQQLigO7Y\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:36 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefe",
    "tch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MmNkZGM2MjYtZGQ3My00ZWM0LTllY2MtY2JjMTMzODUzYzZi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-p",
    "olicy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=mSmuom67PQrWHo6T5vBDNmSG0wgnEW87SUlpiyV3%2Fr%2F2jd6GfaEZ9ilJq6%2FTY0dwyB%2BB7bgXJcejd6zpKhd92m3dCZi%2BqANMEYGg%2BihV3VIPKCH8qBxqsdpbzzdA%2BeGJ3LxvP578igCn%2FfrcT494\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91280ffd7aa02ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Supported Wallets | Network\\nMultisig Wallets​\\nA multisig wallet (multi-signature wallet) is a cryptocurrency wallet that requires multiple signatures from different private keys",
    " to authorize a transaction. This adds an extra layer of security, making it ideal for joint accounts or situations where multiple parties need to approve a transaction.\\nSafe{Wallet} is the most trusted decentralized custody protocol and collective asset management platform.\\nMPC Wallets​\\nAn MPC (Multi-Party Computation) wallet is a type of cryptocurrency wallet that employs advanced cryptographic techniques to enhance security. Instead of storing a single private key in one location, MPC wallets distribute the private key into multiple shares, each held by different parties. This distributed nature makes it extremely difficult for hackers to compromise the wallet, as they would need to gain access to all the shares simultaneously. Even if one share is compromised, the remaining shares remain secure, safeguarding your funds. MPC wallets offer a significant improvement in security compared to traditional wallets, making them an increasingly popular choice for both individuals and inst",
    "itutions.\\nFireblocks Wallet is a digital asset custody service for organisations and businesses that allows users to securely store, transfer and distribute cryptocurrencies and other blockchain assets.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Supported Wallets | Network\\n\\n### \\n\\nMultisig Wallets[​](https://docs-v2.mantle.xyz/users/ecosystem/wallet#multisig-wallets)\\n\\nA multisig wallet (multi-signature wallet) is a cryptocurrency wallet that requires multiple signatures from different private keys to authorize a transaction. This adds an extra layer of security, making it ideal for joint accounts or situations where multiple parties need to approve a transaction.\\n\\nSafe{Wallet} is the most trusted decentralized custody protocol and collective asset management platform.\\n\\n### \\n\\nMPC Wallets[​](https://docs-v2.mantle.xyz/users/ecosystem/wallet#mpc-wallets)\\n\\nAn MPC (Multi-Party Computation) wallet is a type of cryptocurrency wallet that employs advanced cryptographic techniq",
    "ues to enhance security. Instead of storing a single private key in one location, MPC wallets distribute the private key into multiple shares, each held by different parties. This distributed nature makes it extremely difficult for hackers to compromise the wallet, as they would need to gain access to all the shares simultaneously. Even if one share is compromised, the remaining shares remain secure, safeguarding your funds. MPC wallets offer a significant improvement in security compared to traditional wallets, making them an increasingly popular choice for both individuals and institutions.\\n\\nFireblocks Wallet is a digital asset custody service for organisations and businesses that allows users to securely store, transfer and distribute cryptocurrencies and other blockchain assets.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-users/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/n",
    "etwork/for-users/faqs\",\n    \"loadedTime\": \"2025-02-15T20:31:40.480Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-users/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ogM0kRPytJaAmFVVgnAI\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Rout",
    "er-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGQ5ZTRkODMtMzlkMS00Y2JjLWEwNzQtNTNhNGY4OTg0YTY3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_a",
    "ge\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=HJX5UFdwnnnTZleaByGdIwgdF%2BzScDSkZflVBOGlaYGE48kYHVsmingVR%2FFDzJNcGwYcn%2Fquf8RhnCm4FVcwD4TcK5cT1s2LqGVi%2FlcqHnMbbIx0briKAXTiXG9EdXYyuclOGkcfFLW9UrDQch0b\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128100d5d812ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nIs there an option for a test drive?​\\nYou can experience the deposit and withdraw flow by using our simulated testnet. It provides a safe ",
    "environment to try out the bridge functionality without any real token transactions.\\nWhat is L1/L2, and what are the required gas fees for deposit and withdrawal?​\\nMantle Network is a Layer-2 (L2) scalability solution built on Ethereum which is the Layer-1 (L1).\\nDeposit: You need ETH on L1 as gas fees to initiate the deposit. After depositing, you'll need MNT on L2 as gas fees to transact on Mantle Network.\\nWithdraw: You need MNT on L2 as gas fees to initiate the withdrawal and ETH on L1 as gas fees to claim the tokens on Ethereum Mainnet.\\nHow can I view my bridged token balances on Mantle Network in my wallet?​\\nIf the auto-detection of your bridged balances doesn't work, you can manually import the tokens to your wallet using the following contract addresses:\\n0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\nFor other token contract addresses, you can access the bridge token mapping by visiting the following link.\\nWhat is the typical duration for deposits and withdrawals?​\\nInitiati",
    "ng a deposit typically completes in around ~12 minutes.\\nConversely, withdrawals, due to the intricacies of Optimistic Rollups, have a challenge period to detect and address any discrepancies in the Mantle Mainnet transaction. This ensures the highest security, but means withdrawals to Ethereum Mainnet can take up to a week.\\nWhy is the estimated fee on Metamask not the same as the actual transaction fee?​\\nMetamask ensures that the transaction is successful by displaying the estimated fee higher than the actual cost consumed, and the actual fee cost is much lower. You can check the actual cost on explorer after the transaction is confirmed.\\nHow are withdrawals fees determined?​\\nThe cost to claim on the bridge is dependent on the gas costs, measured in Gwei, at the time of your transaction. The estimated formula to determine this cost is:\\nCost(ETH)=600,000×GweiCost(ETH)=600,000×Gwei\\nFor example:\\nAt 15 Gwei, the cost is approximately 0.009 ETH.\\nAt 30 Gwei, the cost is approximatel",
    "y 0.018 ETH.\\nTo minimize your costs, you can opt to claim during a period when the Gwei is low. For current gas prices, you can check the Etherscan Gas Tracker.\\nWhere can I find the bridge token mapping?​\\nYou can view the bridge token mapping by visiting this link. It provides comprehensive details on the token list and other related information.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n### \\n\\nIs there an option for a test drive?[​](https://docs-v2.mantle.xyz/users/faqs#is-there-an-option-for-a-test-drive)\\n\\n*   You can experience the deposit and withdraw flow by using our simulated testnet. It provides a safe environment to try out the bridge functionality without any real token transactions.\\n    \\n\\n### \\n\\nWhat is L1/L2, and what are the required gas fees for deposit and withdrawal?[​](https://docs-v2.mantle.xyz/users/faqs#what-is-l1l2-and-what-are-the-required-gas-fees-for-deposit-and-withdrawal)\\n\\n*   Mantle Network is a Layer-2 (L2) scalability solut",
    "ion built on Ethereum which is the Layer-1 (L1).\\n    \\n    *   Deposit: You need ETH on L1 as gas fees to initiate the deposit. After depositing, you'll need MNT on L2 as gas fees to transact on Mantle Network.\\n        \\n    *   Withdraw: You need MNT on L2 as gas fees to initiate the withdrawal and ETH on L1 as gas fees to claim the tokens on Ethereum Mainnet.\\n        \\n    \\n\\n### \\n\\nHow can I view my bridged token balances on Mantle Network in my wallet?[​](https://docs-v2.mantle.xyz/users/faqs#how-can-i-view-my-bridged-token-balances-on-mantle-network-in-my-wallet)\\n\\n*   If the auto-detection of your bridged balances doesn't work, you can manually import the tokens to your wallet using the following contract addresses:\\n    \\n    0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\n    \\n\\nFor other token contract addresses, you can access the bridge token mapping by visiting the following [link](https://docs.mantle.xyz/network/for-developers/quick-access#token-list).\\n\\n### \\n\\nWhat i",
    "s the typical duration for deposits and withdrawals?[​](https://docs-v2.mantle.xyz/users/faqs#what-is-the-typical-duration-for-deposits-and-withdrawals)\\n\\n*   Initiating a deposit typically completes in around ~12 minutes.\\n    \\n    Conversely, withdrawals, due to the intricacies of Optimistic Rollups, have a challenge period to detect and address any discrepancies in the Mantle Mainnet transaction. This ensures the highest security, but means withdrawals to Ethereum Mainnet can take up to a week.\\n    \\n\\n### \\n\\nWhy is the estimated fee on Metamask not the same as the actual transaction fee?[​](https://docs-v2.mantle.xyz/users/faqs#why-is-the-estimated-fee-on-metamask-not-the-same-as-the-actual-transaction-fee)\\n\\nMetamask ensures that the transaction is successful by displaying the estimated fee higher than the actual cost consumed, and the actual fee cost is much lower. You can check the actual cost on explorer after the transaction is confirmed.\\n\\n### \\n\\nHow are withdrawals fe",
    "es determined?[​](https://docs-v2.mantle.xyz/users/faqs#how-are-withdrawals-fees-determined)\\n\\n*   The cost to claim on the bridge is dependent on the gas costs, measured in Gwei, at the time of your transaction. The estimated formula to determine this cost is:\\n    \\n    Cost(ETH)=600,000×GweiCost(ETH)=600,000×Gwei\\n    \\n    For example:\\n    \\n    *   At 15 Gwei, the cost is approximately 0.009 ETH.\\n        \\n    *   At 30 Gwei, the cost is approximately 0.018 ETH.\\n        \\n    \\n    To minimize your costs, you can opt to claim during a period when the Gwei is low. For current gas prices, you can check the [Etherscan Gas Tracker](https://etherscan.io/gastracker).\\n    \\n\\n### \\n\\nWhere can I find the bridge token mapping?[​](https://docs-v2.mantle.xyz/users/faqs#where-can-i-find-the-bridge-token-mapping)\\n\\n*   You can view the bridge token mapping by visiting [this link](https://token-list.mantle.xyz/mantle.tokenlist.json). It provides comprehensive details on the token list an",
    "d other related information.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers\",\n    \"loadedTime\": \"2025-02-15T20:31:43.361Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers\",\n    \"title\": \"Node Endpoints and Providers | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Node Endpoints and Providers | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.ma",
    "ntle.xyz/network/~gitbook/ogimage/gxFuzeCMQ38MpNxcxnjP\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDJlM2U3ZGUtZmY1OS00MDA1LWEzYWMtOTM2NTM0MTVmNTQz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com",
    "; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=76weWOq%2BKlvx%2FQ7H5sPCfbYbkdPuFTHNp9gE0aVlVtMNHvxWoGi%2FwQz11eUFxk8pg8%2FZbdys1gWoNUQAIj%2FiTgFt%2F6wCUi2oxCCPnSrDxn9IszAOGQScl%2FanZg0C6SOXxd5ac7V5wHfkDINirgiW\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-g",
    "itbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810213c862ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Node Endpoints and Providers | Network\\nMantle provides powerful RPC Endpoints to programmatically interact with the web. Whether you are operating on a Mainnet or testing on a Testnet, Mantle provides accessible URLs for easy integration.\\nOfficial Network Endpoints​\\nCurrently, Mantle Network supports both https and WSS endpoints.\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes\\nThe WebSocket supports an access method equivalent to the https interface, along with event subscription and cancellation. See here for reference.\\nThird-Party Providers​\\nWe're working with popular node providers that you can use to connect your dApps or games to the Mantle network.",
    " They enable convenient and scalable API access to Mantle nodes, so you can focus on building without having to worry about the underlying infrastructure.\\nThe public third-party RPC endpoints listed below are intended for test environments only. For production environments, please use their premium services to ensure stability and reliability.\\nName\\nHttps Url\\nWebSocket Url\\nwss://mantle-rpc.publicnode.com\\n* If you have a higher demand for RPC endpoints, QuickNode has launched a series of discounts for Mantle users, check out the details here.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Node Endpoints and Providers | Network\\n\\nMantle provides powerful RPC Endpoints to programmatically interact with the web. Whether you are operating on a Mainnet or testing on a Testnet, Mantle provides accessible URLs for easy integration.\\n\\n## \\n\\nOfficial Network Endpoints[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/endpoints#official-network-endpoints)\\n\\nCurrently, Mantle Network sup",
    "ports both `https` and `WSS` endpoints.\\n\\n*   The official Mantle RPC employs rate limiting to ensure stability during traffic spikes\\n    \\n*   The WebSocket supports an access method equivalent to the https interface, along with event subscription and cancellation. See [here](https://ethereum.org/en/developers/tutorials/using-websockets/) for reference.\\n    \\n\\n## \\n\\nThird-Party Providers[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/endpoints#third-party-providers)\\n\\nWe're working with popular node providers that you can use to connect your dApps or games to the Mantle network. They enable convenient and scalable API access to Mantle nodes, so you can focus on building without having to worry about the underlying infrastructure.\\n\\nThe public third-party RPC endpoints listed below are intended for test environments only. For production environments, please use their premium services to ensure stability and reliability.\\n\\nName\\n\\nHttps Url\\n\\nWebSocket Url\\n\\nwss://mantle-",
    "rpc.publicnode.com\\n\\n\\\\* If you have a higher demand for RPC endpoints, QuickNode has launched a series of discounts for Mantle users, check out the details [here](https://quicknode.notion.site/QuickNode-Benefits-for-Mantle-Developers-94c0992b87a24858b22f5e4a21a44bd1?pvs=4).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api\",\n    \"loadedTime\": \"2025-02-15T20:31:45.967Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api\",\n    \"title\": \"Mantle API | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n      ",
    "  \"property\": \"og:title\",\n        \"content\": \"Mantle API | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Vq3cQZP5OzQRDWJPI5Jz\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:44 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"local-DFW\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2EwZWFmNDctNDViYi00MThmLWE4OTEtOGU5Yzc2ZWYyNGJi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.",
    "gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=OLqOv1FwgWn0QdlG9o9XMZrdvRiiX1F%2BTsWN93nmtoanoGwRTzI3b3fCDhgUsy3g%2F5pEKHQj2LONlxPvXl2XtcfJGZkxGLuslt3IIhesv7S0HQquYRLvlF83xUYAjM5uqdY3830Vl7phkyHJrswW\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff",
    "\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128102f5e732ca2-DFW\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle API | Network\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Network shares the same JSON-RPC API implementation as Ethereum.\\nYou can refer to the common methods here.\\nIf you want to get the L2 gas price, you can either use eth_gasPrice or get it from GasPriceOracle 's gasPrice function. If you want to get the L1 gas price, you can get it from GasPriceOracle 's l1BaseFee function.\\nWe've also introduced custom methods to simplify certain Mantle-specific interactions. All methods can be ac",
    "cessed via https and websocket, endpoints can be found here.\\nReturns block info for multiple blocks, takes a block range as parameter\\nReturns the block info in the form of an array of block objects for multiple blocks within a specified range. (See eth_getBlockByHash for the structure of a block object)\\nIf true, returns full transaction objects If false, returns transaction hashes only\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\": \\\"2.0\\\", \\\"id\\\": 1, \\\"result\\\": [ { \\\"difficulty\\\": \\\"0x2\\\", \\\"extraData\\\": \\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\", \\\"gasLimit\\\": \\\"0xe4e1c0\\\", \\\"gasUsed\\\": \\\"0x3183d\\\", \\\"hash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"logsBloom\\\": \\\"0x000000000000000000000000",
miner\\\": \\\"0x0000000000000000000000000000000000000000\\\", \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\": \\\"0x0000000000000000\\\", \\\"number\\\": \\\"0x1\\\", \\\"parentHash\\\": \\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\", \\\"receiptsRoot\\\": \\\"0xf4c97b1186b690ad3318f907c0cdaf46f4598f27f711a5609064b2690a767287\\\", \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\": \\\"0x30c\\\", \\\"stateRoot\\\": \\\"0xd3",
    "ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\", \\\"timestamp\\\": \\\"0x618d4769\\\", \\\"totalDifficulty\\\": \\\"0x3\\\", \\\"transactions\\\": [ \\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\" ], \\\"transactionsRoot\\\": \\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\", \\\"uncles\\\": [] }, { \\\"difficulty\\\": \\\"0x2\\\", \\\"extraData\\\": \\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a5e2910fe64b41801\\\", \\\"gasLimit\\\": \\\"0xe4e1c0\\\", \\\"gasUsed\\\": \\\"0x1c60d\\\", \\\"hash\\\": \\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\", \\\"logsBloom\\\": \\\"0x0008000000020000000000000000000800000000000000000000010000800000000000000000000000000000000000000000000000000000000040000000000010000000000000000000000002000000000000000000000000000000000000400000000000000000000000000000000040000000040000000000000010000000000000000000",
    "0000000000020000000000000000000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008400000000000000000010000000000000000020000000020000000000000000000000000000000000000000000002000\\\", \\\"miner\\\": \\\"0x0000000000000000000000000000000000000000\\\", \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\": \\\"0x0000000000000000\\\", \\\"number\\\": \\\"0x2\\\", \\\"parentHash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"receiptsRoot\\\": \\\"0x2057c8fb79c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\", \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\": \\\"0x30c\\\", \\\"stateRoot\\\": \\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\", \\\"timestamp\\\": \\\"0x618d8837\\\", \\\"totalDifficulty\\\": \\\"0x5\\\", \\\"transactions\\\": [ \\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\" ], \\\"transactionsRoot\\\": \\",
    "\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f4c5ca6f56a7d9a45b9904ea1c69\\\", \\\"uncles\\\": [] } ] }\\nReturns various pieces of information in the form of an Object for a specified node. The response Object structure is as follows:\\nNode's mode of operation - \\\"sequencer\\\" or \\\"verifier\\\"\\ntrue if the node is currently syncing false otherwise\\nNested object. Contains blockNumber and timestamp\\nBlock no. of the latest known L1 block\\nTimestamp of the latest known L1 block\\nNested object. Contains queueIndex, index, and verifiedIndex\\nIndex within the CTC of the last L1 to L2 message ingested\\nIndex of the last L2 transaction processed\\nIndex of the last transaction that was ingested from a batch that was posted to L1\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\": \\\"2.0\\\", \\\"id\\\": 1, \\\"result\\\": { \\\"mode\\\": \\\"verifier\\\", \\\"syncing\\\": false, \\\"ethContext\\\": { \\\"blockNumber\\\": 10743302, \\\"timestamp\\\": 1957082793 }, \\\"roll",
    "upContext\\\": { \\\"index\\\": 11287, \\\"queueIndex\\\": 14362, \\\"verifiedIndex\\\": 0 } } }\\nUsed to fetch the list of addresses owned by a user. Mantle nodes do not expose internal wallets for security reasons, and thus block the eth_getAccounts method. You can use an external wallet service as an alternative.\\nMantle nodes block eth_sendTransaction for security reasons as well. This is different from eth_sendRawTransaction which takes a signed transaction as input, and is supported by Mantle nodes.\",\n  \"markdown\": \"# Mantle API | Network\\n\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Network shares the same JSON-RPC API implementation as Ethereum.\\n\\nYou can refer to the common methods [here](https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods).\\n\\nIf you want to get the L2 gas price, you can either use [`eth_gasPrice`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice) or get it from `Gas",
    "PriceOracle` 's [`gasPrice`](https://mantlescan.xyz/address/0x420000000000000000000000000000000000000F#readProxyContract#F4) function. If you want to get the L1 gas price, you can get it from `GasPriceOracle` 's [`l1BaseFee`](https://mantlescan.xyz/address/0x420000000000000000000000000000000000000F#readProxyContract#F7) function.\\n\\nWe've also introduced custom methods to simplify certain Mantle-specific interactions. All methods can be accessed via `https` and `websocket`, endpoints can be found [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n\\nReturns block info for multiple blocks, takes a block range as parameter\\n\\nReturns the block info in the form of an array of block objects for multiple blocks within a specified range. (See [`eth_getBlockByHash`](https://eth.wiki/json-rpc/API#eth_getblockbyhash) for the structure of a block object)\\n\\nIf `true`, returns full transaction objects If `false`, returns transaction hashes o",
    "nly\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1,\\n  \\\"result\\\": [\\n    {\\n      \\\"difficulty\\\": \\\"0x2\\\",\\n      \\\"extraData\\\": \\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\",\\n      \\\"gasLimit\\\": \\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\": \\\"0x3183d\\\",\\n      \\\"hash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"logsBloom\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000040000000000010000000000000020000000000200000000000000100000000000000000000400000000000000000000000000004000040000010040000000000000010000000000000000000000000000002000000000000000000000000000000000000000000000000100000000",
    "0000000000000100000000000000000000000000000000000000000000000000000000000000088000000080000000000010000000000000000000000000000800008000120000000000000000000000000000000002000\\\",\\n      \\\"miner\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\": \\\"0x0000000000000000\\\",\\n      \\\"number\\\": \\\"0x1\\\",\\n      \\\"parentHash\\\": \\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\",\\n      \\\"receiptsRoot\\\": \\\"0xf4c97b1186b690ad3318f907c0cdaf46f4598f27f711a5609064b2690a767287\\\",\\n      \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\": \\\"0x30c\\\",\\n      \\\"stateRoot\\\": \\\"0xd3ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\",\\n      \\\"timestamp\\\": \\\"0x618d4769\\\",\\n      \\\"totalDifficulty\\\": \\\"0x3\\\",\\n      \\\"transactions\\\": [\\n        \\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\"\\n ",
    "     ],\\n      \\\"transactionsRoot\\\": \\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\",\\n      \\\"uncles\\\": []\\n    },\\n    {\\n      \\\"difficulty\\\": \\\"0x2\\\",\\n      \\\"extraData\\\": \\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a5e2910fe64b41801\\\",\\n      \\\"gasLimit\\\": \\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\": \\\"0x1c60d\\\",\\n      \\\"hash\\\": \\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\",\\n      \\\"logsBloom\\\": \\\"0x0008000000020000000000000000000800000000000000000000010000800000000000000000000000000000000000000000000000000000000040000000000010000000000000000000000002000000000000000000000000000000000000400000000000000000000000000000000040000000040000000000000010000000000000000000000000000002000000000000000000000000000000000000000010000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
    "8400000000000000000010000000000000000020000000020000000000000000000000000000000000000000000002000\\\",\\n      \\\"miner\\\": \\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\": \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\": \\\"0x0000000000000000\\\",\\n      \\\"number\\\": \\\"0x2\\\",\\n      \\\"parentHash\\\": \\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"receiptsRoot\\\": \\\"0x2057c8fb79c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\",\\n      \\\"sha3Uncles\\\": \\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\": \\\"0x30c\\\",\\n      \\\"stateRoot\\\": \\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\",\\n      \\\"timestamp\\\": \\\"0x618d8837\\\",\\n      \\\"totalDifficulty\\\": \\\"0x5\\\",\\n      \\\"transactions\\\": [\\n        \\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\"\\n      ],\\n      \\\"transactionsRoot\\\": \\\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f",
    "4c5ca6f56a7d9a45b9904ea1c69\\\",\\n      \\\"uncles\\\": []\\n    }\\n  ]\\n}\\n```\\n\\nReturns various pieces of information in the form of an Object for a specified node. The response Object structure is as follows:\\n\\nNode's mode of operation - `\\\"sequencer\\\"` or `\\\"verifier\\\"`\\n\\n`true` if the node is currently syncing `false` otherwise\\n\\nNested object. Contains `blockNumber` and `timestamp`\\n\\nBlock no. of the latest known L1 block\\n\\nTimestamp of the latest known L1 block\\n\\nNested object. Contains `queueIndex`, `index`, and `verifiedIndex`\\n\\nIndex within the CTC of the last L1 to L2 message ingested\\n\\nIndex of the last L2 transaction processed\\n\\nIndex of the last transaction that was ingested from a batch that was posted to L1\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\": \\\"2.0\\\",\\n  \\\"id\\\": 1,\\n  \\\"result\\\": {\\n    \\\"mode\\\": \\\"verifier\\\",\\n    \\\"syncing\\\": false,\\n    \\\"ethContext\\\": {\\",
    "n      \\\"blockNumber\\\": 10743302,\\n      \\\"timestamp\\\": 1957082793\\n    },\\n    \\\"rollupContext\\\": {\\n      \\\"index\\\": 11287,\\n      \\\"queueIndex\\\": 14362,\\n      \\\"verifiedIndex\\\": 0\\n    }\\n  }\\n}\\n```\\n\\nUsed to fetch the list of addresses owned by a user. Mantle nodes do not expose internal wallets for security reasons, and thus block the `eth_getAccounts` method. You can use an external wallet service as an alternative.\\n\\nMantle nodes block `eth_sendTransaction` for security reasons as well. This is different from `eth_sendRawTransaction` which takes a signed transaction as input, and is supported by Mantle nodes.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/oracles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/oracles\",\n    \"loadedTime\": \"2025-02-15T20:31:51.079Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": ",
    "1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/oracles\",\n    \"title\": \"Oracles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Oracles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/wQY8RJMos3LZ49dB7yfi\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n ",
    "     \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MTcyMjk3MWUtNGMwNC00NTYyLTljMWMtNmM4YTI1YzNiZWFh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age",
    "\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3Zrueq0ljAM8RKeW3Y4b%2B4kFWosAtzvYMoW5VTRE1tgd9uhwW1qMHh1jGE%2B42Us1gXzG0njc0i4v3L01y6vkDT0YVgj6bdW8S7425xycpXjGh3wLCvix3IEzfxPDZipIcCy0jseMlOyHWTS2XakH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281054fda9a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Oracles | Network\\nOracles enable access to reliable off-chain data and information that might be necessary for for smart contracts to enable specific use cases.\\nThe most common requirement is token prices for different token pairs. There are more ",
    "complex use cases as well, for example:\\nDynamic NFTs that have variable properties that can change based on events that happen in the real world\\nSome dApps require access to a reliable source of random numbers\\nOracles are essentially API services that smart contracts can use to fetch off-chain data.\\nAPI3​\\nThe API3 Market provides access to 200+ price feeds on Mantle. The price feeds are delivered by an aggregate of first-party oracles using signed data and support OEV recapture.\\nApart from data feeds, API3 also provides Quantum Random Number Generation on Mantle. QRNG is a free-to-use service that provides quantum randomness on-chain. It is powered by Airnode, the first-party oracle that is directly operated by the QRNG API providers.\\nRead more\\nChronicle​\\nThe first Oracle on Ethereum, Chronicle’s decentralized Oracle network was originally built within MakerDAO for the development of DAI. Trusted and utilized by leading DeFi protocols such as Spark, MakerDAO, and Morpho, Chron",
    "icle Protocol is now available to builders on Mantle testnet and mainnet.\\nRead more\\nData Feeds: Builders can choose from 65+ data feeds, including crypto assets, yield rates, and RWAs. Chronicle’s data is sourced via custom-built data models, only utilizing Tier 1 Primary Sources, such as the markets where tokens are actively traded, including Coinbase, Binance, Uniswap, and Curve.\\nTransparency & Integrity: Chronicle’s Oracle network is fully transparent and verifiable. Via The Chronicle, the data supply chain for any Oracle can be viewed in real-time and historically, including data sources and the identity of all Validators/Signers. Users can cryptographically challenge the integrity of every Oracle update using the ‘verify’ feature. Data is independently sourced by a community of Validators, including Gitcoin, Etherscan, Infura, DeFi Saver, and MakerDAO.\\nGas Efficiency: Pioneering the Schnorr-based Oracle architecture, Chronicle’s Oracles use 60-80% less gas per update than othe",
    "r Oracle providers. This lowest cost per update allows Push Oracle updates to be made more regularly, ensuring more accurate and granular data reporting.\\nORA is Ethereum's Trustless AI. ORA is the verifiable oracle protocol that brings AI and complex compute onchain.\\nORA’s main product, Onchain AI Oracle (OAO), brings AI onchain.\\nRead more\\nSome useful links to build with OAO on Mantle:\\nThe best way to contact our team, ORA Discord\\nPyth Network​\\nPyth network is an oracle that publishes financial market data to multiple blockchains. They aggregate price data and provide price feeds for different asset types such as US equities, commodities, and other cryptocurrencies.\\nRedStone​\\nRedStone is a data ecosystem that delivers frequently updated, reliable and diverse data for your dApp and smart contracts.\\nSupraOracles​\\nSupraOracles provides access to reliable price feeds on multiple chains, and Verifiable Random Function (VRF).\\nLast updated 3 months ago\",\n  \"markdown\": \"# Oracles |",
    " Network\\n\\nOracles enable access to reliable off-chain data and information that might be necessary for for smart contracts to enable specific use cases.\\n\\nThe most common requirement is token prices for different token pairs. There are more complex use cases as well, for example:\\n\\n*   Dynamic NFTs that have variable properties that can change based on events that happen in the real world\\n    \\n*   Some dApps require access to a reliable source of random numbers\\n    \\n\\nOracles are essentially API services that smart contracts can use to fetch off-chain data.\\n\\n## \\n\\nAPI3[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#api3)\\n\\nThe [API3 Market](https://market.api3.org/mantle) provides access to 200+ price feeds on [Mantle](https://market.api3.org/mantle). The price feeds are delivered by an aggregate of [first-party oracles](https://docs.api3.org/explore/airnode/why-first-party-oracles.html) using signed data and support [OEV recapture](https://docs.api3.org/explor",
    "e/introduction/oracle-extractable-value.html).\\n\\nApart from data feeds, API3 also provides [Quantum Random Number Generation](https://docs.api3.org/explore/qrng/) on Mantle. QRNG is a free-to-use service that provides quantum randomness on-chain. It is powered by [Airnode](https://docs.api3.org/reference/airnode/latest/understand/), the first-party oracle that is directly operated by the [QRNG API providers](https://docs.api3.org/reference/qrng/providers.html).\\n\\n`Read more`[](#read-more)\\n\\n## \\n\\nChronicle[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#chronicle)\\n\\nThe first Oracle on Ethereum, Chronicle’s decentralized Oracle network was originally built within MakerDAO for the development of DAI. Trusted and utilized by leading DeFi protocols such as Spark, MakerDAO, and Morpho, [Chronicle Protocol](https://chroniclelabs.org/) is now available to builders on Mantle testnet and mainnet.\\n\\n`Read more`[](#read-more-1)\\n\\n*   **Data Feeds:** Builders can choose from 65",
    "+ data feeds, including crypto assets, yield rates, and RWAs. Chronicle’s data is sourced via custom-built data models, only utilizing Tier 1 Primary Sources, such as the markets where tokens are actively traded, including Coinbase, Binance, Uniswap, and Curve.\\n    \\n*   **Transparency & Integrity:** Chronicle’s Oracle network is fully transparent and verifiable. Via [The Chronicle](https://chroniclelabs.org/dashboard/oracle/METH/ETH?blockchain=MANTLE&txn=0x009c561afd8320ffd1627691583f215463b5ae63aaf55d4662fceccb2e9170b5&contract=0xBFE568Ea8f6bDFFe7c03F83dC8348517f8E7010A), the data supply chain for any Oracle can be viewed in real-time and historically, including data sources and the identity of all Validators/Signers. Users can cryptographically challenge the integrity of every Oracle update using the ‘verify’ feature. Data is independently sourced by a [community of Validators](https://chroniclelabs.org/validators), including Gitcoin, Etherscan, Infura, DeFi Saver, and MakerDAO.\\n ",
    "   \\n*   **Gas Efficiency:** Pioneering the Schnorr-based Oracle architecture, Chronicle’s Oracles use 60-80% less gas per update than other Oracle providers. This lowest cost per update allows Push Oracle updates to be made more regularly, ensuring more accurate and granular data reporting.\\n    \\n\\n[ORA](https://www.ora.io/) is Ethereum's Trustless AI. ORA is the verifiable oracle protocol that brings AI and complex compute onchain.\\n\\nORA’s main product, **Onchain AI Oracle (OAO)**, brings AI onchain.\\n\\n`Read more`[](#read-more-2)\\n\\nSome useful links to build with OAO on Mantle:\\n\\n*   The best way to contact our team, ORA [Discord](https://discord.gg/ora-io)\\n    \\n\\n## \\n\\nPyth Network[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#pyth-network)\\n\\n[Pyth network](https://docs.pyth.network/) is an oracle that publishes financial market data to multiple blockchains. They aggregate price data and provide price feeds for different asset types such as US equities, commod",
    "ities, and other cryptocurrencies.\\n\\n## \\n\\nRedStone[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#redstone)\\n\\n[RedStone](https://docs.redstone.finance/docs/introduction) is a data ecosystem that delivers frequently updated, reliable and diverse data for your dApp and smart contracts.\\n\\n## \\n\\nSupraOracles[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/oracles#supraoracles)\\n\\n[SupraOracles](https://supraoracles.com/docs) provides access to reliable price feeds on multiple chains, and Verifiable Random Function (VRF).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/more/glossary\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/more/glossary\",\n    \"loadedTime\": \"2025-02-15T20:31:51.176Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/more/glossary\",\n    \"title\": \"Glossary | N",
    "etwork\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Glossary | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/THp9h7YrhnFxuYxidiBp\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' http",
    "s://static.gitbook.com; script-src 'self' 'nonce-NmFmNzQ4ZWMtYzNiNS00ZmE5LTlkMzEtYmQ0YThmZWE1ZDE4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com",
    "\\\\/report\\\\/v4?s=S9MmPoBGZHTWJEa6FJXZbqNeCWRDSBgbzlVBPZjc77Kd4IDiZrirLuSHdn3TZRjGRP%2BbjxOqikPTufrUwkJWU309hZaSEcoRxw2%2BBpkHDFe%2FlpEQPKpeXYRHqYaOhmbo5WIdW%2B29NsEs4hG0JkGx\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281054fee9c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Glossary | Network\\nBatcher​\\nBatcher is a node role that packs transactions in L2 into batches and uploads them to L1. See here for more information.\\nBridge​\\nApp developers and users commonly need to move data and assets between layer 1 (L1) and layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\".\\nChannel​\\nChannel is a data structure used ",
    "in OP Stack to store compressed and encoded sequencer batches, by storing multiple batches together to achieve a better compression rate and reduce data availability cost. For more details, please check here.\\nEIP-1559 transaction​\\nEIP-1559 introduces a new transaction type for Ethereum transactions. Unlike traditional transactions where users set their gas prices, EIP-1559 introduces a mechanism that automatically determines the transaction fee based on network demand.\\nFraud proof / Fault proof​\\nAn on-chain challenge mechanism initiated by a verifier, where the verifier, after fetching the state root from L1, compares it with the state root provided by the DA, and initiates single/multiple rounds of interactive/non-interactive proofs on the chain in case of inconsistency.\\nHardware security module (HSM)​\\nA hardware security module is a specialized hardware device designed to safeguard sensitive information, keys, and cryptographic operations from unauthorized access and attacks. I",
    "n Mantle Network, we use a hardware security module for custody of crucial accounts in modules like op-proposer, op-batcher, etc.\\nLegacy transaction​\\nRefers to the format of transactions before the introduction of type transactions using EIP-2718. These transactions are identified as type 0x0 and contain parameters such as nonce, gasPrice, gasLimit, to, value, data, v, r and s.\\nMIPS​\\nMIPS architecture, which stands for Microprocessor without Interlocked Pipeline Stages, is a type of computer architecture that uses a Reduced Instruction Set Computing (RISC) design philosophy. See more details here.\\nModular chains​\\nIn a Modular Blockchain, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on specialized layers. By applying this principle to a rollup, we can optimize the solution since each layer is now performing a specialized task. This leads to lower costs and better overall performance.\\nMonolithic chains​\\nThe entire ",
    "blockchain system is viewed as a monolithic, tightly coupled entity. With this structure, all functions and protocols are built into the same chain.\\nOptimistic Rollup​\\nOptimistic rollups (ORs) are L2 protocols designed to increase the throughput of Ethereum. They reduce computation load on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches. ORs are considered “optimistic” because they assume off-chain transactions are valid and don't publish proofs of validity for transaction batches posted on-chain, and also use Fraud proof to detect and deal with invalid status.\\nProposer​\\nProposer and Batcher are similar functions, but it packs not the transactions themselves, but the state after the transactions are completed, and sends the state root to the corresponding contract in L1. For more details, please check here.\\nReorg​\\nReorg, i.e., chain re-organization, refers to the situation where a transaction is rejected after it ha",
    "s been accepted due to a network attack or other factors, which often occurs in the L2 re-org situation after L1 has been attacked.\\nSequencer​\\nSequencer is a node role consisting of op-node and op-geth that performs transaction ordering in L2 and L2 block production. See here for more information.\\nVerifier​\\nVerifier is a node role consisting of op-node and op-geth that provides users with verified transactions and state root in L2, and it also initiates fraud proof in case of inconsistency in the state of on-chain and off-chain transactions to ensure the validity of transactions. See here for more information.\\nWASM​\\nWebAssembly, commonly abbreviated as WASM, is a binary instruction format that serves as a portable compilation target for high-level programming languages. It is designed to enable efficient execution of code on web browsers but is not limited to the web environment. WASM allows code to run at near-native speed, providing a performance boost compared to traditional w",
    "eb development technologies. See more details here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Glossary | Network\\n\\n## \\n\\nBatcher[​](https://docs-v2.mantle.xyz/intro/more/glossary#batcher)\\n\\nBatcher is a node role that packs transactions in L2 into batches and uploads them to L1. See [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) for more information.\\n\\n## \\n\\nBridge[​](https://docs-v2.mantle.xyz/intro/more/glossary#bridge)\\n\\nApp developers and users commonly need to move data and assets between layer 1 (L1) and layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\".\\n\\n## \\n\\nChannel[​](https://docs-v2.mantle.xyz/intro/more/glossary#channel)\\n\\nChannel is a data structure used in OP Stack to store compressed and encoded sequencer batches, by storing multiple batches together to achieve a better compression rate and reduce data availability cost. For more details, please check [",
    "here](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/glossary.md#channel).\\n\\n## \\n\\nEIP-1559 transaction[​](https://docs-v2.mantle.xyz/intro/more/glossary#eip-1559-transaction)\\n\\n[EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) introduces a new transaction type for Ethereum transactions. Unlike traditional transactions where users set their gas prices, EIP-1559 introduces a mechanism that automatically determines the transaction fee based on network demand.\\n\\n## \\n\\nFraud proof / Fault proof[​](https://docs-v2.mantle.xyz/intro/more/glossary#fraud-proof--fault-proof)\\n\\nAn on-chain challenge mechanism initiated by a verifier, where the verifier, after fetching the state root from L1, compares it with the state root provided by the DA, and initiates single/multiple rounds of interactive/non-interactive proofs on the chain in case of inconsistency.\\n\\n## \\n\\nHardware security module (HSM)[​](https://docs-v2.mantle.xyz/intro/more/glossary#hardware-security-module-hsm",
    ")\\n\\nA hardware security module is a specialized hardware device designed to safeguard sensitive information, keys, and cryptographic operations from unauthorized access and attacks. In Mantle Network, we use a hardware security module for custody of crucial accounts in modules like [`op-proposer`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer), [`op-batcher`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher), etc.\\n\\n## \\n\\nLegacy transaction[​](https://docs-v2.mantle.xyz/intro/more/glossary#legacy-transaction)\\n\\nRefers to the format of transactions before the introduction of type transactions using [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718). These transactions are identified as type `0x0` and contain parameters such as `nonce`, `gasPrice`, `gasLimit`, `to`, `value`, `data`, `v`, `r` and `s`.\\n\\n## \\n\\nMIPS[​](https://docs-v2.mantle.xyz/intro/more/glossary#mips)\\n\\nMIPS archit",
    "ecture, which stands for Microprocessor without Interlocked Pipeline Stages, is a type of computer architecture that uses a Reduced Instruction Set Computing (RISC) design philosophy. See more details [here](https://en.wikipedia.org/wiki/MIPS_architecture).\\n\\n## \\n\\nModular chains[​](https://docs-v2.mantle.xyz/intro/more/glossary#modular-chains)\\n\\nIn a Modular Blockchain, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on specialized layers. By applying this principle to a rollup, we can optimize the solution since each layer is now performing a specialized task. This leads to lower costs and better overall performance.\\n\\n## \\n\\nMonolithic chains[​](https://docs-v2.mantle.xyz/intro/more/glossary#monolithic-chains)\\n\\nThe entire blockchain system is viewed as a monolithic, tightly coupled entity. With this structure, all functions and protocols are built into the same chain.\\n\\n## \\n\\nOptimistic Rollup[​](https://docs-v2.",
    "mantle.xyz/intro/more/glossary#optimistic-rollup)\\n\\nOptimistic rollups (ORs) are L2 protocols designed to increase the throughput of Ethereum. They reduce computation load on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches. ORs are considered “optimistic” because they assume off-chain transactions are valid and don't publish proofs of validity for transaction batches posted on-chain, and also use Fraud proof to detect and deal with invalid status.\\n\\n## \\n\\nProposer[​](https://docs-v2.mantle.xyz/intro/more/glossary#proposer)\\n\\nProposer and Batcher are similar functions, but it packs not the transactions themselves, but the state after the transactions are completed, and sends the state root to the corresponding contract in L1. For more details, please check [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer).\\n\\n## \\n\\nReorg[​](https://docs-v2.mantle.xyz/intro/more/g",
    "lossary#reorg)\\n\\nReorg, i.e., chain re-organization, refers to the situation where a transaction is rejected after it has been accepted due to a network attack or other factors, which often occurs in the L2 re-org situation after L1 has been attacked.\\n\\n## \\n\\nSequencer[​](https://docs-v2.mantle.xyz/intro/more/glossary#sequencer)\\n\\nSequencer is a node role consisting of [op-node](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) and [op-geth](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) that performs transaction ordering in L2 and L2 block production. See [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#sequencer) for more information.\\n\\n## \\n\\nVerifier[​](https://docs-v2.mantle.xyz/intro/more/glossary#verifier)\\n\\nVerifier is a node role consisting of [op-node](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introductio",
    "n#op-node) and [op-geth](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) that provides users with verified transactions and state root in L2, and it also initiates fraud proof in case of inconsistency in the state of on-chain and off-chain transactions to ensure the validity of transactions. See [here](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#verifier) for more information.\\n\\n## \\n\\nWASM[​](https://docs-v2.mantle.xyz/intro/more/glossary#wasm)\\n\\nWebAssembly, commonly abbreviated as WASM, is a binary instruction format that serves as a portable compilation target for high-level programming languages. It is designed to enable efficient execution of code on web browsers but is not limited to the web environment. WASM allows code to run at near-native speed, providing a performance boost compared to traditional web development technologies. See more details [here](https://en.wikipedia.org/wiki/WebA",
    "ssembly).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/more/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/more/faqs\",\n    \"loadedTime\": \"2025-02-15T20:31:51.265Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/more/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/x1tG4zszPxNODd2z0tGn\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-al",
    "ive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDAwOTBmOTQtNzRhZC00NzcyLWI3MmYtZDdkMGM1NTRmZGVj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.font",
    "awesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ju2gtP2LN7%2BLz9G97n1xQTDsPFAFb8zXmYSPegkHnDLlZ4D3TA8aJShqT770Suzsg%2B3Ghu1cSE4w%2F6CeglRx4z158ovqFqbYglDzHsM6GFi6u1f1ZHXRD2YLAFLvx2d4YzqqB4PLzsd5kLm91r3J\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810563adc82e0-IAD\",\n      \"content-encoding\": \"b",
    "r\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nGeneral​\\nWhat signature algorithm does Mantle Network use?\\nMantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\nWhat is the block gas limit on Mantle Network?\\nThe block gas limit is currently set to 250,000,000,000, or 250B units.\\nWhat's the average block time on Mantle Network?\\nIn Mantle Network, the OP Stack framework design of 2s per L2 block production is adopted.\\ninfo\\nIf the L1 node fails to synchronize a new block for more than 600s, L2 will pause block production, and once the L1 node recovers, the L2 node will return to normal, and the timestamp of the L2 block is guaranteed to be strictly incremented by 2s.\\nHow does transaction finality work on Mantle Network?\\nTransaction/block finality on L2 will depend on the finalized time of the transactions packed onto L1 (2 epochs, which is about 15mins)\\nTransaction/block finality on L1 connects to the challenge period, wh",
    "ich is currently set at 7 days\\nAre fraud proofs online on Mantle Network?\\nNot yet, fraud proofs are in development in Mantle v2 Tectonic. For more details on Mantle Network's implementation, check out the page on Fraud Proofs.\\nHow does modular data availability bring down transaction costs?\\nThe majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\nWhere can I find the brand resources for Mantle Network?\\nYou can access brand resources by following this link.\\nProtocol​\\nDo Rollup Verifier nodes verify every piece of block data processed by the Sequencer?\\nYes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\nDo Rollup Verifiers sync rollup ",
    "data from the Sequencer?\\nNo. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1.\\nWhat happens if a Rollup Verifier detects mismatch between L2 block data with L1?\\nBefore fraud proofs are online on Mantle Network, if Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n## \\n\\nGeneral[​](https://docs-v2.mantle.xyz/intro/more/faqs#general)\\n\\n*   **What signature algorithm does Mantle Network use?**\\n    \\n    Mantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\n    \\n*   **What is the block gas limit on Mantle Network?**\\n    \\n    The block gas limit is currently set to 250,000,000,000, or 250B units.\\n    \\n*   **What's the avera",
    "ge block time on Mantle Network?**\\n    \\n    In Mantle Network, the OP Stack framework design of 2s per L2 block production is adopted.\\n    \\n    info\\n    \\n    If the L1 node fails to synchronize a new block for more than 600s, L2 will pause block production, and once the L1 node recovers, the L2 node will return to normal, and the timestamp of the L2 block is guaranteed to be strictly incremented by 2s.\\n    \\n*   **How does transaction finality work on Mantle Network?**\\n    \\n    *   Transaction/block finality on L2 will depend on the finalized time of the transactions packed onto L1 (2 epochs, which is about 15mins)\\n        \\n    *   Transaction/block finality on L1 connects to the challenge period, which is currently set at 7 days\\n        \\n    \\n*   **Are fraud proofs online on Mantle Network?**\\n    \\n    **Not yet**, fraud proofs are in development in Mantle v2 Tectonic. For more details on Mantle Network's implementation, check out the page on Fraud Proofs.\\n    \\n*   **",
    "How does modular data availability bring down transaction costs?**\\n    \\n    The majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\n    \\n*   **Where can I find the brand resources for Mantle Network?**\\n    \\n    You can access brand resources by following [this link](https://drive.google.com/drive/folders/1GGyOmob0i86mEUqBTPvZLAhgnzt3Oxaa).\\n    \\n\\n## \\n\\nProtocol[​](https://docs-v2.mantle.xyz/intro/more/faqs#protocol)\\n\\n*   **Do Rollup Verifier nodes verify every piece of block data processed by the Sequencer?**\\n    \\n    Yes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\n    \\n*   **Do Rollup Verifiers sync rollup data from the Se",
    "quencer?**\\n    \\n    No. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1.\\n    \\n*   **What happens if a Rollup Verifier detects mismatch between L2 block data with L1?**\\n    \\n    Before fraud proofs are online on Mantle Network, if Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling [here](https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion).\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/more/audits\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/more/audits\",\n    \"loadedTime\": \"2025-02-15T20:31:58.178Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metada",
    "ta\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/more/audits\",\n    \"title\": \"Audits | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Audits | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/t0VYGRvvV4Ktrz7LTqZc\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]",
    "\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2Y4ZWI3YjUtMTY3MC00OGUzLWE4MWMtNTRkMWYzM2U5YzRm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-",
    "when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Fv0EqYdF%2F5icne7ej91cII5yXWxXOXXfImRfvxRUcaxDt%2BpXKIxaVu4KOe%2B4zTb2o7udJxej4vsCbFNCpeCic0JSqNfht7FrOhFWWVdJvfJhxZz5WQJ9jipz1ehbJiorVFSGm%2Bl0dvN7MMZp%2FSpT\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810820b34c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Audits | Network\\nSecure3​\\nSecure3 is a battlefield where elite auditors compete to safeguard Web3 innovations against security threats. They have provided security audits for over 140 projects, including zkSync, Polkadot, and more! Here is the audit report for Mantle v2 Tectonic:\\nOpenZeppel",
    "in​\\nOpenZeppelin provides a complete suite of security products to adopt security best practices from the first line of code all the way to running your decentralized application on-chain. OpenZeppelin security audits are trusted by leading organizations building decentralized systems. Here is the audit report for Mantle v2 Tectonic:\\nSigma Prime​\\nSigma Prime is a leading blockchain security and research firm with an extensive history in decentralized technology.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Audits | Network\\n\\n## \\n\\nSecure3[​](https://docs-v2.mantle.xyz/intro/more/audits#secure3)\\n\\n[Secure3](https://www.secure3.io/) is a battlefield where elite auditors compete to safeguard Web3 innovations against security threats. They have provided security audits for over 140 projects, including zkSync, Polkadot, and more! Here is the audit report for Mantle v2 Tectonic:\\n\\n## \\n\\nOpenZeppelin[​](https://docs-v2.mantle.xyz/intro/more/audits#openzeppelin)\\n\\nOpenZeppelin provid",
    "es a complete suite of security products to adopt security best practices from the first line of code all the way to running your decentralized application on-chain. OpenZeppelin security audits are trusted by leading organizations building decentralized systems. Here is the audit report for Mantle v2 Tectonic:\\n\\n## \\n\\nSigma Prime[​](https://docs-v2.mantle.xyz/intro/more/audits#sigma-prime)\\n\\n[Sigma Prime](https://sigmaprime.io/) is a leading blockchain security and research firm with an extensive history in decentralized technology.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/monitoring\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/monitoring\",\n    \"loadedTime\": \"2025-02-15T20:31:58.469Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://d",
    "ocs.mantle.xyz/network/for-developers/resources-and-tooling/monitoring\",\n    \"title\": \"Monitoring | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Monitoring | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/6Du5aXQ6w7WooLKupEjw\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pat",
    "hname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGU4NGEzNmQtMzVjZC00MTk2LWJkZTQtMzRkZGE4MjBiMDM2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-re",
    "ferrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LyknP1tiFJWKszvSXR8so8wEZDieBZU77LvpenJavyiRY45kfxnQ6P3PsQjlv0OTNHlF72%2FOiFpXGVdynjJoQtq17OQ0zdZdpGPM0JXeGlaHKFpde5OTWuvKegRC4uPXB8t81WuaL8XXT5zgDnOq\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810820a4282e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Monitoring | Network\\nBlock Explorers​\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\nMantlescan​\\nMantlescan is an explorer powered by Etherscan that provides real-time and historical transaction ",
    "data.\\nBlockscout​\\nBlockscout is a free, open source blockchain explorer that provides real-time and historical transaction data.\\nSocialscan​\\nSocialscan is a community-owned explorer with multiple blockchain stats and charts.\\nDashboard​\\nArkham\\nArkham is a blockchain intelligence and analytics platform designed to deanonymize blockchain data, enhance on-chain transparency, and improve security. It provides powerful tools to identify entity ownership of blockchain addresses, trace fund flows, and analyze complex on-chain behavior patterns.\\nDeBank​\\nDeBank is a DeFi dashboard that enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\\nDefiLlama​\\nDefiLlama is a multi-chain TVL stats dashboard, where data connectors are contributed and maintained by a community. F",
    "ollow the link below to see data for Mantle Network.\\nDEXTools​\\nDEXTools is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed to Mantle Network and other chains using different decentralized exchanges.\\nDEX Screener​\\nDEX Screener is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\nDune​\\nDune is crypto's data platform. Teams and individuals alike use Dune to explore, query, access, and export blockchain data. Dune's community of data engineers, researchers, and analysts use the platform to gain deeper insights into blockchain activity. Dune provides organized, decoded and human-readable blockchain data, across 15+ chains and 1.5M datasets.\\nRead more\\nFeatures​\\nData exploration: Dune Analytics allows you to explore and analyze blockchain data ",
    "using SQL queries. You can easily filter, aggregate, and visualize data to gain insights into blockchain activity.\\nDashboards: Create interactive dashboards to monitor key metrics and visualize data trends. Dune Analytics provides a drag-and-drop interface for designing custom dashboards.\\nCollaboration: Share your queries, dashboards, and insights with others. Dune Analytics supports collaboration features, allowing you to work together with your team or the wider community.\\nAPI access: Access blockchain data programmatically using Dune's API. You can integrate blockchain data into your applications, tools, and services.\\nSnowflake datashare: Dune's Snowflake datashare allows you to access and analyze blockchain data directly in your Snowflake account. You can query and join blockchain data with your existing datasets in Snowflake.\\nResources​\\nHere are some resources to help you learn more about Dune Analytics:\\nDocumentation: The official documentation provides detailed guides and",
    " tutorials on using Dune Analytics.\\nAPI Docs: The API documentation provides detailed information on how to access blockchain data programmatically using Dune's API.\\nYouTube : The Dune YouTube channel features video tutorials and demos of the platform.\\nBlog: The Dune blog features articles, case studies, and updates about the platform.\\nTwitter: Follow Dune Analytics on Twitter for the latest news and announcements.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Monitoring | Network\\n\\n## \\n\\nBlock Explorers[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#block-explorers)\\n\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\n\\n### \\n\\nMantlescan[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#mantlescan)\\n\\n[Mantlescan](https://mantlescan.xyz/) is an explorer powered by Etherscan that provides real-time and historical transaction data.\\n\\n### \\n\\nBlockscout[​](https:",
    "//docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#blockscout)\\n\\n[Blockscout](https://explorer.mantle.xyz/) is a free, open source blockchain explorer that provides real-time and historical transaction data.\\n\\n### \\n\\nSocialscan[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#blockscout)\\n\\n[Socialscan](https://mantle.socialscan.io/) is a community-owned explorer with multiple blockchain stats and charts.\\n\\n## \\n\\nDashboard[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dashboard)\\n\\n### \\n\\nArkham\\n\\n[Arkham](https://arkm.com/) is a blockchain intelligence and analytics platform designed to deanonymize blockchain data, enhance on-chain transparency, and improve security. It provides powerful tools to identify entity ownership of blockchain addresses, trace fund flows, and analyze complex on-chain behavior patterns.\\n\\n### \\n\\nDeBank[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#debank)\\n\\n[DeBank](https://debank.com/) is a DeFi dashboard t",
    "hat enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\\n\\n### \\n\\nDefiLlama[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#defillama)\\n\\n[DefiLlama](https://defillama.com/chain/Mantle) is a multi-chain TVL stats dashboard, where data connectors are contributed and maintained by a community. Follow the link below to see data for Mantle Network.\\n\\n### \\n\\nDEXTools[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dextools)\\n\\n[DEXTools](https://www.dextools.io/app/en/pairs) is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed to Mantle Network and other chains using different decentralized exchanges.\\n\\n### \\n\\nDEX Screener",
    "[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dex-screener)\\n\\n[DEX Screener](https://dexscreener.com/) is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\n\\n### \\n\\nDune[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#dune)\\n\\n[Dune](https://dune.com/) is crypto's data platform. Teams and individuals alike use Dune to explore, query, access, and export blockchain data. Dune's community of data engineers, researchers, and analysts use the platform to gain deeper insights into blockchain activity. Dune provides organized, decoded and human-readable blockchain data, across 15+ chains and 1.5M datasets.\\n\\n`Read more`[](#read-more)\\n\\n**Features**[**​**](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#features)\\n\\n*   **Data exploration**: Dune Analytics allows you to explore and analyze blockchain data using SQL queries. You c",
    "an easily filter, aggregate, and visualize data to gain insights into blockchain activity.\\n    \\n*   **Dashboards**: Create interactive dashboards to monitor key metrics and visualize data trends. Dune Analytics provides a drag-and-drop interface for designing custom dashboards.\\n    \\n*   **Collaboration**: Share your queries, dashboards, and insights with others. Dune Analytics supports collaboration features, allowing you to work together with your team or the wider community.\\n    \\n*   **API access**: Access blockchain data programmatically using Dune's API. You can integrate blockchain data into your applications, tools, and services.\\n    \\n*   **Snowflake datashare**: Dune's Snowflake datashare allows you to access and analyze blockchain data directly in your Snowflake account. You can query and join blockchain data with your existing datasets in Snowflake.\\n    \\n\\n**Resources**[**​**](https://docs-v2.mantle.xyz/devs/dev-guides/tools/monitors#resources)\\n\\nHere are some resou",
    "rces to help you learn more about Dune Analytics:\\n\\n*   [Documentation](https://docs.dune.com/): The official documentation provides detailed guides and tutorials on using Dune Analytics.\\n    \\n*   [API Docs](https://docs.dune.com/api): The API documentation provides detailed information on how to access blockchain data programmatically using Dune's API.\\n    \\n*   [YouTube](https://www.youtube.com/@dunecom) : The Dune YouTube channel features video tutorials and demos of the platform.\\n    \\n*   [Blog](https://dune.com/blog): The Dune blog features articles, case studies, and updates about the platform.\\n    \\n*   [Twitter](https://twitter.com/duneanalytics): Follow Dune Analytics on Twitter for the latest news and announcements.\\n    \\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-infor",
    "mation/off-chain-system/mantle-da\",\n    \"loadedTime\": \"2025-02-15T20:31:58.266Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da\",\n    \"title\": \"Mantle DA | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle DA | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/n2tk77lxhcut6QDAf40l\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; cross",
    "origin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGZjNTgwYmMtY2Q1ZS00MjQyLWIzYjItY2MwNzU0M2M5Yjhk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbo",
    "ok.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=OgNATRNDiiw2857BOrs7ELmnuaZB%2FwBico6DxbqQFXtdKSTlMag54BJLsIKqg95aHCNxFpAphcmNNSYeJDHTfk%2BEFN6ziQJWDhXeQVi0%2BbniRJSxaqITf9g9AOtNM3ScceGGAyF0nEAoTnaR5keG\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281082191ea5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle DA | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Mantle D",
    "A | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction\",\n    \"loadedTime\": \"2025-02-15T20:32:00.278Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction\",\n    \"title\": \"Introduction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/uvNVkJ2yPNodLW9NcAB1\"\n      }\n    ],\n    \"jsonLd\": ",
    "null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:00 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MWU4OWQ3MzgtMTA2MS00OTkwLWI4ZTAtODMzZDY1YzU3NjU0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://stat",
    "ic.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7M%2Fg82iy%2FawI%2FNz7GJ866WHZvgPNiB%2B4JEN0DTYHO90Xph5ZVKVdYbmHmQdhiLPOTthU7n%2FKHthtd7fcmyGd9s3lKcP6rQPfMgYBl7TcIUxxX69eekJPl952Vp6s1DMkeEJITYHakGrw0rZqkgYT\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9",
    ".1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128108fba7a82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Introduction | Network\\nWhy Mantle DA​\\nWhen opting for Mantle DA, it's essential to consider the ongoing development of the EIP-4844 proposal. As this proposal is under development, we currently do not support EIP-4844 until its deployment on the Ethereum mainnet.\\nMoreover, due to the specified block size limit in EIP-4844, there might be performance constraints for layer 2 (L2) solutions with high TPS.\\nHowever, once EIP-4844 is officially implemented, Mantle can swiftly adapt with minimal modifications. This means that we can harness the full potential of EIP-4844, ensuring Mantle's sustained superior performance in the L2 space, adapting to the continuous evolution of the Ethereum ecosystem, and providing users with more efficient services and e",
    "xceptional experiences.\\nMantle DA Operators Address​\\nCurrently Mantle DA has a list of ten permissioned Operators, here are their corresponding addresses:\\nMantle DA With BedRock Upgrade:​\\nIn Mantle v1, the DA-DTL component (DA internal data component) was responsible for fetching data from Mantle DA and storing it in a local database for use by internal DA components and browsers. However, in Mantle v2 Tectonic, we have significantly optimized the da-retriever component, which significantly reduces the computer configuration requirements. This means that we no longer need DA-DTL as a data relay service. In Mantle v2 Tectonic, the op-batcher and op-node need to go through several optimizations for the Bedrock upgrade to integrate smoothly with Mantle DA. In addition to supporting sending data frames directly to an EOA (Externally Owned Account) in L1 in Mantle v2 Tectonic, we also need to implement the ability to send data frames to Mantle DA. These improvements will allow us to bet",
    "ter adapt to the evolving needs of data interaction and provide users with more flexible options.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Introduction | Network\\n\\n## \\n\\nWhy Mantle DA[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#why-mantle-da)\\n\\nWhen opting for Mantle DA, it's essential to consider the ongoing development of the [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844) proposal. As this proposal is under development, we currently do not support EIP-4844 until its deployment on the Ethereum mainnet.\\n\\nMoreover, due to the specified [block size limit](https://eips.ethereum.org/EIPS/eip-4844#motivation) in EIP-4844, there might be performance constraints for layer 2 (L2) solutions with high TPS.\\n\\nHowever, once EIP-4844 is officially implemented, Mantle can swiftly adapt with minimal modifications. This means that we can harness the full potential of EIP-4844, ensuring Mantle's sustained superior performance in the L2 space, adapting to the continuous evoluti",
    "on of the Ethereum ecosystem, and providing users with more efficient services and exceptional experiences.\\n\\n## \\n\\nMantle DA Operators Address[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#mantle-da-operators-address)\\n\\nCurrently Mantle DA has a list of ten permissioned Operators, here are their corresponding addresses:\\n\\n## \\n\\nMantle DA With BedRock Upgrade:[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#mantle-da-with-bedrock-upgrade)\\n\\nIn Mantle v1, the DA-DTL component (DA internal data component) was responsible for fetching data from Mantle DA and storing it in a local database for use by internal DA components and browsers. However, in Mantle v2 Tectonic, we have significantly optimized the `da-retriever` component, which significantly reduces the computer configuration requirements. This means that we no longer need DA-DTL as a data relay service. In Mantle v2 Tectonic, the `op-batcher` and `op-node` need to go through several optimizations for the Bedrock",
    " upgrade to integrate smoothly with Mantle DA. In addition to supporting sending data frames directly to an EOA (Externally Owned Account) in L1 in Mantle v2 Tectonic, we also need to implement the ability to send data frames to Mantle DA. These improvements will allow us to better adapt to the evolving needs of data interaction and provide users with more flexible options.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction\",\n    \"loadedTime\": \"2025-02-15T20:31:57.772Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction\",\n    \"title\": \"Node Introduction | Network\",\n    ",
    "\"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Node Introduction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ArAkSwwniB42OEhmZKuh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTgyZTU2MGQtNzUwZC00MjQ4LTk4MjAtZWQ0MzZjMzlhOWI2' 'strict-dynamic' 'unsafe-inline'",
    " 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zNxLWl3Bnz26l%2Byt6PM%2FO2gg0hIB%2BsljKsVx4uzmADjGAb0OQ4oLRzZJYJeHfDMFN9xWv6BYVrFHua%2FYfwy7ZRsTW4GI%2BNGWVmVurs",
    "7o%2FHn2%2B1Reff0l2mM27pBmnsRCAmUyTIg7voxqvDeyiXuo\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128106e6aea4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Node Introduction | Network\\nNetwork Roles​\\nSequencer​\\nThe sequencer acts as block producers in the network, composed of op-node and op-geth in Mantle, with the following functions:\\nAccept off-chain transactions from users\\nMonitor user deposit transactions from L1\\nProduce blocks on L2\\nVerifier​\\nThe verifier exists in the network to provide Rollup data to users, also composed of op-node and op-geth, with the following",
    " functions:\\nSynchronize Rollup data from Mantle DA\\nVerify the state root submitted by op-proposer on L2\\nInitiate fraud proofs when invalid state data is detected\\nProvide verified block data and state to users\\nop-batcher​\\nop-batcher is a crucial component that interacts with the DA provider in the network. It also handles transaction packing and uploading to L1, with specific functions:\\nFetch data from the sequencer and process it (encoding and compressing) into frames based on different configurations, storing the frames as a channel\\nInteract with the DA provider through channels, providing batched transaction information\\nUpload processed batched transactions to L1\\nop-proposer​\\nSimilar to op-batcher but providing state root information. When submitting a single or batch of transactions, op-proposer needs to complete state changes through op-geth and write down state commitments sent to L2OutputOracle on L1.\\nDA Nodes​\\nNodes in the Mantle DA, forming the DA Network, are resp",
    "onsible for storing copies of Mantle transaction data. They use BLS signature schemes to sign the block data they provide, making commitments to ensure their availability. These signatures are verified by the EigenDA contract on Ethereum.\\nDeep Dive into Nodes​\\nWithin the sequencer and the verifier, two different components are present:\\nop-geth​\\nAs the execution client in the Mantle Network, op-geth has the following functions:\\nResponsible for executing blocks received from op-node and storing states.\\nQuery blockchain data through the Engine API and submit transactions to the network.\\nop-node​\\nAs the consensus client in the Mantle Network, op-node has the following functions:\\nDerive L2 blocks from L1.\\nSend blocks to op-geth via the Engine API.\\nRetrieve block information from Mantle DA for subsequent validity verification.\\nSynchronize with a P2P network to sequencer-constructed but unsubmitted blocks.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Node Introduction | Network\\n",
    "\\n## \\n\\nNetwork Roles[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#network-roles)\\n\\n### \\n\\nSequencer[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#sequencer)\\n\\nThe sequencer acts as block producers in the network, composed of [`op-node`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) and [`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) in Mantle, with the following functions:\\n\\n*   Accept off-chain transactions from users\\n    \\n*   Monitor user deposit transactions from L1\\n    \\n*   Produce blocks on L2\\n    \\n\\n### \\n\\nVerifier[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#verifier)\\n\\nThe verifier exists in the network to provide Rollup data to users, also composed of [`op-node`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) and [`op-geth`](https://d",
    "ocs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth), with the following functions:\\n\\n*   Synchronize Rollup data from Mantle DA\\n    \\n*   Verify the state root submitted by `op-proposer` on L2\\n    \\n*   Initiate fraud proofs when invalid state data is detected\\n    \\n*   Provide verified block data and state to users\\n    \\n\\n### \\n\\nop-batcher[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-batcher)\\n\\n`op-batcher` is a crucial component that interacts with the DA provider in the network. It also handles transaction packing and uploading to L1, with specific functions:\\n\\n*   Fetch data from the sequencer and process it (encoding and compressing) into frames based on different configurations, storing the frames as a [channel](https://docs.mantle.xyz/network/more/glossary#channel)\\n    \\n*   Interact with the DA provider through channels, providing batched transaction information\\n    \\n*   Upload processed batched transact",
    "ions to L1\\n    \\n\\n### \\n\\nop-proposer[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-proposer)\\n\\nSimilar to `op-batcher` but providing state root information. When submitting a single or batch of transactions, `op-proposer` needs to complete state changes through `op-geth` and write down state commitments sent to `L2OutputOracle` on L1.\\n\\n### \\n\\nDA Nodes[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#da-nodes)\\n\\nNodes in the Mantle DA, forming the DA Network, are responsible for storing copies of Mantle transaction data. They use BLS signature schemes to sign the block data they provide, making commitments to ensure their availability. These signatures are verified by the EigenDA contract on Ethereum.\\n\\n## \\n\\nDeep Dive into Nodes[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#appendix)\\n\\nWithin the sequencer and the verifier, two different components are present:\\n\\n![](https://docs-v2.mantle.xyz/assets",
    "/images/op-73b9e5890fcee4afa3a20a40ae713b08.svg)\\n\\n### \\n\\nop-geth[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-geth)\\n\\nAs the execution client in the Mantle Network, `op-geth` has the following functions:\\n\\n*   Responsible for executing blocks received from `op-node` and storing states.\\n    \\n*   Query blockchain data through the Engine API and submit transactions to the network.\\n    \\n\\n### \\n\\nop-node[​](https://docs-v2.mantle.xyz/intro/system-components/off-chain-system#op-node)\\n\\nAs the consensus client in the Mantle Network, `op-node` has the following functions:\\n\\n*   Derive L2 blocks from L1.\\n    \\n*   Send blocks to `op-geth` via the Engine API.\\n    \\n*   Retrieve block information from Mantle DA for subsequent validity verification.\\n    \\n*   Synchronize with a P2P network to sequencer-constructed but unsubmitted blocks.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.",
    "mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address\",\n    \"loadedTime\": \"2025-02-15T20:31:57.663Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address\",\n    \"title\": \"Key L2 Contract Address | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Key L2 Contract Address | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/lh3wphKxqaYwhmzm4NPR\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:55 GMT\",\n      \"content-type\"",
    ": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NjZkZTc0MDgtMzBiZC00M2E0LTg1ZjktZWU3OGY0NDliODY2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fo",
    "nts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=N%2BuZGaJ0r0edncHLdTSsjmf41tTp51QwEXfAud3NcXCD2AkCuJ0pm2iRRkwedOq3AQFmuaxGfF4VnkykOO5TTeyeBIOV6JSE6%2BnAibwnkk6SDQ0m4TJPn41g8sbvZiSOCroJhQ8U3myAi2w6kkgB\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128106eeb9118af-FRA\",\n ",
    "     \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Key L2 Contract Address | Network\\nLast updated 3 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Key L2 Contract Address | Network\\n\\nLast updated 3 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion\",\n    \"loadedTime\": \"2025-02-15T20:31:59.406Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion\",\n    \"title\": \"Forced Transaction Inclusion | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"lang",
    "uageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Forced Transaction Inclusion | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/srWN0zPUzda6gSAhXEOC\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:31:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWViZTVkYzItZTFlYy00ODZiLWE3OTgtOGJiMjRmYzA1Y2Rk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integration",
    "s.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Fh%2FhRNGhfCyVwT%2Foh%2F71%2BexK9AjBSspWkV2JLxN889KtjtlpBfXDDKLUccXBh1jl0NagSupSZRIQY7muZiBd0qGCKJDNVCBQGlOUQLNmDeLnvf44L7uHwJnNUOIDj%2FarpNcKEFhzt3YCsFJzkalI\\\"}], \\\"group\\\"",
    ":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281084eb6d4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Forced Transaction Inclusion | Network\\nAs layer-2 (L2) technologies host an increasing number of digital assets, ensuring the security of your assets in the event of an L2 security incident has become a critical concern. A robust L2 requires the ability to force L2 assets to be extracted at layer 1 (L1) in case of unforeseen circumstances (e.g., downtime or misbehavior of sequencers and proposers, etc.).\\nCensorship resistance is a crucial security feature, especially concerning the seq",
    "uencer in the system. In situations where the sequencer refuses to execute your transaction requests or experiences prolonged downtime, a mechanism known as forced withdrawal or forced transaction inclusion becomes essential to better safeguard user funds.\\nHow to Enable Forced Transaction Inclusion​\\nOn all OP Stack chains, there is one and only one OptimismPortal contract. This contract allows EOAs (Externally Owned Accounts) or smart contracts to create an L2 transaction (depositTransaction of OptimismPortal) without going through the Sequencer, and transactions submitted in this way are indistinguishable from those built by the Sequencer on L2.\\nWhen the transaction is submitted on L1, it will be processed on a First Come, First Served (FCFS) basis, along with some inclusion rules. If the transaction is not published on L1 within the sequencer_window time, a reorganization (reorg) will occur on L2, and the transaction will be included in the L2 chain.\\nDifferent Sequencer Outage Sc",
    "enarios​\\nIn practical applications, we may encounter different scenarios, such as:\\nSequencer Completely Down​\\nIn this scenario, the Sequencer remains unable to function and process transactions. Users must send their transactions directly to the OptimismPortal contract to ensure they are included in the L2 chain. After the sequencer_window time (24 hours) has passed, these transactions will be automatically included in L2. For more details, see here.\\nSequencer Temporarily Down​\\nIn this scenario, the Sequencer experiences a temporary outage and then recovers. Since the sequencer_window time has not yet elapsed, even though the transaction has been submitted to the OptimismPortal, it will eventually be processed by the Sequencer and included in L2. For more details, see here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Forced Transaction Inclusion | Network\\n\\nAs layer-2 (L2) technologies host an increasing number of digital assets, ensuring the security of your assets in the even",
    "t of an L2 security incident has become a critical concern. A robust L2 requires the ability to force L2 assets to be extracted at layer 1 (L1) in case of unforeseen circumstances (e.g., downtime or misbehavior of sequencers and proposers, etc.).\\n\\nCensorship resistance is a crucial security feature, especially concerning the sequencer in the system. In situations where the sequencer refuses to execute your transaction requests or experiences prolonged downtime, a mechanism known as forced withdrawal or forced transaction inclusion becomes essential to better safeguard user funds.\\n\\n## \\n\\nHow to Enable Forced Transaction Inclusion[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#how-to-enable-forced-transaction-inclusion)\\n\\nOn all OP Stack chains, there is one and only one [`OptimismPortal`](https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction#optimismportalproxy) contract. This contract allows EOAs (Externally Owned Accounts) or smart con",
    "tracts to create an L2 transaction (`depositTransaction` of `OptimismPortal`) without going through the Sequencer, and transactions submitted in this way are indistinguishable from those built by the Sequencer on L2.\\n\\nWhen the transaction is submitted on L1, it will be processed on a First Come, First Served (FCFS) basis, along with some [inclusion rules](https://docs.optimism.io/stack/protocol/outages#inclusion-rules). If the transaction is not published on L1 within the `sequencer_window` time, a reorganization (reorg) will occur on L2, and the transaction will be included in the L2 chain.\\n\\n## \\n\\nDifferent Sequencer Outage Scenarios[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#different-sequencer-outage-scenarios)\\n\\nIn practical applications, we may encounter different scenarios, such as:\\n\\n### \\n\\nSequencer Completely Down[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#sequencer-completely-down)\\n\\nIn this scenario, the Sequencer remains unable to function",
    " and process transactions. Users must send their transactions directly to the `OptimismPortal` contract to ensure they are included in the L2 chain. After the `sequencer_window` time (24 hours) has passed, these transactions will be automatically included in L2. For more details, see [here](https://docs.optimism.io/stack/protocol/outages#total-sequencer-outage).\\n\\n### \\n\\nSequencer Temporarily Down[​](https://docs-v2.mantle.xyz/intro/risk-management/fti#sequencer-temporarily-down)\\n\\nIn this scenario, the Sequencer experiences a temporary outage and then recovers. Since the `sequencer_window` time has not yet elapsed, even though the transaction has been submitted to the OptimismPortal, it will eventually be processed by the Sequencer and included in L2. For more details, see [here](https://docs.optimism.io/stack/protocol/outages#partial-sequencer-outage).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network",
    "/for-developers/resources-and-tooling/indexing\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/indexing\",\n    \"loadedTime\": \"2025-02-15T20:32:02.993Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/indexing\",\n    \"title\": \"Indexing | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Indexing | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/BFr3oQUl2XwSlRZwiWDg\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:02 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache",
    "-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Yzg2YjYxN2MtNTg0Ni00MzIzLTk1NDEtNWIyODBmODhjMTBk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src",
    " 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jZLEMeTw0X3AIvk1nIjYphhcSXOZ%2FuPku71NHRDsXq1oIAOo2VgdKyYD99IIPkTS16HNzmKE2thxpKmdMVG8HG4o9ziKSs5YeBVUwtPsdScextZdMyYoQQ7slAYgIDX%2BEHCkSQl%2FDsu2rTO%2BQkog\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810a0ce1c82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"sc",
    "reenshotUrl\": null,\n  \"text\": \"Indexing | Network\\nIn the blockchain field, to better understand and analyze blockchain data, often use Graph service or some Indexer service to process the data. Mantle Network supports a large number of data-related tools, providing users and developers with convenient data service infra.\\nGraph Service​\\nMantle Subgraph Studio​\\nSubgraph is a customized, open-source solution for indexing and accessing real-time blockchain data through the GraphQL API. They provide developers with powerful tools to build, customize and access blockchain data according to their needs. Check their documentation for more details.\\nIndexer​\\nLithosphere​\\nLithosphere serves as the data hub of the Mantle Network, providing comprehensive data services to the infrastructure (bridge and explorer) and dApps, etc. in the ecosystem, by synchronizing the data from layer 1, layer 2, and Mantle DA, processing it before storing it in the main database, and ultimately exposing interfa",
    "ces to the ecosystem through APIs.\\nCovalent​\\nCovalent collects and indexes historical data points from over 100 different chain networks and makes them available via one unified API. This can come in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\nStructured and enhanced on-chain data well beyond what you get from RPC providers\\nBroad and deep multi-chain data at scale\\nEnterprise-grade performance\\nDune Echo\\nDune Echo is Dune’s new multichain real-time developer platform designed to provide real-time data processing and infrastructure support, enabling developers to efficiently build and scale blockchain applications.\\nEcho consolidates data from 30+ blockchain networks into a single API.\\nEcho ensures that developers receive data within 300ms of block propagation.\\nUnmarshal​\\nUnmarshal provides an API, TS, and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics dat",
    "a available at a glance for multiple chains, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\nSimpleHash\\nSimpleHash is a platform that provides access to Token balances, DEX prices, and transfers, along with NFT metadata, media, collection details, sales, floor prices, listings and bids across multiple chains. SimpleHash now powers Mantle devs with real-time token data and transactions, full NFT metadata and balances and flexible access via API and bulk data streams.\\nSubQuery​\\nSubQuery is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across multiple chains, including Mantle Network. Follow the link below to get started.\",\n  \"markdown\": \"# Indexing | Network\\n\\nIn the blockchain field, to better understand and analyze blockchain data, often use Graph service or some Indexer service to process the data. Mantle Network supports a large number of data-related tools, providing use",
    "rs and developers with convenient data service infra.\\n\\n## \\n\\nGraph Service[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#graph-service)\\n\\n### \\n\\nMantle Subgraph Studio[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#mantle-subgraph-studio)\\n\\n[Subgraph](https://subgraph.mantle.xyz/) is a customized, open-source solution for indexing and accessing real-time blockchain data through the GraphQL API. They provide developers with powerful tools to build, customize and access blockchain data according to their needs. Check their [documentation](https://docs.ormi.xyz/dedicated-env/mantle/subgraphs/overview) for more details.\\n\\n## \\n\\nIndexer[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#indexer)\\n\\n### \\n\\nLithosphere[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#lithosphere)\\n\\nLithosphere serves as the data hub of the Mantle Network, providing comprehensive data services to the infrastructure (bridge and explorer) and dApps, et",
    "c. in the ecosystem, by synchronizing the data from layer 1, layer 2, and Mantle DA, processing it before storing it in the main database, and ultimately exposing interfaces to the ecosystem through APIs.\\n\\n### \\n\\nCovalent[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#covalent)\\n\\n[Covalent](https://www.covalenthq.com/?utm_source=mantle&utm_medium=partner-docs) collects and indexes historical data points from over 100 different chain networks and makes them available via one unified API. This can come in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\n\\n*   Structured and enhanced on-chain data well beyond what you get from RPC providers\\n    \\n*   Broad and deep multi-chain data at scale\\n    \\n*   Enterprise-grade performance\\n    \\n\\n### \\n\\nDune Echo\\n\\n[**Dune Echo**](https://dune.com/echo) is Dune’s new multichain real-time developer platform designed to provide real-time data processing and infrastructure support, enabling d",
    "evelopers to efficiently build and scale blockchain applications.\\n\\n*   Echo consolidates data from **30+ blockchain networks** into a single API.\\n    \\n*   Echo ensures that developers receive data within **300ms** of block propagation.\\n    \\n\\n### \\n\\nUnmarshal[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#unmarshal)\\n\\n[Unmarshal](https://console.unmarshal.io/) provides an API, TS, and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics data available at a glance for multiple chains, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\n\\n### \\n\\nSimpleHash\\n\\n[SimpleHash](https://simplehash.com/) is a platform that provides access to Token balances, DEX prices, and transfers, along with NFT metadata, media, collection details, sales, floor prices, listings and bids across multiple chains. SimpleHash now powers Mantle devs with real-time token dat",
    "a and transactions, full NFT metadata and balances and flexible access via API and bulk data streams.\\n\\n### \\n\\nSubQuery[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/indexers#subquery)\\n\\n[SubQuery](https://academy.subquery.network/quickstart/quickstart_chains/mantle.html) is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across multiple chains, including Mantle Network. Follow the link below to get started.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/roadmap\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/roadmap\",\n    \"loadedTime\": \"2025-02-15T20:32:03.093Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/roadmap\",\n    \"title\": \"Roadmap | Network\",\n    \"description\": null,\n    \"author\": null,\n ",
    "   \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Roadmap | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/nhUQYMgAfLlj9o1gcRzI\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:02 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MmViYWR",
    "hNjktYzY1MC00MDNiLTg4ODEtOWQyOWE1NDY3MDll' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=DyexZArQVVs9aQ7pRnP3zEIRSMkj8fokNAODlzI",
    "RXYSs%2FINoHMZjpMssKmUI3cCQ717hv7G119G0NHIVefc1shffqlmcApGVZx3pvG%2FiDlfYsRGX7ktG69nvdDrf0bu8Q4vrPpnBYoNnwS8j0w7A\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810a0d94ca5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Roadmap | Network\\nPreviousForced Transaction InclusionNextNetwork Roles\\nLast updated 20 days ago\\nWas this helpful?\",\n  \"markdown\": \"# Roadmap | Network\\n\\n[PreviousForced Transaction Inclusion](https://docs.mantle.xyz/network/system-information/risk-management/forced-transaction-inclusion)[NextNetwork Roles](https://docs.mantle.xyz/network/for-node-operators/network-roles)\\n\\nLast updated 20 days ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requ",
    "estHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/development-framework\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/development-framework\",\n    \"loadedTime\": \"2025-02-15T20:32:05.079Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/development-framework\",\n    \"title\": \"Development Framework | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Development Framework | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/8hM0jBymSWoFJinCE1wZ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\"",
    ",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGM4YzJlZjctZjJlOC00NDNlLTk5MzktMWQyMDIzOThmZDJm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' in",
    "tegrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=bdVt%2FMFDm%2BT1%2FpP%2BeoJPwvnciSlVRFCBl98Byxqsc0fYqz9eW0j7rnUUx7Zm%2FBBxOHLmgX%2FML0TwFsrlOSK%2FW1SLZdAZwjsWd3GYIA2qR3Z7a9RbHc6mORLqHoJAOCUbcU%2BQdMHpHdJr2MhOBa3p\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n",
    "      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ad6fd8a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Development Framework | Network\\nHardhat​\\nHardhat is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\nFoundry​\\nFoundry is a fast, portable, and modular toolkit for EVM application development written in Rust. Foundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command line and via Solidity scripts.\\nThirdweb​\\nThirdweb is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network, which will empower you to seamlessly build, launch, and manage web3 applications and games across any EVM-compa",
    "tible blockchain.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Development Framework | Network\\n\\n## \\n\\nHardhat[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/frameworks#hardhat)\\n\\n[Hardhat](https://hardhat.org/hardhat-runner/docs/getting-started#overview) is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\n\\n## \\n\\nFoundry[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/frameworks#foundry)\\n\\n[Foundry](https://book.getfoundry.sh/) is a fast, portable, and modular toolkit for EVM application development written in Rust. Foundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command line and via Solidity scripts.\\n\\n## \\n\\nThirdweb[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/frameworks#thirdweb)\\n\\n[Thirdweb](https://portal.thirdweb.com/) ",
    "is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network, which will empower you to seamlessly build, launch, and manage web3 applications and games across any EVM-compatible blockchain.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture\",\n    \"loadedTime\": \"2025-02-15T20:32:05.116Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture\",\n    \"title\": \"Architecture | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n    ",
    "  {\n        \"property\": \"og:title\",\n        \"content\": \"Architecture | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/hcvgSc3jDGHvyrSNlSnU\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-N2JjYTBlZTMtMzA0ZS00MzhiLTkxMjUtZThjM2U5OWJiMDcz' 'strict-dynamic' 'unsa",
    "fe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=rGCRmMxRYlk3OZ%2Bqt7M0JKcsALEk28g4HLfDzgiasuC35Opu5s%2BZEBfMfB%2BjDDDjgorBrW6%2BvKoV5hMhk439Ats0epdtzfds",
    "ink9PzdvJCqVB5sTi9imJRBFpUfjpisfsCg3ccMlo397s3J3F%2BBn\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810addb1fc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Architecture | Network\\nArchitecture Overviews​\\nComponents​\\nMantle DA, supported by EigenDA technology, consists of four main components with a set of supported interactions:\\nOperator Nodes / DA Nodes:​\\nOperators, as service providers in the DA network, confirm their commitment through digital signatures that stake assets as guarantees for their participation. Operators will run nodes in the network that store data chunks for a predefined period, and make these data chunks available on request. Here is",
    " the address list of Mantle DA Operators.\\nDispersers​\\nThey are the roles of the Mantle DA service and pay for financial assurance of their data availability. This role can be played by rollup sequencers. Dispersers perform the following tasks:\\nEncoding data into blocks, providing funds to make the data available for a fixed period, and distributing the coded blocks to Mantle DA operators\\nAggregate operators' signatures and publish proofs to the blockchain, confirming the availability of the data of interest for a specified period\\nRetrievers​\\nThey are stakeholders who play an important role in the Proof of Custody protocol. Retrievers perform the following tasks:\\nMonitor certain verifiable operations of the protocol (will not be verified or resolved on-chain in optimistic scenarios)\\nPermissionless enforces toxic operations to be resolved up on-chain, slashing operators' stake\\nMantleLayerandMantle DASmart Contracts:​\\nThe collection of DA-related smart contracts running on Ether",
    "eum is responsible for the following:\\nResponsible for ensuring data acceptance only when a group of operators with sufficient stake collectively signs.\\nImplements the proof-of-custody protocol, providing on-chain data disclosure mechanisms for Retrievers.\\nVerifies the validity of data submitted by Retrievers based on signed commitments and enforces slash according to the proof-of-custody protocol.\\nWorkflow​\\nEncoding\\nDispersers encode data chunks (stored by Graph-node in L1 contract data) and generate KZG multi-reveal proofs for operators to verify chunk correctness.\\nDispersal\\nDispersers send data chunks to respective DA Operators.\\nAttestation\\nOperators verify their chunks based on global commitments. Upon successful verification, Operators will continue to store their data chunks for the time specified by Disperser and send back proofs.\\nAggregation\\nIf enough signatures are received, Dispersers aggregate them and publish them to L1 Ethereum.\\nRetrieve\\nRetrievers fetch valid",
    " data chunks from Operators and transfer data to the L2 application layer in frames.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Architecture | Network\\n\\n## \\n\\nArchitecture Overviews[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#architecture)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/da-a9af9bc4f2f42ad252f26e464fc802bd.svg)\\n\\n### \\n\\nComponents[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#components)\\n\\nMantle DA, supported by EigenDA technology, consists of four main components with a set of supported interactions:\\n\\n![](https://docs-v2.mantle.xyz/assets/images/mantleda-62ae03ff79cb25d30db4abaa2274f3ad.svg)\\n\\n#### \\n\\n**Operator Nodes / DA Nodes:**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#operator-nodes--da-nodes)\\n\\nOperators, as service providers in the DA network, confirm their commitment through digital signatures that stake assets as guarantees for their participation. Operators will run nodes in the network that store data chunks fo",
    "r a predefined period, and make these data chunks available on request. Here is [the address list](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/introduction#mantle-da-operators-address) of Mantle DA Operators.\\n\\n#### \\n\\n**Dispersers**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#dispersers)\\n\\nThey are the roles of the Mantle DA service and pay for financial assurance of their data availability. This role can be played by rollup sequencers. Dispersers perform the following tasks:\\n\\n*   Encoding data into blocks, providing funds to make the data available for a fixed period, and distributing the coded blocks to Mantle DA operators\\n    \\n*   Aggregate operators' signatures and publish proofs to the blockchain, confirming the availability of the data of interest for a specified period\\n    \\n\\n#### \\n\\n**Retrievers**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#retrievers)\\n\\nThey are stakeholders who play an important role in",
    " the [Proof of Custody](https://dankradfeist.de/ethereum/2021/09/30/proofs-of-custody.html) protocol. Retrievers perform the following tasks:\\n\\n*   Monitor certain verifiable operations of the protocol (will not be verified or resolved on-chain in optimistic scenarios)\\n    \\n*   Permissionless enforces toxic operations to be resolved up on-chain, slashing operators' stake\\n    \\n\\n#### \\n\\n`**MantleLayer**`**and**`**Mantle DA**`**Smart Contracts:**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#mantlelayer-and-mantle-da-smart-contracts)\\n\\nThe collection of DA-related smart contracts running on Ethereum is responsible for the following:\\n\\n*   Responsible for ensuring data acceptance only when a group of operators with sufficient stake collectively signs.\\n    \\n*   Implements the proof-of-custody protocol, providing on-chain data disclosure mechanisms for Retrievers.\\n    \\n*   Verifies the validity of data submitted by Retrievers based on signed commitments and enforces ",
    "slash according to the proof-of-custody protocol.\\n    \\n\\n### \\n\\nWorkflow[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#workflow)\\n\\n**Encoding**\\n\\nDispersers encode data chunks (stored by Graph-node in L1 contract data) and generate KZG multi-reveal proofs for operators to verify chunk correctness.\\n\\n**Dispersal**\\n\\nDispersers send data chunks to respective DA Operators.\\n\\n**Attestation**\\n\\nOperators verify their chunks based on global commitments. Upon successful verification, Operators will continue to store their data chunks for the time specified by Disperser and send back proofs.\\n\\n**Aggregation**\\n\\nIf enough signatures are received, Dispersers aggregate them and publish them to L1 Ethereum.\\n\\n**Retrieve**\\n\\nRetrievers fetch valid data chunks from Operators and transfer data to the L2 application layer in frames.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/net",
    "work-roles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-roles\",\n    \"loadedTime\": \"2025-02-15T20:32:05.316Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-roles\",\n    \"title\": \"Network Roles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Roles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/d3ZBfrIknpIi7ZWPxrYm\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cach",
    "e\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NmU0ZWQyY2YtZjM2Ny00MzYyLWIxYTMtY2U2OWQ2ZTM5YjU4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com",
    "; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sFN1Vf%2FGl1tny9LjiyLnoT%2BQviFZ%2FGsbc2CW9ArLual5l9iIHKX2ZyjFDY%2BJU6fScal4c%2BYrE7EOS7c%2Fr69fjVPSx2tEY0Egoz0i1oHPZrrWK32nLhBDaSAsIuyXHP%2BREz1UtJ6pKUq3bGoCEW0G\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810adeb8982e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Roles |",
    " Network\\nWelcome to our Node Deployment service. This service covers different types of nodes, supporting the normal operation and various functionalities of the network. Please follow the instructions below to configure and deploy nodes.\\nAvailable Node Types​\\nVerifier Nodes​\\nVerifier nodes are used to verify the validity of transactions and blocks on the chain. It is a crucial component of the network, ensuring the security and reliability of the Mantle Network blockchain. Detailed Verifier Node Deployment documentation has already been provided.\\nSequencer Nodes​\\nSequencers are responsible for sequentially packing transactions into layer-2 blocks, providing a deterministic order for transactions. Currently, Sequencer nodes are not yet open due to security reasons.\\nProposer Nodes​\\nProposer nodes are used to create new state roots and send them to layer 1. Currently, Proposer nodes are not yet open due to security reasons.\\nBatcher Nodes​\\nBatcher nodes are used to bundle a batc",
    "h of transactions into a block to improve processing efficiency. Currently, Batcher nodes are not yet open due to security reasons.\\nData Availability (DA) Nodes​\\nDA nodes ensure the availability of transaction data. Currently, DA nodes are not yet open due to security reasons.\\nWhy Run a Rollup Verifier Node?​\\nThere are multiple advantages of running a Rollup Verifier node.\\nIt grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions locally without rate-limiting (public RPCs may face such limitations).\\nAllows anyone to verify the work performed by Sequencers by re-deriving output roots and comparing them against those submitted by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mantle Network Mainnet.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Network Roles | Network\\n\\nWelcome to our Node Deployment service. This service cover",
    "s different types of nodes, supporting the normal operation and various functionalities of the network. Please follow the instructions below to configure and deploy nodes.\\n\\n## \\n\\nAvailable Node Types[​](https://docs-v2.mantle.xyz/nodes/overviews#available-node-types)\\n\\n### \\n\\nVerifier Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#verifier-nodes)\\n\\n[Verifier](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#verifier) nodes are used to verify the validity of transactions and blocks on the chain. It is a crucial component of the network, ensuring the security and reliability of the Mantle Network blockchain. Detailed [Verifier Node Deployment documentation](https://docs.mantle.xyz/network/for-node-operators/deployment-guides) has already been provided.\\n\\n### \\n\\nSequencer Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#sequencer-nodes)\\n\\n[Sequencers](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction",
    "#sequencer) are responsible for sequentially packing transactions into layer-2 blocks, providing a deterministic order for transactions. Currently, Sequencer nodes are not yet open due to security reasons.\\n\\n### \\n\\nProposer Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#proposer-nodes)\\n\\n[Proposer](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-proposer) nodes are used to create new state roots and send them to layer 1. Currently, Proposer nodes are not yet open due to security reasons.\\n\\n### \\n\\nBatcher Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#batcher-nodes)\\n\\n[Batcher](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) nodes are used to bundle a batch of transactions into a block to improve processing efficiency. Currently, Batcher nodes are not yet open due to security reasons.\\n\\n### \\n\\nData Availability (DA) Nodes[​](https://docs-v2.mantle.xyz/nodes/overviews#data-availab",
    "ility-da-nodes)\\n\\n[DA nodes](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#da-nodes) ensure the availability of transaction data. Currently, DA nodes are not yet open due to security reasons.\\n\\n## \\n\\nWhy Run a Rollup Verifier Node?[​](https://docs-v2.mantle.xyz/nodes/overviews#why-run-a-rollup-verifier-node)\\n\\nThere are multiple advantages of running a Rollup Verifier node.\\n\\n1.  It grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions locally without rate-limiting (public RPCs may face such limitations).\\n    \\n2.  Allows anyone to verify the work performed by Sequencers by re-deriving output roots and comparing them against those submitted by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mantle Network Mainnet.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\"",
    ": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/l1-less-than-greater-than-l2-data-flow\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/l1-less-than-greater-than-l2-data-flow\",\n    \"loadedTime\": \"2025-02-15T20:32:05.501Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/l1-less-than-greater-than-l2-data-flow\",\n    \"title\": \"L1 <--> L2 Data Flow | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"L1 <--> L2 Data Flow | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/kzHPbwqMOvqwI3defLFW\"\n      }\n    ],\n    \"jsonLd\": null,\n ",
    "   \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODc0NDE3MTYtZDAxZi00Njc0LWE4ZjctYTU3NzIwMmQzMDIx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitb",
    "ook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=kiw051h3lDvapAaKI0M2xXGL9G8VjYOXJXSgLJ6elu%2FU1cNHncvK1hUjoDL8zaRsdWrRSQONcPBsrjCCnz7SLTpre7ae7lOzVZkKMGs7yaXczd42EQ7zbVZNcDuTtu7SzDO30BU8SOBBWR8GjM%2FT\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:si",
    "te_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810afded7a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"L1 <--> L2 Data Flow\\n​For a robust L2, stable data flow includes batch submission from L2 to L1 and derivation from L1 to L2. Mantle v2 Tectonic ensures compatibility with Bedrock upgrades, enabling native data flow and interaction with Mantle DA.\\nBatch​\\nBatch is a process of sending data frames from the L2 to the DA layer. The data frames are stored in the form of a channel and sent to the destination (DA Layer), where the the verifier can validate the availability of the data.\\nBatch Submit To L1 / Ethereum EOA op-batcher obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. op-batcher creates a channel to store the frames, and then builds the EOA transaction to complete the batch",
    " submission.\\nBatch Submit To Mantle DA op-batcher obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. op-batcher will create a channel to store the frames, and once the channel is full, it will send all the frames in it to them and once the rollup is successful, the frames involved will undergo a state transition and be deleted from the cache.\\nDerivation​\\nDerivation is the process of obtaining data from the DA Layer and deriving it in L2 to ensure that the state of all L2 nodes remains consistent. the L2 op-node completes the state reconstruction of L2 by obtaining data frames from different DA Layers.\\nDerived from L1 / Ethereum EOA If we need to derive L2 data from the EOA address of L1, we can do it by syncing to the L1 block, then read the data batched to the EOA address from it, decode it to get the corresponding frame, and finally store it into a channel for processing. For more information, pleas",
    "e check here.\\nDerived from Mantle DA If we need to do L2 data derivation from Mantle DA, we first need to get the confirmed block from L1, and then parse out the dataStoreId, which is a field about the data in the block, and use the dataStoreId to get the corresponding frame from Graph-Node and da-retriever. This completes the Mantle DA-based data derivation.\\nLast updated 3 months ago\",\n  \"markdown\": \"# L1 <--> L2 Data Flow\\n\\n[​](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#l1------l2-data-flow)For a robust L2, stable data flow includes batch submission from L2 to L1 and derivation from L1 to L2. Mantle v2 Tectonic ensures compatibility with Bedrock upgrades, enabling native data flow and interaction with Mantle DA.\\n\\n## \\n\\n**Batch**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#batch)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/workflow-a12e5ad99b4271e84ea35fd496c91cec.svg)\\n\\nBatch is a process of sending data frames from the L2 to the DA layer. The data fr",
    "ames are stored in the form of a channel and sent to the destination (DA Layer), where the the verifier can validate the availability of the data.\\n\\n*   **Batch Submit To L1 / Ethereum EOA** [`op-batcher`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-batcher) obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. `op-batcher` creates a channel to store the frames, and then builds the EOA transaction to complete the batch submission.\\n    \\n*   **Batch Submit To Mantle DA** `op-batcher` obtains the latest block ranges to be packed from the sequencer, encodes and compresses the latest block data, and generates frames. `op-batcher` will create a channel to store the frames, and once the channel is full, it will send all the frames in it to them and once the rollup is successful, the frames involved will undergo a state transition and be deleted from the cache.\\n    \\n",
    "\\n## \\n\\n**Derivation**[**​**](https://docs-v2.mantle.xyz/devs/concepts/mantle-da#derivation)\\n\\n![](https://docs-v2.mantle.xyz/assets/images/derivation-19c3363fcbf805dcc434f1254d3ce1f2.svg)\\n\\nDerivation is the process of obtaining data from the DA Layer and deriving it in L2 to ensure that the state of all L2 nodes remains consistent. the L2 [`op-node`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-node) completes the state reconstruction of L2 by obtaining data frames from different DA Layers.\\n\\n*   **Derived from L1 / Ethereum EOA** If we need to derive L2 data from the EOA address of L1, we can do it by syncing to the L1 block, then read the data batched to the EOA address from it, decode it to get the corresponding frame, and finally store it into a channel for processing. For more information, please check [here](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/derivation.md#l2-chain-derivation-pipeline).\\n    \\n*   **De",
    "rived from Mantle DA** If we need to do L2 data derivation from Mantle DA, we first need to get the confirmed block from L1, and then parse out the `dataStoreId`, which is a field about the data in the block, and use the `dataStoreId` to get the corresponding frame from `Graph-Node` and `da-retriever`. This completes the Mantle DA-based data derivation.\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides\",\n    \"loadedTime\": \"2025-02-15T20:32:05.196Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides\",\n    \"title\": \"Deployment Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    ",
    "\"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deployment Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/b9ClajAPDVkc64F0MgeT\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTc0ZWI4M2MtNjgwNS00YjcwLTg0MWEtMmM3ZGIyMjJhNWQx",
    "' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=d61avcHDR%2B%2FYUE2IHZkoieneOWZiXbFPY4dEFUQGeQgMWiaql%2Bq6pNiWSVMIDN42sTiMCOdXXx",
    "esSGi2Lcsn7QN%2B3%2F3ZescZgpm1XWhcaS1pBedArT39kH9oJYPDMnX0yp%2BPsMgo7hPGzedFu5bS\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ae78389c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deployment Guides | Network\\nMainnet (v1.0.0)Testnet (v1.1.0)\\nPreviousNetwork RolesNextMainnet (v1.0.0)\\nWas this helpful?\",\n  \"markdown\": \"# Deployment Guides | Network\\n\\n[Mainnet (v1.0.0)](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0)[Testnet (v1.1.0)](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0)\\n\\n[PreviousNetwork Roles](https://docs.mantle.xyz/network/for-node-operators/network-roles)[NextMainnet",
    " (v1.0.0)](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:05.982Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/sdk\",\n    \"title\": \"SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/StpBdV3riFdkAtFTkC91\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"header",
    "s\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:05 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZjI2YmVjNzgtYjI1OS00ZDRmLTgzYTgtZWM3YWYxNmI1YWQ5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com ht",
    "tps://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=x3JViZhFu6IFFip5fXC7cvuyvG6PKdLRNah25htVlQLGomk0aE5XpaLitSpdd%2FqJ9WsQp23F3cFhJGfScka%2By39Du2grf9y1zwOVO%2F1vI9JeTvHgQlPsSoDlHebfBi%2FDDNwlP%2B%2BJWRGJzkk1%2BC0u\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:si",
    "te_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810b3381da5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"SDK | Network\\nThe Mantle SDK implements methods to make contract calls for both:\\nDeposit\\nLocking $MNT/ERC20/ERC721 tokens on layer 1 (L1) and minting equivalent tokens on layer 2 (L2)\\nWithdrawal\\nLocking $MNT/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\nSending Messages\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa.\\nDeposit​\\n$MNT/$ETH/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\nYou must first approve the Mantle Bridge to use the amount of $MNT/$ETH/ERC20/ERC721 tokens that you are moving to L2, or the deposit will fail.\\n$ETH deposits can alternatively be triggered by sending $ETH directly to the L1StandardBridge. Your account will be fund",
    "ed with the corresponding amount once the transaction is detected and finalized.\\nWithdrawal​\\n$MNT/$ETH/ERC20/ERC721 token withdrawals from L2 to the Ethereum mainnet can be triggered using the following SDK methods.\\nAll withdrawals use $MNT for gas fees.\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\nSending Messages​\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other. Here's a step-by-step guide on how to enable communication between L1 and L2.\",\n  \"markdown\": \"# SDK | Network\\n\\nThe Mantle SDK implements methods to make contract calls for both:\\n\\n*   **Deposit**\\n    \\n    *   Locking `$MNT`/ERC20/ERC721 tokens on layer 1 (L1) and minting equivalent tokens on layer 2 (L2)\\n        \\n    \\n*   **Withdrawal**\\n    \\n    *   Locking `$MNT`/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\n        \\n    \\n*   **Sending Messages**\\n ",
    "   \\n    *   Contracts on Mantle can invoke contract functions on Ethereum, and vice versa.\\n        \\n    \\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/sdk#deposit)\\n\\n`$MNT`/`$ETH`/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\n\\nYou must first approve the Mantle Bridge to use the amount of `$MNT`/`$ETH`/`ERC20`/`ERC721` tokens that you are moving to L2, or the deposit will fail.\\n\\n`$ETH` deposits can alternatively be triggered by sending $ETH directly to the [L1StandardBridge](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol). Your account will be funded with the corresponding amount once the transaction is detected and finalized.\\n\\n### \\n\\nWithdrawal[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/sdk#withdrawal)\\n\\n`$MNT`/`$ETH`/ERC20/ERC721 token withdrawals from L2 to the Ethereum mainnet can be triggered using the fo",
    "llowing SDK methods.\\n\\nAll withdrawals use `$MNT` for gas fees.\\n\\n`0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`\\n\\n`0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111`\\n\\n### \\n\\nSending Messages[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/sdk#sending-messages)\\n\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other. Here's a [step-by-step](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/cross-dom-comm#communication-between-contracts-on-l1-and-l2) guide on how to enable communication between L1 and L2.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0\",\n    \"loadedTime\": \"2025-02-15T20:32:07.199Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\":",
    " 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0\",\n    \"title\": \"Mainnet (v1.0.0) | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mainnet (v1.0.0) | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/5gTouWippJnHCUMfMmk8\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Pre",
    "fetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDhiZGZhYTMtNzY0Ny00YzJkLTg1Y2YtNjJjNGNkMWZiNTIy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report",
    "_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=GUSQgCBAReCbSCUR582dCRHyf33atNi606O6EHBoORkeL418abbbbwSw4NhQJqwsrYjMMJcZWhm%2FxFFaxp3oAn3TcQ5OY0pkCnnhE0NbdYyJ%2FYeEjo8uYMr%2BLGj5ft8Ehk%2BeiMp9RRyRjy4H3JwH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bb7f94a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mainnet (v1.0.0) | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Mainnet (v1.0.0) | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?",
    "url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-node-operators/deployment-guides/mainnet-v1.0.0?fallback=true)\\n\\n[N",
    "etwork](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism\",\n    \"loadedTime\": \"2025-02-15T20:32:07.509Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism\",\n    \"title\": \"Fee Mechanism | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fee Mechanism | Network\"\n      },\n     ",
    " {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/kUUmAkduFmbfYx1mMECT\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGNlODYxMzMtOTIzZi00MGMxLTkxNzYtYTBmZGE5ZjkzNDMy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://c",
    "dn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=gTEgCJReNMSA%2BIzPnJxf9efPf8JsNYOeA9BfDCrnEvNa5DVhJQIALAnJShXxTi1W3WX08lBh5%2BEFhzd205uK1Ct1moq13XeUVsMVauuGhjOB2guMdWEfPvPYtRWF2Dy%2BZHy0dK%2BYOjQT%2Ff2r8mx%2F\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":",
    "604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bc2a8282e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fee Mechanism | Network\\nUnderstanding Fee Basics on Mantle Network​\\nTransaction fees on Mantle network are similar to those on Ethereum. However, as Mantle Network operates as a layer 2 (L2) blockchain, there are new paradigms in the fee structure that distinguish it from Ethereum's fees.\\nAs Mantle Network continuously enhances its EVM compatibility, dApps can conveniently adapt to any changes with minimal modifications. Let's explore the two sources of transaction costs on Mantle:\\nL1 Rollup Fee\\nCost of submitting rollup state root to L1 (distributed equally among users whose transactions ar",
    "e included in the batch)\\nWrite data credentials submitted to the DA contract on L1\\nThe L2 Execution Fee​\\nSimilar to Ethereum, transactions on Mantle Network must pay the gas fee for the computational and storage resources used. Each L2 transaction incurs some execution fees, calculated as the product of the gas used and the gas price associated with the transaction.\\nMathematically, this is represented as:\\nL2ExecutionFee=L2GasPrice∗L2GasUsedL2ExecutionFee=L2GasPrice∗L2GasUsed\\nThis fee reflects the computational and execution costs of completing transactions on the L2 network. The L2 execution fee paid by users is directly proportional to the computational and network resources consumed by their transactions.\\nThe L1 Rollup Fee​\\nAll state roots generated on L2 due to transaction execution are published to Ethereum. This step is crucial for the security properties of L2, ensuring that all the latest block data from the L2 network is consistently available on Ethereum L1 for sync no",
    "des.\\nL2 aggregates states and essential transaction data into batches, publishing them to Ethereum, with the cost distributed among users whose transactions are included in the batch. The L1 rollup Fee is calculated based on factors such as:\\nThe current gas price on Ethereum\\nA fixed overhead (a fixed cost for committing data to L1, auto-adjusted and set into gas oracle)\\nThe scaling factor scalar\\nParameters related to the size of the transaction are stored as calldata in L1 called rollupDataGas\\nMathematically, this is represented as:\\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗scalar\\nThis fee covers the computational costs of integrating and submitting transaction batches from L2 to L1, including the gas needed for data storage and additional overhead. The L1 rollup fee is a crucial component ensuring the overall system's secure operation and also affects the overall transaction costs.\\nFor a more in-depth understanding, ",
    "it is highly recommended to read the Mantle research team's study on fees in Rollups: Transaction Fees on Rollups\\nUnderstanding Fees on Mantle v2 Tectonic​\\nIn Mantle v2 Tectonic, the introduction of Mantle's native token design incorporates a tokenRatio parameter to adjust the fee:\\nL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio \\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\nL2 Execution Fee in Mantle v2 Tectonic​\\nThe size of the L2 Execution Fee is primarily influenced by two key factors that directly shape the cost of executing transactions on L2.\\nL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\nLet's delve into these factors:\\nL2 gasUsed - Complexity of Transaction Execution​\\nL2 gasUsed is the amount of gas consumed to execute a transaction on layer 2. This value is directly related to the complexity of",
    " the transaction and reflects the amount of work involved in executing the contract, computing, and processing the data. As a result, more complex transactions typically require more gas to complete, directly affecting the size of the L2 execution fee. This factor ensures that the transaction fee is proportional to the actual computational resources used.\\nL2 gasPrice - Depends on the transaction type​\\nL2 gasPrice is the unit price of gas used on L2, which depends on the specific transaction type chosen. L2 gasPrice is calculated differently for different transaction types:\\nFor EIP-1559 transaction types, L2 gasPrice is affected by the GasTipCap parameter, which is a parameter that is issued as a reward to sequencers and can be set to 0 by the user and does not affect the packing of transactions.\\nFor legacy transaction types, GasTipCap takes the default value (0.1 GWEI). In this case, eth_gasPrice is equal to the sum of GasTipCap and BASEFEE. This mechanism ensures the relative stab",
    "ility of the transaction costs, while providing the user with default values and simplifying the setup of the transaction parameters.\\nDue to EVM compatibility, transactions on Mantle Network generally have similar gasUsed to Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 Gas prices on the public Mantle dashboard. Moreover, as gas fees on Mantle Network are denominated in $MNT, transaction costs remain significantly lower than other L2 networks using $ETH as the gas token, even at the same gas price.\\nL1 Rollup Fee in Mantle v2 Tectonic​\\nSince the cost of transaction on L1 is much higher than that of transaction on L2, this is the largest part of the total transaction cost, and calculating the cost of L1 is a complex task due to the volatility of gasPrice in L1.\\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\nLet's delve into these factors:\\n",
    "rollupDataGasCalculation​\\nThe major portion of the L1 gas fee is rollupDataGas, which relates to the size of the transaction stored as calldata in L1, and typically accounts for more than 85% of the L1 GasUsed.\\nMantle v2 Tectonic chooses the Op Stack's rollupDataGas calculation, which counts the number of zero bytes and non-zero bytes in the transaction data, with each zero byte costing 4 Gas and each non-zero byte costing 16 Gas, thus:\\nrollupDataGas=count​zero​bytes(tx​data)∗4+count​non​zero​bytes(tx​data)∗16rollupDataGas=count_​zero_​bytes(tx_​data)∗4+count_​non_​zero_​bytes(tx_​data)∗16\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited amount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 tra",
    "nsaction execution. As a result, for transactions with high complexity, this can even save up to more than 90% of the cost compared to the original L1 rollup fee.\\nFetchoverheadandscalar​\\noverhead and scalar are currently loaded from configurations, not supporting dynamic changes, you can fetch them from the BVM_GasPriceOracle contract, while L1gasPrice needs to be read from L1 blocks.\\nControl of tokenRatio​\\ntokenRatio is a parameter adjusting fees in Mantle. By obtaining prices for ETH and MNT from multiple price oracles and calculating their exchange rate (eth_price/mnt_price), Mantle v2 Tectonic limits the value of the current tokenRatio to the interval of the previous tokenRatio to prevent sudden and significant fluctuations in gasPrice caused by abrupt changes in the exchange rate.\\nMantle v2 Tectonic introduces a BVM_GasPriceOracle contract in Layer 2 to manage permissions for setting and updating tokenRatio. Users with permission (a multi-signature address managed through HSM",
    ") can update tokenRatio through an L2 transaction, dynamically adjusting gas fees.\\nFee Optimization​\\nCompared to Mantle v1, Mantle v2 Tectonic has made improvements and optimizations in fee design, including:\\nEIP-1559 Support: Mantle v2 Tectonic will support various transaction types, including EIP-1559, freeing users from the constraints of old transaction structures. For more details, refer to this. \\nWe highly recommend you to set the baseFee to 0.02 gwei and priorityfee to 0 in your L2 transaction. Refer to this for more details.\\nFee Estimation: The estimateGas API in Mantle v1 only returns the L2 gas cost, the L1 gas estimation needs to be calculated separately, while in Mantle v2 Tectonic it will support returning the total gas of the user's transaction directly. Developers also need to be mindful of the impact this optimization may have on transaction construction. For more details about how to calculate the gas fee, refer to this.\\nMantle v2 Tectonic Fee Showcase​\\nMantle v",
    "2 Tectonic\\nMantle v1 Alpha\\nERC-20 Contract Deployment\",\n  \"markdown\": \"# Fee Mechanism | Network\\n\\n## \\n\\nUnderstanding Fee Basics on Mantle Network[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#understanding-fee-basics-on-mantle-network)\\n\\nTransaction fees on Mantle network are similar to those on Ethereum. However, as Mantle Network operates as a layer 2 (L2) blockchain, there are new paradigms in the fee structure that distinguish it from Ethereum's fees.\\n\\nAs Mantle Network continuously enhances its EVM compatibility, dApps can conveniently adapt to any changes with minimal modifications. Let's explore the two sources of transaction costs on Mantle:\\n\\n2.  [**L1 Rollup Fee**](https://docs.mantle.xyz/network/system-information/fee-mechanism#the-l1-rollup-fee)\\n    \\n    *   Cost of submitting rollup state root to L1 (distributed equally among users whose transactions are included in the batch)\\n        \\n    *   Write data credentials submitted to the DA contract",
    " on L1\\n        \\n    \\n\\n### \\n\\nThe L2 Execution Fee[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#the-l2-execution-fee)\\n\\nSimilar to Ethereum, transactions on Mantle Network must pay the gas fee for the computational and storage resources used. Each L2 transaction incurs some execution fees, calculated as the product of the gas used and the gas price associated with the transaction.\\n\\nMathematically, this is represented as:\\n\\nL2ExecutionFee\\\\=L2GasPrice∗L2GasUsedL2ExecutionFee=L2GasPrice∗L2GasUsed\\n\\nThis fee reflects the computational and execution costs of completing transactions on the L2 network. The L2 execution fee paid by users is directly proportional to the computational and network resources consumed by their transactions.\\n\\n### \\n\\nThe L1 Rollup Fee[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#the-l1-rollup-fee)\\n\\nAll state roots generated on L2 due to transaction execution are published to Ethereum. This step is crucial for the securit",
    "y properties of L2, ensuring that all the latest block data from the L2 network is consistently available on Ethereum L1 for sync nodes.\\n\\nL2 aggregates states and essential transaction data into batches, publishing them to Ethereum, with the cost distributed among users whose transactions are included in the batch. The L1 rollup Fee is calculated based on factors such as:\\n\\n*   The current gas price on Ethereum\\n    \\n*   A fixed `overhead` (a fixed cost for committing data to L1, auto-adjusted and set into gas oracle)\\n    \\n*   The scaling factor `scalar`\\n    \\n*   Parameters related to the size of the transaction are stored as calldata in L1 called `rollupDataGas`\\n    \\n\\nMathematically, this is represented as:\\n\\nL1RollupFee\\\\=(rollupDataGas+overhead)∗L1gasPrice∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗scalar\\n\\nThis fee covers the computational costs of integrating and submitting transaction batches from L2 to L1, including the gas needed for data storage and add",
    "itional overhead. The L1 rollup fee is a crucial component ensuring the overall system's secure operation and also affects the overall transaction costs.\\n\\nFor a more in-depth understanding, it is highly recommended to read the Mantle research team's study on fees in Rollups: [Transaction Fees on Rollups](https://www.mantle.xyz/blog/research/transaction-fees-on-rollups)\\n\\n## \\n\\nUnderstanding Fees on Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#understanding-fees-on-mantle-v2-tectonic)\\n\\nIn Mantle v2 Tectonic, the introduction of Mantle's native token design incorporates a [`tokenRatio`](https://docs.mantle.xyz/network/system-information/fee-mechanism#control-of-tokenratio) parameter to adjust the fee:\\n\\nL2ExecutionFee\\\\=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\n\\nL1RollupFee\\\\=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\n\\n### \\n\\nL2 Ex",
    "ecution Fee in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l2-execution-fee-in-mantle-v2-tectonic)\\n\\nThe size of the L2 Execution Fee is primarily influenced by two key factors that directly shape the cost of executing transactions on L2.\\n\\nL2ExecutionFee\\\\=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\n\\nLet's delve into these factors:\\n\\n#### \\n\\n**L2 gasUsed - Complexity of Transaction Execution**[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l2-gasused---complexity-of-transaction-execution)\\n\\nL2 gasUsed is the amount of gas consumed to execute a transaction on layer 2. This value is directly related to the complexity of the transaction and reflects the amount of work involved in executing the contract, computing, and processing the data. As a result, more complex transactions typically require more gas to complete, directly affecting the size of the L2 execution fee. This factor ensures that t",
    "he transaction fee is proportional to the actual computational resources used.\\n\\n#### \\n\\n**L2 gasPrice - Depends on the transaction type**[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l2-gasprice---depends-on-the-transaction-type)\\n\\nL2 gasPrice is the unit price of gas used on L2, which depends on the specific transaction type chosen. L2 gasPrice is calculated differently for different transaction types:\\n\\n*   **For** [**EIP-1559 transaction types**](https://docs.mantle.xyz/network/more/glossary#eip-1559-transaction), L2 gasPrice is affected by the `GasTipCap` parameter, which is a parameter that is issued as a reward to sequencers and can be set to `0` by the user and does not affect the packing of transactions.\\n    \\n*   **For** [**legacy transaction types**](https://docs.mantle.xyz/network/more/glossary#legacy-transaction), `GasTipCap` takes the default value (0.1 GWEI). In this case, `eth_gasPrice` is equal to the sum of `GasTipCap` and `BASEFEE`. This mech",
    "anism ensures the relative stability of the transaction costs, while providing the user with default values and simplifying the setup of the transaction parameters.\\n    \\n\\nDue to EVM compatibility, transactions on Mantle Network generally have similar `gasUsed` to Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 Gas prices on the public Mantle dashboard. Moreover, as gas fees on Mantle Network are denominated in `$MNT`, transaction costs remain significantly lower than other L2 networks using $ETH as the gas token, even at the same gas price.\\n\\n### \\n\\nL1 Rollup Fee in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#l1-rollup-fee-in-mantle-v2-tectonic)\\n\\nSince the cost of transaction on L1 is much higher than that of transaction on L2, this is the largest part of the total transaction cost, and calculating the cost of L1 is a complex task due to the volatility of gasPrice in L1.\\n\\nL1RollupFee",
    "\\\\=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\n\\nLet's delve into these factors:\\n\\n#### \\n\\n`**rollupDataGas**`**Calculation**[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#rollupdatagas-calculation)\\n\\nThe major portion of the L1 gas fee is `rollupDataGas`, which relates to the size of the transaction stored as calldata in L1, and typically accounts for more than 85% of the L1 GasUsed.\\n\\nMantle v2 Tectonic chooses the Op Stack's rollupDataGas calculation, which counts the number of zero bytes and non-zero bytes in the transaction data, with each zero byte costing 4 Gas and each non-zero byte costing 16 Gas, thus:\\n\\nrollupDataGas\\\\=count​zero​bytes(tx​data)∗4+count​non​zero​bytes(tx​data)∗16rollupDataGas=count\\\\_​zero\\\\_​bytes(tx\\\\_​data)∗4+count\\\\_​non\\\\_​zero\\\\_​bytes(tx\\\\_​data)∗16\\n\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited am",
    "ount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 transaction execution. As a result, for transactions with high complexity, this can even save up to more than **90%** of the cost compared to the original L1 rollup fee.\\n\\n#### \\n\\n**Fetch**`**overhead**`**and**`**scalar**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#fetch-overhead-and-scalar)\\n\\n`overhead` and `scalar` are currently loaded from configurations, not supporting dynamic changes, you can fetch them from the [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract, while `L1gasPrice` needs to be read from L1 blocks.\\n\\n#### \\n\\n**Control of tokenRatio**[**​**](https://docs-v2.mantle.xyz/devs/concep",
    "ts/tx-fee/overviews#control-of-tokenratio)\\n\\n`tokenRatio` is a parameter adjusting fees in Mantle. By obtaining prices for ETH and MNT from multiple price oracles and calculating their exchange rate (`eth_price/mnt_price`), Mantle v2 Tectonic limits the value of the current `tokenRatio` to the interval of the previous `tokenRatio` to prevent sudden and significant fluctuations in gasPrice caused by abrupt changes in the exchange rate.\\n\\nMantle v2 Tectonic introduces a [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract in Layer 2 to manage permissions for setting and updating `tokenRatio`. Users with permission (a multi-signature address managed through [HSM](https://docs.mantle.xyz/network/more/glossary#hardware-security-module-hsm)) can update `tokenRatio` through an L2 transaction, dynamically adjusting gas fees.\\n\\n## \\n\\nFee Optimization[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#fee-optim",
    "ization)\\n\\nCompared to Mantle v1, Mantle v2 Tectonic has made improvements and optimizations in fee design, including:\\n\\n*   **EIP-1559 Support**: Mantle v2 Tectonic will support various transaction types, including EIP-1559, freeing users from the constraints of old transaction structures. For more details, refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support).\\n    \\n\\n**We highly recommend you to set the** `**baseFee**` **to** `**0.02 gwei**` **and** `**priorityfee**` **to** `**0**` **in your L2 transaction.** Refer to [this](https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees) for more details.\\n\\n*   **Fee Estimation**: The `estimateGas` API in Mantle v1 only returns the L2 gas cost, the L1 gas estimation needs to be calculated separately, while in Mantle v2 Tectonic it will support returning the total gas of the user's transaction directly. Developers also need to be mindful of the impact this optimization m",
    "ay have on transaction construction. For more details about how to calculate the gas fee, refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees).\\n    \\n\\n### \\n\\nMantle v2 Tectonic Fee Showcase[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/overviews#mantle-v2-tectonic-fee-showcase)\\n\\nMantle v2 Tectonic\\n\\nMantle v1 Alpha\\n\\n**ERC-20 Contract Deployment**\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker\",\n    \"loadedTime\": \"2025-02-15T20:32:07.793Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-",
    "guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker\",\n    \"title\": \"Deploying a Rollup Verifier/Replica Node From Docker | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Rollup Verifier/Replica Node From Docker | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/G7xiHsaHcijCS3n3Ew52\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tre",
    "e, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OTgwM2UyYzEtN2NiNy00YmVhLTljZjktMTc4N2NkNWRmYzhh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fra",
    "ction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=oc2nVdyhzJAt%2FnvN99KqOQURFDyvLkZVDWyx39G9EfYiC8zStcwsh1wCdpGPD%2FEO6ow7yKL4c1h%2BwENLd0CyG2Ywk39DZ1SSSC3vXwPr%2B1jemH7n5P20LmAzzwRnHw%2BZgQwB1kHqLHSNUBho%2BK2L\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bdedafa5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Rollup Verifier/Replica Node From Docker\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, ",
    "or you can deploy your own depending on the requirements for your specific use cases.\\nThis doc is a simple introduction to the process. For more details, please refer to this:\\nPrerequisites​\\nEnsure you have the following software installed:\\nHardware Recommendations​\\nFor optimal performance, it is recommended to have the following hardware specifications:\\nRAM - 16GB+\\nCPU - 8C+\\nStorage - 4T+ disk(HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download speed\\nApproximate Disk Usage​\\nAs of Dec. 25, 2023:\\nArchive node: ~1.5TB\\nFull node: ~75GB\\nInstallation and Configuration​\\nClone the Repository​\\nFirstly, we need to clone the repository:\\ngit clone https://github.com/mantlenetworkio/networks.git\\nInitialize to Generate Files​\\nBefore running the node, you need to generate some necessary files, such as the jwt_secret.txt and p2p_node_key.txt. You can find more details here.\\nDeploy the Node​\\nDownload Latest Snapshot From Mantle (Recommended)​\\nWe recommend that you star",
    "t the node with the latest snapshot, so that you don't need to wait a long time to sync data. Check this to know how to get the latest snapshot.\\ninfo\\nDepending on the user's location, we provide download links for snapshots in different regions. Check more details here.\\nOperate Mantle Node​\\nOnce the snapshot is downloaded and extracted to the correct folder, you can start the node, we've prepared a docker-compose file for you, so that you can easily start and stop the node.\\ninfo\\nPlease make sure to change your own L1 RPC Node URL in the docker-compose-mainnetv2.yml.\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\nExample​\\nStart the node\\ndocker-compose -f docker-compose-mainnetv2.yml up -d\\nWe can use docker ps to get container id and docker logs to view the logs\\ndocker logs -f <container_id>\\nVerification​\\nCheck Service Status​\\nOnce you start the node, you also need to check the service status, we provide a command to check the service status and the c",
    "hain data.\\nExample​\\nWhen we use cast bn to check the service status, we will get the block number of the latest block. For example:\\nWe can run this command many times to make sure the service is running correctly.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Deploying a Rollup Verifier/Replica Node From Docker\\n\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\n\\n**This doc is a simple introduction to the process.** For more details, please refer to this:\\n\\n## \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/nodes/verifier#prerequisites)\\n\\nEnsure you have the following software installed:\\n\\n## \\n\\nHardware Recommendations[​](https://docs-v2.mantle.xyz/nodes/verifier#hardware-recommendations)\\n\\nFor optimal performance, it is recommended to have the following hardware specifications:\\n\\n*   **RAM** - 16",
    "GB+\\n    \\n*   **CPU** - 8C+\\n    \\n*   **Storage** - 4T+ disk(HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download speed\\n    \\n\\n## \\n\\nApproximate Disk Usage[​](https://docs-v2.mantle.xyz/nodes/verifier#approximate-disk-usage)\\n\\nAs of Dec. 25, 2023:\\n\\n*   Archive node: ~1.5TB\\n    \\n*   Full node: ~75GB\\n    \\n\\n## \\n\\nInstallation and Configuration[​](https://docs-v2.mantle.xyz/nodes/verifier#installation-and-configuration)\\n\\n### \\n\\nClone the Repository[​](https://docs-v2.mantle.xyz/nodes/verifier#clone-the-repository)\\n\\nFirstly, we need to clone the repository:\\n\\n```\\ngit clone https://github.com/mantlenetworkio/networks.git\\n```\\n\\n### \\n\\nInitialize to Generate Files[​](https://docs-v2.mantle.xyz/nodes/verifier#initialize-to-generate-files)\\n\\nBefore running the node, you need to generate some necessary files, such as the `jwt_secret.txt` and `p2p_node_key.txt`. You can find more details [**here**](https://github.com/mantlenetworkio/networks/blob/m",
    "ain/run-node-mainnetv2.md#init-to-generate-the-jwt_secret_txt-file-and-the-p2p_node_key_txt).\\n\\n## \\n\\nDeploy the Node[​](https://docs-v2.mantle.xyz/nodes/verifier#deploy-the-node)\\n\\n### \\n\\nDownload Latest Snapshot From Mantle (Recommended)[​](https://docs-v2.mantle.xyz/nodes/verifier#download-latest-snapshot-from-mantle-recommended)\\n\\n**We recommend that you start the node with the latest snapshot**, so that you don't need to wait a long time to sync data. Check [**this**](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle) to know how to get the latest snapshot.\\n\\ninfo\\n\\n*   Depending on the user's location, we provide download links for snapshots in different regions. Check more details [here](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle).\\n    \\n\\n### \\n\\nOperate Mantle Node[​](https://docs-v2.mantle.xyz/nodes/verifier#operate-mantle-node)\\n\\nOnce ",
    "the snapshot is downloaded and extracted to the correct folder, you can start the node, we've prepared a `docker-compose` file for you, so that you can easily start and stop the node.\\n\\ninfo\\n\\nPlease make sure to change your own L1 RPC Node URL in the [`docker-compose-mainnetv2.yml`](https://github.com/mantlenetworkio/networks/blob/main/docker-compose-mainnetv2.yml).\\n\\n```\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\n```\\n\\n**Example**[**​**](https://docs-v2.mantle.xyz/nodes/verifier#example)\\n\\n1.  Start the node\\n    \\n\\n```\\ndocker-compose -f docker-compose-mainnetv2.yml up -d\\n```\\n\\n1.  We can use `docker ps` to get container id and `docker logs` to view the logs\\n    \\n\\n```\\ndocker logs -f <container_id>\\n```\\n\\n## \\n\\nVerification[​](https://docs-v2.mantle.xyz/nodes/verifier#verification)\\n\\n#### \\n\\nCheck Service Status[​](https://docs-v2.mantle.xyz/nodes/verifier#check-service-status)\\n\\nOnce you start the node, you also need to check the service ",
    "status, we provide a command to check the service status and the chain data.\\n\\n**Example**[**​**](https://docs-v2.mantle.xyz/nodes/verifier#example-1)\\n\\nWhen we use `cast bn` to check the service status, we will get the block number of the latest block. For example:\\n\\nWe can run this command many times to make sure the service is running correctly.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/native-token-migration\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/native-token-migration\",\n    \"loadedTime\": \"2025-02-15T20:32:07.966Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/native-token-migration\",\n    \"title\": \"Native Token Migration | Network\",\n    \"description\": null,\n    \"author\": null",
    ",\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Native Token Migration | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ddmQfieZfjaqlZXfXEWH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:07 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'se",
    "lf' 'nonce-ODk3ZTJkZjUtY2RmOS00Y2Q0LWE5YzUtODU5OWVmY2QwY2Rj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=WFTXX2T%2FjpoukeVu%2B",
    "xZpcrihRGHDOT493EfmR8HeoCZNlhlC%2FWiSwJl6RxKXqaAORvbfXHefG6VDSQP2GGDC3%2F6sA0xH8DyD%2BHC0kPO6B6f2N3FybKySovoUT%2B2QtryO4UPC2%2BRv4LEebcXJ8REq\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810be3ff9c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Native Token Migration | Network\\nMantle v2 Tectonic, as a significant version update, focuses on optimizing and improving various aspects, including a transformation in the system's native token. In Mantle v2 Tectonic, $MNT will serve as the native token for the system. This change aims to provide users with a more flexible and efficient transaction experience, laying a solid foundation for the ecosystem's future develo",
    "pment.\\nWhy Mantle v2 Tectonic Requires a Change​\\nIn Mantle v2 Tectonic, the decision to change the native token from an ERC-20-based scheme to one using Ether Gas stems from several reasons:\\n1. Closer Alignment With Native Ethereum Design​\\nUnlike Mantle v1, where we opted for ERC-20 tokens as the native token, Mantle v2 Tectonic aims for closer alignment with Ethereum's native design. This not only simplifies the development and maintenance processes, but also integrates Mantle v2 more naturally into the Ethereum ecosystem.\\n2. Facilitating L2 Node Upgrades in Sync With the Mainnet​\\nThis new native token makes it easier for L2 nodes to synchronize with mainnet code upgrades. This consistency helps ensure the seamless collaboration of the entire Mantle Network across different levels and better support potential future EIPs.\\n3. Empowering MNT Token Further​\\nMantle v2 Tectonic introduces support for EIP-1559-type transactions. This update allows the MNT token to serve as a GasTipC",
    "ap token in such transactions, controlling transaction priority. This enhancement not only provides users with more flexibility, but also empowers MNT Token with additional utility and potential, further enhancing the Mantle ecosystem.\\nChanges Post-New Solution​\\nTransition in Ledger Storage Method: From Contract Accounts to System Accounts​\\nIn Mantle v2 Tectonic, a significant change involves transitioning the storage method of the MNT ledger from contract accounts to system accounts. This shift from centralized storage (in a single contract account) to decentralized storage (balances correspond one-to-one with addresses, dispersed in address accounts) enhances system maintainability and aligns better with the decentralized design of the overall network.\\nAchieving Identical Flow Paths for MNT and ETH​\\nWith the modification of the native token, Mantle Network successfully achieves identical flow paths for MNT and ETH. This change elevates the position of MNT in Mantle Network, prov",
    "iding it with an equal and convenient standing in the system. Users can now enjoy a user experience similar to ETH without the need for MNT to adopt different flow paths, as is the case with ERC-20 assets.\\nThese changes not only positively impact the overall performance and user experience of the Mantle system, but also establish a solid foundation for future expansions and ecosystem development.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Native Token Migration | Network\\n\\nMantle v2 Tectonic, as a significant version update, focuses on optimizing and improving various aspects, including a transformation in the system's native token. In Mantle v2 Tectonic, $MNT will serve as the native token for the system. This change aims to provide users with a more flexible and efficient transaction experience, laying a solid foundation for the ecosystem's future development.\\n\\n## \\n\\nWhy Mantle v2 Tectonic Requires a Change[​](https://docs-v2.mantle.xyz/devs/concepts/native#why-mantle-v2-tect",
    "onic-requires-a-change)\\n\\nIn Mantle v2 Tectonic, the decision to change the native token from an ERC-20-based scheme to one using Ether Gas stems from several reasons:\\n\\n### \\n\\n1\\\\. Closer Alignment With Native Ethereum Design[​](https://docs-v2.mantle.xyz/devs/concepts/native#1-closer-alignment-with-native-ethereum-design)\\n\\nUnlike Mantle v1, where we opted for ERC-20 tokens as the native token, Mantle v2 Tectonic aims for closer alignment with Ethereum's native design. This not only simplifies the development and maintenance processes, but also integrates Mantle v2 more naturally into the Ethereum ecosystem.\\n\\n### \\n\\n2\\\\. Facilitating L2 Node Upgrades in Sync With the Mainnet[​](https://docs-v2.mantle.xyz/devs/concepts/native#2-facilitating-l2-node-upgrades-in-sync-with-the-mainnet)\\n\\nThis new native token makes it easier for L2 nodes to synchronize with mainnet code upgrades. This consistency helps ensure the seamless collaboration of the entire Mantle Network across differen",
    "t levels and better support potential future EIPs.\\n\\n### \\n\\n3\\\\. Empowering MNT Token Further[​](https://docs-v2.mantle.xyz/devs/concepts/native#3-empowering-mnt-token-further)\\n\\nMantle v2 Tectonic introduces support for [EIP-1559-type transactions](https://docs.mantle.xyz/network/more/glossary#eip-1559-transaction). This update allows the MNT token to serve as a `GasTipCap` token in such transactions, controlling transaction priority. This enhancement not only provides users with more flexibility, but also empowers MNT Token with additional utility and potential, further enhancing the Mantle ecosystem.\\n\\n## \\n\\nChanges Post-New Solution[​](https://docs-v2.mantle.xyz/devs/concepts/native#changes-post-new-solution)\\n\\n### \\n\\nTransition in Ledger Storage Method: From Contract Accounts to System Accounts[​](https://docs-v2.mantle.xyz/devs/concepts/native#transition-in-ledger-storage-method-from-contract-accounts-to-system-accounts)\\n\\nIn Mantle v2 Tectonic, a significant change invol",
    "ves transitioning the storage method of the MNT ledger from contract accounts to system accounts. This shift from centralized storage (in a single contract account) to decentralized storage (balances correspond one-to-one with addresses, dispersed in address accounts) enhances system maintainability and aligns better with the decentralized design of the overall network.\\n\\n### \\n\\nAchieving Identical Flow Paths for MNT and ETH[​](https://docs-v2.mantle.xyz/devs/concepts/native#achieving-identical-flow-paths-for-mnt-and-eth)\\n\\nWith the modification of the native token, Mantle Network successfully achieves identical flow paths for MNT and ETH. This change elevates the position of MNT in Mantle Network, providing it with an equal and convenient standing in the system. Users can now enjoy a user experience similar to ETH without the need for MNT to adopt different flow paths, as is the case with ERC-20 assets.\\n\\nThese changes not only positively impact the overall performance and user ex",
    "perience of the Mantle system, but also establish a solid foundation for future expansions and ecosystem development.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-binary\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-binary\",\n    \"loadedTime\": \"2025-02-15T20:32:08.180Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-binary\",\n    \"title\": \"Deploying a Rollup Verifier/Replica Node From Binary | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"open",
    "Graph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Rollup Verifier/Replica Node From Binary | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/jE789m5aclaQMPaokPxq\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NjQ4NmJlYmQtZDg1Yy",
    "00MmU2LTg5MDYtMDFlMGU3OGU0NDQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=UhQpQpCr%2Fi1Z6NvHgG3iAfArACjdIxWMZKRuc7xgW2wayThA",
    "KxyUTPTQ1lA%2BKCClYxh3MwdzyBFFw7OjBZIGxJFa4prTwrsEwxv30fY26NXWnXkJqsqcngAIyzvNWHy0azF6wt1KpyHUai1AGow2\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810c0feeea5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Rollup Verifier/Replica Node From Binary\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\nIf you want to customize the op-geth and run with your own binary, please follow this tutorial.\\nDue to the fact that Mantle DA in op-node is powered by EigenDA technology, which ",
    "is currently not open-source yet, op-node still needs to be run using Docker.\\nPrerequisites​\\nEnsure you have the following software installed:\\nHardware Recommendations​\\nFor optimal performance, it is recommended to have the following hardware specifications:\\nRAM - 16GB+\\nCPU - 8C+\\nStorage - 4T+ disk(HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download speed\\nApproximate Disk Usage​\\nAs of Dec. 25, 2023:\\nArchive node: ~1.5TB\\nFull node: ~75GB\\nInstallation and Configuration​\\nClone the Repository​\\nFirstly, we need to clone the repository:\\ngit clone https://github.com/mantlenetworkio/networks.git\\nInitialize to Generate Files​\\nBefore running the node, you need to generate some necessary files, such as the jwt_secret.txt and p2p_node_key.txt. You can find more details here.\\nDeploy the Node​\\nDownload Latest Snapshot From Mantle (Recommended)​\\nWe recommend that you start the node with the latest snapshot, so that you don't need to wait a long time to sync data. Check",
    " this to know how to get the latest snapshot.\\ninfo\\nDepending on the user's location, we provide download links for snapshots in different regions. Check more details here.\\nIf you want to run with fullnode mode, please change the --gcmode to full in the gethv2.sh.\\nOperate Mantle Node​\\nOnce the snapshot is downloaded and extracted to the correct folder, you can start the node with the following steps:\\nPrepare the corresponding repos to run the node and switch to the correct release version:\\n# Download Mantle v2 Tectonic op-geth git clone https://github.com/mantlenetworkio/op-geth.git cd ./op-geth git checkout release/v1.0.0\\nMove the binary to the correct folder and start the node:\\ncd ./../networks cp ./../op-geth/build/bin/geth ./ # export PATH export PATH=$PATH:$(pwd) # Run op-geth script firstly ./gethv2.sh\\nStart the op-node by using docker:\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\ndocker-compose -f docker-compose-mainnetv2-nodeonly.yml up -d\\nVe",
    "rification​\\nCheck Service Status​\\nOnce you start the node, you also need to check the service status, we provide a command to check the service status and the chain data.\\nExample​\\nWhen we use cast bn to check the service status, we will get the block number of the latest block. For example:\\nWe can run this command many times to make sure the service is running correctly.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Deploying a Rollup Verifier/Replica Node From Binary\\n\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\n\\nIf you want to customize the op-geth and run with your own binary, please follow this tutorial.\\n\\nDue to the fact that Mantle DA in op-node is powered by EigenDA technology, which is currently not open-source yet, op-node still needs to be run using Docker.\\n\\n## \\n\\nPrerequisites[​](h",
    "ttps://docs-v2.mantle.xyz/nodes/verifier-binary#prerequisites)\\n\\nEnsure you have the following software installed:\\n\\n## \\n\\nHardware Recommendations[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#hardware-recommendations)\\n\\nFor optimal performance, it is recommended to have the following hardware specifications:\\n\\n*   **RAM** - 16GB+\\n    \\n*   **CPU** - 8C+\\n    \\n*   **Storage** - 4T+ disk(HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download speed\\n    \\n\\n## \\n\\nApproximate Disk Usage[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#approximate-disk-usage)\\n\\nAs of Dec. 25, 2023:\\n\\n*   Archive node: ~1.5TB\\n    \\n*   Full node: ~75GB\\n    \\n\\n## \\n\\nInstallation and Configuration[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#installation-and-configuration)\\n\\n### \\n\\nClone the Repository[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#clone-the-repository)\\n\\nFirstly, we need to clone the repository:\\n\\n```\\ngit clone https://github.co",
    "m/mantlenetworkio/networks.git\\n```\\n\\n### \\n\\nInitialize to Generate Files[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#initialize-to-generate-files)\\n\\nBefore running the node, you need to generate some necessary files, such as the `jwt_secret.txt` and `p2p_node_key.txt`. You can find more details [**here**](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#init-to-generate-the-jwt_secret_txt-file-and-the-p2p_node_key_txt).\\n\\n## \\n\\nDeploy the Node[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#deploy-the-node)\\n\\n### \\n\\nDownload Latest Snapshot From Mantle (Recommended)[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#download-latest-snapshot-from-mantle-recommended)\\n\\n**We recommend that you start the node with the latest snapshot**, so that you don't need to wait a long time to sync data. Check [**this**](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle) to know how to get t",
    "he latest snapshot.\\n\\ninfo\\n\\n*   Depending on the user's location, we provide download links for snapshots in different regions. Check more details [here](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnetv2.md#download-latest-snapshot-from-mantle).\\n    \\n*   If you want to run with fullnode mode, please change the `--gcmode` to `full` in the [`gethv2.sh`](https://github.com/mantlenetworkio/networks/blob/main/gethv2.sh).\\n    \\n\\n### \\n\\nOperate Mantle Node[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#operate-mantle-node)\\n\\nOnce the snapshot is downloaded and extracted to the correct folder, you can start the node with the following steps:\\n\\n**Prepare the corresponding repos to run the node and switch to the correct release version:**\\n\\n```\\n# Download Mantle v2 Tectonic op-geth\\ngit clone https://github.com/mantlenetworkio/op-geth.git\\ncd ./op-geth\\ngit checkout release/v1.0.0\\n```\\n\\n**Move the binary to the correct folder and start the node:**\\n\\n```",
    "\\ncd ./../networks\\ncp ./../op-geth/build/bin/geth ./\\n\\n# export PATH\\nexport PATH=$PATH:$(pwd)\\n\\n# Run op-geth script firstly\\n./gethv2.sh\\n```\\n\\n**Start the op-node by using docker:**\\n\\n```\\nOP_NODE_L1_ETH_RPC: 'wss://mainnet.gateway.tenderly.co' #change this\\n```\\n\\n```\\ndocker-compose -f docker-compose-mainnetv2-nodeonly.yml up -d\\n```\\n\\n## \\n\\nVerification[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#verification)\\n\\n#### \\n\\nCheck Service Status[​](https://docs-v2.mantle.xyz/nodes/verifier-binary#check-service-status)\\n\\nOnce you start the node, you also need to check the service status, we provide a command to check the service status and the chain data.\\n\\n**Example**[**​**](https://docs-v2.mantle.xyz/nodes/verifier-binary#example)\\n\\nWhen we use `cast bn` to check the service status, we will get the block number of the latest block. For example:\\n\\nWe can run this command many times to make sure the service is running correctly.\\n\\nLast updated 3 months ago\",\n  \"de",
    "bug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/how-to-send-gasless-transaction-by-using-biconomy\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/how-to-send-gasless-transaction-by-using-biconomy\",\n    \"loadedTime\": \"2025-02-15T20:32:08.201Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/how-to-send-gasless-transaction-by-using-biconomy\",\n    \"title\": \"How to Send Gasless Transaction by Using Biconomy | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Send Gasless Transaction by Using Biconomy | Network\"\n      },\n      {\n   ",
    "     \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/sg9z5QoofwtLKIhPdaIr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTEwNWUxNDMtODAzZi00ZmVjLWIxMDUtODA4MTBkYmVlNmRh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.ifr",
    "ame.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jR6a4XvNKNIXYKhc7Sdb72uRlVfqBzwLf3odvfwRekOmFnIZr3DK7uf7gSKPI2mep0FKJ%2FVpXMSF20abUVwNE4h6Ce2CEZOJDWJKWu8gnrA%2BDFu3%2Fz%2Fo6ShdpfWh%2FM4mQQkyGiSJr7g4Fv7qT67h\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\"",
    ",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810be5b5b2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Send Gasless Transaction by Using Biconomy\\nThis tutorial will guide you through the process of implementing gasless transactions on the Mantle network using Biconomy. By the end of this tutorial, you'll learn how to integrate Biconomy into your DApp, allowing users to make transactions without holding native tokens.\\nPrerequisites​\\nBefore you start, ensure you have the following:\\nBasic Knowledge: Familiarity with Ethereum and smart contracts.\\nDevelopment Environment: Node.js and npm installed.\\nBiconomy Account: Register and create a project on Biconomy.\\nStep 1: Create a Project on Biconomy​\\",
    "nAdd a Paymaster, in this tutorial we choose Mantle Sepolia network.\\nNow you can see a Mode screen on the right, choose and enable the Sponsored.\\nNow you need to setup your gas tank, choose your wallet and deposit some MNT testnet token.\\nGet your Bundler URL from Biconomy Dashboard.\\nStep 2: Setup the Gasless Transaction Environment​\\nImport the following packages and setup the gasless transaction environment.\\nimport {Hex, createWalletClient, http, parseEther} from 'viem'; import {privateKeyToAccount} from 'viem/accounts'; import { createSmartAccountClient, PaymasterMode, SupportedSigner, } from '@biconomy/account'; import {mantle, mantleSepoliaTestnet} from 'viem/chains'; const biconomyTestPaymasterApiKey = 'Your Paymaster API Key'; const bundlerTestUrl = 'Your Bundler URL'; const privateKey = '0xxxxxxxx';\\nStep 3: Create Biconomy Smart Account Instance​\\nNow you can create the Biconomy Smart Account Instance.\\n// ----- 1. Generate EOA from private key const account = privateKeyTo",
    "Account(privateKey as Hex); const client = createWalletClient({ account, chain: mantleSepoliaTestnet, transport: http(), }); const eoa = client.account.address; console.log(`EOA address: ${eoa}`); // ------ 2. Create biconomy smart account instance const smartAccount = await createSmartAccountClient({ signer: client as SupportedSigner, bundlerUrl: bundlerTestUrl, biconomyPaymasterApiKey: biconomyTestPaymasterApiKey, }); const scwAddress = await smartAccount.getAccountAddress(); console.log('SCW Address', scwAddress);\\nMake sure your smart account has enough MNT tokens to transfer.\\nStep 4: Generate Transaction Data​\\n// ------ 3. Generate transaction data const txData = { to, value: parseEther(amount.toString()), };\\nStep 5: Send Gasless Transaction​\\n// ------ 4. Send user operation and get tx hash const userOpResponse = await smartAccount.sendTransaction(txData, { paymasterServiceData: {mode: PaymasterMode.SPONSORED}, }); const {transactionHash} = await userOpResponse.waitForTxHash()",
    "; console.log('Transaction Hash', transactionHash); const userOpReceipt = await userOpResponse.wait(); if (userOpReceipt.success == 'true') { console.log('UserOp receipt', userOpReceipt); console.log('Transaction receipt', userOpReceipt.receipt); }\\nStep 6: Verify Transaction​\\nRun this function and you can get your EOA address, smart account address and transaction hash, after several seconds you will receive the UserOp receipt which means the transaction was successful.\\nLast updated 3 months ago\",\n  \"markdown\": \"# How to Send Gasless Transaction by Using Biconomy\\n\\nThis tutorial will guide you through the process of implementing gasless transactions on the Mantle network using Biconomy. By the end of this tutorial, you'll learn how to integrate Biconomy into your DApp, allowing users to make transactions without holding native tokens.\\n\\n### \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#prerequisites)\\n\\nBefore you start, ensure you have the foll",
    "owing:\\n\\n1.  Basic Knowledge: Familiarity with Ethereum and smart contracts.\\n    \\n2.  Development Environment: Node.js and npm installed.\\n    \\n3.  Biconomy Account: [Register](https://dashboard.biconomy.io/) and create a project on Biconomy.\\n    \\n\\n### \\n\\nStep 1: Create a Project on Biconomy[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-1-create-a-project-on-biconomy)\\n\\n1.  Add a Paymaster, in this tutorial we choose Mantle Sepolia network.\\n    \\n2.  Now you can see a Mode screen on the right, choose and enable the `Sponsored`.\\n    \\n3.  Now you need to setup your gas tank, choose your wallet and deposit some MNT testnet token.\\n    \\n4.  Get your Bundler URL from Biconomy Dashboard.\\n    \\n\\n### \\n\\nStep 2: Setup the Gasless Transaction Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-2-setup-the-gasless-transaction-environment)\\n\\nImport the following packages and setup the gasless transaction environment.\\n\\n```\\nimpo",
    "rt {Hex, createWalletClient, http, parseEther} from 'viem';\\nimport {privateKeyToAccount} from 'viem/accounts';\\nimport {\\n  createSmartAccountClient,\\n  PaymasterMode,\\n  SupportedSigner,\\n} from '@biconomy/account';\\nimport {mantle, mantleSepoliaTestnet} from 'viem/chains';\\n\\nconst biconomyTestPaymasterApiKey = 'Your Paymaster API Key';\\nconst bundlerTestUrl = 'Your Bundler URL';\\n\\nconst privateKey = '0xxxxxxxx';\\n```\\n\\n### \\n\\nStep 3: Create Biconomy Smart Account Instance[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-3-create-biconomy-smart-account-instance)\\n\\nNow you can create the Biconomy Smart Account Instance.\\n\\n```\\n// ----- 1. Generate EOA from private key\\nconst account = privateKeyToAccount(privateKey as Hex);\\nconst client = createWalletClient({\\n  account,\\n  chain: mantleSepoliaTestnet,\\n  transport: http(),\\n});\\nconst eoa = client.account.address;\\nconsole.log(`EOA address: ${eoa}`);\\n\\n// ------ 2. Create biconomy smart account instance\\nc",
    "onst smartAccount = await createSmartAccountClient({\\n  signer: client as SupportedSigner,\\n  bundlerUrl: bundlerTestUrl,\\n  biconomyPaymasterApiKey: biconomyTestPaymasterApiKey,\\n});\\nconst scwAddress = await smartAccount.getAccountAddress();\\nconsole.log('SCW Address', scwAddress);\\n```\\n\\nMake sure your smart account has enough MNT tokens to transfer.\\n\\n### \\n\\nStep 4: Generate Transaction Data[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-4-generate-transaction-data)\\n\\n```\\n// ------ 3. Generate transaction data\\nconst txData = {\\n  to,\\n  value: parseEther(amount.toString()),\\n};\\n```\\n\\n### \\n\\nStep 5: Send Gasless Transaction[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-5-send-gasless-transaction)\\n\\n```\\n// ------ 4. Send user operation and get tx hash\\nconst userOpResponse = await smartAccount.sendTransaction(txData, {\\n  paymasterServiceData: {mode: PaymasterMode.SPONSORED},\\n});\\nconst {transactionHash} = await userOpResponse.",
    "waitForTxHash();\\nconsole.log('Transaction Hash', transactionHash);\\nconst userOpReceipt = await userOpResponse.wait();\\nif (userOpReceipt.success == 'true') {\\n  console.log('UserOp receipt', userOpReceipt);\\n  console.log('Transaction receipt', userOpReceipt.receipt);\\n}\\n```\\n\\n### \\n\\nStep 6: Verify Transaction[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/biconomy#step-6-verify-transaction)\\n\\nRun this function and you can get your EOA address, smart account address and transaction hash, after several seconds you will receive the UserOp receipt which means the transaction was successful.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction\",\n    \"loadedTime\": \"2025-02-15T20:32:08.321Z\",\n    \"referrerUrl\": \"https://docs.man",
    "tle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction\",\n    \"title\": \"Account Abstraction | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Account Abstraction | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/oS8jFQdUaBE6Z0A63fBr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC",
    ", Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODA4ZDUzYWQtNzNmNC00NDk4LWJhNjYtNzM2OWVjYzc1ZDgx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n     ",
    " \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ua2sFp8wdmkxBMzdol%2FQkTVvvSNeBaMQW4JMnakIkSxIfrhZ%2BOdN9Za%2BXGF%2BZkVVP54Gb26WtL2fL3kbgWTppvffOjziWumTX3RrmFVkWYQcLGDEGRihc2A4Uvhu47kdGxV4vnLRm7vkxDy7ojEH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810bcb9679c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Account Abstraction | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Account Abstraction | Network\\n\\n[",
    "![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/resou",
    "rces-and-tooling/account-abstraction?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/create-a-smart-account-by-using-etherspot\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/create-a-smart-account-by-using-etherspot\",\n    \"loadedTime\": \"2025-02-15T20:32:09.295Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/create-a-smart-account-by-using-etherspo",
    "t\",\n    \"title\": \"Create a Smart Account by using Etherspot | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Create a Smart Account by using Etherspot | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/X2mSEwtQoK0cXIXqLQz3\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]",
    "\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODgyMzExZTAtZjJjOC00Mzc5LWE0YzgtNjA0MzQ5YTExN2Ey' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-",
    "when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=wFJtHggwaTy%2BMK9hem6jS3epjJdPuofPQAn%2Bc4ZTzOuksbVoNEg3Yn%2BufXFK%2BSa6Aw5Rted8dH7ROqitSDuRoMeKoF31mRkm5pW1206n%2BQY5MRtQ451iPnrpqhUSGNz1Z%2FF0itjfRI8vk1KzUD3w\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810c8a9b09c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Create a Smart Account by using Etherspot\\nPrerequisites​\\nBefore you start, ensure you have the following:\\nBasic Knowledge: Familiarity with Ethereum and smart contracts.\\nDevelopment Environment: Node.js and npm installed\\nFramework: React Native\\nCode Tutorial​\\nIn this tutorial, we’ll g",
    "et set up with the very basics of using the Prime SDK.\\nWe’ll set up a React app, install the Etherspot Prime SDK, and create an Etherspot smart contract wallet.\\nStart by creating a react app like this:\\nnpx create-react-app etherspot-starter\\nThen enter the directory and install the Etherspot Prime SDK and Ethers.\\ncd etherspot-starter/ npm i @etherspot/prime-sdk --save npm i ethers --save\\nNow open the code in your editor, and open up App.js.\\nPaste in the following code:\\n'use client'; import React from 'react'; import {PrimeSdk} from '@etherspot/prime-sdk'; import {ethers} from 'ethers'; import './App.css'; const App = () => { const [etherspotWalletAddress, setEtherspotWalletAddress] = React.useState( '0x0000000000000000000000000000000000000000', ); const [eoaWalletAddress, setEoaWalletAddress] = React.useState( '0x0000000000000000000000000000000000000000', ); const [eoaPrivateKey, setEoaPrivateKey] = React.useState(''); const generateRandomEOA = async () => { // Create random EOA",
    " wallet const randomWallet = ethers.Wallet.createRandom(); setEoaWalletAddress(randomWallet.address); setEoaPrivateKey(randomWallet.privateKey); }; const generateEtherspotWallet = async () => { // Initialise Etherspot SDK const primeSdk = new PrimeSdk( {privateKey: eoaPrivateKey}, {chainId: 5000, projectKey: ''}, ); const address = await primeSdk.getCounterFactualAddress(); setEtherspotWalletAddress(address); console.log('\\\\x1b[33m%s\\\\x1b[0m', `EtherspotWallet address: ${address}`); }; return ( <div className=\\\"App-header\\\"> <h1 className=\\\"App-title\\\">Getting started with Etherspot Prime</h1> <p> {' '} To initialise the SDK, it requires a Key Based Wallet(KBW) to be passed in. </p> <button className=\\\"App-button\\\" onClick={() => generateRandomEOA()}> First click here to generate a random KBW. </button> <a target=\\\"_blank\\\" href={'https://mantlescan.info/address/' + eoaWalletAddress}> KBW Address: {eoaWalletAddress} </a> <p> Now we can intialise the SDK with this address as the owner, ",
    "and create an Etherspot smart contract wallet. </p> <button onClick={() => generateEtherspotWallet()}> Generate Etherspot Smart Contract Wallet </button> <a target=\\\"_blank\\\" href={'https://mantlescan.info/address/' + etherspotWalletAddress}> Etherspot Smart Account Address: {etherspotWalletAddress} </a> <p> <a target=\\\"_blank\\\" href=\\\"https://etherspot.fyi/prime-sdk/intro\\\"> Now you have a wallet created on Mantle you can explore what else we can do with the Prime SDK. </a> </p> </div> ); }; export default App;\\nAnd that’s it! We’ve now created a random key-based wallet on Mantle on page load, and then using this KBW we pass it into the Etherspot Prime SDK, creating an Etherspot Smart Contract Wallet.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Create a Smart Account by using Etherspot\\n\\n## \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/etherspot#prerequisites)\\n\\nBefore you start, ensure you have the following:\\n\\n1.  Basic Knowledge: Familiarity with Eth",
    "ereum and smart contracts.\\n    \\n2.  Development Environment: Node.js and npm installed\\n    \\n3.  Framework: React Native\\n    \\n\\n## \\n\\nCode Tutorial[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/aa/etherspot#code-tutorial)\\n\\nIn this tutorial, we’ll get set up with the very basics of using the [Prime SDK](https://etherspot.fyi/prime-sdk/instantiation).\\n\\nWe’ll set up a React app, install the Etherspot Prime SDK, and create an Etherspot smart contract wallet.\\n\\nStart by creating a react app like this:\\n\\n```\\nnpx create-react-app etherspot-starter\\n```\\n\\nThen enter the directory and install the Etherspot Prime SDK and Ethers.\\n\\n```\\ncd etherspot-starter/\\nnpm i @etherspot/prime-sdk --save\\nnpm i ethers --save\\n```\\n\\nNow open the code in your editor, and open up App.js.\\n\\nPaste in the following code:\\n\\n```\\n'use client';\\n\\nimport React from 'react';\\nimport {PrimeSdk} from '@etherspot/prime-sdk';\\nimport {ethers} from 'ethers';\\nimport './App.css';\\n\\nconst App = () =>",
    " {\\n  const [etherspotWalletAddress, setEtherspotWalletAddress] = React.useState(\\n    '0x0000000000000000000000000000000000000000',\\n  );\\n  const [eoaWalletAddress, setEoaWalletAddress] = React.useState(\\n    '0x0000000000000000000000000000000000000000',\\n  );\\n  const [eoaPrivateKey, setEoaPrivateKey] = React.useState('');\\n\\n  const generateRandomEOA = async () => {\\n    // Create random EOA wallet\\n    const randomWallet = ethers.Wallet.createRandom();\\n    setEoaWalletAddress(randomWallet.address);\\n    setEoaPrivateKey(randomWallet.privateKey);\\n  };\\n\\n  const generateEtherspotWallet = async () => {\\n    // Initialise Etherspot SDK\\n    const primeSdk = new PrimeSdk(\\n      {privateKey: eoaPrivateKey},\\n      {chainId: 5000, projectKey: ''},\\n    );\\n    const address = await primeSdk.getCounterFactualAddress();\\n    setEtherspotWalletAddress(address);\\n    console.log('\\\\x1b[33m%s\\\\x1b[0m', `EtherspotWallet address: ${address}`);\\n  };\\n\\n  return (\\n    <div className=\\\"App-h",
    "eader\\\">\\n      <h1 className=\\\"App-title\\\">Getting started with Etherspot Prime</h1>\\n\\n      <p>\\n        {' '}\\n        To initialise the SDK, it requires a Key Based Wallet(KBW) to be passed in.\\n      </p>\\n\\n      <button className=\\\"App-button\\\" onClick={() => generateRandomEOA()}>\\n        First click here to generate a random KBW.\\n      </button>\\n      <a\\n        target=\\\"_blank\\\"\\n        href={'https://mantlescan.info/address/' + eoaWalletAddress}>\\n        KBW Address: {eoaWalletAddress}\\n      </a>\\n\\n      <p>\\n        Now we can intialise the SDK with this address as the owner, and create\\n        an Etherspot smart contract wallet.\\n      </p>\\n\\n      <button onClick={() => generateEtherspotWallet()}>\\n        Generate Etherspot Smart Contract Wallet\\n      </button>\\n      <a\\n        target=\\\"_blank\\\"\\n        href={'https://mantlescan.info/address/' + etherspotWalletAddress}>\\n        Etherspot Smart Account Address: {etherspotWalletAddress}\\n      </a>\\n\\n      ",
    "<p>\\n        <a target=\\\"_blank\\\" href=\\\"https://etherspot.fyi/prime-sdk/intro\\\">\\n          Now you have a wallet created on Mantle you can explore what else we\\n          can do with the Prime SDK.\\n        </a>\\n      </p>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n```\\n\\nAnd that’s it! We’ve now created a random key-based wallet on Mantle on page load, and then using this KBW we pass it into the Etherspot Prime SDK, creating an Etherspot Smart Contract Wallet.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-support\",\n    \"loadedTime\": \"2025-02-15T20:32:09.673Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/eip-1559-su",
    "pport\",\n    \"title\": \"EIP-1559 Support | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"EIP-1559 Support | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/XF16cr1pP7q6SwCN95gJ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"",
    "content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDM5N2E0ZjgtYTc1YS00NTM5LThmZDQtZWVjODc1NmUyMTA5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoi",
    "nts\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=xym6SnB%2F8IAQUVYBEuVhFTCPow9Slt4UlCK8X0gZovRmsE%2BsDTUh7AdMGzYoKnLG3ZvhkyctBM0QNM383IVapv7eMSIKMs65yomscyif5F%2B9FJTZDxTXTnU5fNI2KvP0An8vdhKKXJccwr9bXpCy\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ca7beb9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"EIP-1559 Support | Network\\nEIP-1559 is an upgrade proposal put forth by the Ethereum community, aiming to address network security issues by adjusting the structure of transaction fees. The core idea of this proposal is to burn transaction fees while providing miners (or proof-of-stake validators) with a more reliable permanent block reward,",
    " thus creating a more effective incentive mechanism.\\nAnalysis of Factors Affecting Fees​\\nIn EIP-1559, the composition of transaction fees undergoes significant changes with the introduction of BASEFEE and GasTipCap (or MaxPriorityFeePerGas), along with the addition of GasFeeCap to ensure transaction security. The Ethereum protocol dynamically adjusts BASEFEE based on network congestion, resolving potential security risks associated with external price discovery in transaction packing by burning all BASEFEE.\\nWhy Was EIP-1559 Introduced​\\nThe introduction of EIP-1559 aims to address the following issues:\\nInefficient price auctions: The use of price auctions for different network congestion scenarios leads to inefficiency, and fee estimation is highly inaccurate.\\nInconsistent block utilization: The native fee design results in inconsistent block utilization. EIP-1559 allows for the adjustment of block utilization, enabling a longer-term average block size limit.\\nEnhancing network se",
    "curity: Additional incentives (GasTipCap) help eliminate validators' dependence on block rewards, thereby strengthening network security.\\nApplication of EIP-1559 in Mantle v2 Tectonic​\\nIn Mantle v2 Tectonic, we have made the following adjustments to BASEFEE and GasTipCap:\\nBASEFEE Adjustment Mechanism:\\nThe BASEFEE for Mantle L2 is a system parameter set through the SystemConfig contract on Ethereum L1 and synchronized to Mantle L2. You can check it here - currently, the L2 BaseFee is fixed at 20,000,000 wei (0.02 gwei).\\nBASEFEE will no longer burn and will be collected in BaseFeeVault while supporting withdrawal to L1.\\nGasTipCap Adjustment Mechanism:\\nIn each transaction, take the smallest value of GasTip and (GasFeeCap - BaseFee) and multiply it by gasUsed as an award to the validator, have it collected in SequencerFeeVault, and support withdrawal to L1.\\nMantle v2 Tectonic, in an effort to further reduce fees, chose the FIFO method of transaction sequencing to minimize the impac",
    "t of priorityfee.\\nThrough these adjustments, Mantle v2 Tectonic builds on EIP-1559 to provide a more flexible and efficient transaction fee management mechanism.\\nMantle v2 Tectonic sets a very low BASEFEE, we also recommend that you set the MaxPriorityFeePerGas of your EIP-1559 transactions to 0, so that your transaction fees will be very low! \\nLast updated 2 months ago\",\n  \"markdown\": \"# EIP-1559 Support | Network\\n\\n[EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md) is an upgrade proposal put forth by the Ethereum community, aiming to address network security issues by adjusting the structure of transaction fees. The core idea of this proposal is to burn transaction fees while providing miners (or proof-of-stake validators) with a more reliable permanent block reward, thus creating a more effective incentive mechanism.\\n\\n## \\n\\nAnalysis of Factors Affecting Fees[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/eip-1559#analysis-of-factors-affecting-fees)\\",
    "n\\nIn EIP-1559, the composition of transaction fees undergoes significant changes with the introduction of `BASEFEE` and `GasTipCap` (or `MaxPriorityFeePerGas`), along with the addition of `GasFeeCap` to ensure transaction security. The Ethereum protocol dynamically adjusts `BASEFEE` based on network congestion, resolving potential security risks associated with external price discovery in transaction packing by burning all `BASEFEE`.\\n\\n## \\n\\nWhy Was EIP-1559 Introduced[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/eip-1559#why-was-eip-1559-introduced)\\n\\nThe introduction of EIP-1559 aims to address the following issues:\\n\\n*   **Inefficient price auctions**: The use of price auctions for different network congestion scenarios leads to inefficiency, and fee estimation is highly inaccurate.\\n    \\n*   **Inconsistent block utilization**: The native fee design results in inconsistent block utilization. EIP-1559 allows for the adjustment of block utilization, enabling a longer-term ",
    "average block size limit.\\n    \\n*   **Enhancing network security**: Additional incentives (`GasTipCap`) help eliminate validators' dependence on block rewards, thereby strengthening network security.\\n    \\n\\n## \\n\\nApplication of EIP-1559 in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/eip-1559#application-of-eip-1559-in-mantle-v2-tectonic)\\n\\nIn Mantle v2 Tectonic, we have made the following adjustments to `BASEFEE` and `GasTipCap`:\\n\\n*   `**BASEFEE**` **Adjustment Mechanism**:\\n    \\n    *   The `BASEFEE` for Mantle L2 is a system parameter set through the [`SystemConfig`](https://docs.mantle.xyz/network/system-information/on-chain-system/contract-introduction#systemconfigproxy) contract on Ethereum L1 and synchronized to Mantle L2. You can check it [here](https://etherscan.io/address/0x427Ea0710FA5252057F0D88274f7aeb308386cAf#readProxyContract#F3) - currently, the L2 BaseFee is fixed at 20,000,000 wei (0.02 gwei).\\n        \\n    *   `BASEFEE` will no long",
    "er burn and will be collected in [BaseFeeVault](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/predeploys.md#basefeevault) while supporting withdrawal to L1.\\n        \\n    \\n*   `**GasTipCap**` **Adjustment Mechanism**:\\n    \\n    *   In each transaction, take the smallest value of `GasTip` and `(GasFeeCap - BaseFee)` and multiply it by `gasUsed` as an award to the validator, have it collected in [SequencerFeeVault](https://github.com/mantlenetworkio/mantle-v2/blob/develop/specs/predeploys.md#sequencerfeevault), and support withdrawal to L1.\\n        \\n    *   Mantle v2 Tectonic, in an effort to further reduce fees, chose the [FIFO](https://en.wikipedia.org/wiki/FIFO) method of transaction sequencing to minimize the impact of `priorityfee`.\\n        \\n    \\n\\nThrough these adjustments, Mantle v2 Tectonic builds on EIP-1559 to provide a more flexible and efficient transaction fee management mechanism.\\n\\nMantle v2 Tectonic sets a very low `BASEFEE`, we also recommend t",
    "hat you set the `MaxPriorityFeePerGas` of your EIP-1559 transactions to 0, so that your transaction fees will be very low!\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0\",\n    \"loadedTime\": \"2025-02-15T20:32:10.003Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0\",\n    \"title\": \"Testnet (v1.1.0) | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet (v1.1.0) | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz",
    "/network/~gitbook/ogimage/CL0OTpMQddRXx9aUCrS5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:09 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmI3MDVhYmMtNTIwMS00ZWM3LTljNzgtNDAxN2UzOGNkYWI4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com",
    " 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=PIyWbxJ9tEfs0kdXa2QLXG4ua2bPQIKhb%2F%2FvFqVOQXk%2Fx%2FcXqlD%2B5MJs8NPwfn64YhW9cafn5aEdz0vqGeDJl3REu1g%2FU32sh38%2BoimjHk915acg6biXsJktfM5tPO%2B7lr%2BHFbJVQFba1zJvvHNQ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runti",
    "me\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810cc9e969c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Testnet (v1.1.0) | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Testnet (v1.1.0) | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitb",
    "ook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-node-operators/deployment-guides/testnet-v1.1.0?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet\",\n  \"crawl\": {\n    \"",
    "loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet\",\n    \"loadedTime\": \"2025-02-15T20:32:10.371Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet\",\n    \"title\": \"Wallet | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Wallet | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/JDnKUz9WSGdmqFjdsVa0\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<htt",
    "ps://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGFkOTA5MTgtOTVjNS00MzZjLWEyMmEtMDc1ODFiNDQ3OTg1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-s",
    "rc 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ngfrxJKbeX6n3Re0MV5%2FCc%2FjdygB6eAoDa6RXWONnlh5qt14bIOhIBRNlLV3qvLaxGuzw5DD5VJpsEd2drJqdJOJxdSODzkU6bMez%2B09q01xzcX2sM4J91sXCcC7az505VG1eiB2bhBbUeRbmxO1\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ceb9439c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Wallet | Network\\nMantle supports multiple wal",
    "lets for interacting with the network.\\nReown​\\nReown (formerly WalletConnect Inc.) is an onchain UX platform providing toolkits (AppKit and WalletKit) that help builders create intuitive, secure, and seamless Web3 experiences. Check more details here.\\nMultisig Wallet​\\nMultisig wallet is a wallet that can be used to sign transactions with multiple signers. This is useful when you cooperate with multiple people in your project and also increase the decentralization of your project. Mantle also supports this important feature. Check more details here.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Wallet | Network\\n\\nMantle supports multiple wallets for interacting with the network.\\n\\n## \\n\\nReown[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/wallet/overview#web3modal)\\n\\nReown (formerly WalletConnect Inc.) is an onchain UX platform providing toolkits (AppKit and WalletKit) that help builders create intuitive, secure, and seamless Web3 experiences. Check more details [here](https",
    "://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown).\\n\\n## \\n\\nMultisig Wallet[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/wallet/overview#multisig-wallet)\\n\\nMultisig wallet is a wallet that can be used to sign transactions with multiple signers. This is useful when you cooperate with multiple people in your project and also increase the decentralization of your project. Mantle also supports this important feature. Check more details [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wallet).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management\",\n    \"loadedTime\": \"2025-02-15T20:32:10.471Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"http",
    "s://docs.mantle.xyz/network/system-information/risk-management\",\n    \"title\": \"Risk Management | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Risk Management | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/aallqws1j9qh8fbOVACe\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...p",
    "athname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGViNDlkOWItYWRkOS00MGY2LWFlYmEtZTY0Y2NkMDQ5YjM4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-",
    "referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Gi7P3RCa6xLOR0AoLbElo7LdciPBNOuIBGYzJyM0EhEyhuvK93g8GCaEaKFQuicphQK5gex4kEvUWYihI6Vgg6AKtazrDTWcWp8mF4WFsHb4LE5PEtwgayH4wW5EUcb6sht6gGBeFKR4dkx1UBKj\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810cfbc36c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Risk Management | Network\\nMantle Network is dedicated to providing a secure and reliable layer-2 (L2) scaling solution, with strong risk control being a crucial safeguard. In Mantle's risk analysis comprises three key aspects: Data Availability, Fraud Proofs, and Forced Transaction Inclusion.\\",
    "n1. Data Availability​\\nMantle Network ensures the cornerstone of system security by guaranteeing the availability of data. Through innovative data availability solutions, we ensure the secure availability of data during the process of data transfer between the L2 execution layer and layer 1 (L1). This mechanism not only enhances network stability, but also provides users and developers with a more trustworthy data guarantee.\\n2. Fraud Proofs​\\nMantle Network addresses potential fraudulent activities by introducing the concept of Fraud Proofs. Throughout the entire transaction process, the system actively monitors and verifies the consistency of data. Any attempts to tamper with or forge data are detected by the system and handled accordingly. This ensures the security and fairness of the system, providing users with a secure trading environment.\\n3. Forced Transaction Inclusion​\\nTo further enhance system security, Mantle Network has designed the Forced Transaction Inclusion mechanism",
    ". In extreme situations where the system encounters insurmountable issues, the Forced Transaction Inclusion allows a quick and secure rollback to L1, ensuring the safety of user assets. This design provides the system with an emergency rescue mechanism, enabling it to confront unpredictable threats at any time.\\nThrough these three key aspects of security assurance, Mantle Network has constructed a robust counter-risk model, offering users and developers a trustworthy L2 scaling solution and driving the healthy development of the entire decentralized ecosystem.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Risk Management | Network\\n\\nMantle Network is dedicated to providing a secure and reliable layer-2 (L2) scaling solution, with strong risk control being a crucial safeguard. In Mantle's risk analysis comprises three key aspects: **Data Availability**, **Fraud Proofs**, and **Forced Transaction Inclusion**.\\n\\n## \\n\\n1\\\\. Data Availability[​](https://docs-v2.mantle.xyz/intro/risk-man",
    "agement/overviews#1-data-availability)\\n\\nMantle Network ensures the cornerstone of system security by guaranteeing the availability of data. Through innovative data availability solutions, we ensure the secure availability of data during the process of data transfer between the L2 execution layer and layer 1 (L1). This mechanism not only enhances network stability, but also provides users and developers with a more trustworthy data guarantee.\\n\\n## \\n\\n2\\\\. Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/overviews#2-fraud-proofs)\\n\\nMantle Network addresses potential fraudulent activities by introducing the concept of [Fraud Proofs](https://docs.mantle.xyz/network/more/glossary#fraud-proof--fault-proof). Throughout the entire transaction process, the system actively monitors and verifies the consistency of data. Any attempts to tamper with or forge data are detected by the system and handled accordingly. This ensures the security and fairness of the system, providing ",
    "users with a secure trading environment.\\n\\n## \\n\\n3\\\\. Forced Transaction Inclusion[​](https://docs-v2.mantle.xyz/intro/risk-management/overviews#3-forced-transaction-inclusion)\\n\\nTo further enhance system security, Mantle Network has designed the Forced Transaction Inclusion mechanism. In extreme situations where the system encounters insurmountable issues, the Forced Transaction Inclusion allows a quick and secure rollback to L1, ensuring the safety of user assets. This design provides the system with an emergency rescue mechanism, enabling it to confront unpredictable threats at any time.\\n\\nThrough these three key aspects of security assurance, Mantle Network has constructed a robust counter-risk model, offering users and developers a trustworthy L2 scaling solution and driving the healthy development of the entire decentralized ecosystem.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-informa",
    "tion/fee-mechanism/estimate-fees\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees\",\n    \"loadedTime\": \"2025-02-15T20:32:10.303Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/fee-mechanism/estimate-fees\",\n    \"title\": \"Estimate Fees | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Estimate Fees | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/XyXnyhkFy8E1WLzg0MHl\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-s",
    "tatus\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OTNmMTRmYjgtYmIyNS00MTZjLTg0YjEtNDg4NDQyNDdhYzM1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src '",
    "self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=fTcyCqNLrJALo7zyuwJAt8OA3xMtYc%2FaPQnAiLN1V9Ftf2TMD1SvUFtnomzSWJAludvEib5DXQi39HRBSyAGAcJ9sMy0XdqbQEWIVl%2Be43sADbO2WTmzjBD9KhjQBbaVe8Rr8raK9IpkRfNzYuvv\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810cb79562d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screensh",
    "otUrl\": null,\n  \"text\": \"Estimate Fees | Network\\nEstimate Fees in Mantle v2 Tectonic​\\nConcerning the selection of the gas fee token on layer 2 (L2), Mantle v2 Tectonic departs from the conventional ETH solution adopted by most rollups, and employs MNT instead. This introduces a variable called tokenRatio for dynamic adjustment of gas fees. The overall gas fee calculation is as follows:\\nL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\nL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\nLet's break down the variables involved. Both scalar and overhead are retrieved from the BVM_GasPriceOracle contract, while L1gasPrice can be obtained from layer 1 (L1). tokenRatio is a variable updated through an external Oracle contract, which you can fetch from the BVM_GasPriceOracle contract. Therefore, obtaining L2gasPrice and rollupDataGas allows the calculation of a suitab",
    "le gasLimit.\\nWhy is a suitable gasLimit necessary?\\nDetermining an appropriate gasLimit is crucial. If the gasLimit is set too low, the transaction may fail to execute. If set too high, the computed upfront transaction fee might exceed the user's balance, leading to insufficient funds. Additionally, setting a high gasLimit may discourage validators from including the transaction in a block, as validators tend to prefer including more transactions with lower gasLimit within the fixed block gasLimit. Therefore, estimating the fee is a pivotal step.\\nThe L2 block gasLimit for Mantle can be checked here, currently set at 200,000,000,000.\\nHow to Obtain Parameters forBVM_GasPriceOracle​\\noverhead​\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'overhead()(uint256)'\\nscalar​\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'scalar()(uint256)'\\nYou need to divide the value you get by 1,000,000 to get the true scala",
    "r value. For example, if the value you get is 10,000, you need to divide it by 1,000,000 to get 0.01.\\ntokenRatio​\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'tokenRatio()(uint256)'\\nL1gasPrice​\\nAlso known as L1BaseFee.\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'l1BaseFee()(uint256)'\\nHow to Obtain L2 gasPrice​\\nDifferent transaction types, such as Legacy and EIP-1559 transactions, require distinct handling. For detailed information, please refer to this.\\nHow to Obtain rollupDataGas​\\nIt's essential to note that rollupDataGas is not constructed during the estimateGas process in the OP Stack codebase. Thus, an interface is needed to estimate the cost. Mantle addresses this by constructing rollupDataGas and introducing a constant to cover V, R, S signatures, and other data, ensuring that the estimateGas's gasLimit covers L1 costs.\\nWe provide interfaces that return L1GasUsed data directly, i.e., th",
    "e sum of (rollupDataGas + overhead)\\n# _data is rlp-encoded data of the signed tx cast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'getL1GasUsed(_data)(uint256)'\\nIf you want to learn more, please refer to this.\\nEnsuring transaction success​\\nestimateGas provides only an estimate. To prevent transaction failure due to insufficient gas fees, Mantle Network internally magnifies the estimate by a factor, ensuring the correct execution of transactions.\\nWhy Do We Need to UseestimateGas​\\nThe cost of fees on L1 is difficult to predict accurately due to the influence of L1 gasPrice, therefore, in Mantle v1, the estimateGas function only returns an estimate of the L2 gas fee. However, in Mantle v2 Tectonic, we have addressed this issue by providing an optimized solution. The estimateGas interface now returns an estimate of the total gas fee, including both L1 and L2 costs. Consequently, when constructing transactions, adjustments need to be made to accomm",
    "odate this optimization. We encourage all transactions to first call estimateGas to obtain an estimate of the gas fee before construction.\\nExample​\\nHere is an example illustrating the difference in gasLimit settings for transaction construction between Mantle v1 and Mantle v2 Tectonic.\\nIn Mantle v1, the gasUsed on a typical native token transfer on L2 is a fixed value (21,000), so developers might opt to skip calling estimateGas and set it to a fixed value.\\nHowever, in Mantle v2 Tectonic, the gasLimit that developers need to set when constructing transactions will include both L1 and L2 components, so without calling estimateGas and setting it to a fixed value may result in transaction failures.\\nTo avoid transaction failures, we recommend calling estimateGas when constructing transactions to obtain an estimate of the gas fee.\\nIf you want to do estimateGas with the Mantle SDK, here's a demo.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Estimate Fees | Network\\n\\n## \\n\\nEstimate F",
    "ees in Mantle v2 Tectonic[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#estimate-fees-in-mantle-v2-tectonic)\\n\\nConcerning the selection of the gas fee token on layer 2 (L2), Mantle v2 Tectonic departs from the conventional ETH solution adopted by most rollups, and employs MNT instead. This introduces a variable called [`tokenRatio`](https://docs.mantle.xyz/network/system-information/fee-mechanism#control-of-tokenratio) for dynamic adjustment of gas fees. The overall gas fee calculation is as follows:\\n\\nL2ExecutionFee\\\\=L2gasPrice∗L2gasUsed∗tokenRatioL2ExecutionFee=L2gasPrice∗L2gasUsed∗tokenRatio\\n\\nL1RollupFee\\\\=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalarL1RollupFee=(rollupDataGas+overhead)∗L1gasPrice∗tokenRatio∗scalar\\n\\nLet's break down the variables involved. Both `scalar` and `overhead` are retrieved from the [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract, while `L1gasPrice` can be obt",
    "ained from layer 1 (L1). `tokenRatio` is a variable updated through an external Oracle contract, which you can fetch from the [`BVM_GasPriceOracle`](https://docs.mantle.xyz/network/system-information/off-chain-system/key-l2-contract-address) contract. Therefore, obtaining `L2gasPrice` and `rollupDataGas` allows the calculation of a suitable `gasLimit`.\\n\\n**Why is a suitable gasLimit necessary?**\\n\\nDetermining an appropriate `gasLimit` is crucial. If the `gasLimit` is set too low, the transaction may fail to execute. If set too high, the computed upfront transaction fee might exceed the user's balance, leading to insufficient funds. Additionally, setting a high `gasLimit` may discourage validators from including the transaction in a block, as validators tend to prefer including more transactions with lower `gasLimit` within the fixed block `gasLimit`. Therefore, estimating the fee is a pivotal step.\\n\\nThe L2 block gasLimit for Mantle can be checked [here](https://etherscan.io/address",
    "/0x427Ea0710FA5252057F0D88274f7aeb308386cAf#readProxyContract#F5), currently set at 200,000,000,000.\\n\\n### \\n\\nHow to Obtain Parameters for`BVM_GasPriceOracle`[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#how-to-obtain-parameters-for-bvm_gaspriceoracle)\\n\\n#### \\n\\n`**overhead**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#overhead)\\n\\n```\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'overhead()(uint256)'\\n```\\n\\n#### \\n\\n`**scalar**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#scalar)\\n\\n```\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'scalar()(uint256)'\\n```\\n\\nYou need to divide the value you get by `1,000,000` to get the true scalar value. For example, if the value you get is `10,000`, you need to divide it by `1,000,000` to get `0.01`.\\n\\n#### \\n\\n`**tokenRatio**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#tokenratio)\\n\\n```\\ncast call --rpc-url",
    " https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'tokenRatio()(uint256)'\\n```\\n\\n#### \\n\\n`**L1gasPrice**`[**​**](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#l1gasprice)\\n\\nAlso known as `L1BaseFee`.\\n\\n```\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'l1BaseFee()(uint256)'\\n```\\n\\n### \\n\\nHow to Obtain L2 gasPrice[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#how-to-obtain-l2-gasprice)\\n\\nDifferent transaction types, such as Legacy and EIP-1559 transactions, require distinct handling. For detailed information, please refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism#l2-gasprice-depends-on-the-transaction-type).\\n\\n### \\n\\nHow to Obtain rollupDataGas[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#how-to-obtain-rollupdatagas)\\n\\nIt's essential to note that `rollupDataGas` is not constructed during the `estimateGas` process in the OP Stack codebase. Thus, an interface is neede",
    "d to estimate the cost. Mantle addresses this by constructing `rollupDataGas` and introducing a constant to cover `V`, `R`, `S` signatures, and other data, ensuring that the `estimateGas`'s `gasLimit` covers L1 costs.\\n\\nWe provide interfaces that return `L1GasUsed` data directly, i.e., the sum of `(rollupDataGas + overhead)`\\n\\n```\\n# _data is rlp-encoded data of the signed tx\\n\\ncast call --rpc-url https://rpc.mantle.xyz 0x420000000000000000000000000000000000000F 'getL1GasUsed(_data)(uint256)'\\n```\\n\\nIf you want to learn more, please refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism#rollupdatagascalculation).\\n\\n### \\n\\nEnsuring transaction success[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#ensuring-transaction-success)\\n\\n`estimateGas` provides only an estimate. To prevent transaction failure due to insufficient gas fees, Mantle Network internally magnifies the estimate by a factor, ensuring the correct execution of transactions.\\n\\n## \\n\\n",
    "Why Do We Need to Use`estimateGas`[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#why-we-need-to-use-estimategas)\\n\\nThe cost of fees on L1 is difficult to predict accurately due to the influence of L1 gasPrice, therefore, in Mantle v1, the `estimateGas` function only returns an estimate of the L2 gas fee. However, in Mantle v2 Tectonic, we have addressed this issue by providing an optimized solution. The `estimateGas` interface now returns an estimate of the total gas fee, including both L1 and L2 costs. Consequently, when constructing transactions, adjustments need to be made to accommodate this optimization. We encourage all transactions to first call `estimateGas` to obtain an estimate of the gas fee before construction.\\n\\n### \\n\\nExample[​](https://docs-v2.mantle.xyz/devs/concepts/tx-fee/ef#example)\\n\\nHere is an example illustrating the difference in `gasLimit` settings for transaction construction between Mantle v1 and Mantle v2 Tectonic.\\n\\nIn Mantle v1, the `gasUsed` o",
    "n a typical native token transfer on L2 is a fixed value (21,000), so developers might opt to skip calling `estimateGas` and set it to a fixed value.\\n\\nHowever, in Mantle v2 Tectonic, the `gasLimit` that developers need to set when constructing transactions will include both L1 and L2 components, so without calling `estimateGas` and setting it to a fixed value may result in transaction failures.\\n\\n**To avoid transaction failures, we recommend calling** `**estimateGas**` **when constructing transactions to obtain an estimate of the gas fee.**\\n\\nIf you want to do `estimateGas` with the Mantle SDK, here's a [demo](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/sdk-estimate-gas).\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/social-login-by-using-particle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/re",
    "sources-and-tooling/account-abstraction/social-login-by-using-particle\",\n    \"loadedTime\": \"2025-02-15T20:32:11.156Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/account-abstraction/social-login-by-using-particle\",\n    \"title\": \"Social Login by Using Particle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Social Login by Using Particle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/KrDpngGISFcgZPFHPMiP\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:10 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-",
    "status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDc2MjFiYzctOWM2MS00NGQxLWI3OWMtZmQ3NDBjNWI2MTVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src ",
    "'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jj3SB%2Bt5qRTB0%2FQIZqyFI5P4u%2FO0fbos3fXS%2Fwl9zXvjT%2BY7vVbVpG1A2n%2B1r0QRX6kChYLlyZqVlG%2BMyiFAAEOBhnnzwV0Vxd8AuesE9slvqabzywZS1EbyYVhX0rbWl00r4HgzVZqt8D7R1gBV\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810ceddd6a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n",
    "  \"screenshotUrl\": null,\n  \"text\": \"Social Login by Using Particle\\nParticle Network offers Wallet Abstraction services through its Account Abstraction stack, optimizing user onboarding with a set of SDKs. Comment Edit from here\\nIntegrating customizable modules for Externally Owned Accounts (EOA) and Account Abstraction (AA), Particle facilitates quick onboarding in just 2-clicks via social login options like Google, email, and phone, alongside traditional Web3 login methods.\\nParticle Network is compatible with Mantle Mainnet and Testnet, supporting EOA interactions and native ERC-4337 via implementations like SimpleAccount, Biconomy V2, and Cyber Connect.\\nThis tutorial guides you through the steps for building a demo application on Mantle Sepolia using the Particle Connect SDK — Particle's flagship onboarding SDK. The Particle Connect SDK enables quick 2-click onboarding with social and Web3 login options in a single modal. In this demo, we'll onboard users through a SimpleAccount ",
    "instance of a smart account via social login and execute a gasless (sponsored) transaction.\\nGetting Started \\nThis tutorial is based on a Next.js app with TypeScript and Tailwind CSS to demonstrate wallet creation on Mantle using social logins.\\nThe Particle Connect SDK simplifies wallet creation, user authentication, and blockchain interactions, providing a streamlined interface that supports social logins and traditional Web3 wallets.\\nPrerequisites \\nTo integrate Particle Connect into your Mantle application, you'll need just a few dependencies. Particle Connect includes built-in Account Abstraction (AA) support, but in this example, we’ll also install the Particle AA SDK to use EIP-1193 providers like ethers.\\nyarn add @particle-network/connectkit viem@^2 @particle-network/aa ethers\\nConfiguring the Particle Dashboard \\nTo get started with the setup, visit the Particle dashboard to retrieve three essential values for your project.\\nWhen using any Particle Network SDK, you'll need ",
    "a projectId, clientKey, and appId to authenticate your project and establish a connection between your Particle Auth instance and the Particle dashboard. This setup allows you to customize in-app modals, track users, manage your Paymaster funds, and more.\\nOnce you're in the Particle dashboard, follow these steps:\\nGo to Add New Project to create a new project.\\nChoose a name and domain for your app. You can use a placeholder here if you haven't finalized your deployment domain.\\nCopy your Project ID, Client Key, and App ID.\\nFor security, it's best to store these values in a .env file in this format:\\nNEXT_PUBLIC_PROJECT_ID='PROJECT_ID' NEXT_PUBLIC_CLIENT_KEY='CLIENT_KEY' NEXT_PUBLIC_APP_ID='APP_ID' NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID='WALLETCONNECT_PROJECT_ID'\\nConfiguring Particle Connect \\nFirst, let’s configure and initialize Particle Connect. Create a new file called ConnectKit.tsx in your src directory. In this file, we’ll define the ParticleConnectKit component, which wraps th",
    "e configured ConnectKitProvider instance and acts as the primary interface for handling configuration.\\n\\\"use client\\\"; import React from \\\"react\\\"; import { ConnectKitProvider, createConfig } from \\\"@particle-network/connectkit\\\"; import { authWalletConnectors } from \\\"@particle-network/connectkit/auth\\\"; import { evmWalletConnectors } from \\\"@particle-network/connectkit/evm\\\"; import { mantleSepoliaTestnet } from \\\"@particle-network/connectkit/chains\\\"; import { wallet, EntryPosition } from \\\"@particle-network/connectkit/wallet\\\"; import { aa } from \\\"@particle-network/connectkit/aa\\\"; const config = createConfig({ projectId: process.env.NEXT_PUBLIC_PROJECT_ID!, clientKey: process.env.NEXT_PUBLIC_CLIENT_KEY!, appId: process.env.NEXT_PUBLIC_APP_ID!, walletConnectors: [ authWalletConnectors({}), // Social logins // Default Web3 logins evmWalletConnectors({ walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID, // optional, retrieved from https://cloud.walletconnect.c",
    "om }), ], plugins: [ wallet({ entryPosition: EntryPosition.BR, // Positions the modal button at the bottom right on login visible: true, // Determines if the wallet modal is displayed }), aa({ name: \\\"SIMPLE\\\", version: \\\"2.0.0\\\", }), ], chains: [mantleSepoliaTestnet], }); export const ParticleConnectkit = ({ children }: React.PropsWithChildren) => { return <ConnectKitProvider config={config}>{children}</ConnectKitProvider>; };\\nThis code configures Particle Connect to enable wallet authentication and blockchain interactions on Mantle Sepolia. It supports social logins and standard Web3 options via WalletConnect and includes Account Abstraction (AA) with a simpleAccount instance, version 2.0.0. The configured ConnectKitProvider component wraps the app’s content, ensuring this setup is accessible throughout the application.\\nIntegrate Particle Connect in Your App \\nAfter configuration, wrap your application with the ParticleConnectKit component to provide access to the Particle Connect ",
    "SDK across the app. Update the layout.tsx file in the src directory as follows:\\nimport { ParticleConnectkit } from \\\"@/components/Connectkit\\\"; import type { Metadata } from \\\"next\\\"; import { Inter } from \\\"next/font/google\\\"; import \\\"./globals.css\\\"; const inter = Inter({ subsets: [\\\"latin\\\"] }); export const metadata: Metadata = { title: \\\"Particle Connectkit App\\\", description: \\\"Generated by create next app\\\", }; export default function RootLayout({ children, }: Readonly<{ children: React.ReactNode; }>) { return ( <html lang=\\\"en\\\"> <body className={inter.className}> <ParticleConnectkit>{children}</ParticleConnectkit> </body> </html> ); }\\nBuilding the Application \\nWith your project set up, dependencies installed, and Particle Connect configured, you can start building in the page.tsx file.\\nIn page.tsx, you’ll define the core features: login flow, data visualization, transaction handling, and the UI.\\nConnecting the Wallet \\nWith layout.tsx set up, the next step is to add a ma",
    "in Connect Wallet button for user login. Import ConnectButton from @particle-network/connectkit and add it to the interface. Once the user logs in, the ConnectButton transforms into an embedded wallet widget.\\n\\\"use client\\\"; import { ConnectButton, useAccount } from \\\"@particle-network/connectkit\\\"; const HomePage = () => { const { address, isConnected, chainId } = useAccount(); return ( <div className=\\\"flex justify-center items-center h-screen\\\"> <div className=\\\"text-center\\\"> <ConnectButton /> {isConnected && ( <> <h2>Address: {address}</h2> <h2>Chain ID: {chainId}</h2> </> )} </div> </div> ); }; export default HomePage;\\nSending Transactions with an EIP-1193 Provider \\nParticle Connect offers built-in AA features, but pairing it with the Particle AA SDK lets you leverage EIP-1193 providers like ethers. This setup is particularly useful if you’re already accustomed to these providers or if you’re integrating Particle Connect into an existing application.\\nTo set this up, wrap the ",
    "smart account from Particle Connect within an ethers instance to create a customProvider. This lets you interact with ethers as usual while the smart account manages transaction signing in the background.\\nimport {useSmartAccount } from \\\"@particle-network/connectkit\\\"; import { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\"; const smartAccount = useSmartAccount(); // Init custom provider with gasless transaction mode const customProvider = smartAccount ? new ethers.BrowserProvider( new AAWrapProvider( smartAccount, SendTransactionMode.Gasless ) as Eip1193Provider, \\\"any\\\" ) : null; /** * Sends a transaction using the ethers.js library. * This transaction is gasless since the customProvider is initialized as gasless */ const executeTxEthers = async () => { if (!customProvider) return; const signer = await customProvider.getSigner(); const tx = { to: recipientAddress, value: parseEther(\\\"0.01\\\").toString(), }; const txResponse = await signer.sendTransaction(tx); con",
    "st txReceipt = await txResponse.wait(); console.log(txReceipt?.hash) };\\nThis transaction is gasless due to two factors:\\nGasless Mode: Setting SendTransactionMode.Gasless in AAWrapProvider specifies a sponsored transaction.\\nFunding: On Testnets like Mantle Sepolia, transactions are automatically sponsored, so no USDT is needed. On mainnets, the Paymaster (configured in the Particle dashboard) must be funded to cover transaction fees.\\nThis example uses an EIP-1193 provider, though you can also create a userOp directly with Particle Connect. For details, see the starter repository.\\nFull App Example \\nWith an understanding of each part, you can now use Particle Connect, as shown in the example application below.\\nThis application creates a smart account on Mantle Sepolia through either social or Web3 login and sends a gasless transaction of 0.01 MNT using the ethers provider.\\n\\\"use client\\\"; import React, { useEffect, useState } from \\\"react\\\"; // Particle imports import { ConnectBut",
    "ton, useAccount, usePublicClient, useSmartAccount, } from \\\"@particle-network/connectkit\\\"; // Eip1193 and AA Provider import { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\"; // Only needed with Eip1193 provider import { ethers, type Eip1193Provider } from \\\"ethers\\\"; import { formatEther, parseEther } from \\\"viem\\\"; export default function Home() { const { isConnected, chain } = useAccount(); const publicClient = usePublicClient(); const smartAccount = useSmartAccount(); const [userAddress, setUserAddress] = useState<string>(\\\"\\\"); const [balance, setBalance] = useState<string | null>(null); const [recipientAddress, setRecipientAddress] = useState<string>(\\\"\\\"); const [transactionHash, setTransactionHash] = useState<string | null>(null); // Init custom provider with gasless transaction mode const customProvider = smartAccount ? new ethers.BrowserProvider( new AAWrapProvider( smartAccount, SendTransactionMode.Gasless ) as Eip1193Provider, \\\"any\\\" ) : null; /** * F",
    "etches the balance of a given address. * @param {string} address - The address to fetch the balance for. */ const fetchBalance = async (address: string) => { try { const balanceResponse = await publicClient?.getBalance({ address: address as `0x${string}`, }); if (balanceResponse) { const balanceInEther = formatEther(balanceResponse).toString(); setBalance(balanceInEther); } else { setBalance(\\\"0.0\\\"); } } catch (error) { console.error(\\\"Error fetching balance:\\\", error); setBalance(\\\"0.0\\\"); } }; /** * Loads the user's account data, including address and balance. */ useEffect(() => { const loadAccountData = async () => { if (isConnected && smartAccount) { try { const address = await smartAccount.getAddress(); setUserAddress(address); await fetchBalance(address); } catch (error) { console.error(\\\"Error loading account data:\\\", error); } } }; loadAccountData(); }, [isConnected, smartAccount]); /** * Sends a transaction using the ethers.js library. * This transaction is gasless since the ",
    "customProvider is initialized as gasless */ const executeTxEthers = async () => { if (!customProvider) return; const signer = await customProvider.getSigner(); try { const tx = { to: recipientAddress, value: parseEther(\\\"0.01\\\").toString(), }; const txResponse = await signer.sendTransaction(tx); const txReceipt = await txResponse.wait(); setTransactionHash(txReceipt?.hash || null); } catch (error) { console.error(\\\"Failed to send transaction using ethers.js:\\\", error); } }; return ( <div className=\\\"container min-h-screen flex flex-col justify-center items-center mx-auto gap-4 px-4 md:px-8\\\"> <div className=\\\"w-full flex justify-center mt-4\\\"> <ConnectButton label=\\\"Click to login\\\" /> </div> {isConnected && ( <> <div className=\\\"border border-purple-500 p-6 rounded-lg w-full\\\"> <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\"> Address: <code>{userAddress || \\\"Loading...\\\"}</code> </h2> <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\"> Balance: {balance || \\\"Loading...\\\"}",
    " {chain?.nativeCurrency.symbol} </h2> <input type=\\\"text\\\" placeholder=\\\"Recipient Address\\\" value={recipientAddress} onChange={(e) => setRecipientAddress(e.target.value)} className=\\\"mt-4 p-3 w-full rounded border border-gray-700 bg-gray-900 text-white focus:outline-none\\\" /> <button className=\\\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded mt-4\\\" onClick={executeTxEthers} disabled={!recipientAddress} > Send 0.001 {chain?.nativeCurrency.name} </button> {transactionHash && ( <p className=\\\"text-green-500 mt-4\\\"> Transaction Hash: {transactionHash} </p> )} </div> </> )} </div> ); }\\nParticle Connect Hooks \\nThis example demonstrates a basic usage of Particle Connect. For the complete list of hooks, see the Particle Connect documentation.\",\n  \"markdown\": \"# Social Login by Using Particle\\n\\nParticle Network offers Wallet Abstraction services through its Account Abstraction stack, optimizing user onboarding with a set of SDKs. Comment Edit from here\\n\\nIntegrati",
    "ng customizable modules for Externally Owned Accounts (EOA) and Account Abstraction (AA), Particle facilitates quick onboarding in just 2-clicks via social login options like Google, email, and phone, alongside traditional Web3 login methods.\\n\\nParticle Network is compatible with Mantle Mainnet and Testnet, supporting EOA interactions and native ERC-4337 via implementations like SimpleAccount, Biconomy V2, and Cyber Connect.\\n\\nThis tutorial guides you through the steps for building a demo application on Mantle Sepolia using the [Particle Connect SDK](https://developers.particle.network/api-reference/connect/desktop/web) — Particle's flagship onboarding SDK. The Particle Connect SDK enables quick 2-click onboarding with social and Web3 login options in a single modal. In this demo, we'll onboard users through a SimpleAccount instance of a smart account via social login and execute a gasless (sponsored) transaction.\\n\\n## \\n\\nGetting Started\\n\\nThis tutorial is based on a [Next.js app]",
    "(https://nextjs.org/docs/getting-started/installation) with TypeScript and Tailwind CSS to demonstrate wallet creation on Mantle using social logins.\\n\\nThe Particle Connect SDK simplifies wallet creation, user authentication, and blockchain interactions, providing a streamlined interface that supports social logins and traditional Web3 wallets.\\n\\n### \\n\\nPrerequisites\\n\\nTo integrate Particle Connect into your Mantle application, you'll need just a few dependencies. Particle Connect includes built-in Account Abstraction (AA) support, but in this example, we’ll also install the [Particle AA SDK](https://developers.particle.network/api-reference/aa/sdks/desktop/web) to use EIP-1193 providers like ethers.\\n\\n```\\nyarn add @particle-network/connectkit viem@^2 @particle-network/aa ethers\\n```\\n\\n### \\n\\nConfiguring the Particle Dashboard\\n\\nTo get started with the setup, visit the [Particle dashboard](https://dashboard.particle.network/) to retrieve three essential values for your project",
    ".\\n\\nWhen using any Particle Network SDK, you'll need a projectId, clientKey, and appId to authenticate your project and establish a connection between your Particle Auth instance and the Particle dashboard. This setup allows you to customize in-app modals, track users, manage your Paymaster funds, and more.\\n\\nOnce you're in the Particle dashboard, follow these steps:\\n\\nGo to **Add New Project** to create a new project.\\n\\nChoose a name and domain for your app. You can use a placeholder here if you haven't finalized your deployment domain.\\n\\nCopy your **Project ID**, **Client Key**, and **App ID**.\\n\\nFor security, it's best to store these values in a .env file in this format:\\n\\n```\\nNEXT_PUBLIC_PROJECT_ID='PROJECT_ID'\\nNEXT_PUBLIC_CLIENT_KEY='CLIENT_KEY'\\nNEXT_PUBLIC_APP_ID='APP_ID'\\nNEXT_PUBLIC_WALLETCONNECT_PROJECT_ID='WALLETCONNECT_PROJECT_ID'\\n```\\n\\n## \\n\\nConfiguring Particle Connect\\n\\nFirst, let’s configure and initialize Particle Connect. Create a new file called `Connect",
    "Kit.tsx` in your `src` directory. In this file, we’ll define the `ParticleConnectKit` component, which wraps the configured `ConnectKitProvider` instance and acts as the primary interface for handling configuration.\\n\\n```\\n\\\"use client\\\";\\n\\nimport React from \\\"react\\\";\\nimport { ConnectKitProvider, createConfig } from \\\"@particle-network/connectkit\\\";\\nimport { authWalletConnectors } from \\\"@particle-network/connectkit/auth\\\";\\nimport { evmWalletConnectors } from \\\"@particle-network/connectkit/evm\\\";\\nimport { mantleSepoliaTestnet } from \\\"@particle-network/connectkit/chains\\\";\\nimport { wallet, EntryPosition } from \\\"@particle-network/connectkit/wallet\\\";\\nimport { aa } from \\\"@particle-network/connectkit/aa\\\";\\n\\nconst config = createConfig({\\n  projectId: process.env.NEXT_PUBLIC_PROJECT_ID!,\\n  clientKey: process.env.NEXT_PUBLIC_CLIENT_KEY!,\\n  appId: process.env.NEXT_PUBLIC_APP_ID!,\\n\\n  walletConnectors: [\\n    authWalletConnectors({}), // Social logins\\n\\n    // Default Web3 lo",
    "gins\\n    evmWalletConnectors({\\n      walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID, // optional, retrieved from https://cloud.walletconnect.com\\n    }),\\n  ],\\n\\n  plugins: [\\n    wallet({\\n      entryPosition: EntryPosition.BR, // Positions the modal button at the bottom right on login\\n      visible: true, // Determines if the wallet modal is displayed\\n    }),\\n    aa({\\n      name: \\\"SIMPLE\\\",\\n      version: \\\"2.0.0\\\",\\n    }),\\n  ],\\n  chains: [mantleSepoliaTestnet],\\n});\\n\\nexport const ParticleConnectkit = ({ children }: React.PropsWithChildren) => {\\n  return <ConnectKitProvider config={config}>{children}</ConnectKitProvider>;\\n};\\n```\\n\\nThis code configures Particle Connect to enable wallet authentication and blockchain interactions on Mantle Sepolia. It supports social logins and standard Web3 options via WalletConnect and includes Account Abstraction (AA) with a `simpleAccount` instance, version 2.0.0. The configured `ConnectKitProvider` compon",
    "ent wraps the app’s content, ensuring this setup is accessible throughout the application.\\n\\n## \\n\\nIntegrate Particle Connect in Your App\\n\\nAfter configuration, wrap your application with the `ParticleConnectKit` component to provide access to the Particle Connect SDK across the app. Update the `layout.tsx` file in the `src` directory as follows:\\n\\n```\\nimport { ParticleConnectkit } from \\\"@/components/Connectkit\\\";\\nimport type { Metadata } from \\\"next\\\";\\nimport { Inter } from \\\"next/font/google\\\";\\nimport \\\"./globals.css\\\";\\n\\nconst inter = Inter({ subsets: [\\\"latin\\\"] });\\n\\nexport const metadata: Metadata = {\\n  title: \\\"Particle Connectkit App\\\",\\n  description: \\\"Generated by create next app\\\",\\n};\\n\\nexport default function RootLayout({\\n  children,\\n}: Readonly<{\\n  children: React.ReactNode;\\n}>) {\\n  return (\\n    <html lang=\\\"en\\\">\\n      <body className={inter.className}>\\n        <ParticleConnectkit>{children}</ParticleConnectkit>\\n      </body>\\n    </html>\\n  );\\n}\\",
    "n```\\n\\n## \\n\\nBuilding the Application\\n\\nWith your project set up, dependencies installed, and Particle Connect configured, you can start building in the `page.tsx` file.\\n\\nIn `page.tsx`, you’ll define the core features: login flow, data visualization, transaction handling, and the UI.\\n\\n### \\n\\nConnecting the Wallet\\n\\nWith `layout.tsx` set up, the next step is to add a main **Connect Wallet** button for user login. Import `ConnectButton` from `@particle-network/connectkit` and add it to the interface. Once the user logs in, the `ConnectButton` transforms into an embedded wallet widget.\\n\\n```\\n\\\"use client\\\";\\nimport { ConnectButton, useAccount } from \\\"@particle-network/connectkit\\\";\\n\\nconst HomePage = () => {\\n  const { address, isConnected, chainId } = useAccount();\\n\\n  return (\\n    <div className=\\\"flex justify-center items-center h-screen\\\">\\n      <div className=\\\"text-center\\\">\\n        <ConnectButton />\\n        {isConnected && (\\n          <>\\n            <h2>Address:",
    " {address}</h2>\\n            <h2>Chain ID: {chainId}</h2>\\n          </>\\n        )}\\n      </div>\\n    </div>\\n  );\\n};\\n\\nexport default HomePage;\\n```\\n\\n### \\n\\nSending Transactions with an EIP-1193 Provider\\n\\nParticle Connect offers built-in AA features, but pairing it with the Particle AA SDK lets you leverage EIP-1193 providers like `ethers`. This setup is particularly useful if you’re already accustomed to these providers or if you’re integrating Particle Connect into an existing application.\\n\\nTo set this up, wrap the smart account from Particle Connect within an `ethers` instance to create a `customProvider`. This lets you interact with ethers as usual while the smart account manages transaction signing in the background.\\n\\n```\\nimport {useSmartAccount } from \\\"@particle-network/connectkit\\\";\\nimport { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\";\\n\\nconst smartAccount = useSmartAccount();\\n\\n// Init custom provider with gasless transaction mode\\ncon",
    "st customProvider = smartAccount\\n? new ethers.BrowserProvider(\\n    new AAWrapProvider(\\n        smartAccount,\\n        SendTransactionMode.Gasless\\n    ) as Eip1193Provider,\\n    \\\"any\\\"\\n    )\\n: null;\\n\\n/**\\n * Sends a transaction using the ethers.js library.\\n * This transaction is gasless since the customProvider is initialized as gasless\\n*/\\nconst executeTxEthers = async () => {\\n    if (!customProvider) return;\\n  \\n    const signer = await customProvider.getSigner();\\n    const tx = {\\n      to: recipientAddress,\\n      value: parseEther(\\\"0.01\\\").toString(),\\n    };\\n  \\n    const txResponse = await signer.sendTransaction(tx);\\n    const txReceipt = await txResponse.wait();\\n    console.log(txReceipt?.hash)\\n  };\\n```\\n\\nThis transaction is gasless due to two factors:\\n\\n1.  **Gasless Mode:** Setting `SendTransactionMode.Gasless` in `AAWrapProvider` specifies a sponsored transaction.\\n    \\n2.  **Funding:** On Testnets like Mantle Sepolia, transactions are automatically spo",
    "nsored, so no USDT is needed. On mainnets, the Paymaster (configured in the [Particle dashboar](https://dashboard.particle.network/)d) must be funded to cover transaction fees.\\n    \\n\\nThis example uses an EIP-1193 provider, though you can also create a userOp directly with Particle Connect. For details, see the [starter repository](https://github.com/Particle-Network/connectkit-aa-usage/blob/2017262daf297624362d51f3d50cccd3b4606ef9/app/page.tsx#L117).\\n\\n## \\n\\nFull App Example\\n\\nWith an understanding of each part, you can now use Particle Connect, as shown in the example application below.\\n\\nThis application creates a smart account on Mantle Sepolia through either social or Web3 login and sends a gasless transaction of 0.01 MNT using the `ethers` provider.\\n\\n```\\n\\\"use client\\\";\\nimport React, { useEffect, useState } from \\\"react\\\";\\n\\n// Particle imports\\nimport {\\n  ConnectButton,\\n  useAccount,\\n  usePublicClient,\\n  useSmartAccount,\\n} from \\\"@particle-network/connectkit\\\";\\n",
    "\\n// Eip1193 and AA Provider\\nimport { AAWrapProvider, SendTransactionMode } from \\\"@particle-network/aa\\\"; // Only needed with Eip1193 provider\\nimport { ethers, type Eip1193Provider } from \\\"ethers\\\";\\nimport { formatEther, parseEther } from \\\"viem\\\";\\n\\nexport default function Home() {\\n  const { isConnected, chain } = useAccount();\\n  const publicClient = usePublicClient();\\n  const smartAccount = useSmartAccount();\\n\\n  const [userAddress, setUserAddress] = useState<string>(\\\"\\\");\\n  const [balance, setBalance] = useState<string | null>(null);\\n  const [recipientAddress, setRecipientAddress] = useState<string>(\\\"\\\");\\n  const [transactionHash, setTransactionHash] = useState<string | null>(null);\\n\\n  // Init custom provider with gasless transaction mode\\n  const customProvider = smartAccount\\n    ? new ethers.BrowserProvider(\\n        new AAWrapProvider(\\n          smartAccount,\\n          SendTransactionMode.Gasless\\n        ) as Eip1193Provider,\\n        \\\"any\\\"\\n      )\\n    : ",
    "null;\\n\\n  /**\\n   * Fetches the balance of a given address.\\n   * @param {string} address - The address to fetch the balance for.\\n   */\\n  const fetchBalance = async (address: string) => {\\n    try {\\n      const balanceResponse = await publicClient?.getBalance({\\n        address: address as `0x${string}`,\\n      });\\n      if (balanceResponse) {\\n        const balanceInEther = formatEther(balanceResponse).toString();\\n        setBalance(balanceInEther);\\n      } else {\\n        setBalance(\\\"0.0\\\");\\n      }\\n    } catch (error) {\\n      console.error(\\\"Error fetching balance:\\\", error);\\n      setBalance(\\\"0.0\\\");\\n    }\\n  };\\n\\n  /**\\n   * Loads the user's account data, including address and balance.\\n   */\\n  useEffect(() => {\\n    const loadAccountData = async () => {\\n      if (isConnected && smartAccount) {\\n        try {\\n          const address = await smartAccount.getAddress();\\n          setUserAddress(address);\\n          await fetchBalance(address);\\n        } catch (err",
    "or) {\\n          console.error(\\\"Error loading account data:\\\", error);\\n        }\\n      }\\n    };\\n    loadAccountData();\\n  }, [isConnected, smartAccount]);\\n\\n  /**\\n   * Sends a transaction using the ethers.js library.\\n   * This transaction is gasless since the customProvider is initialized as gasless\\n   */\\n  const executeTxEthers = async () => {\\n    if (!customProvider) return;\\n\\n    const signer = await customProvider.getSigner();\\n    try {\\n      const tx = {\\n        to: recipientAddress,\\n        value: parseEther(\\\"0.01\\\").toString(),\\n      };\\n\\n      const txResponse = await signer.sendTransaction(tx);\\n      const txReceipt = await txResponse.wait();\\n\\n      setTransactionHash(txReceipt?.hash || null);\\n    } catch (error) {\\n      console.error(\\\"Failed to send transaction using ethers.js:\\\", error);\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"container min-h-screen flex flex-col justify-center items-center mx-auto gap-4 px-4 md:px-8\\\">\\n      <div className",
    "=\\\"w-full flex justify-center mt-4\\\">\\n        <ConnectButton label=\\\"Click to login\\\" />\\n      </div>\\n      {isConnected && (\\n        <>\\n          <div className=\\\"border border-purple-500 p-6 rounded-lg w-full\\\">\\n            <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\">\\n              Address: <code>{userAddress || \\\"Loading...\\\"}</code>\\n            </h2>\\n            <h2 className=\\\"text-lg font-semibold mb-2 text-white\\\">\\n              Balance: {balance || \\\"Loading...\\\"} {chain?.nativeCurrency.symbol}\\n            </h2>\\n            <input\\n              type=\\\"text\\\"\\n              placeholder=\\\"Recipient Address\\\"\\n              value={recipientAddress}\\n              onChange={(e) => setRecipientAddress(e.target.value)}\\n              className=\\\"mt-4 p-3 w-full rounded border border-gray-700 bg-gray-900 text-white focus:outline-none\\\"\\n            />\\n            <button\\n              className=\\\"bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px",
    "-4 rounded mt-4\\\"\\n              onClick={executeTxEthers}\\n              disabled={!recipientAddress}\\n            >\\n              Send 0.001 {chain?.nativeCurrency.name}\\n            </button>\\n            {transactionHash && (\\n              <p className=\\\"text-green-500 mt-4\\\">\\n                Transaction Hash: {transactionHash}\\n              </p>\\n            )}\\n          </div>\\n        </>\\n      )}\\n    </div>\\n  );\\n}\\n```\\n\\n### \\n\\nParticle Connect Hooks\\n\\nThis example demonstrates a basic usage of Particle Connect. For the complete list of hooks, see the Particle Connect documentation.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown\",\n    \"loadedTime\": \"2025-02-15T20:32:12.268Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"m",
    "etadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/reown\",\n    \"title\": \"Reown | Network\",\n    \"description\": \"Learn how to use Reown AppKit to enable wallet connections and interact with the Mantle network.\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Reown | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Learn how to use Reown AppKit to enable wallet connections and interact with the Mantle network.\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/nuVtp6u7f4Q1jFEX2Rfo\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:11 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\"",
    ",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Yzk0Y2RiY2YtYzU1NS00MjM3LTkwNmQtMzZhZjZkYzQ3MTQ5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstat",
    "ic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Zwmlt3QAvrk%2BI4rOcm%2FYtrFoqXqvwveaAlZQY5otpMXnzANCuc0sI0SHTuVDC7051B1rkez0gxzzAgfm4gCCQxNv81IO8dO3ynxqLX1hX8parofar%2FFZixeQYmotgBTPgsmSJheA72OTKKKdxBIQ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810d78ddfa5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n ",
    " \"text\": \"Reown | Network\\nWith AppKit, you can provide seamless wallet connections, including email and social logins, on-ramp functionality, smart accounts, one-click authentication, and wallet notifications, all designed to deliver an exceptional user experience.\\nIn this tutorial, you will learn how to:\\nSet up Reown AppKit.\\nConfigure a wallet connection modal and enable interactions with the Mantle network.\\nThis guide takes approximately 10 minutes to complete.\\nLet’s get started!\\nSetup\\nIn this section, you'll learn how to set up the development environment to use AppKit with Mantle.\\nFor this tutorial, we'll be using Next.js, though you can use any other framework compatible with AppKit.\\nAppKit is available on eight frameworks, including React, Next.js, Vue, JavaScript, React Native, Flutter, Android, iOS, and Unity.\\nNow, let’s create a Next app. In order to do so, please run the command given below:\\nnpx create-next-app@latest appkit-example\\nThe above command creates a Ne",
    "xt app and sets the name of the Next app as “appkit-example”.\\nInstall AppKit\\nNow, we need to install AppKit and other dependencies that we need for our app to function as expected. For this tutorial, we will be using “wagmi” as our preferred Ethereum library. \\nnpm install @reown/appkit @reown/appkit-wagmi-adapter wagmi @tanstack/react-query\\nReown also supports wagmi v1, ethers, ethers v5, if you want to use other sdk, please refer to their documentation here.\\nCreate a New Project on Reown Cloud\\nNow, we need to get a project Id from Reown Cloud that we will use to set up AppKit with Wagmi config. Navigate to cloud.reown.com and sign in. If you have not created an account yet, please do so before we proceed.\\nAfter you have logged in, please navigate to the “Projects” section of the Cloud and click on “Create Project”.\\nNow, enter the name for your project and click on “Continue”.\\nSelect the product as “AppKit” and click on “Continue”.\\nSelect the framework as “Next.js” and click ",
    "on “Create”. Reown Cloud will now create a new project for you which will also generate a project Id.\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\nBuild the App Using AppKit\\nBefore we build the app, let’s first configure our .env file. On the root level of your code directory, create a new file named .env.\\nOpen that file and create a new variable NEXT_PUBLIC_PROJECT_ID. You will assign the project Id that you copied in the previous step to this environment variable that you just created. This is what it will look like:\\nNEXT_PUBLIC_PROJECT_ID = <YOUR_PROJECT_ID_HERE>\\nPlease make sure you follow the best practices when you are working with secret keys and other sensitive information. Env",
    "ironment variables that start with NEXT_PUBLIC will be exposed by your app which can be misused by bad actors.\\nConfigure AppKit\\nOn the root level of your code directory, create a new folder named config and within that folder, create a new code file named config/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., config/index.tsx.TypeScriptCopy\\nimport { WagmiAdapter } from \\\"@reown/appkit-adapter-wagmi\\\"; import { cookieStorage, createStorage } from \\\"wagmi\\\"; import { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks' // Get projectId from https://cloud.reown.com export const projectId = process.env.NEXT_PUBLIC_PROJECT_ID; export const networks = [mantle, mantleSepoliaTestnet] if (!projectId) throw new Error(\\\"Project ID is not defined\\\"); // Set up the Wagmi Adapter (config) export const wagmiAdapter = new WagmiAdapter({ storage: createStorage({ storage: cookieStorage }), ssr: true, networks, projectId }) export const config = wagmiAdapter.wag",
    "miConfig\\nSo what's happening in the above code? Let's understand it step-by-step:\\nFirst, we need to import the necessary functions from their respective packages.\\nWagmiAdapter - this is used to create a WAGMI configuration which is then initialized to the wagmiAdapter\\ncookieStorage, createStorage - this provides a storage mechanism using cookies and a function to create custom storage solutions (in this case, using cookies).\\nCreate the Modal for your app\\nNow, we need to create a context provider to wrap our application in and initialize AppKit.\\nOn the root level of your code directory, create a new folder named context and within that folder, create a new code file named context/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., context/index.tsx.\\n'use client' import { wagmiAdapter, projectId } from '@/config' import { createAppKit } from '@reown/appkit/react' import { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks' import { QueryClient",
    ", QueryClientProvider } from '@tanstack/react-query' import React, { type ReactNode } from 'react' import { cookieToInitialState, WagmiProvider, type Config } from 'wagmi' // Set up queryClient const queryClient = new QueryClient() if (!projectId) { throw new Error('Project ID is not defined') } // Set up metadata const metadata = { //this is optional name: \\\"appkit-example-mantle\\\", description: \\\"AppKit Example - Mantle\\\", url: \\\"https://mantleapp.com\\\", // origin must match your domain & subdomain icons: [\\\"https://avatars.githubusercontent.com/u/179229932\\\"] } // Create the modal const modal = createAppKit({ adapters: [wagmiAdapter], projectId, networks: [mantle, mantleSepoliaTestnet], metadata: metadata, features: { analytics: true, // Optional - defaults to your Cloud configuration }, themeMode: 'light' }) function ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) { const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config,",
    " cookies) return ( <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}> <QueryClientProvider client={queryClient}>{children}</QueryClientProvider> </WagmiProvider> ) } export default ContextProvider\\nLet’s understand what is happening in the above code:\\nFirst, we import the necessary functions from their respective packages. After this, we need to create the modal component for our app.\\nmetadata - This object contains information about our application that will be used by AppKit. This includes the name of the app, the description, the url and the icons representing our app. This is optional.\\ncreateAppKit - this is called to initialize the AppKit component, which handles the user interface for connecting to blockchain wallets. The function is configured with various options, such as the app's metadata, theming, and enabling features like analytics and onramp services.\\nnetworks - these are the networks that we want our app to support. So import the ",
    "chains you want your app to support from @reown/appkit/network and assign it to this network parameter. Since we want to enable wallet interactions on the Mantle network, we import both Mantle Mainnet and the Sepolia testnet. You can view the complete list of supported chains here.\\nWagmiProvider: Provides blockchain and wallet connection context to the app.\\nQueryClientProvider: Provides the React Query context for managing server-state data.\\nNow, let’s create the layout for our app. In app/layout.tsx, remove the existing code and paste the code snippet given below.\\nimport type { Metadata } from \\\"next\\\"; import { Inter } from \\\"next/font/google\\\"; import \\\"./globals.css\\\"; const inter = Inter({ subsets: [\\\"latin\\\"] }); import { headers } from \\\"next/headers\\\"; // added import ContextProvider from '@/context' export const metadata: Metadata = { title: \\\"AppKit Example App\\\", description: \\\"Powered by Reown\\\" }; export default function RootLayout({ children }: Readonly<{ children: Re",
    "act.ReactNode }>) { const cookies = headers().get('cookie') return ( <html lang=\\\"en\\\"> <body className={inter.className}> <ContextProvider cookies={cookies}>{children}</ContextProvider> </body> </html> ) }\\nCreate the UI for your app\\nFor our app to have the UI with which your users can interact, you need to set a simple UI and configure the modal. Since, we have already set up AppKit, you can use <w3m-button> which will serve as a “Connect Wallet” button or you can build your own custom button using the hooks that AppKit provides.\\nOpen the app/page.tsx file and remove the existing boilerplate code, and then replace it with the code snippet given below.\\n\\\"use client\\\"; import { useAccount } from \\\"wagmi\\\"; export default function Home() { const { isConnected } = useAccount(); return ( <main className=\\\"min-h-screen px-8 py-0 pb-12 flex-1 flex flex-col items-center\\\"> <header className=\\\"w-full py-4 flex justify-between items-center\\\"> <div className=\\\"flex items-center\\\"> <img src=\\",
    "\"/walletconnect.png\\\" alt=\\\"logo\\\" className=\\\"w-10 h-10 mr-2\\\" /> <div className=\\\"hidden sm:inline text-xl font-bold\\\">Reown - AppKit + Mantle</div> </div> </header> <h2 className=\\\"my-8 text-2xl font-bold leading-snug text-center\\\">Examples</h2> <div className=\\\"max-w-4xl\\\"> <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\"> <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Connect your wallet</h3> <div className=\\\"flex justify-center items-center p-4\\\"> <w3m-button /> </div> </div> <br></br> {isConnected && ( <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\"> <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Network selection button</h3> <div className=\\\"flex justify-center items-center p-4\\\"> <w3m-network-button /> </div> </div> )} </div> </main> ); }\\nThe code above uses the AppKit configuration to provide two buttons: one for users to connect their wallet to ",
    "the app, and another to allow users to switch networks.\\nYou can now run the app and test it out. In order to do so, run the command given below.\\nConclusion\\nAnd that’s it! You have now learned how to create a simple app using AppKit that allows users to connect their wallet and interact with the Mantle network.\\nReown AppKit is a powerful solution for developers looking to integrate wallet connections and other Web3 functionalities into their apps on any EVM chain. In just a few simple steps, you can provide your users with seamless wallet access, one-click authentication, social logins, and notifications—streamlining their experience while enabling advanced features like on-ramp functionality and smart accounts. By following this guide, you'll quickly get up and running with Reown’s AppKit, enhancing your app’s user experience and interaction with blockchain technology.\\nYou can view the complete code repository here.\",\n  \"markdown\": \"# Reown | Network\\n\\nWith AppKit, you can provid",
    "e seamless wallet connections, including email and social logins, on-ramp functionality, smart accounts, one-click authentication, and wallet notifications, all designed to deliver an exceptional user experience.\\n\\nIn this tutorial, you will learn how to:\\n\\n1.  Set up Reown AppKit.\\n    \\n2.  Configure a wallet connection modal and enable interactions with the Mantle network.\\n    \\n\\nThis guide takes approximately 10 minutes to complete.\\n\\nLet’s get started!\\n\\n### \\n\\nSetup\\n\\nIn this section, you'll learn how to set up the development environment to use AppKit with Mantle.\\n\\nFor this tutorial, we'll be using Next.js, though you can use any other framework compatible with AppKit.\\n\\n_AppKit is available on eight frameworks, including React, Next.js, Vue, JavaScript, React Native, Flutter, Android, iOS, and Unity._\\n\\nNow, let’s create a Next app. In order to do so, please run the command given below:\\n\\n```\\nnpx create-next-app@latest appkit-example\\n```\\n\\nThe above command crea",
    "tes a Next app and sets the name of the Next app as “appkit-example”.\\n\\n#### \\n\\nInstall AppKit\\n\\nNow, we need to install AppKit and other dependencies that we need for our app to function as expected. For this tutorial, we will be using “wagmi” as our preferred Ethereum library.\\n\\n```\\nnpm install @reown/appkit @reown/appkit-wagmi-adapter wagmi @tanstack/react-query\\n```\\n\\nReown also supports wagmi v1, ethers, ethers v5, if you want to use other sdk, please refer to their documentation [here](https://docs.reown.com/appkit/react/core/installation).\\n\\n#### \\n\\nCreate a New Project on Reown Cloud\\n\\nNow, we need to get a project Id from Reown Cloud that we will use to set up AppKit with Wagmi config. Navigate to [cloud.reown.com](https://cloud.reown.com/) and sign in. If you have not created an account yet, please do so before we proceed.\\n\\nAfter you have logged in, please navigate to the “**Projects**” section of the Cloud and click on “**Create Project**”.\\n\\nNow, enter the name ",
    "for your project and click on “**Continue**”.\\n\\nSelect the product as “**AppKit**” and click on “**Continue**”.\\n\\nSelect the framework as “**Next.js**” and click on “**Create**”. Reown Cloud will now create a new project for you which will also generate a project Id.\\n\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\n\\nYou will notice that your project was successfully created. On the top left corner, you will be able to find your Project Id. Please copy that as you will need that later.\\n\\n### \\n\\nBuild the App Using AppKit\\n\\nBefore we build the app, let’s first configure our .env file. On the root level of your code directory, create a new file named .env.\\n\\nOpen that file and create a new variable NEXT\\\\_PUBLIC\\\\_PROJECT\\\\_ID. You will assign the project Id that you copied in the previous step to this environment variable that you just created. This is wha",
    "t it will look like:\\n\\n```\\nNEXT_PUBLIC_PROJECT_ID = <YOUR_PROJECT_ID_HERE>\\n```\\n\\n_Please make sure you follow the best practices when you are working with secret keys and other sensitive information. Environment variables that start with NEXT\\\\_PUBLIC will be exposed by your app which can be misused by bad actors._\\n\\n#### \\n\\nConfigure AppKit\\n\\nOn the root level of your code directory, create a new folder named config and within that folder, create a new code file named config/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., `config/index.tsx.TypeScriptCopy`\\n\\n```\\nimport { WagmiAdapter } from \\\"@reown/appkit-adapter-wagmi\\\";\\nimport { cookieStorage, createStorage } from \\\"wagmi\\\";\\nimport { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks'\\n\\n// Get projectId from https://cloud.reown.com\\nexport const projectId = process.env.NEXT_PUBLIC_PROJECT_ID;\\n\\nexport const networks = [mantle, mantleSepoliaTestnet]\\n\\nif (!projectId) throw new Er",
    "ror(\\\"Project ID is not defined\\\");\\n\\n// Set up the Wagmi Adapter (config)\\nexport const wagmiAdapter = new WagmiAdapter({\\n  storage: createStorage({\\n    storage: cookieStorage\\n  }),\\n  ssr: true,\\n  networks,\\n  projectId\\n})\\n\\nexport const config = wagmiAdapter.wagmiConfig\\n```\\n\\nSo what's happening in the above code? Let's understand it step-by-step:\\n\\nFirst, we need to import the necessary functions from their respective packages.\\n\\n**WagmiAdapter -** this is used to create a WAGMI configuration which is then initialized to the wagmiAdapter\\n\\n**cookieStorage, createStorage -** this provides a storage mechanism using cookies and a function to create custom storage solutions (in this case, using cookies).\\n\\n#### \\n\\nCreate the Modal for your app\\n\\nNow, we need to create a context provider to wrap our application in and initialize AppKit.\\n\\nOn the root level of your code directory, create a new folder named context and within that folder, create a new code file named conte",
    "xt/index.tsx. Now, paste the code snippet shared below inside the code file, i.e., `context/index.tsx`.\\n\\n```\\n'use client'\\n\\nimport { wagmiAdapter, projectId } from '@/config'\\nimport { createAppKit } from '@reown/appkit/react' \\nimport { mantle, mantleSepoliaTestnet } from '@reown/appkit/networks'\\n\\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\\nimport React, { type ReactNode } from 'react'\\nimport { cookieToInitialState, WagmiProvider, type Config } from 'wagmi'\\n\\n// Set up queryClient\\nconst queryClient = new QueryClient()\\n\\nif (!projectId) {\\n  throw new Error('Project ID is not defined')\\n}\\n\\n// Set up metadata\\nconst metadata = { //this is optional\\n  name: \\\"appkit-example-mantle\\\",\\n  description: \\\"AppKit Example - Mantle\\\",\\n  url: \\\"https://mantleapp.com\\\", // origin must match your domain & subdomain\\n  icons: [\\\"https://avatars.githubusercontent.com/u/179229932\\\"]\\n}\\n\\n// Create the modal\\nconst modal = createAppKit({\\n  adapters: [wagmiA",
    "dapter],\\n  projectId,\\n  networks: [mantle, mantleSepoliaTestnet],\\n  metadata: metadata,\\n  features: {\\n    analytics: true, // Optional - defaults to your Cloud configuration\\n  },\\n  themeMode: 'light'\\n})\\n\\nfunction ContextProvider({ children, cookies }: { children: ReactNode; cookies: string | null }) {\\n  const initialState = cookieToInitialState(wagmiAdapter.wagmiConfig as Config, cookies)\\n\\n  return (\\n    <WagmiProvider config={wagmiAdapter.wagmiConfig as Config} initialState={initialState}>\\n      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\\n    </WagmiProvider>\\n  )\\n}\\n\\nexport default ContextProvider\\n```\\n\\nLet’s understand what is happening in the above code:\\n\\nFirst, we import the necessary functions from their respective packages. After this, we need to create the modal component for our app.\\n\\n*   **metadata** - This object contains information about our application that will be used by AppKit. This includes the name of the app, th",
    "e description, the url and the icons representing our app. **This is optional.**\\n    \\n*   `createAppKit` - this is called to initialize the AppKit component, which handles the user interface for connecting to blockchain wallets. The function is configured with various options, such as the app's metadata, theming, and enabling features like analytics and onramp services.\\n    \\n*   **networks -** these are the networks that we want our app to support. So import the chains you want your app to support from `@reown/appkit/network` and assign it to this network parameter. Since we want to enable wallet interactions on the Mantle network, we import both Mantle Mainnet and the Sepolia testnet. You can view the complete list of supported chains [here](https://wagmi.sh/core/api/chains).\\n    \\n*   **WagmiProvider**: Provides blockchain and wallet connection context to the app.\\n    \\n*   **QueryClientProvider**: Provides the React Query context for managing server-state data.\\n    \\n\\nNow, l",
    "et’s create the layout for our app. In `app/layout.tsx`, remove the existing code and paste the code snippet given below.\\n\\n```\\nimport type { Metadata } from \\\"next\\\";\\nimport { Inter } from \\\"next/font/google\\\";\\nimport \\\"./globals.css\\\";\\n\\nconst inter = Inter({ subsets: [\\\"latin\\\"] });\\n\\nimport { headers } from \\\"next/headers\\\"; // added\\nimport ContextProvider from '@/context'\\n\\nexport const metadata: Metadata = {\\n  title: \\\"AppKit Example App\\\",\\n  description: \\\"Powered by Reown\\\"\\n};\\n\\nexport default function RootLayout({\\n  children\\n}: Readonly<{\\n  children: React.ReactNode\\n}>) {\\n  const cookies = headers().get('cookie')\\n\\n  return (\\n    <html lang=\\\"en\\\">\\n      <body className={inter.className}>\\n        <ContextProvider cookies={cookies}>{children}</ContextProvider>\\n      </body>\\n    </html>\\n  )\\n}\\n```\\n\\n#### \\n\\nCreate the UI for your app\\n\\nFor our app to have the UI with which your users can interact, you need to set a simple UI and configure the modal. S",
    "ince, we have already set up AppKit, you can use <w3m-button> which will serve as a “Connect Wallet” button or you can build your own custom button using the [hooks](https://docs.walletconnect.com/appkit/next/core/hooks) that AppKit provides.\\n\\nOpen the app/page.tsx file and remove the existing boilerplate code, and then replace it with the code snippet given below.\\n\\n```\\n\\\"use client\\\";\\nimport { useAccount } from \\\"wagmi\\\";\\n\\nexport default function Home() {\\n  const { isConnected } = useAccount();\\n\\n  return (\\n    <main className=\\\"min-h-screen px-8 py-0 pb-12 flex-1 flex flex-col items-center\\\">\\n      <header className=\\\"w-full py-4 flex justify-between items-center\\\">\\n        <div className=\\\"flex items-center\\\">\\n          <img src=\\\"/walletconnect.png\\\" alt=\\\"logo\\\" className=\\\"w-10 h-10 mr-2\\\" />\\n          <div className=\\\"hidden sm:inline text-xl font-bold\\\">Reown - AppKit + Mantle</div>\\n        </div>\\n      </header>\\n      <h2 className=\\\"my-8 text-2xl font-bold l",
    "eading-snug text-center\\\">Examples</h2>\\n      <div className=\\\"max-w-4xl\\\">\\n        <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\">\\n          <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Connect your wallet</h3>\\n          <div className=\\\"flex justify-center items-center p-4\\\">\\n          <w3m-button />\\n          </div>\\n        </div> \\n        <br></br>\\n        {isConnected && (\\n          <div className=\\\"grid bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm\\\">\\n            <h3 className=\\\"text-sm font-semibold bg-gray-100 p-2 text-center\\\">Network selection button</h3>\\n            <div className=\\\"flex justify-center items-center p-4\\\">\\n              <w3m-network-button />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    </main>\\n  );\\n}\\n```\\n\\nThe code above uses the AppKit configuration to provide two buttons: one for users to connect their wallet to the app, and ",
    "another to allow users to switch networks.\\n\\nYou can now run the app and test it out. In order to do so, run the command given below.\\n\\n### \\n\\nConclusion\\n\\nAnd that’s it! You have now learned how to create a simple app using AppKit that allows users to connect their wallet and interact with the Mantle network.\\n\\n**Reown AppKit** is a powerful solution for developers looking to integrate wallet connections and other Web3 functionalities into their apps on any EVM chain. In just a few simple steps, you can provide your users with seamless wallet access, one-click authentication, social logins, and notifications—streamlining their experience while enabling advanced features like on-ramp functionality and smart accounts. By following this guide, you'll quickly get up and running with Reown’s AppKit, enhancing your app’s user experience and interaction with blockchain technology.\\n\\nYou can view the complete code repository [here](https://github.com/rohit-710/reown-appkit-evm).\",\n  \"de",
    "bug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates\",\n    \"loadedTime\": \"2025-02-15T20:32:12.871Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates\",\n    \"title\": \"Network Updates | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Updates | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/ct6TaYJUUnKuLLjxri4j\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:12 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer",
    "-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzkwZDAyOTctODk5Zi00MWY0LThhZDgtOGM3NDQyMWRiMWNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysella",
    "ds.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=a5%2Fxu7n2A2NEIxQ9of3uiTwY5MlYcAbKaLYta19jQAuntu2TmCKUanNIzAOXBYkWA%2BQ3NqVpI3jM4vieI%2FLdjs%2FEVLEHvqxFIV6Y6k7VWk%2F6AEd%2Bzhn8%2FrBr9TxX51%2F8K%2Fi5gRnv2XOSP9F1BZPN\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n     ",
    " \"cf-ray\": \"912810de7f93a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Updates | Network\\nChangelogs\\nPreviousDeploying a Sepolia Rollup Verifier/Replica Node From DockerNextChangelogs\\nWas this helpful?\",\n  \"markdown\": \"# Network Updates | Network\\n\\n[Changelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs)\\n\\n[PreviousDeploying a Sepolia Rollup Verifier/Replica Node From Docker](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker)[NextChangelogs](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs)\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs\",\n    \"loadedT",
    "ime\": \"2025-02-15T20:32:12.975Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs\",\n    \"title\": \"Changelogs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Changelogs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/A8MNSMFgtwxUehdjFthB\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:12 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security",
    "\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTM2MjQ0YzMtNTdlOC00NjhkLTg1YTUtNjE5YzM3MDRkN2I3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitb",
    "ook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=3rl2%2Brk3FsqoB4HLjOEsmZXuZ0TF58Sxgx2c9xA70fIMkPSujBwv9vAX7tYA%2FUye14txybvFTacoXme5f91Q2rnpjPIcf6DpVZ3xDte8hd7DjsV%2Bn2LMAOKbm%2F6jy0D7HafmgxT9a4ekgAXrc88Z\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810deddf3c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Changelogs | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Ch",
    "angelogs | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-node",
    "-operators/network-updates/changelogs?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management/fraud-proof\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/fraud-proof\",\n    \"loadedTime\": \"2025-02-15T20:32:13.797Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/fraud-proof\",\n    \"title\": \"Fraud Proof | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n ",
    "     {\n        \"property\": \"og:title\",\n        \"content\": \"Fraud Proof | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/RVVT3c0d8aACEZaPzaX5\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:13 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MTQ0NTZjY2QtM2Q5ZS00OTQzLWE2MjktMTY1OGRlZmE0M2I3' 'strict-dynamic' 'un",
    "safe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=5Kc21bV2AKSAwm80Tsp4zSMNaHotUUG0ktDQenaVsrLwhMdDKDQncxbatXSijOzHR%2BDg3sU1UzR81W6fplImElZbrgJcqw3A1pjX",
    "A%2BU4qa%2FOVvape1X41nF18HAkyJFGj%2BrSywsyG46a3ozTuKZI\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810e3fb1e9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fraud Proof | Network\\nOptimistic rollups assume the validity of all layer-2 (L2) transaction state transitions unless proven otherwise. As a result, they are also referred to as assertions, as their validity is not predetermined. The verification logic relies on evidence of invalid state transitions to initiate the validation process, with fraud proofs serving as the medium to provide such evidence. The protocol allows for a dispute window during which network participants can come forward to submit fraud",
    " proofs disputing states they believe to be incorrect. For most Optimistic rollup protocols, this challenge period typically lasts around 7 days. By default, any transactions without disputes within this timeframe are considered valid.\\nTypes of Fraud Proofs​\\nFraud proofs can be categorized into two distinct types: non-interactive and interactive.\\nNon-Interactive Fraud Proofs​\\nNon-interactive fraud proofs use a method where no other parties are needed to prove the incorrectness of an assertion. They basically run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\nInteractive Fraud Proofs​\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem t",
    "o verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back-and-forth introduces a new level of complexity in the protocol, and it can be harder to design safely. But it has the advantage of not placing any limitations on L1, due to a much smaller volume of actual on-chain execution.\\nFraud Proofs on Mantle Network​\\nWhat is Cannon?​\\nCannon, developed by Optimism, is an on-chain MIPS instruction simulator. It facilitates EVM-equivalent fault proofs as part of an interactive dispute by employing op-geth to execute on-chain instructions one at a time. This process involves on-chain contracts paired with an off-chain simulator.\\nWhy do we need this in Mantle?​\\nIn popular fraud-proof models currently, the contracts responsible for resolving disputes",
    " — on-chain validators — can only execute instructions in lower-level virtual machines like MIPS or WASM. This compels the Ethereum Virtual Machine (EVM) client (e.g., op-geth) to recompile fraud proofs into a lower-level language (e.g., MIPs-opcode) for on-chain validators to interpret. Thus, Cannon implements an on-chain contract to simulate MIPs-opcode, enabling the verification of MIPs instructions' execution in the EVM environment. Simultaneously, it implements an off-chain simulator to generate proofs for any MIPS instruction, completing on-chain verification.\\nMantle network will use the fraud proof model implemented by Cannon. You can learn more here.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Fraud Proof | Network\\n\\nOptimistic rollups assume the validity of all layer-2 (L2) transaction state transitions unless proven otherwise. As a result, they are also referred to as assertions, as their validity is not predetermined. The verification logic relies on evidence of invalid ",
    "state transitions to initiate the validation process, with fraud proofs serving as the medium to provide such evidence. The protocol allows for a dispute window during which network participants can come forward to submit fraud proofs disputing states they believe to be incorrect. For most [Optimistic rollup](https://docs.mantle.xyz/network/more/glossary#optimistic-rollup) protocols, this challenge period typically lasts around 7 days. By default, any transactions without disputes within this timeframe are considered valid.\\n\\n## \\n\\nTypes of Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#types-of-fraud-proofs)\\n\\nFraud proofs can be categorized into two distinct types: **non-interactive** and **interactive**.\\n\\n### \\n\\nNon-Interactive Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#non-interactive-fraud-proofs)\\n\\nNon-interactive fraud proofs use a method where no other parties are needed to prove the incorrectness of an assertion. They basica",
    "lly run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\n\\n### \\n\\nInteractive Fraud Proofs[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#interactive-fraud-proofs)\\n\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem to verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back-and-forth introduces a new level of complexity in the protocol, and it can be harder to design safely. But it has the a",
    "dvantage of not placing any limitations on L1, due to a much smaller volume of actual on-chain execution.\\n\\n## \\n\\nFraud Proofs on Mantle Network[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#fraud-proofs-on-mantle-network)\\n\\n### \\n\\nWhat is Cannon?[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#what-is-cannon)\\n\\nCannon, developed by Optimism, is an on-chain MIPS instruction simulator. It facilitates EVM-equivalent fault proofs as part of an interactive dispute by employing [`op-geth`](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#op-geth) to execute on-chain instructions one at a time. This process involves on-chain contracts paired with an off-chain simulator.\\n\\n### \\n\\nWhy do we need this in Mantle?[​](https://docs-v2.mantle.xyz/intro/risk-management/fp#why-do-we-need-this-in-mantle)\\n\\nIn popular fraud-proof models currently, the contracts responsible for resolving disputes — on-chain validators — can only execute instruc",
    "tions in lower-level virtual machines like [MIPS](https://docs.mantle.xyz/network/more/glossary#mips) or [WASM](https://docs.mantle.xyz/network/more/glossary#wasm). This compels the Ethereum Virtual Machine (EVM) client (e.g., `op-geth`) to recompile fraud proofs into a lower-level language (e.g., MIPs-opcode) for on-chain validators to interpret. Thus, Cannon implements an on-chain contract to simulate MIPs-opcode, enabling the verification of MIPs instructions' execution in the EVM environment. Simultaneously, it implements an off-chain simulator to generate proofs for any MIPS instruction, completing on-chain verification.\\n\\nMantle network will use the fraud proof model implemented by Cannon. You can learn more [here](https://github.com/ethereum-optimism/optimism/blob/develop/cannon/docs/README.md).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wall",
    "et\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wallet\",\n    \"loadedTime\": \"2025-02-15T20:32:13.158Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/resources-and-tooling/wallet/multisig-wallet\",\n    \"title\": \"Multisig Wallet | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Multisig Wallet | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/FJY23acYPPm3cN3D9HoA\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:12 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-s",
    "tatus\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDZlNWVlYmQtY2Y1Ny00ZjNlLTkyY2EtYjg1ZDc1MTVmNTEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src '",
    "self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=8w99nOTFTCFxWQCOyVO4gAPkf%2BI0pRh2eoYL4JMMsVeuiQzlTSxFBIri1dnUI3E8muW8Xenia2Y4B%2BQhVHGbV6XmtqCoA4d08aNh9crIcnKPU7vS7zQVq%2FbpkaalUwMdlOaM1EWZIhyJRavMNGvd\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810df1d4d9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screen",
    "shotUrl\": null,\n  \"text\": \"Multisig Wallet | Network\\nSafe{Wallet}​\\nSafe{Wallet} is the most trusted decentralized custody protocol and collective asset management platform.\\nWhat's new\\nMantle use several Safe services to support the multisig wallet, this is the changelog for these services:\\nSafe UI [1.36.4]\\nchangelogs\\nCritical Updates\\nImproved handling of pending transactions.\\nDisabled execute button.\\nAdded speed-up options.\\nRedesigned approval editor.\\nAdded ENS resolution for Safe addresses in the sidebar.\\nNew Features and Functionalities\\nDisplay balances in Safe list.\\nAdded activity app banner on dashboard.\\nIntroduced speed-up pending transactions feature toggle.\\nDisplayed deprecation banner for social logins on all pages.\\nEnabled transaction deletion with UI updates.\\nAutomatic approval for verified WalletConnect sessions.\\nApps\\nAdded Token Approval Manager, which allows you to keep track of safe ERC20 token approvals and control them (edit/revoke) in batched trans",
    "actions.\\nFixes and Improvements\\nAlways fetch message information when signing.\\nCorrected fee tooltip text.\\nSet default owner and improved counterfactual transactions when creating a Safe.\\nVarious UI fixes: dark mode, button overlaps, transaction status indicators.\\nSafe transaction service [v5.0.0]\\nchanglogs\\nCritical Updates:\\nRemoved deprecated endpoints (e.g., balances/usd).\\nEnhanced UserOperation:\\nRemoved POST method.\\nAdded safeOperation model.\\nNew endpoint for UserOperations with indexing for failed/reverted ones.\\nValidations for init_code, nonce, valid_after, and valid_until.\\nImproved decoding error handling and transaction hash logging.\\nNew Features and Functionalities:\\nIntegrated Swagger tags for better API documentation.\\nAdded endpoint for safe deployments.\\nRefactored delegate endpoint signatures to use EIP712.\\nProcessed ENS names in token list address fields.\\nMinor Updates and Dependency Changes\\nSafe Config Service [v2.80.0]\\nchanglogs\\nCritical Updates:\\nR",
    "enamed SafeApp visible field to listed.\\nAdded prices provider configuration.\\nNew Features and Functionalities:\\nIntroduced optional \\\"onlyListed\\\" query param for SafeApps filtering.\\nMinor Updates and Dependency Updates\\nSafe Event Service [v0.12.0]\\nchanglogs\\nCritical Updates:\\nUpdated to Node.js v20.\\nRolled back TypeORM to v0.3.19.\\nNew Features and Functionalities:\\nAdded JSON format for event logs.\\nIntroduced asynchronous datasource creation.\\nMinor Updates and Dependency Updates\\nLast updated 3 months ago\",\n  \"markdown\": \"# Multisig Wallet | Network\\n\\n## \\n\\nSafe{Wallet}[​](https://docs-v2.mantle.xyz/devs/dev-guides/tools/wallet/multisig#safewallet)\\n\\n[Safe{Wallet}](https://multisig.mantle.xyz/) is the most trusted decentralized custody protocol and collective asset management platform.\\n\\n`What's new`[](#whats-new)\\n\\nMantle use several Safe services to support the multisig wallet, this is the changelog for these services:\\n\\n*   **Safe UI \\\\[1.36.4\\\\]**\\n    \\n    *   ch",
    "angelogs\\n        \\n        *   Critical Updates\\n            \\n            *   Improved handling of pending transactions.\\n                \\n            *   Disabled execute button.\\n                \\n            *   Added speed-up options.\\n                \\n            *   Redesigned approval editor.\\n                \\n            *   Added ENS resolution for Safe addresses in the sidebar.\\n                \\n            \\n        *   New Features and Functionalities\\n            \\n            *   Display balances in Safe list.\\n                \\n            *   Added activity app banner on dashboard.\\n                \\n            *   Introduced speed-up pending transactions feature toggle.\\n                \\n            *   Displayed deprecation banner for social logins on all pages.\\n                \\n            *   Enabled transaction deletion with UI updates.\\n                \\n            *   Automatic approval for verified WalletConnect sessions.\\n                \\n          ",
    "  \\n        *   Apps\\n            \\n            *   Added Token Approval Manager, which allows you to keep track of safe ERC20 token approvals and control them (edit/revoke) in batched transactions.\\n                \\n            \\n        *   Fixes and Improvements\\n            \\n            *   Always fetch message information when signing.\\n                \\n            *   Corrected fee tooltip text.\\n                \\n            *   Set default owner and improved counterfactual transactions when creating a Safe.\\n                \\n            *   Various UI fixes: dark mode, button overlaps, transaction status indicators.\\n                \\n            \\n        \\n    \\n\\n*   **Safe transaction service \\\\[v5.0.0\\\\]**\\n    \\n    *   **changlogs**\\n        \\n        *   Critical Updates:\\n            \\n            *   Removed deprecated endpoints (e.g., balances/usd).\\n                \\n            *   Enhanced UserOperation:\\n                \\n                *   Removed POST meth",
    "od.\\n                    \\n                *   Added safeOperation model.\\n                    \\n                *   New endpoint for UserOperations with indexing for failed/reverted ones.\\n                    \\n                *   Validations for init\\\\_code, nonce, valid\\\\_after, and valid\\\\_until.\\n                    \\n                *   Improved decoding error handling and transaction hash logging.\\n                    \\n                \\n            \\n        *   New Features and Functionalities:\\n            \\n            *   Integrated Swagger tags for better API documentation.\\n                \\n            *   Added endpoint for safe deployments.\\n                \\n            *   Refactored delegate endpoint signatures to use EIP712.\\n                \\n            *   Processed ENS names in token list address fields.\\n                \\n            \\n        *   Minor Updates and Dependency Changes\\n            \\n        \\n    \\n\\n*   **Safe Config Service \\\\[v2.80.0\\\\]**\\n ",
    "   \\n    *   **changlogs**\\n        \\n        *   Critical Updates:\\n            \\n            *   Renamed SafeApp visible field to listed.\\n                \\n            *   Added prices provider configuration.\\n                \\n            *   New Features and Functionalities:\\n                \\n            *   Introduced optional \\\"onlyListed\\\" query param for SafeApps filtering.\\n                \\n            \\n        *   Minor Updates and Dependency Updates\\n            \\n        \\n    \\n\\n*   **Safe Event Service \\\\[v0.12.0\\\\]**\\n    \\n    *   **changlogs**\\n        \\n        *   Critical Updates:\\n            \\n            *   Updated to Node.js v20.\\n                \\n            *   Rolled back TypeORM to v0.3.19.\\n                \\n            *   New Features and Functionalities:\\n                \\n            *   Added JSON format for event logs.\\n                \\n            *   Introduced asynchronous datasource creation.\\n                \\n            \\n        *   Mi",
    "nor Updates and Dependency Updates\\n            \\n        \\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.1.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.1.0\",\n    \"loadedTime\": \"2025-02-15T20:32:14.368Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.1.0\",\n    \"title\": \"Mantle v2 v1.1.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v1.1.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage",
    "/o4qGoOsccLCGuC7bOI59\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:14 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YmEwM2E1OTktMGNlOC00ZTVlLTgwYjctNzQwZjU5Y2NiNDlm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src",
    " * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=QGJe6iXtjQjZYj1%2F0dN1EcWhTtdJTxgV9UbrXluUXEtXOS8U6Y71XdvHBUBfccvhQBFmeCHvSQMlXg1O6q2aLQQ7zNYvdEL9CWdwf4Jm4FedI4kMCFYCGmDEl%2BuJ4j%2BLOWs9KLof4ckCWbYQ%2Fsei\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": ",
    "\"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810e818459c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.1.0 | Network\\nMantle v2​\\nThis release has optimized the way in which the Mantle network accesses EigenDA. We have introduced the EigenDA Proxy component, developed by the EigenDA team. Furthermore, we have enabled S3 and Redis caching for the internally deployed EigenDA Proxy, thereby enhancing the stability of the Mantle network. Additionally, we have changed the maximum size of the submitted EigenDA blob from 2MB to 4MB.\\nChange the maximum size of the submitted EigenDA blob from 2MB to 4MB (#184)\\nEigenDA Proxy integration (#185)\\nop-geth​\\nThis version includes several bug fixes and functional enhancements, implements secp256r1 signature verification to enhance wallet UX (FaceID / T",
    "ouchID) , and deprecates the MetaTransaction feature. EIP-7702 will be integrated as a replacement for MetaTransaction in the future.\\nAdded the new JSON-RPC interface eth_getBlockReceipts (#91)\\nFixed the gas validation bug in txpool (#92)\\nAdded support for RIP-7212 secp256r1 signature verification in precompiled contracts (#93)\\nDeprecated the MetaTransaction feature (#95)\\nThe implementation refers to RIP 7212 spec and the secp256r1 algorithm does not perform malleability checks in the precompiled contract. Wrapper libraries SHOULD add a malleability check by default.\",\n  \"markdown\": \"# Mantle v2 v1.1.0 | Network\\n\\n## \\n\\nMantle v2[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#mantle-v2)\\n\\nThis release has optimized the way in which the Mantle network accesses EigenDA. We have introduced the `EigenDA Proxy` component, developed by the EigenDA team. Furthermore, we have enabled S3 and Redis caching for the internally deployed `EigenDA Proxy`, thereby enhancing the stabilit",
    "y of the Mantle network. Additionally, we have changed the maximum size of the submitted EigenDA blob from 2MB to 4MB.\\n\\n*   Change the maximum size of the submitted EigenDA blob from 2MB to 4MB ([#184](https://github.com/mantlenetworkio/mantle-v2/pull/184))\\n    \\n*   `EigenDA Proxy` integration ([#185](https://github.com/mantlenetworkio/mantle-v2/pull/185))\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#op-geth)\\n\\nThis version includes several bug fixes and functional enhancements, implements secp256r1 signature verification to enhance wallet UX (FaceID / TouchID) , and deprecates the `MetaTransaction` feature. EIP-7702 will be integrated as a replacement for `MetaTransaction` in the future.\\n\\n*   Added the new JSON-RPC interface `eth_getBlockReceipts` ([#91](https://github.com/mantlenetworkio/op-geth/pull/91))\\n    \\n*   Fixed the gas validation bug in txpool ([#92](https://github.com/mantlenetworkio/op-geth/pull/92))\\n    \\n*   Added support for RI",
    "P-7212 secp256r1 signature verification in precompiled contracts ([#93](https://github.com/mantlenetworkio/op-geth/pull/93))\\n    \\n*   Deprecated the `MetaTransaction` feature ([#95](https://github.com/mantlenetworkio/op-geth/pull/95))\\n    \\n\\nThe implementation refers to RIP 7212 spec and the secp256r1 algorithm does not perform malleability checks in the precompiled contract. Wrapper libraries **SHOULD** add a malleability check by default.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides\",\n    \"loadedTime\": \"2025-02-15T20:32:15.620Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides\",\n    \"title\": \"How-to Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n",
    "    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How-to Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/4qhHOIORsSIErfPeJAi0\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:15 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NmQ5MjNlZWYtZjA1OS00YT",
    "VmLTg2NDQtNzdmZjg2ZmE2MmY3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=tft%2FAprMdEsKNma95TYpPhMSIki45vv3WW0aE8MK6XcMh1nJh4Yb",
    "%2FE7hGzHsrIlwwEwYv88bKH15suy0YwLFdkrYfFsGEhDXVn7qy9fiChWYyQcOTFz5u6SFBaSaBWNwxWl3hAdr8%2BwGRYizlYa0\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810f009a69c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How-to Guides | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# How-to Guides | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8",
    "d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/how-to-guides?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/how-to-guides?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"",
    "debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker\",\n    \"loadedTime\": \"2025-02-15T20:32:13.271Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker\",\n    \"title\": \"Deploying a Sepolia Rollup Verifier/Replica Node From Docker | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Sepolia Rol",
    "lup Verifier/Replica Node From Docker | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/6o75ExO2iaCJ3E29WMCr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:11 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NjgxOTE0ZjEtMzBiZS00NzRkLWFlYWYtNjk5Y2MwNDIwMDgx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.",
    "googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=qDk7ZF234IarTVQU1oGakvTWJ7QtEqCV%2FjGnzct%2BNVhsCRp1x4OyGAVT%2FPC7kS0%2BNdYs9hIPwL2pSH1swH%2FynWtmhrJ%2FVOMa1VrvNy4c7q9%2BKfxW2oB%2BWX5Bz5U1cFsfQ0XgXeJ4HKswuFbOn2zP\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n   ",
    "   \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810d6a9ef4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Sepolia Rollup Verifier/Replica Node From Docker\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\nThis doc is a simple introduction to the process. For more details, please refer to this:\\nFor those operators who have already deployed the Mantle Sepolia node, you can skip directly to this section.\\nFor Operators Who Deploy Nodes For the First Time​\\nPrerequisites​\\nEnsure you ",
    "have the following software installed:\\nHardware Recommendations​\\nFor optimal performance, it is recommended to have the following hardware specifications:\\nRAM - 16GB+\\nCPU - 8C+\\nStorage - 500GB+ disk(HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download speed\\nOperation Guide​\\nIf you are a new operator who wants to deploy a Mantle Sepolia node, please follow the steps provided here.\\nFor Operators Who Have Already Deployed Nodes​\\nOperation Guide​\\nIf you have previously deployed Mantle Sepolia nodes and need to complete this hardfork upgrade, you can follow the instructions here for more detailed information.\\nIf you meet some data issues in the process, please try to restore from snapshot. You can refer to this guide\",\n  \"markdown\": \"# Deploying a Sepolia Rollup Verifier/Replica Node From Docker\\n\\nTo build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own dep",
    "ending on the requirements for your specific use cases.\\n\\n*   **This doc is a simple introduction to the process.** For more details, please refer to this:\\n    \\n*   For those operators who have already deployed the Mantle Sepolia node, you can skip directly to this [section](https://docs.mantle.xyz/network/for-node-operators/deployment-guides/testnet-v1.1.0/deploying-a-sepolia-rollup-verifier-replica-node-from-docker#for-operators-who-have-already-deployed-nodes).\\n    \\n\\n## \\n\\nFor Operators Who Deploy Nodes For the First Time[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#for-operators-who-deploy-nodes-for-the-first-time)\\n\\n### \\n\\nPrerequisites[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#prerequisites)\\n\\nEnsure you have the following software installed:\\n\\n### \\n\\nHardware Recommendations[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#hardware-recommendations)\\n\\nFor optimal performance, it is recommended to have the following hardware specifications:\\n\\n*",
    "   **RAM** - 16GB+\\n    \\n*   **CPU** - 8C+\\n    \\n*   **Storage** - 500GB+ disk(HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download speed\\n    \\n\\n### \\n\\nOperation Guide[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#operation-guide)\\n\\nIf you are a new operator who wants to deploy a Mantle Sepolia node, please follow the steps provided [**here**](https://github.com/mantlenetworkio/networks/blob/main/run-node-sepolia.md#installation-and-setup-instructions-for-new-user).\\n\\n## \\n\\nFor Operators Who Have Already Deployed Nodes[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#for-operators-who-have-already-deployed-nodes)\\n\\n### \\n\\nOperation Guide[​](https://docs-v2.mantle.xyz/nodes/verifier-sepolia#operation-guide-1)\\n\\nIf you have previously deployed Mantle Sepolia nodes and need to complete this hardfork upgrade, you can follow the instructions [**here**](https://github.com/mantlenetworkio/networks/blob/main/run-node-sepolia.md#2025-01-16-upgrade-",
    "for-historical-user) for more detailed information.\\n\\nIf you meet some data issues in the process, please try to restore from snapshot. You can refer to this [guide](https://github.com/mantlenetworkio/networks/blob/main/run-node-sepolia.md#restore-from-snapshot)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.1\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.1\",\n    \"loadedTime\": \"2025-02-15T20:32:16.825Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.1\",\n    \"title\": \"Mantle v2 v1.0.1 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:",
    "title\",\n        \"content\": \"Mantle v2 v1.0.1 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/C117dAtNBsGjBdtYidAN\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZjU1OTNiMDMtOWY4MS00YjNiLWFlODUtZDBiNmM4MDg2MTQ0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval'",
    " https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=f9z8T%2F3Z49J5acjc3JOHNOhtLkLu3ALXa2crQudrlh%2FTiFMzj1ieQvBbpmBeLn3Tq7LQdrSFj2IXpEcysU9yHu8r%2FLUvYPRDUnX9K7eGH3cYPNKI0wzUJKw2cy",
    "82DlciCYIt9zWHSh0ThXxWGPFo\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810f739d29c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.0.1 | Network\\nThis is a Hardfork Upgrade on Mantle Sepolia Testnet. Sepolia node operators must upgrade; otherwise, nodes will be unusable.\\nMantle v1.0.1 is an upgrade for Mantle DA, transitioning from Mantle DA to EigenDA, and includes several functional optimizations, primarily:\\nMantle v2​\\nMantle Sepolia testnet DA layer switches from Mantle DA to EigenDA #163\\nop-geth​\\nOptimizing Meta Transaction, including gasFee estimation, charging logic, adding Meta Transaction security checks; improving estimateGas. #83\\nLas",
    "t updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v1.0.1 | Network\\n\\nThis is a Hardfork Upgrade on Mantle Sepolia Testnet. Sepolia node operators must upgrade; otherwise, nodes will be unusable.\\n\\nMantle v1.0.1 is an upgrade for Mantle DA, transitioning from Mantle DA to EigenDA, and includes several functional optimizations, primarily:\\n\\n## \\n\\nMantle v2[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.1#mantle-v2)\\n\\n*   Mantle Sepolia testnet DA layer switches from Mantle DA to EigenDA [#163](https://github.com/mantlenetworkio/mantle-v2/pull/163/files)\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.1#op-geth)\\n\\n*   Optimizing Meta Transaction, including gasFee estimation, charging logic, adding Meta Transaction security checks; improving estimateGas. [#83](https://github.com/mantlenetworkio/op-geth/pull/83/files)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/",
    "for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2\",\n    \"loadedTime\": \"2025-02-15T20:32:16.876Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.2\",\n    \"title\": \"Mantle v2 v1.0.2 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v1.0.2 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/FYHMgXhh0Rf2s7j9WgqV\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:16 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encod",
    "ing\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWE3ZGIyMDUtYzZmNy00ZjkxLThhNzUtNmFlNDU4ZGYwMTVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com",
    " https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=MaiG6CMQPnfk%2BSac0z9isDLg3GgcXs07NDMoKRQhVrhzj0dKVCOS2RrwseZ6zNWEF8q4iWrxqmb1zo9Wk3OPiZ%2BMrWGJthw11ikDPtMiyNOcILQyfojUV0wgWIS2Suh4KIpz%2FncejDsyvgX09KxJ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810",
    "f73c14c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.0.2 | Network\\nMantle v1.0.2 is an update for optimizations of the OP-Batcher module, also with some bug fixed.\\nMantle v2​\\nOptimizes the logic of OP-Batcher DA submission. #179\\nOptimized the logic related to the submission of EigenDA.\\nAdded the ability to switch between EigenDA and Ethereum Blob based on configuration.\\nAdded verification for the commitment returned by EigenDA.\\nop-geth​\\nFix the issue where the txpool balance verification was inaccurate, leading to the full amount transfer being mistakenly judged as insufficient balance. #90\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v1.0.2 | Network\\n\\nMantle v1.0.2 is an update for optimizations of the OP-Batcher module, also with some bug fixed.\\n\\n## \\n\\nMantle v2[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#mantle-v2)\\n\\n*   Optimizes the logic of OP-Batcher DA submission. [#179](https://github.com",
    "/mantlenetworkio/mantle-v2/pull/179)\\n    \\n    *   Optimized the logic related to the submission of EigenDA.\\n        \\n    *   Added the ability to switch between EigenDA and Ethereum Blob based on configuration.\\n        \\n    *   Added verification for the commitment returned by EigenDA.\\n        \\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.2#op-geth)\\n\\n*   Fix the issue where the txpool balance verification was inaccurate, leading to the full amount transfer being mistakenly judged as insufficient balance. [#90](https://github.com/mantlenetworkio/op-geth/pull/90)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/system-information/risk-management/data-availability\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/data-availability\",\n    \"loadedTime\": \"2025-02-15T20:32:14.483Z\",\n    \"referrerUrl\": \"https://docs.mantle",
    ".xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/system-information/risk-management/data-availability\",\n    \"title\": \"Data Availability | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Data Availability | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/fQjYeNdTfCOF2aI5VGjW\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:13 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-E",
    "ncoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2MxMWVhMmItZDFiYy00ZjA3LTk5NTItYTQxN2ViYjZmNTRl' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-",
    "referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=EjpO8S4jfa2jn2DQTj9PuE17wTICHnoDykYAPvYgHK0YWms1KHyDQd1GJ2hDsJubwfTzfldZi4rvs4s0lt%2FyVMhYIJaFLqy%2BbP3NWg6MkR8Q4ScGDh0ryoZfpdjGg92lSLHRRWYmmvAEzXFx89sr\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810e328f84ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Data Availability | Network\\nWhat Is Data Availability?​\\nData Availability (DA) in Mantle network refers to the ability of any node to access the transaction history published by the sequencer. Access t",
    "o block data by all network participants is a critical scalability issue, particularly in the context of blockchain running on a rollup architecture. As a Rollup inherits security from its layer 1 (L1) and publishes transaction data on L1, the sequencer plays a vital role in making transaction data available and trustworthy. DA is essential to maintain the liveness of the chain and capture invalid transactions, eliminating the possibility of block data being maliciously withheld.\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding here.\\nHow to Retain Data Availability?​\\nEnsuring data availability is a significant challenge in the blockchain industry, and there are lots of teams employing various innovative solutions to address it:\\n1. On-Chain L1 Approaches:​\\nEnsures data availability by making all data required for constructing proofs accessible",
    " on L1. While providing the highest level of trust, this may come with higher costs and relatively slower data retrieval.\\n2. Centralized DA Committees:​\\nUtilizes centralized DA committees responsible for providing the necessary data. This approach significantly reduces rollup costs compared to on-chain L1 methods but introduces the potential risk of data unavailability.\\n3. DA Sampling:​\\nDA Sampling is a way to enable light nodes to verify data availability without downloading the full block data. This mechanism involves light nodes randomly sampling a small portion of block data in multiple rounds, increasing confidence in data availability. Once the light node reaches a predetermined confidence level (e.g., 99%), it considers the block data available.\\n4. Independent DA Modules:​\\nInnovative approaches include independent DA modules, such as Mantle DA supported by EigenLayer's EigenDA technology. This method achieves data availability through a game theory of DA economics involvin",
    "g rewards and stake slashing. According to internal assessments, this solution can save more than 90% of costs compared to on-chain L1 methods, providing efficient data availability with economic incentives.\\nMantle DA - Powered by EigenDA Technology​\\nWhat is EigenLayer?​\\nEigenLayer is a re-staking protocol that leverages the existing trust network of Ethereum, allowing any rollup-based L2 to ensure data availability for its execution layer while maintaining the same level of security as the Ethereum mainnet. This is achieved through the re-staking mechanism, where L1 validators can choose to provide data availability services, using their staked ETH as collateral and complying with additional performance conditions.\\nThink of it as middleware for Ethereum.\\nSimilar to how Optimistic rollups use economic incentives to maintain system integrity, this mechanism provides incentives for Ethereum validators to offer services for additional income opportunities. Read more on EigenLayer her",
    "e.\\nWhat is Mantle DA?​\\nEigenDA, built by EigenLabs, is one of the core applications of EigenLayer, chosen as the technology that powers the data availability module in Mantle Network. The current Mantle DA version is supported by EigenDA technology and authorized by EigenLabs. Throughout development, the Mantle team has been closely collaborating with the EigenLayer team to explore this streamlined solution. Once the standardized solution of EigenDA is ready for mainnet launch, Mantle will migrate its DA component to EigenDA for more efficient data availability. Additionally, Mantle DA allows permissioned nodes to provide data availability services to Mantle network, requiring $MNT staking to ensure network security. For more details, refer here.\\nFor Mantle DA, rollup data is available here: State Roots on L1, Rollup Tx Data on L1, and DA Rollup Tx on L2.\\nSee the section on DA Nodes to find out more about how the different participating actors that are part of the Mantle DA module ",
    "function.\\nMantle DA Characteristics​\\nAllow decoupling of the data availability layer from the consensus layer\\nEmploy a unicast channel for data exchange between network participants to deliver efficiency gains both in terms of data transmission and storage\\nMaintain an erasure rate ensures pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\nThis approach will provide the required high throughput and low gas costs for the next generation of applications in blockchain gaming, decentralized social networks, and other fields.\\nMantle Explorer displays the transaction batch details for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Data Availability | Network\\n\\n## \\n\\nWhat Is Data Availability?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#what-is-data-availability)\\n\\nData Availability (DA) in Mantle network r",
    "efers to the ability of any node to access the transaction history published by the sequencer. Access to block data by all network participants is a critical scalability issue, particularly in the context of blockchain running on a rollup architecture. As a Rollup inherits security from its layer 1 (L1) and publishes transaction data on L1, the sequencer plays a vital role in making transaction data available and trustworthy. DA is essential to maintain the liveness of the chain and capture invalid transactions, eliminating the possibility of block data being maliciously withheld.\\n\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding [here](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding).\\n\\n## \\n\\nHow to Retain Data Availability?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#how-to-retain-data-avai",
    "lability)\\n\\nEnsuring data availability is a significant challenge in the blockchain industry, and there are lots of teams employing various innovative solutions to address it:\\n\\n### \\n\\n1\\\\. On-Chain L1 Approaches:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#1-on-chain-l1-approaches)\\n\\nEnsures data availability by making all data required for constructing proofs accessible on L1. While providing the highest level of trust, this may come with higher costs and relatively slower data retrieval.\\n\\n### \\n\\n2\\\\. Centralized DA Committees:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#2-centralized-da-committees)\\n\\nUtilizes centralized DA committees responsible for providing the necessary data. This approach significantly reduces rollup costs compared to on-chain L1 methods but introduces the potential risk of data unavailability.\\n\\n### \\n\\n3\\\\. DA Sampling:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#3-da-sampling)\\n\\nDA Sampling is a way to enable light ",
    "nodes to verify data availability without downloading the full block data. This mechanism involves light nodes randomly sampling a small portion of block data in multiple rounds, increasing confidence in data availability. Once the light node reaches a predetermined confidence level (e.g., 99%), it considers the block data available.\\n\\n### \\n\\n4\\\\. Independent DA Modules:[​](https://docs-v2.mantle.xyz/intro/risk-management/da#4-independent-da-modules)\\n\\nInnovative approaches include independent DA modules, such as Mantle DA supported by EigenLayer's EigenDA technology. This method achieves data availability through a game theory of DA economics involving rewards and stake slashing. According to internal assessments, this solution can save more than **90%** of costs compared to on-chain L1 methods, providing efficient data availability with economic incentives.\\n\\n## \\n\\nMantle DA - Powered by EigenDA Technology[​](https://docs-v2.mantle.xyz/intro/risk-management/da#mantle-da---powere",
    "d-by-eigenda-technology)\\n\\n### \\n\\nWhat is EigenLayer?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#what-is-eigenlayer)\\n\\nEigenLayer is a re-staking protocol that leverages the existing trust network of Ethereum, allowing any rollup-based L2 to ensure data availability for its execution layer while maintaining the same level of security as the Ethereum mainnet. This is achieved through the re-staking mechanism, where L1 validators can choose to provide data availability services, using their staked ETH as collateral and complying with additional performance conditions.\\n\\nThink of it as middleware for Ethereum.\\n\\nSimilar to how [Optimistic rollups](https://docs.mantle.xyz/network/more/glossary#optimistic-rollup) use economic incentives to maintain system integrity, this mechanism provides incentives for Ethereum validators to offer services for additional income opportunities. Read more on EigenLayer [here](https://ethresear.ch/t/an-eigenlayer-centric-roadmap-or-cancel-sha",
    "rding/14141#what-is-eigenlayer-1).\\n\\n### \\n\\nWhat is Mantle DA?[​](https://docs-v2.mantle.xyz/intro/risk-management/da#what-is-mantle-da)\\n\\nEigenDA, built by EigenLabs, is one of the core applications of EigenLayer, chosen as the technology that powers the data availability module in Mantle Network. The current Mantle DA version is supported by EigenDA technology and authorized by EigenLabs. Throughout development, the Mantle team has been closely collaborating with the EigenLayer team to explore this streamlined solution. Once the standardized solution of EigenDA is ready for mainnet launch, Mantle will migrate its DA component to EigenDA for more efficient data availability. Additionally, Mantle DA allows permissioned nodes to provide data availability services to Mantle network, requiring $MNT staking to ensure network security. For more details, refer [here](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da).\\n\\nFor Mantle DA, rollup data is available ",
    "here: [State Roots on L1](https://etherscan.io/address/0x89E9D387555AF0cDE22cb98833Bae40d640AD7fa), [Rollup Tx Data on L1](https://etherscan.io/address/0x291dc3819b863e19b0a9b9809F8025d2EB4aaE93), and [DA Rollup Tx on L2](https://mantlescan.xyz/batches).\\n\\nSee the [**section**](https://docs.mantle.xyz/network/system-information/off-chain-system/mantle-da/architecture#components) on [DA Nodes](https://docs.mantle.xyz/network/system-information/off-chain-system/node-introduction#da-nodes) to find out more about how the different participating actors that are part of the Mantle DA module function.\\n\\n### \\n\\nMantle DA Characteristics[​](https://docs-v2.mantle.xyz/intro/risk-management/da#mantle-da-characteristics)\\n\\n*   Allow decoupling of the data availability layer from the consensus layer\\n    \\n*   Employ a unicast channel for data exchange between network participants to deliver efficiency gains both in terms of data transmission and storage\\n    \\n*   Maintain an erasure rate ensu",
    "res pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\n    \\n\\nThis approach will provide the required high throughput and low gas costs for the next generation of applications in blockchain gaming, decentralized social networks, and other fields.\\n\\n**Mantle Explorer** displays the [transaction batch details](https://mantlescan.xyz/batches) for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:19.058Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n ",
    "   \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts\",\n    \"title\": \"How to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/MMaogjB242tKi1RYGWjZ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:17 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n   ",
    "   \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MDFjNTBkNDAtY2UwMy00MTI1LTgxNTMtZjhlNWVkZjI1MzM4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"",
    "endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=%2B7EaYDxLOpCa9HF7jHZoZrWHgGReWx%2FWGCFg95Qv%2B0iu%2FyXDftZvoqJisXLbf6516N3nMY2%2FWPdfSRdn6bTphemVwDMOKKbGKElzJDHE4UoPovIWvJKz5uCtkkhuQZqlyHIbOJw6Re00%2BxeIz5uk\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810faf9af4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Deploy Smart Contracts\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# How to Deploy Smart Contracts\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3",
    "174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/how-to-guides/how-to-deploy-smart-contracts?fallback=true)\\n\\n[Networ",
    "k](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:21.156Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts\",\n    \"title\": \"Use Hardhat to Deplo",
    "y Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Hardhat to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/0EdjwN8ydfUbog2iQHW8\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:17 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDJmNWI2OTAtOWZlOC00Y2Q2LTgy",
    "YzMtOGY4MGE0ZWQ5YjBh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=SYhPcQR9OH2esAAv2HC%2BBWcQYqwiv7FDOPywG%2FsUXZd5Mpgd%2FZ8Y",
    "x4rZ8YZKNsHpSDLI9g%2Bkub6g94Prexqqbl%2F73VX5l%2BUYN%2FVHFpg59uXsHaVn1yKuUWJHRUJOvnLC6xlUZ8bxQB2qq5zPc5C3\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912810f9bfce4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Hardhat to Deploy Smart Contracts\\nHardhat is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Fauce",
    "t page\\nCreate a project and configure​\\nBegin by creating a new Hardhat project and installing the necessary dependencies. In this tutorial, we will use the dotenv library to set up your wallet private key.\\nnpm install dotenv --save-dev\\nCreate a .env file and set your wallet private key inside it.\\ntouch .env echo \\\"ACCOUNT_PRIVATE_KEY=<your-wallet-private-key>\\\" >> .env\\nOnce the wallet private key is ready, configure the hardhat.config.ts file to include Mantle Network's settings.\\nimport { HardhatUserConfig } from \\\"hardhat/config\\\"; import '@nomicfoundation/hardhat-toolbox'; import * as dotenv from 'dotenv'; dotenv.config(); const config: HardhatUserConfig = { solidity: \\\"0.8.19\\\", // solidity version defaultNetwork: \\\"mantleSepolia\\\", // chosen by default when network isn't specified while running Hardhat networks: { mantle: { url: \\\"https://rpc.mantle.xyz\\\", //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"], }, mantleSepolia: { url: \\\"https://rpc.sepolia.mantle.xyz",
    "\\\", // Sepolia Testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"], }, }, }; export default config;\\nIn this configuration file, three networks are set up for deployment: Mantle Mainnet, and Mantle Sepolia Testnet (as default).\\nCompile and Deploy​\\nWith your contracts prepared in the \\\"Contracts\\\" directory within your Hardhat project, compile them using the following command.\\nSample Outputs\\nGenerating typings for: 1 artifacts in dir: typechain-types for target: ethers-v6 Successfully generated 6 typings! Compiled 1 Solidity file successfully (evm target: paris).\\nDeploy your contracts to a chosen network using the following command. You can omit the --network field to deploy on the default network specified in hardhat.config.ts (Mantle Sepolia Testnet in this tutorial).\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia\\nYou will receive a response confirming successful contract deployment, and the address (e.g., 0xDe33e86f2Da37E01e0e",
    "Cb870bd1CE91a71bB6bF4) is the deployed contract's address.\\nNow you can head over to Mantle blockchain explorer to check the contract details.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Use Hardhat to Deploy Smart Contracts\\n\\n[Hardhat](https://hardhat.org/hardhat-runner/docs/getting-started#overview) is a smart contract development environment that comes with tools that can be used to compile, debug, and deploy Solidity smart contracts and dApps on Ethereum and other EVM-compatible chains like Mantle Network.\\n\\n## \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/hardhat#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nCreate a project and configure[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/hardhat#create-a-project-and-configure)\\n\\n1.  Begin by [creating a new Hard",
    "hat project](https://hardhat.org/hardhat-runner/docs/guides/project-setup) and installing the necessary dependencies. In this tutorial, we will use the `dotenv` library to set up your wallet private key.\\n    \\n    ```\\n    npm install dotenv --save-dev\\n    ```\\n    \\n2.  Create a `.env` file and set your wallet private key inside it.\\n    \\n    ```\\n    touch .env\\n    echo \\\"ACCOUNT_PRIVATE_KEY=<your-wallet-private-key>\\\" >> .env\\n    ```\\n    \\n3.  Once the wallet private key is ready, configure the `hardhat.config.ts` file to include Mantle Network's settings.\\n    \\n    ```\\n    import { HardhatUserConfig } from \\\"hardhat/config\\\";\\n    import '@nomicfoundation/hardhat-toolbox';\\n    import * as dotenv from 'dotenv';\\n    \\n    dotenv.config();\\n    \\n    const config: HardhatUserConfig = {\\n        solidity: \\\"0.8.19\\\", // solidity version\\n        defaultNetwork: \\\"mantleSepolia\\\", // chosen by default when network isn't specified while running Hardhat\\n        networks: {\\n   ",
    "         mantle: {\\n                url: \\\"https://rpc.mantle.xyz\\\", //mainnet\\n                accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"],\\n            },\\n            mantleSepolia: {\\n                url: \\\"https://rpc.sepolia.mantle.xyz\\\", // Sepolia Testnet\\n                accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? \\\"\\\"],\\n            },\\n        },\\n    };\\n    \\n    export default config;\\n    ```\\n    \\n    In this configuration file, three networks are set up for deployment: **Mantle Mainnet**, and **Mantle Sepolia Testnet** (as default).\\n    \\n\\n## \\n\\nCompile and Deploy[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/hardhat#compile-and-deploy)\\n\\n1.  With your contracts prepared in the **\\\"Contracts\\\"** directory within your Hardhat project, compile them using the following command.\\n    \\n    **Sample Outputs**\\n    \\n    ```\\n    Generating typings for: 1 artifacts in dir: typechain-types for target: ethers-v6\\n    Successfully generated 6 typing",
    "s!\\n    Compiled 1 Solidity file successfully (evm target: paris).\\n    ```\\n    \\n2.  Deploy your contracts to a chosen network using the following command. You can omit the `--network` field to deploy on the default network specified in `hardhat.config.ts` (Mantle Sepolia Testnet in this tutorial).\\n    \\n    ```\\n    npx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia\\n    ```\\n    \\n    You will receive a response confirming successful contract deployment, and the address (e.g., `0xDe33e86f2Da37E01e0eCb870bd1CE91a71bB6bF4`) is the deployed contract's address.\\n    \\n\\nNow you can head over to [Mantle blockchain explorer](https://mantlescan.xyz/) to check the contract details.\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-opera",
    "tors/network-updates/changelogs/mantle-v2-v1.0.0\",\n    \"loadedTime\": \"2025-02-15T20:32:25.175Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v1.0.0\",\n    \"title\": \"Mantle v2 v1.0.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v1.0.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/aws4XCtzuUkckOpaAyY6\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:25 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<http",
    "s://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MDcyYjJhYzItYzgyOS00OGM4LWIxMjEtZGFiNzdjYzczMTU3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-sr",
    "c 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=caMraT9Td0pmfee%2F1Tzkh%2BvpIsv58bGadZm1bfoFLS0THVGWNv5aG69tQIyNV3K6ga3VylueOeuRqBZRPIC%2BB9GJ2sCweOnLhxeO6r9%2B8Pdy95kor49Xpdzla6o4vquQQODcV%2BQZxqpr0%2FdztnqU\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128112afb2dc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v1.0.0 | Network\\nMantle v2 v1.",
    "0.0 is the confirmed version for the mainnet launch, which includes some bug fixes based on the testnet version v0.5.0. The main updates are:\\nMantle v2 Tectonic​\\nEnhance handling of abnormal situations in Mantle DA. #117\\nAdd verification for some methods of bridge contract #106\\nop-geth​\\nOptimize Meta Transactions UX. #37\\nOptimize the estimateGas function. #67\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v1.0.0 | Network\\n\\nMantle v2 v1.0.0 is the confirmed version for the mainnet launch, which includes some bug fixes based on the testnet version [v0.5.0](https://docs-v2.mantle.xyz/nodes/changelogs/v0.5.0). The main updates are:\\n\\n## \\n\\nMantle v2 Tectonic[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.0#mantle-v2-tectonic)\\n\\n*   Enhance handling of abnormal situations in Mantle DA. [#117](https://github.com/mantlenetworkio/mantle-v2/pull/117)\\n    \\n*   Add verification for some methods of bridge contract [#106](https://github.com/mantlenetworkio/mantle-v2/pull/",
    "106)\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v1.0.0#op-geth)\\n\\n*   Optimize Meta Transactions UX. [#37](https://github.com/mantlenetworkio/op-geth/pull/37)\\n    \\n*   Optimize the `estimateGas` function. [#67](https://github.com/mantlenetworkio/op-geth/pull/67)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-thirdweb-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-thirdweb-to-deploy-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:25.276Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-thirdweb-to-deploy-smart-contracts\",\n    \"title\": \"Use Th",
    "irdweb to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Thirdweb to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/3pDf28i1HQr2kJ1qWTAM\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:25 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remo",
    "te-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTUxZTJhYTktYmI1NC00OTM5LWE5ZWUtMDI5Yjg1ODI1MmQw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report",
    "-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=CLvcgq9l89j%2FexcJvKOAT2s33XszOtIe4ohms5l4JLMqZwBUuekpouWICd2P6zSxPSvkkY6JtpQFZO3h5Bz3wuro7Sl%2BYFkQJw2RY4vJXNqBawRtRcbQOrCaBfeSQ%2BOWr6YV8h4V%2FkNmTwOUAhFS\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128112b0ecd9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Thirdweb to Deploy Smart Contracts\\nThirdweb is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network.\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Faucet page\\nIns",
    "tall Thirdweb CLI​\\nYou can install the Thirdweb CLI globally on your machine using npm by running the following command.\\nnpm i -g @thirdweb-dev/cli\\nCreate a project​\\nStart by creating a new project by running:\\nnpx thirdweb create contract\\nInput your preferences for the command line prompts, such like:\\n✔ What is your project named? … mantle-test ✔ What framework do you want to use? › Hardhat ✔ What will be the name of your new smart contract? … MyContract ✔ What type of contract do you want to start from? › Empty Contract\\nHere we have chosen to use the hardhat framework and generated an empty contract project.\\nPlace the contracts you want to deploy in the contracts folder, for example, let's deploy a Storage contract.\\n// SPDX-License-Identifier: GPL-3.0 pragma solidity >=0.8.2 <0.9.0; /** * @title Storage * @dev Store & retrieve value in a variable * @custom:dev-run-script ./scripts/deploy_with_ethers.ts */ contract Storage { uint256 number; /** * @dev Store value in variable ",
    "* @param num value to store */ function store(uint256 num) public { number = num; } /** * @dev Return value * @return value of 'number' */ function retrieve() public view returns (uint256){ return number; } }\\nDeploy your contract​\\nThe command deploy allows you to deploy a smart contract to Mantle Network without configuring RPC URLs, exposing your private keys, writing scripts, and another additional setup such as verifying your contract.\\nTo deploy your smart contract using deploy, navigate to the root directory of your project and run:\\nSample Outputs\\n✔ Detected project type: hardhat ✔ Compilation successful ✔ Processing contract: \\\"Storage\\\" ✔ Upload successful ✔ Open this link to deploy your contracts: https://thirdweb.com/contracts/deploy/QmPQJLQaEHVRD55hUSvkraSb74ZzBqwCcmFGGCXX5TLmx6\\nOpen the link and connect your wallet, select the network you need to deploy, and click the Deploy Now button to complete the deployment!\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Thirdwe",
    "b to Deploy Smart Contracts\\n\\n[Thirdweb](https://portal.thirdweb.com/) is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks like Mantle Network.\\n\\n## \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nInstall Thirdweb CLI[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#install-thirdweb-cli)\\n\\nYou can install the Thirdweb CLI globally on your machine using npm by running the following command.\\n\\n```\\nnpm i -g @thirdweb-dev/cli\\n```\\n\\n## \\n\\nCreate a project[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#create-a-project)\\n\\n1.  Start by creating a new project by running:\\n    \\n    ```\\n    npx thirdweb creat",
    "e contract\\n    ```\\n    \\n2.  Input your preferences for the command line prompts, such like:\\n    \\n    ```\\n    ✔ What is your project named? … mantle-test\\n    ✔ What framework do you want to use? › Hardhat\\n    ✔ What will be the name of your new smart contract? … MyContract\\n    ✔ What type of contract do you want to start from? › Empty Contract\\n    ```\\n    \\n    Here we have chosen to use the hardhat framework and generated an empty contract project.\\n    \\n3.  Place the contracts you want to deploy in the contracts folder, for example, let's deploy a `Storage` contract.\\n    \\n    ```\\n    // SPDX-License-Identifier: GPL-3.0\\n    \\n    pragma solidity >=0.8.2 <0.9.0;\\n    \\n    /**\\n    * @title Storage\\n    * @dev Store & retrieve value in a variable\\n    * @custom:dev-run-script ./scripts/deploy_with_ethers.ts\\n    */\\n    contract Storage {\\n    \\n        uint256 number;\\n    \\n        /**\\n        * @dev Store value in variable\\n        * @param num value to store\\n      ",
    "  */\\n        function store(uint256 num) public {\\n            number = num;\\n        }\\n    \\n        /**\\n        * @dev Return value\\n        * @return value of 'number'\\n        */\\n        function retrieve() public view returns (uint256){\\n            return number;\\n        }\\n    }\\n    ```\\n    \\n\\n## \\n\\nDeploy your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/thirdweb#deploy-your-contract)\\n\\nThe command `deploy` allows you to deploy a smart contract to Mantle Network without configuring RPC URLs, exposing your private keys, writing scripts, and another additional setup such as verifying your contract.\\n\\n1.  To deploy your smart contract using deploy, navigate to the root directory of your project and run:\\n    \\n    **Sample Outputs**\\n    \\n    ```\\n    ✔ Detected project type: hardhat\\n    ✔ Compilation successful\\n    ✔ Processing contract: \\\"Storage\\\"\\n    ✔ Upload successful\\n    ✔ Open this link to deploy your contracts: https://thirdweb.com/",
    "contracts/deploy/QmPQJLQaEHVRD55hUSvkraSb74ZzBqwCcmFGGCXX5TLmx6\\n    ```\\n    \\n2.  Open the link and connect your wallet, select the network you need to deploy, and click the **Deploy Now** button to complete the deployment!\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Fdocs-v2.mantle.xyz%2Fassets%2Fimages%2Fthirdweb-1-a374d0a39cc9e4863fad2b94c93e9506.png&width=768&dpr=4&quality=100&sign=fe440751&sv=2)\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v0.5.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v0.5.0\",\n    \"loadedTime\": \"2025-02-15T20:32:25.490Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/network-updates/changelogs/mantle-v2-v0.",
    "5.0\",\n    \"title\": \"Mantle v2 v0.5.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle v2 v0.5.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/FbKx4sLV0fZARC4EQc7k\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:25 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"co",
    "ntent-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDQxMGJhMmMtMmQ5Mi00ZGJmLWEyZjktOTYyMTEzN2Q5ZGFi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoint",
    "s\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=99T4zyt8TjYBj9jTOwCeLzfnlEMkxilvyiqSjOLZk14mgtU2HoNfItPP1bBbK13QhqwVPoQbgWt2sOIh5nWCPHXOGM6HbbBBfVcHtPcfpjERgvwq9tDpZeIArLZJO92fYSBprOYDkUKThWKJ%2Bkju\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128112c09d3a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle v2 v0.5.0 | Network\\nMantle v2 Tectonic​\\nThis release includes several important functionalities such as using MNT as the native token, implementing Mantle DA as the DA layer, and complement of migration tool for Mantle upgrade.\\nIt's forked from the Optimism release v1.1.0.\\nUses MNT as the Native Token and Gas Token, replacing Ether #2 #1",
    "1\\nAdds Mantle DA as the DA layer #4 #9 #29\\nEnhances the Migration Tool to facilitate network upgrades of Mantle OVM versions #19 #20\\nIntroduces the gas-oracle module to record the ETH/MNT ratio, utilized for fee calculation and collection #41\\nSupports the use of HSM (Hardware Security Module) for custody of crucial accounts in modules like op-proposer, op-batcher, etc. #43 #55\\nImproves end-to-end testing and code unit test coverage #18 #38 #39\\nop-geth​\\nThis release includes several important functionalities such as using MNT as the native token, optimizing fee estimation, and enabling meta-transactions. This release is forked from the Release version v1.101105.3 and additionally integrates the latest go-ethereum release v1.11.5.\\nUse MNT as the Native Token and Gas Token instead of Ether. #1\\nSupport Meta Transactions at the protocol level for gas fee delegation services in various scenarios. #2\\nOptimize the estimateGas function to return fees inclusive of both layer1 and layer",
    "2 when estimating transaction fees. #6\\nLast updated 3 months ago\",\n  \"markdown\": \"# Mantle v2 v0.5.0 | Network\\n\\n## \\n\\nMantle v2 Tectonic[​](https://docs-v2.mantle.xyz/nodes/changelogs/v0.5.0#mantle-v2-tectonic)\\n\\nThis release includes several important functionalities such as using MNT as the native token, implementing Mantle DA as the DA layer, and complement of migration tool for Mantle upgrade.\\n\\nIt's forked from the Optimism release v1.1.0.\\n\\n*   Uses MNT as the Native Token and Gas Token, replacing Ether [#2](https://github.com/mantlenetworkio/mantle-v2/pull/2) [#11](https://github.com/mantlenetworkio/mantle-v2/pull/11)\\n    \\n*   Adds Mantle DA as the DA layer [#4](https://github.com/mantlenetworkio/mantle-v2/pull/4) [#9](https://github.com/mantlenetworkio/mantle-v2/pull/9) [#29](https://github.com/mantlenetworkio/mantle-v2/pull/29)\\n    \\n*   Enhances the Migration Tool to facilitate network upgrades of Mantle OVM versions [#19](https://github.com/mantlenetworkio/mantle-v",
    "2/pull/19) [#20](https://github.com/mantlenetworkio/mantle-v2/pull/20)\\n    \\n*   Introduces the gas-oracle module to record the ETH/MNT ratio, utilized for fee calculation and collection [#41](https://github.com/mantlenetworkio/mantle-v2/pull/41)\\n    \\n*   Supports the use of HSM (Hardware Security Module) for custody of crucial accounts in modules like `op-proposer`, `op-batcher`, etc. [#43](https://github.com/mantlenetworkio/mantle-v2/pull/43) [#55](https://github.com/mantlenetworkio/mantle-v2/pull/55)\\n    \\n*   Improves end-to-end testing and code unit test coverage [#18](https://github.com/mantlenetworkio/mantle-v2/pull/18) [#38](https://github.com/mantlenetworkio/mantle-v2/pull/38) [#39](https://github.com/mantlenetworkio/mantle-v2/pull/39)\\n    \\n\\n## \\n\\nop-geth[​](https://docs-v2.mantle.xyz/nodes/changelogs/v0.5.0#op-geth)\\n\\nThis release includes several important functionalities such as using MNT as the native token, optimizing fee estimation, and enabling meta-transaction",
    "s. This release is forked from the Release version v1.101105.3 and additionally integrates the latest go-ethereum release v1.11.5.\\n\\n*   Use MNT as the Native Token and Gas Token instead of Ether. [#1](https://github.com/mantlenetworkio/op-geth/pull/1)\\n    \\n*   Support Meta Transactions at the protocol level for gas fee delegation services in various scenarios. [#2](https://github.com/mantlenetworkio/op-geth/pull/2)\\n    \\n*   Optimize the `estimateGas` function to return fees inclusive of both layer1 and layer2 when estimating transaction fees. [#6](https://github.com/mantlenetworkio/op-geth/pull/6)\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contra",
    "cts\",\n    \"loadedTime\": \"2025-02-15T20:32:20.968Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contracts\",\n    \"title\": \"Use Foundry to Deploy Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Foundry to Deploy Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/g7ZmYykcBiIg7VnkdlrY\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:18 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.git",
    "book.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MDBiYjAwMzctYTJiZS00NGVjLTg0YjAtODhmNTAzMzU0Njc4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'se",
    "lf' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=BXouyNvsUojkDVNEcAdwGImEbdccbBZuZrU5CdAK5rdM5NJOjZmjsVXceZG6NSSMBlVZy4EMZdsUkijS6LUvb3F9ASRVougZbbQnPFBzeS59Nx8icR0pAeIBAjTh%2B3KakEu3GpUtSLREZpTmDwuR\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281103081e4ba8-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Foundry to Deploy Smart Co",
    "ntracts\\nFoundry is a fast, portable, and modular toolkit for EVM application development written in Rust. The two main components that you'll generally be using for smart contract development are:\\nForge: used to compile, test, and deploy contracts\\nCast: used to make RPC calls to interact with a network\\nPrerequisite​\\nWallet with sufficient balance\\nIf you want to get some testnet tokens, please refer to the Faucet page\\nInstall Foundry​\\nFoundryup is the Foundry toolchain installer. Open your terminal and run the following command:\\ncurl -L https://foundry.paradigm.xyz | bash\\nFor more installation instructions, check here.\\nCreate a project​\\nCreate a new Foundry project and install the necessary dependencies.\\nPlease put your contract in the src folder. For this tutorial, we will use the existing example contract Counter.sol. Then use the following command to compile a smart contract.\\nSample Outputs\\n[⠒] Compiling... [⠒] Compiling 24 files with 0.8.15 [⠢] Solc 0.8.15 finished in",
    " 2.52sCompiler run successful! [⠆] Solc 0.8.15 finished in 2.52s\\nDeploy your contract​\\nUpon successful compilation, use the following command to deploy a smart contract (replace <your-private-key> on the command line with your wallet private key).\\nforge create --rpc-url <mantle_rpc_url> --private-key <your-private-key> src/Counter.sol:Counter --legacy\\nSample Outputs\\n[⠢] Compiling...No files changed, compilation skipped [⠆] Compiling... Deployer: 0xE1F10AfE71FF3397A85aAce99D42Db6661E02bB9 Deployed to: 0x38fa66D97b98607636F88C98aE59e08C04D2FEB6 Transaction hash: 0x308fb9f1824ca85e34ed9d1df94aa3f1d9dbcc02b3d01a130ac4b7cf1e1a77fb\\nHere 0x38fa66D97b98607636F88C98aE59e08C04D2FEB6 is the address of the deployed contract, which you can view via the Mantle blockchain explorer.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Foundry to Deploy Smart Contracts\\n\\n[Foundry](https://github.com/foundry-rs/foundry#readme) is a fast, portable, and modular toolkit for EVM application development ",
    "written in Rust. The two main components that you'll generally be using for smart contract development are:\\n\\n*   [Forge](https://github.com/foundry-rs/foundry/tree/master/crates/forge#readme): used to compile, test, and deploy contracts\\n    \\n*   [Cast](https://github.com/foundry-rs/foundry/tree/master/crates/cast#readme): used to make RPC calls to interact with a network\\n    \\n\\n### \\n\\nPrerequisite[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#prerequisite)\\n\\n*   Wallet with sufficient balance\\n    \\n\\nIf you want to get some testnet tokens, please refer to the [Faucet page](https://docs.mantle.xyz/network/for-users/how-to-guides/fetching-test-tokens)\\n\\n## \\n\\nInstall Foundry[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#install-foundry)\\n\\nFoundryup is the Foundry toolchain installer. Open your terminal and run the following command:\\n\\n```\\ncurl -L https://foundry.paradigm.xyz | bash\\n```\\n\\nFor more installation instructions, check",
    " [here](https://book.getfoundry.sh/getting-started/installation#installation).\\n\\n## \\n\\nCreate a project[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#create-a-project)\\n\\n1.  Create a new Foundry project and install the necessary dependencies.\\n    \\n2.  Please put your contract in the **src** folder. For this tutorial, we will use the existing example contract `Counter.sol`. Then use the following command to compile a smart contract.\\n    \\n    **Sample Outputs**\\n    \\n    ```\\n    [⠒] Compiling...\\n    [⠒] Compiling 24 files with 0.8.15\\n    [⠢] Solc 0.8.15 finished in 2.52sCompiler run successful!\\n    [⠆] Solc 0.8.15 finished in 2.52s\\n    ```\\n    \\n\\n## \\n\\nDeploy your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/deploy/foundry#deploy-your-contract)\\n\\nUpon successful compilation, use the following command to deploy a smart contract (replace <your-private-key> on the command line with your wallet private key).\\n\\n```\\nforge create --rpc-u",
    "rl <mantle_rpc_url> --private-key <your-private-key> src/Counter.sol:Counter --legacy\\n```\\n\\n### \\n\\n**Sample Outputs**\\n\\n```\\n[⠢] Compiling...No files changed, compilation skipped\\n[⠆] Compiling...\\nDeployer: 0xE1F10AfE71FF3397A85aAce99D42Db6661E02bB9\\nDeployed to: 0x38fa66D97b98607636F88C98aE59e08C04D2FEB6\\nTransaction hash: 0x308fb9f1824ca85e34ed9d1df94aa3f1d9dbcc02b3d01a130ac4b7cf1e1a77fb\\n```\\n\\nHere `0x38fa66D97b98607636F88C98aE59e08C04D2FEB6` is the address of the deployed contract, which you can view via the [Mantle blockchain explorer](https://mantlescan.xyz/).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-hardhat-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-hardhat-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15",
    "T20:32:27.670Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-hardhat-to-verify-smart-contracts\",\n    \"title\": \"Use Hardhat to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Hardhat to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/9kZCqDkv1WYuD0trpt2V\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:27 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://",
    "static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmFlMDRhNDAtYzU0Ny00NzIyLWI2ZWMtNGY0ZGQxNjBkYTZi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'n",
    "one'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ZiwCzdxjWBQZJbYCUTYE0P7BLwiF87WN%2BYncsQ0L8jWc5p662CkaScjAHtwEuVEUOTY1%2B7dG9afww3Q0EroHqNXw%2F%2FRzxgrcV5bquSj40OQGGGZpGWi1QsVK5dHKAoVjMNmmGZurlKmslCoHTFta\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281139becba5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Hardhat to Verify Smart Contracts\\nTo verify ",
    "your contracts using Hardhat, you'll need an Etherscan API key and custom network configuration in your hardhat.config.ts file.\\nConfigure​\\nModify the hardhat.config.ts configuration to include customChains before moving forward.\\nimport {HardhatUserConfig} from 'hardhat/config'; import '@nomicfoundation/hardhat-toolbox'; import * as dotenv from 'dotenv'; dotenv.config(); const config: HardhatUserConfig = { solidity: '0.8.19', // solidity version defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat networks: { mantle: { url: 'https://rpc.mantle.xyz', //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], }, mantleSepolia: { url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], gasPrice: 20000000, }, }, etherscan: { apiKey: process.env.API_KEY, customChains: [ { network: 'mantle', chainId: 5000, urls: { apiURL: 'https://api.mantlescan.xyz/api', browserURL: 'https://mantlesca",
    "n.xyz', }, }, { network: 'mantleSepolia', chainId: 5003, urls: { apiURL: 'https://api-sepolia.mantlescan.xyz/api', browserURL: 'https://sepolia.mantlescan.xyz/', }, }, ], }, }; export default config;\\nVerify your contracts​\\nCurrently hardhat supports two methods of contract validation:\\nUse --deployment-id to name your deployment.\\nYou can use a flag to name your contract (whatever you want) during deployment, and then you can run the ignition verify task and pass the deployment Id to verify your contracts.\\nDeploy your contract like this:\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --deployment-id <Contract-Deployment-ID>\\nVerify your contract like this:\\nnpx hardhat ignition verify <Contract-Deployment-ID>\\nUse --verify to verify your contract during deployment:\\nYou can add a flag to verify your contract during deployment\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --verify\\nSample Outputs",
    "\\nSuccessfully submitted source code for contract contracts/Lock.sol:Lock at 0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c for verification on the block explorer. Waiting for verification result... Successfully verified contract Lock on the block explorer. https://sepolia.mantlescan.xyz/address/0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c#code\\nNow you can head over to Mantle blockchain explorer to check the contract status.\\nLast updated 2 months ago\",\n  \"markdown\": \"# Use Hardhat to Verify Smart Contracts\\n\\nTo verify your contracts using Hardhat, you'll need an [Etherscan API key](https://docs.etherscan.io/getting-started/viewing-api-usage-statistics) and custom network configuration in your `hardhat.config.ts` file.\\n\\n## \\n\\nConfigure[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/hardhat#configure)\\n\\n2.  Modify the `hardhat.config.ts` configuration to include `customChains` before moving forward.\\n    \\n    ```\\n    import {HardhatUserConfig} from 'hardhat/config';\\n    ",
    "import '@nomicfoundation/hardhat-toolbox';\\n    import * as dotenv from 'dotenv';\\n    \\n    dotenv.config();\\n    \\n    const config: HardhatUserConfig = {\\n      solidity: '0.8.19', // solidity version\\n      defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat\\n      networks: {\\n        mantle: {\\n          url: 'https://rpc.mantle.xyz', //mainnet\\n          accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n        },\\n        mantleSepolia: {\\n          url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet\\n          accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n          gasPrice: 20000000,\\n        },\\n      },\\n      etherscan: {\\n        apiKey: process.env.API_KEY,\\n        customChains: [\\n          {\\n            network: 'mantle',\\n            chainId: 5000,\\n            urls: {\\n              apiURL: 'https://api.mantlescan.xyz/api',\\n              browserURL: 'https://mantlescan.xyz',\\n            },\\n      ",
    "    },\\n          {\\n            network: 'mantleSepolia',\\n            chainId: 5003,\\n            urls: {\\n              apiURL: 'https://api-sepolia.mantlescan.xyz/api',\\n              browserURL: 'https://sepolia.mantlescan.xyz/',\\n            },\\n          },\\n        ],\\n      },\\n    };\\n    export default config;\\n    ```\\n    \\n\\n## \\n\\nVerify your contracts[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/verify/hardhat#verify-your-contracts)\\n\\nCurrently hardhat supports two methods of contract validation:\\n\\n#### \\n\\nUse `--deployment-id` to name your deployment.\\n\\nYou can use a flag to name your contract (whatever you want) during deployment, and then you can run the `ignition verify` task and pass the deployment Id to verify your contracts.\\n\\n1.  Deploy your contract like this:\\n    \\n\\n```\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --deployment-id <Contract-Deployment-ID>\\n```\\n\\n1.  Verify your contract like this:\\n ",
    "   \\n\\n```\\nnpx hardhat ignition verify <Contract-Deployment-ID>\\n```\\n\\n#### \\n\\nUse `--verify` to verify your contract during deployment:\\n\\nYou can add a flag to verify your contract during deployment\\n\\n```\\nnpx hardhat ignition deploy ./ignition/modules/<Your-Contract>.ts --network mantleSepolia --verify\\n```\\n\\n### \\n\\n**Sample Outputs**\\n\\n```\\nSuccessfully submitted source code for contract\\ncontracts/Lock.sol:Lock at 0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c\\nfor verification on the block explorer. Waiting for verification result...\\n\\nSuccessfully verified contract Lock on the block explorer.\\nhttps://sepolia.mantlescan.xyz/address/0x76B6a0F36CC71d49792eC1740892E8bc9AA7814c#code\\n```\\n\\nNow you can head over to [Mantle blockchain explorer](https://mantlescan.xyz/) to check the contract status.\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contrac",
    "ts/use-foundry-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-foundry-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:30.034Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts/use-foundry-to-verify-smart-contracts\",\n    \"title\": \"Use Foundry to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Use Foundry to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/fVMa7VUBOmUdLNkXV76K\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 202",
    "5 20:32:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTFkMzY4NGYtYjIyNC00ZjE2LTllMWEtYjNjMWQ5NzQxN2I3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-",
    "src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=5MeJcA1DKn1xAYj2%2B4%2BM1NnktVbi7GOLl2TeL7pKjqwmYI1yL%2BhMrJwRuiuyze%2BtZIs3sVudxdcjsnhQyUBxRRpNrDe3Bm1cmOrrpS4gQXYTVjvzBg9OAsk7NXIk8CfFsX7g8SVVNWZR0UxbNOW1\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1",
    "eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281149a99c9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Use Foundry to Verify Smart Contracts\\nTo verify your contracts using Foundry, we need to verify the contract with the help of Mantle's explorer. It is assumed that you have already completed the deployment of the contract. If not, you can review this document to complete the contract deployment.\\nVerify your contract​\\nRun the following command in your terminal to verify your contract.\\nforge verify-contract --verifier-url https://api-sepolia.mantlescan.xyz/api --etherscan-api-key <YOUR_MANTLESCAN_API_KEY> --compiler-version \\\"v0.8.23+commit.f704f362\\\" <contract address> src/Contract_Name.sol:Contract_Name --watch\\nMake sure to configure --compiler-version and --num-of-optimizations correctly! And you can modify the --constructor-args if needed. And make sure you set the --chain and --verifier-url corre",
    "ctly.\\nSample Outputs\\nStart verifying contract `0xad4736AE3DB1E71375a27b7d8A634994921E3c04` deployed on mainnet Submitting verification for [src/Counter.sol:Counter] 0xad4736AE3DB1E71375a27b7d8A634994921E3c04. Submitted contract for verification: Response: `OK` GUID: `d5s2dhvr62tahsjez9cypxkxdcmpjagkkxxuqcp6dkyaizbp8n` URL: https://etherscan.io/address/0xad4736ae3db1e71375a27b7d8a634994921e3c04 Contract verification status: Response: `NOTOK` Details: `Pending in queue` Contract verification status: Response: `OK` Details: `Pass - Verified` Contract successfully verified\\nLast updated 3 months ago\",\n  \"markdown\": \"# Use Foundry to Verify Smart Contracts\\n\\nTo verify your contracts using Foundry, we need to verify the contract with the help of Mantle's explorer. It is assumed that you have already completed the deployment of the contract. If not, you can review this document to complete the contract deployment.\\n\\n## \\n\\nVerify your contract[​](https://docs-v2.mantle.xyz/devs/dev-guides",
    "/how-to/verify/foundry#verify-your-contract)\\n\\nRun the following command in your terminal to verify your contract.\\n\\n```\\nforge verify-contract --verifier-url https://api-sepolia.mantlescan.xyz/api --etherscan-api-key <YOUR_MANTLESCAN_API_KEY> --compiler-version \\\"v0.8.23+commit.f704f362\\\" <contract address> src/Contract_Name.sol:Contract_Name --watch\\n```\\n\\nMake sure to configure `--compiler-version` and `--num-of-optimizations` correctly! And you can modify the `--constructor-args` if needed. And make sure you set the `--chain` and `--verifier-url` correctly.\\n\\n### \\n\\n**Sample Outputs**\\n\\n```\\nStart verifying contract `0xad4736AE3DB1E71375a27b7d8A634994921E3c04` deployed on mainnet\\n\\nSubmitting verification for [src/Counter.sol:Counter] 0xad4736AE3DB1E71375a27b7d8A634994921E3c04.\\nSubmitted contract for verification:\\n        Response: `OK`\\n        GUID: `d5s2dhvr62tahsjez9cypxkxdcmpjagkkxxuqcp6dkyaizbp8n`\\n        URL:\\n        https://etherscan.io/address/0xad4736ae3db1e713",
    "75a27b7d8a634994921e3c04\\nContract verification status:\\nResponse: `NOTOK`\\nDetails: `Pending in queue`\\nContract verification status:\\nResponse: `OK`\\nDetails: `Pass - Verified`\\nContract successfully verified\\n```\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle\",\n    \"loadedTime\": \"2025-02-15T20:32:30.054Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/difference-between-ethereum-and-mantle\",\n    \"title\": \"Difference Between Ethereum and Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": ",
    "\"Difference Between Ethereum and Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/VeHt7zb68MiiT0SYoyTM\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDViMjEzMTMtMDNiNy00ZTU5LWEwZjUtODRiNmVhYTc0OTc3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' http",
    "s://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=shMbGy05MwuzMpI8SLKKn8m2HwPmPrc0%2B1lQSwh5%2B5qqrBqoiRQtr7OPrTIPJo2c57elUN%2Blry6RLWw5nZYrugRwHE1ez%2BPYU%2BiQfk53RhgecrDl5%2Bt1MzsGx",
    "7bbTi7yxYdab%2B2uU5WdHgmGq7sx\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128114998e2a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Difference Between Ethereum and Mantle\\nMantle is developed based on the OP Stack architecture. While it shares many design similarities with Ethereum, there are differences when transitioning from Ethereum to Mantle.\\nKey Differences​\\nOpcodes​\\nWhile Mantle aims for Ethereum compatibility, there may be differences in supported opcode sets or their specific implementations. Developers transitioning from Ethereum should review and adjust their smart contracts accordingly. Refer to the table below for detailed information:\\nOpcode\\",
    "nSolidity equivalent\\nBehavior\\nIn mantle-V2 Tectonic, block coinbase is the SequencerFeeVault, which address is 0x4200000000000000000000000000000000000011\\nRandom value. As this value is set by the sequencer, it is not as reliably random as the L1 equivalent.\\nTimestamp of the L2 block\\nIf the transaction is an L1 ⇒ L2 transaction, then tx.origin is set to the aliased address of the address that triggered the L1 ⇒ L2 transaction. Otherwise, this opcode behaves normally.\\nIf the transaction is an L1 ⇒ L2 transaction, and this is the initial call (rather than an internal transaction from one contract to another), the same address aliasing behavior applies.\\nUnsupported Opcodes​\\nThe following opcodes are not supported in Mantle:\\nOpcode\\nImplementation Info\\nBehavior\\nManipulate state that behaves almost identically to storage but is discarded after every transaction\\nAn efficient EVM instruction for copying memory areas, enabled in Cancun upgrade\\nOpcode to get versioned hashes, enable",
    "d in Cancun upgrade\\nInstruction that returns the current data-blob base-fee, enabled in Cancun upgrade\\nBlocks​\\nAs a rollup, Mantle's block structure may differ from Ethereum, including block construction time, block size, and more. Developers should familiarize themselves with Mantle's block specifications for optimal integration. Refer to this for more details.\\nNetwork Specifications​\\nMantle has distinct network specifications compared to Ethereum, particularly in JSON-RPC differences. Understanding these variances is crucial for a smooth transition to Mantle. Refer to this for more details.\\nTransaction Costs​\\nAs a rollup on Ethereum, Mantle's transaction cost composition differs from L1. Developers should understand Mantle's fee structure to optimize their applications' performance on Mantle Network. Refer to this for more details.\\nSolidity Support​\\nCurrently Mantle doesn't support the latest version of the Solidity. Make sure your Solidity compiler version is lower than v0.",
    "8.23 when you deploy the contract.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Difference Between Ethereum and Mantle\\n\\nMantle is developed based on the OP Stack architecture. While it shares many design similarities with Ethereum, there are differences when transitioning from Ethereum to Mantle.\\n\\n## \\n\\nKey Differences[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#key-differences)\\n\\n### \\n\\nOpcodes[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#opcodes)\\n\\nWhile Mantle aims for Ethereum compatibility, there may be differences in supported opcode sets or their specific implementations. Developers transitioning from Ethereum should review and adjust their smart contracts accordingly. Refer to the table below for detailed information:\\n\\nOpcode\\n\\nSolidity equivalent\\n\\nBehavior\\n\\nIn mantle-V2 Tectonic, block coinbase is the `SequencerFeeVault`, which address is `0x4200000000000000000000000000000000000011`\\n\\nRandom value. As this value is set by the sequencer, it is no",
    "t as reliably random as the L1 equivalent.\\n\\nTimestamp of the L2 block\\n\\nIf the transaction is an L1 ⇒ L2 transaction, then `tx.origin` is set to the [aliased address](https://community.optimism.io/docs/developers/build/differences/#address-aliasing) of the address that triggered the L1 ⇒ L2 transaction. Otherwise, this opcode behaves normally.\\n\\nIf the transaction is an L1 ⇒ L2 transaction, and this is the initial call (rather than an internal transaction from one contract to another), the same [address aliasing](https://community.optimism.io/docs/developers/build/differences/#address-aliasing) behavior applies.\\n\\n#### \\n\\n**Unsupported Opcodes**[**​**](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#unsupported-opcodes)\\n\\nThe following opcodes are not supported in Mantle:\\n\\nOpcode\\n\\nImplementation Info\\n\\nBehavior\\n\\nManipulate state that behaves almost identically to storage but is discarded after every transaction\\n\\nAn efficient EVM instruction for copying memory areas, en",
    "abled in Cancun upgrade\\n\\nOpcode to get versioned hashes, enabled in Cancun upgrade\\n\\nInstruction that returns the current data-blob base-fee, enabled in Cancun upgrade\\n\\n### \\n\\nBlocks[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#blocks)\\n\\nAs a rollup, Mantle's block structure may differ from Ethereum, including block construction time, block size, and more. Developers should familiarize themselves with Mantle's block specifications for optimal integration. Refer to [this](https://community.optimism.io/docs/developers/build/differences/#blocks) for more details.\\n\\n### \\n\\nNetwork Specifications[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#network-specifications)\\n\\nMantle has distinct network specifications compared to Ethereum, particularly in JSON-RPC differences. Understanding these variances is crucial for a smooth transition to Mantle. Refer to [this](https://community.optimism.io/docs/developers/build/differences/#network-specifications) for more details.\\n\\n#",
    "## \\n\\nTransaction Costs[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#transaction-costs)\\n\\nAs a rollup on Ethereum, Mantle's transaction cost composition differs from L1. Developers should understand Mantle's fee structure to optimize their applications' performance on Mantle Network. Refer to [this](https://docs.mantle.xyz/network/system-information/fee-mechanism) for more details.\\n\\n### \\n\\nSolidity Support[​](https://docs-v2.mantle.xyz/devs/dev-guides/diffs#solidity-support)\\n\\nCurrently Mantle doesn't support [the latest version](https://github.com/ethereum/solidity/releases) of the Solidity. Make sure your Solidity compiler version is lower than **v0.8.23** when you deploy the contract.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/quick-access\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/quick-access\",\n    \"loadedTime\": \"2025-02-15T20:32:30.",
    "154Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/quick-access\",\n    \"title\": \"Quick Access | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Quick Access | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/D91mopDwoPBuuVL9DTPJ\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:29 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC",
    ", Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MjBlMmIyYTUtNmFkYi00ZTM0LTg0ODMtYWE1N2JlYThiNzk0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n     ",
    " \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ctLIQzgTmw1uQDmeYVCjVJ2meqAxEMpyQ8G2D6bi5R%2BAaOkeRy6FfjmVHnVYZjeIE%2Fhi0izg4fU1hraAgmcTrO0tVGdjSQvI2Yrp2QQ7BQ2xxIEdNDVVu2K6vneCcvgg3ac7T62MnR3tAsGhUz9i\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281149cd2a3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Quick Access | Network\\nNetwork Details​\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Ma",
    "ntle API frequently, you might run into issues that arise due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC providers here.\\nOnboarding Tools​\\nHere are some useful tools for developers' onboarding.\\nRecommended Solidity Compiler Version\\nContract Address​\\nMantle as a Layer 2 (L2) system of Ethereum, scales Ethereum by deploying L1 contracts and L2 contracts. The most updated list of addresses of the contracts deployed on Ethereum and Mantle Network is available as follows:\\nToken List​\\nThe Mantle Bridge allows a one-to-many mapping between layer 1 (L1) and layer 2 (L2) tokens, meaning that there can be multiple Mantle implementations of an L1 token.\\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on the Mantle token list. The token list is used as the source of truth for the Mantle Bridge which is the main portal for moving assets between L1 and L2.\\nIf you want to support ",
    "your token on the Mantle Bridge, we strongly recommend using this template for token deployment in order to authorize bridge contracts\\nAdding a Token to the List​\\nIf you want to have your token added to the token list, you'll need to make a pull request against the Mantle token list repository. You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.\\nTools for Developers\\nLast updated 2 months ago\",\n  \"markdown\": \"# Quick Access | Network\\n\\n## \\n\\nNetwork Details[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#network-details)\\n\\nThe official Mantle RPC employs **rate limiting** to ensure stability during traffic spikes. If your particular use case involves calling the [Mantle API](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api) frequently, you might run into issues that arise due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC provider",
    "s [here](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n\\n## \\n\\nOnboarding Tools[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#onboarding-tools)\\n\\nHere are some useful tools for developers' onboarding.\\n\\n**Recommended Solidity Compiler Version**\\n\\n## \\n\\nContract Address[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#contract-address)\\n\\nMantle as a Layer 2 (L2) system of Ethereum, scales Ethereum by deploying L1 contracts and L2 contracts. The most updated list of addresses of the contracts deployed on Ethereum and Mantle Network is available as follows:\\n\\n## \\n\\nToken List[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#token-list)\\n\\nThe [Mantle Bridge](https://bridge.mantle.xyz/) allows a one-to-many mapping between layer 1 (L1) and layer 2 (L2) tokens, meaning that there can be multiple Mantle implementations of an L1 token.\\n\\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on ",
    "the [Mantle token list](https://token-list.mantle.xyz/mantle.tokenlist.json). The token list is used as the source of truth for the Mantle Bridge which is the main portal for moving assets between L1 and L2.\\n\\nIf you want to support your token on the Mantle Bridge, we strongly recommend using [this template](https://github.com/mantle-xyz/bridge-token-contracts) for token deployment in order to authorize bridge contracts\\n\\n### \\n\\nAdding a Token to the List[​](https://docs-v2.mantle.xyz/devs/dev-guides/quick#adding-a-token-to-the-list)\\n\\nIf you want to have your token added to the token list, you'll need to make a pull request against the [Mantle token list repository](https://github.com/mantlenetworkio/mantle-token-lists). You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.\\n\\n## \\n\\nTools for Developers\\n\\nLast updated 2 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/",
    "how-to-guides/bridging-eth-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-eth-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:30.124Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-eth-with-the-mantle-sdk\",\n    \"title\": \"Bridging ETH with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging ETH with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/IbXe4oGU7NqMzf5X7Ugu\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:30 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"",
    "transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGJiZmM4YWUtOTE4Ni00MTk2LWE5MWMtOGZmOTc3ZDBhMTlj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.",
    "buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dWuo5W4b8YUwvfj5b%2B%2FITm9ZkQ8vwXXEtawuAcHrn3kB%2BxwsOxt4inJ2sertqRiQbMLMqdj07uJXXLrILSQPjkSb8RW2K1dFTAOI81t%2BpGL%2Fif3hGd1aDRg35PtTeyr2IgFqcPrKfHA9Qtn7U1Rp\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n     ",
    " \"cf-ray\": \"91281149af2cc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging ETH with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial guides you on using the Mantle SDK to transfer ETH between layer 1 (L1) and layer 2 (L2). Check the complete code here.\\nSetup​\\nEnsure that your computer has the following installed:\\nStart L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC here and re",
    "place the L1 RPC URL in the .env file.\\nClone this repository and navigate to it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-eth\\nInstall the necessary packages.\\nRun the Sample Code​\\nThe sample code is in index.js, the whole execution flow will automatically start after running it.\\nNode Environment​\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file .env.local.tmp then use yarn local to execute index.js.\\nIf you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow Does It Work?​\\nImport the Necessary Libraries​\\nconst ethers = require('ethers'); const mantleSDK = require('@mantleio/sdk');\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like c",
    "reating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nNetwork Configuration and Wallet Setup​\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the .env file.\\nconst key = process.env.PRIV_KEY; const l2ETH = process.env.L2_ETH;\\nkey: The private key retrieved from the environment variables.\\nl2ETH: The address of the L2 ETH token.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let addr; // Our address\\ncrossChainMessenger: A global variable initialized later in the setup function, representing the Mantle SDK's CrossChainMessenger object.\\naddr: A variable that will store the user's address.\\nThen create wallet objects by passing ",
    "the private key and RPC addresses as parameters for L1 and L2.\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wallet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nSetup CrossChainMessenger Object​\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\nconst setup = async () => { addr = l1Wallet.address crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, }) } ......\\nReport the Balances​\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposi",
    "t and withdraw operations.\\nconst reportBalances = async () => { const l1Balance = await crossChainMessenger.l1Signer.getBalance(); const ETH = new ethers.Contract(l2ETH, erc20ABI, l2Wallet); const l2Balance = await ETH.balanceOf( crossChainMessenger.l2Signer.getAddress(), ); console.log(`On L1:${l1Balance} On L2:${l2Balance} `); };\\nDeposit​\\nThe depositETH function deposits 0.01 ETH token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated ETH balance on L1 and L2.\\nTo show that the deposit actually happened we show before and after balances.\\nconsole.log('Deposit ETH'); await reportBalances();\\ncrossChainMessenger.depositETH() creates and sends the deposit transaction on L1.\\nconst start = new Date(); const response = await crossChainMessenger.depositETH(eth);\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(`Transaction hash (on L1):",
    " ${response.hash}`); await response.wait();\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\nconsole.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 0.01 ETH.\\nawait reportBalances(); console.log(`depositETH took ${(new Date() - start) / 1000} seconds\\\\n\\\\n`);\\nWithdraw​\\nThis function shows how to withdraw ETH from L2 to L1.\\nTo show that the withdrawal actually happened we show before and after balances.\\nconsole.log('#################### Withdraw ETH ####################'); await reportBalances();\\nWe need to make sure the allo",
    "wance is approved. We can do that by sending an approval transaction on L1.\\nconst approve = await crossChainMessenger.approveERC20( ethers.constants.AddressZero, l2ETH, doubleeth, {signer: l2Wallet, gasLimit: 300000}, ); console.log(`Approve transaction hash (on L2): ${approve.hash}`);\\nThen we withdraw the token from L2.\\nconst response = await crossChainMessenger.withdrawERC20( ethers.constants.AddressZero, l2ETH, eth, {gasLimit: 300000}, ); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\nWe need to wait until the message is ready to prove.\\nconsole.log('Waiting for status to be READY_TO_PROVE'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE, );\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and netw",
    "ork are running well)\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log('Waiting for status to change to IN_CHALLENGE_PERIOD'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD, ); console.log('In the challenge period, waiting for status READY_FOR_RELAY'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY, );\\nFinalizing the message also takes a bit of time.\\nconsole.log('Ready for relay, finalizing message now'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash); console.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); awai",
    "t crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nInvoke deposit and withdraw functions\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nconst main = async () => { await setup(); await depositETH(); await withdrawETH(); }; main() .then(() => process.exit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion​\\nYou should now be able to write applications using our SDK and bridge to transfer ETH between L1 and L2.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Bridging ETH with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial guides you on using the Mantle SDK to transfer ETH between layer 1 (L1) and layer 2 (L2). Check the complete code [here](ht",
    "tps://github.com/mantlenetworkio/mantle-tutorial/blob/main/cross-dom-bridge-eth/index.js).\\n\\n## \\n\\nSetup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#setup)\\n\\n1.  Ensure that your computer has the following installed:\\n    \\n2.  Start L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # check status\\n    make ps\\n    ```\\n    \\n    **We highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and navigate to it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-eth\\n  ",
    "  ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the Sample Code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#run-the-sample-code)\\n\\nThe sample code is in `index.js`, the whole execution flow will automatically start after running it.\\n\\n### \\n\\nNode Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#node-environment)\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execute `index.js`.\\n\\nIf you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow Does It Work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#how-does-it-work)\\n\\n### \\n\\nImport the Necessary Libraries[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#import-the-necessary-libraries)\\n\\n```\\nconst ethers = require('",
    "ethers');\\nconst mantleSDK = require('@mantleio/sdk');\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantleio SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\n    \\n\\n### \\n\\nNetwork Configuration and Wallet Setup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#network-configuration-and-wallet-setup)\\n\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the `.env` file.\\n\\n```\\nconst key = process.env.PRIV_KEY;\\nconst l2ETH = process.env.L2_ETH;\\n```\\n\\n*   `key`: The private key retrieved fr",
    "om the environment variables.\\n    \\n*   `l2ETH`: The address of the L2 ETH token.\\n    \\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet addr; // Our address\\n```\\n\\n*   `crossChainMessenger`: A global variable initialized later in the `setup` function, representing the Mantle SDK's `CrossChainMessenger` object.\\n    \\n*   `addr`: A variable that will store the user's address.\\n    \\n\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\nSetup CrossChainMessenger Object[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#setup-crosschainmessenger-object)\\n\\nThe `CrossChainMessenger` ob",
    "ject calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n```\\nconst setup = async () => {\\n  addr = l1Wallet.address\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({\\n    l1ChainId: process.env.L1_CHAINID,\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet,\\n    l2SignerOrProvider: l2Wallet,\\n    bedrock: true,\\n  })\\n}\\n......\\n```\\n\\n### \\n\\nReport the Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#report-the-balances)\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n```\\nconst reportBalances = async () => {\\n  const l1Balance = await crossChainMessenger.l1Signer.getBalance();\\n  const ETH = new ethers.Contract(l2ETH, erc20ABI, l2Wallet);\\n  const l2Balance = await ETH.balanceOf(\\n    ",
    "crossChainMessenger.l2Signer.getAddress(),\\n  );\\n\\n  console.log(`On L1:${l1Balance}     On L2:${l2Balance} `);\\n};\\n```\\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#deposit)\\n\\nThe `depositETH` function deposits 0.01 ETH token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated ETH balance on L1 and L2.\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n```\\nconsole.log('Deposit ETH');\\nawait reportBalances();\\n```\\n\\n`crossChainMessenger.depositETH()` creates and sends the deposit transaction on L1.\\n\\n```\\nconst start = new Date();\\n\\nconst response = await crossChainMessenger.depositETH(eth);\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(`Transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nAfter the transaction is proces",
    "sed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\n\\n```\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 0.01 ETH.\\n\\n```\\nawait reportBalances();\\nconsole.log(`depositETH took ${(new Date() - start) / 1000} seconds\\\\n\\\\n`);\\n```\\n\\n### \\n\\nWithdraw[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#withdraw)\\n\\nThis function shows how to withdraw ETH from L2 to L1.\\n\\nTo show that the withdrawal actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Withdraw ETH ####################');\\",
    "nawait reportBalances();\\n```\\n\\nWe need to make sure the allowance is approved. We can do that by sending an approval transaction on L1.\\n\\n```\\nconst approve = await crossChainMessenger.approveERC20(\\n  ethers.constants.AddressZero,\\n  l2ETH,\\n  doubleeth,\\n  {signer: l2Wallet, gasLimit: 300000},\\n);\\nconsole.log(`Approve transaction hash (on L2): ${approve.hash}`);\\n```\\n\\nThen we withdraw the token from L2.\\n\\n```\\nconst response = await crossChainMessenger.withdrawERC20(\\n  ethers.constants.AddressZero,\\n  l2ETH,\\n  eth,\\n  {gasLimit: 300000},\\n);\\nconsole.log(`Transaction hash (on L2): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nWe need to wait until the message is ready to prove.\\n\\n```\\nconsole.log('Waiting for status to be READY_TO_PROVE');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE,\\n);\\n```\\n\\nWait until the state that includes the tra",
    "nsaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to IN_CHALLENGE_PERIOD');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD,\\n);\\n\\nconsole.log('In the challenge period, waiting for status READY_FOR_RELAY');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY,\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n```\\nconsole.log('Ready for relay, finalizing message now');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds",
    "`);\\nawait crossChainMessenger.finalizeMessage(response.hash);\\n\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\n### \\n\\nInvoke deposit and withdraw functions\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n```\\nconst main = async () => {\\n  await setup();\\n  await depositETH();\\n  await withdrawETH();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-eth#conclusion)\\n\\nYou should now be able to write applications using our SDK and bridge to transfer ETH between L1 and L2.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs",
    ".mantle.xyz/network/for-developers/how-to-guides/bridging-mnt-with-the-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-mnt-with-the-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:30.192Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/bridging-mnt-with-the-mantle-sdk\",\n    \"title\": \"Bridging MNT with the Mantle SDK | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging MNT with the Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/63or3mkqkLA3Jk6Cu32m\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:30 GMT\",\n      \"content-type\": ",
    "\"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTc2MDdhOWItMGJiYy00ZGJiLTg2OTEtMjFlZjE4MjNjNzhi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com a",
    "pp.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=7XD2Qesi9SwtoLTFzBq0XWoRrtgEh42P9n8up4Uqxrd5zaa%2FOxDAQqnKJiudFLYH7mjf7sR6eVUWY53vgrZVsaSJzAETifkiLepxX4LtZWgndYiDzI5iLPdxQOTfMK2lRU3PNy4q7fVx9afrJIST\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"s",
    "erver\": \"cloudflare\",\n      \"cf-ray\": \"91281149ade12d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging MNT with the Mantle SDK\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\nThis tutorial teaches you how to use the Mantle SDK to transfer MNT between Layer 1 (L1) and Layer 2 (L2). Check the complete code here.\\nSetup​\\nEnsure your computer has:\\nStart L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\ngit clone https://github.com/mantlenetworkio/mantle-v2.git cd mantle/ops make up # check status make ps\\nWe highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC here and r",
    "eplace the L1 RPC URL in the .env file.\\nClone this repository and enter it.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git cd mantle-tutorial/cross-dom-bridge-mnt\\nInstall the necessary packages.\\nRun the Sample Code​\\nThe sample code is in the index.js, the whole execution flow will automatically start after running it.\\nNode Environment​\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file .env.local.tmp then use yarn local to execute index.js.\\nIf you want to have a test in our testnet network you should do the same for .env.testnet.tmp and then use yarn testnet to execute index.js.\\nHow Does It Work?​\\nImport the Necessary Libraries​\\nconst ethers = require('ethers'); const mantleSDK = require('@mantleio/sdk'); const fs = require('fs');\\nIn this tutorial, we initialize the required libraries:\\nethers: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use i",
    "nterface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\nmantleSDK: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform operations like depositing and withdrawing assets.\\nfs: The Node.js fs module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\nNetwork Configuration and Wallet Setup​\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the .env file.\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('TestERC20.json')); const l1MntAddr = process.env.L1_MNT; const l2MntAddr = process.env.L2_MNT; const key = process.env.PRIV_KEY;\\nL1TestERC20: A JSON object representing the L1 Test ERC20 contract.\\nl1MntAddr: The address of the L1 MNT token.\\nl2MntAddr: The address",
    " of the L2 MNT token.\\nkey: The private key retrieved from the environment variables.\\n// Global variable because we need them almost everywhere let crossChainMessenger; let ourAddr; // Our address\\ncrossChainMessenger: A global variable initialized later in the setup function, representing the Mantle SDK's CrossChainMessenger object.\\nourAddr: A variable that will store the user's address.\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC); const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC); const l1Wallet = new ethers.Wallet(key, l1RpcProvider); const l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\nSetup CrossChainMessenger Object​\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\ncon",
    "st setup = async () => { ourAddr = l1Wallet.address; crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, bedrock: true, }); l1Mnt = new ethers.Contract(l1MntAddr, L1TestERC20.abi, l1Wallet); };\\nReport the Balances​\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\nconst reportBalances = async () => { const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18); const l2Balance = (await crossChainMessenger.l2Signer.getBalance()) .toString() .slice(0, -18); console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`); };\\nDeposit​\\nThe depositMNT function deposits 1 MNT token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, ",
    "we display the updated MNT balance on L1 and L2.\\nTo show that the deposit actually happened we show before and after balances.\\nconsole.log('#################### Deposit MNT ####################'); await reportBalances();\\nWe need to make sure the allowance is approved. We can do that by sending an approval transaction on L1.\\n// Need the l2 address to know which bridge is responsible const allowanceResponse = await crossChainMessenger.approveERC20( l1MntAddr, l2MntAddr, depositToken, ); await allowanceResponse.wait();\\ncrossChainMessenger.depositMNT() creates and sends the deposit transaction on L1.\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); const response = await crossChainMessenger.depositMNT(depositToken);\\nOf course, it takes time for the transaction to actually be processed on L1.\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`); await response.wait();\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain se",
    "rvice and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\nconsole.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.RELAYED, );\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\nawait reportBalances(); console.log(`depositMNT took ${(new Date() - start) / 1000} seconds\\\\n`);\\nWithdraw​\\nThis function shows how to withdraw MNT from L2 to L1. For deposits, it was enough to transfer 1 MNT to show that the L2 balance increases. However, in the case of withdrawals the withdrawing account needs to be paid for finalizing the message, which costs more than that.\\nTo show that the withdrawal actually happened we show before and after balances.\\nconsole.log('#################### Withdra",
    "w MNT ####################'); await reportBalances();\\nThen we withdraw the token from L2.\\nconst response = await crossChainMessenger.withdrawMNT(withdrawToken); console.log(`Transaction hash (on L2): ${response.hash}`); await response.wait();\\nWe need to wait until the message is ready to prove.\\nconsole.log('Waiting for status to be READY_TO_PROVE'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_TO_PROVE, );\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.proveMessage(response.hash); console.log('In the challenge period, waiting for status READY_FOR_RELAY'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`)",
    "; await crossChainMessenger.waitForMessageStatus( response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY, );\\nFinalizing the message also takes a bit of time.\\nconsole.log('Ready for relay, finalizing message now'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.finalizeMessage(response.hash); console.log('Waiting for status to change to RELAYED'); console.log(`Time so far ${(new Date() - start) / 1000} seconds`); await crossChainMessenger.waitForMessageStatus( response, mantleSDK.MessageStatus.RELAYED, );\\nInvoke deposit and withdraw functions​\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nconst main = async () => { await setup(); await depositMNT(); await withdrawMNT(); }; main() .then(() => process.exit(0)) .catch((error) => { console.error(error); process.exit(1); });\\nConclusion​\\nYou should now be able to write applications that use our SDK and bridge to transfer MNT betwee",
    "n L1 and L2.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Bridging MNT with the Mantle SDK\\n\\nIf you want to test the functionality of the Mantle SDK, we recommend using the testnet environment instead of the mainnet environment. The challenge period will be much shorter in the testnet (~40 minutes) than in the mainnet (7 days).\\n\\nThis tutorial teaches you how to use the Mantle SDK to transfer MNT between Layer 1 (L1) and Layer 2 (L2). Check the complete code [here](https://github.com/mantlenetworkio/mantle-tutorial/blob/main/cross-dom-bridge-mnt/index.js).\\n\\n## \\n\\nSetup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#setup)\\n\\n1.  Ensure your computer has:\\n    \\n2.  Start L1 and L2 environments. Currently, we support the local environment or the testnet environment. If you want to deploy your own L1 and L2, please follow the instructions below.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-v2.git\\n    cd mantle/ops\\n    make up\\n    # che",
    "ck status\\n    make ps\\n    ```\\n    \\n    **We highly recommend using the testnet environment, which means you can skip this step, you can apply your own L1 RPC** [**here**](https://www.alchemy.com/) **and replace the L1 RPC URL in the** `**.env**` **file.**\\n    \\n3.  Clone this repository and enter it.\\n    \\n    ```\\n    git clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n    cd mantle-tutorial/cross-dom-bridge-mnt\\n    ```\\n    \\n4.  Install the necessary packages.\\n    \\n\\n## \\n\\nRun the Sample Code[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#run-the-sample-code)\\n\\nThe sample code is in the `index.js`, the whole execution flow will automatically start after running it.\\n\\n### \\n\\nNode Environment[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#node-environment)\\n\\nIf you want to test by using your own nodes, you should configure the missing or changing environment variables in file `.env.local.tmp` then use `yarn local` to execut",
    "e `index.js`.\\n\\nIf you want to have a test in our testnet network you should do the same for `.env.testnet.tmp` and then use `yarn testnet` to execute `index.js`.\\n\\n## \\n\\nHow Does It Work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#how-does-it-work)\\n\\n### \\n\\nImport the Necessary Libraries[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#import-the-necessary-libraries)\\n\\n```\\nconst ethers = require('ethers');\\nconst mantleSDK = require('@mantleio/sdk');\\nconst fs = require('fs');\\n```\\n\\nIn this tutorial, we initialize the required libraries:\\n\\n*   `ethers`: A JavaScript library for interacting with the Ethereum blockchain. It provides an easy-to-use interface for tasks like creating wallets, sending transactions, and interacting with smart contracts.\\n    \\n*   `mantleSDK`: The Mantle SDK, which facilitates cross-chain transactions between Layer 1 (L1) and Layer 2 (L2) blockchains. It abstracts away complexities, making it easier to perform op",
    "erations like depositing and withdrawing assets.\\n    \\n*   `fs`: The Node.js `fs` module for file system operations. It may be used later in the code for reading or writing files, although it's not explicitly used in the provided snippet.\\n    \\n\\n### \\n\\nNetwork Configuration and Wallet Setup[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#network-configuration-and-wallet-setup)\\n\\nNext, the code defines some configuration parameters. We fetch the specified network and wallet configurations from the `.env` file.\\n\\n```\\nconst L1TestERC20 = JSON.parse(fs.readFileSync('TestERC20.json'));\\nconst l1MntAddr = process.env.L1_MNT;\\nconst l2MntAddr = process.env.L2_MNT;\\nconst key = process.env.PRIV_KEY;\\n```\\n\\n*   `L1TestERC20`: A JSON object representing the L1 Test ERC20 contract.\\n    \\n*   `l1MntAddr`: The address of the L1 MNT token.\\n    \\n*   `l2MntAddr`: The address of the L2 MNT token.\\n    \\n*   `key`: The private key retrieved from the environment variables.\\n   ",
    " \\n\\n```\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger;\\nlet ourAddr; // Our address\\n```\\n\\n*   `crossChainMessenger`: A global variable initialized later in the `setup` function, representing the Mantle SDK's `CrossChainMessenger` object.\\n    \\n*   `ourAddr`: A variable that will store the user's address.\\n    \\n\\nThen create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\n\\n```\\nconst l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC);\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC);\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider);\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider);\\n```\\n\\n### \\n\\nSetup CrossChainMessenger Object[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#setup-crosschainmessenger-object)\\n\\nThe `CrossChainMessenger` object calls the cross chain messenger contracts on L1 and L2 to transfer assets. H",
    "ere we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n```\\nconst setup = async () => {\\n  ourAddr = l1Wallet.address;\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({\\n    l1ChainId: process.env.L1_CHAINID,\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet,\\n    l2SignerOrProvider: l2Wallet,\\n    bedrock: true,\\n  });\\n  l1Mnt = new ethers.Contract(l1MntAddr, L1TestERC20.abi, l1Wallet);\\n};\\n```\\n\\n### \\n\\nReport the Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#report-the-balances)\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n```\\nconst reportBalances = async () => {\\n  const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18);\\n  const l2Balance = (await crossChainMessenger.l2Signer.getBalance())\\n    .toString()\\n    .slice(0, -18);\\n  c",
    "onsole.log(`Token on L1:${l1Balance}     Token on L2:${l2Balance}`);\\n};\\n```\\n\\n### \\n\\nDeposit[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#deposit)\\n\\nThe `depositMNT` function deposits 1 MNT token to L2 via the Mantle bridge. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated MNT balance on L1 and L2.\\n\\nTo show that the deposit actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Deposit MNT ####################');\\nawait reportBalances();\\n```\\n\\nWe need to make sure the allowance is approved. We can do that by sending an approval transaction on L1.\\n\\n```\\n// Need the l2 address to know which bridge is responsible\\nconst allowanceResponse = await crossChainMessenger.approveERC20(\\n  l1MntAddr,\\n  l2MntAddr,\\n  depositToken,\\n);\\nawait allowanceResponse.wait();\\n```\\n\\n`crossChainMessenger.depositMNT()` creates and sends the deposit transac",
    "tion on L1.\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\n\\nconst response = await crossChainMessenger.depositMNT(depositToken);\\n```\\n\\nOf course, it takes time for the transaction to actually be processed on L1.\\n\\n```\\nconsole.log(`Deposit transaction hash (on L1): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nAfter the transaction is processed on L1 it needs to be picked up by an off-chain service and relayed to L2. To show that the deposit actually happened we need to wait until the message is relayed.\\n\\n```\\nconsole.log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\nOnce the message is relayed the balance change on L2 is practically instantaneous. We can just report the balances and see that the L2 balance rose by 1.\\n\\n```\\nawait reportBalances();\\nconsole.log(`depo",
    "sitMNT took ${(new Date() - start) / 1000} seconds\\\\n`);\\n```\\n\\n### \\n\\nWithdraw[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#withdraw)\\n\\nThis function shows how to withdraw MNT from L2 to L1. For deposits, it was enough to transfer 1 MNT to show that the L2 balance increases. However, in the case of withdrawals the withdrawing account needs to be paid for finalizing the message, which costs more than that.\\n\\nTo show that the withdrawal actually happened we show before and after balances.\\n\\n```\\nconsole.log('#################### Withdraw MNT ####################');\\nawait reportBalances();\\n```\\n\\nThen we withdraw the token from L2.\\n\\n```\\nconst response = await crossChainMessenger.withdrawMNT(withdrawToken);\\nconsole.log(`Transaction hash (on L2): ${response.hash}`);\\nawait response.wait();\\n```\\n\\nWe need to wait until the message is ready to prove.\\n\\n```\\nconsole.log('Waiting for status to be READY_TO_PROVE');\\nconsole.log(`Time so far ${(new Date() - start)",
    " / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_TO_PROVE,\\n);\\n```\\n\\nWait until the state that includes the transaction gets past the challenge period, at which time we can finalize (also known as claim) the transaction. (Make sure your service and network are running well)\\n\\n```\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.proveMessage(response.hash);\\n\\nconsole.log('In the challenge period, waiting for status READY_FOR_RELAY');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response.hash,\\n  mantleSDK.MessageStatus.READY_FOR_RELAY,\\n);\\n```\\n\\nFinalizing the message also takes a bit of time.\\n\\n```\\nconsole.log('Ready for relay, finalizing message now');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.finalizeMessage(response.hash);\\n\\nconsole.",
    "log('Waiting for status to change to RELAYED');\\nconsole.log(`Time so far ${(new Date() - start) / 1000} seconds`);\\nawait crossChainMessenger.waitForMessageStatus(\\n  response,\\n  mantleSDK.MessageStatus.RELAYED,\\n);\\n```\\n\\n### \\n\\nInvoke deposit and withdraw functions[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#invoke-deposit-and-withdraw-functions)\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n```\\nconst main = async () => {\\n  await setup();\\n  await depositMNT();\\n  await withdrawMNT();\\n};\\n\\nmain()\\n  .then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error);\\n    process.exit(1);\\n  });\\n```\\n\\n## \\n\\nConclusion[​](https://docs-v2.mantle.xyz/devs/dev-guides/how-to/bridge-mnt#conclusion)\\n\\nYou should now be able to write applications that use our SDK and bridge to transfer MNT between L1 and L2.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"",
    "\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees\",\n    \"loadedTime\": \"2025-02-15T20:32:30.211Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/optimize-your-transaction-fees\",\n    \"title\": \"Optimize Your Transaction Fees | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Optimize Your Transaction Fees | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/c9bde1mHGMCsm47rMw7Q\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:30 GMT\",\n      \"content-type\": \"text/html; charset=",
    "utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTFiZTJkYzAtMGM0Yi00ODA1LWI3NWItNjkzOTM4YWQ0ZTM0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.g",
    "itbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=2tkfuWDITY0wBDxaMcXDwL2MJ65KzMsuQjp4HjjNHKXNxylIe4ghRILMmfB168S7VfpEEtjc5l2XvE56YBYpXKLTo3Bo5IZtlxAQfFyInSD9YVzY%2FYcFAtxjeehgxozzLCl7zP7tzg%2FxB1cVzwrD\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflar",
    "e\",\n      \"cf-ray\": \"91281149bef382e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Optimize Your Transaction Fees | Network\\nThis section will help you to reduce the transaction fees on Mantle v2 Tectonic. Mantle v2 Tectonic introduces a new fee collection mechanism, including EIP-1559 and some native token optimizations, if you want to know more details about our fee collection mechanism, please refer to this document.\\nIn Mantle v2 Tectonic, with the introduction of the EIP-1559 mechanism, users need to configure the network's basefee (the minimum basefee currently set 0.02 gwei) and priorityfee (recommend to set it to 0) configurations in order to optimize the transaction fees. We explain the different development components to optimize the user experience.\\nMetaMask​\\nIf you are a user of MetaMask for trading or contract deployment and interaction (e.g. using Remix), you can set up basefee and priorityfee in MetaMask to be able to send transac",
    "tions at a lowest fee. Details can be found here.\\nHardhat​\\nIf you are using Hardhat for contract deployment and interaction, you can use the default configuration in hardhat.config.ts or specify gasPrice as the network minimum basefee:\\nconst config: HardhatUserConfig = { solidity: '0.8.19', // solidity version defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat networks: { mantle: { url: 'https://rpc.mantle.xyz', //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], // Use the default configuration }, mantleSepolia: { url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], gasPrice: 20000000, // specify the network's minimum basefee as the gas price }, }, };\\nFoundry​\\nIf you are using Foundry for contract deployment and interaction, you need to set it up on the corresponding command line:\\nContracts Deployment​\\nCurrently, for users deploying contracts using forge create",
    ", we strongly recommend using the legacy transaction type.\\nMake sure you are using the latest version of Foundry, if you are using a version lower than 2024-07-31, please add -skip-simulation to your command line to ensure successful execution!\\nWhen you use the forge script for contract deployment, there are different settings for different transaction types:\\nlegacy transactions\\nIf you are using legacy type transactions, you can use the following command for contract deployment, e.g.\\nforge script --legacy script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --rpc-url <mantle_rpc_url> --broadcast\\nEIP-1559 transactions\\nIf you are using EIP-1559 type transactions, you need to set the --with-gas-price parameter to the network minimum basefee, using the following command to deploy the contract, e.g.\\nforge script script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --with-gas-price 20000000 --rpc-url <mantle_rpc_url> --broadcast\\nLast updated 3 months ago\",\n  \"markdown\": \"# Optimize Your Trans",
    "action Fees | Network\\n\\nThis section will help you to reduce the transaction fees on Mantle v2 Tectonic. Mantle v2 Tectonic introduces a new fee collection mechanism, including EIP-1559 and some native token optimizations, if you want to know more details about our fee collection mechanism, please refer to [this document](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\nIn Mantle v2 Tectonic, with the introduction of the EIP-1559 mechanism, users need to configure the network's `basefee` (the minimum basefee currently set `0.02 gwei`) and `priorityfee` (recommend to set it to 0) configurations in order to optimize the transaction fees. We explain the different development components to optimize the user experience.\\n\\n## \\n\\nMetaMask[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#metamask)\\n\\nIf you are a user of MetaMask for trading or contract deployment and interaction (e.g. using [Remix](https://docs.mantle.xyz/network/for-developers/how-to-guides/",
    "how-to-deploy-smart-contracts/use-remix-to-deploy-smart-contracts)), you can set up `basefee` and `priorityfee` in MetaMask to be able to send transactions at a lowest fee. Details can be found [here](https://docs.mantle.xyz/network/for-users/how-to-guides/connecting-wallet-to-mantle-network#configure-your-wallet).\\n\\n## \\n\\nHardhat[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#hardhat)\\n\\nIf you are using [Hardhat](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-hardhat-to-deploy-smart-contracts) for contract deployment and interaction, you can use the default configuration in `hardhat.config.ts` or specify `gasPrice` as the network minimum basefee:\\n\\n```\\nconst config: HardhatUserConfig = {\\n  solidity: '0.8.19', // solidity version\\n  defaultNetwork: 'mantleSepolia', // chosen by default when network isn't specified while running Hardhat\\n  networks: {\\n    mantle: {\\n      url: 'https://rpc.mantle.xyz', //mainnet\\n      a",
    "ccounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n      // Use the default configuration\\n    },\\n    mantleSepolia: {\\n      url: 'https://rpc.sepolia.mantle.xyz', // Sepolia Testnet\\n      accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n      gasPrice: 20000000, // specify the network's minimum basefee as the gas price\\n    },\\n  },\\n};\\n```\\n\\n## \\n\\nFoundry[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#foundry)\\n\\nIf you are using [Foundry](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-deploy-smart-contracts/use-foundry-to-deploy-smart-contracts) for contract deployment and interaction, you need to set it up on the corresponding command line:\\n\\n### \\n\\nContracts Deployment[​](https://docs-v2.mantle.xyz/devs/dev-guides/decrease-fee#contracts-deployment)\\n\\nCurrently, for users deploying contracts using `forge create`, we strongly recommend using the **legacy** transaction type.\\n\\nMake sure you are using [the latest version](https://github.co",
    "m/foundry-rs/foundry/releases) of Foundry, if you are using a version lower than [`2024-07-31`](https://github.com/foundry-rs/foundry/releases/tag/nightly-26a7559758c192911dd39ce7d621a18ef0d419e6), please add `-skip-simulation` to your command line to ensure successful execution!\\n\\nWhen you use the `forge script` for contract deployment, there are different settings for different transaction types:\\n\\n*   **legacy transactions**\\n    \\n    If you are using legacy type transactions, you can use the following command for contract deployment, e.g.\\n    \\n    ```\\n    forge script --legacy script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --rpc-url <mantle_rpc_url> --broadcast\\n    ```\\n    \\n*   **EIP-1559 transactions**\\n    \\n    If you are using EIP-1559 type transactions, you need to set the [`--with-gas-price`](https://book.getfoundry.sh/reference/forge/forge-script#options) parameter to the network minimum basefee, using the following command to deploy the contract, e.g.\\n    \\n    `",
    "``\\n    forge script script/Deploy.s.sol:DeploySiege --sig \\\"run()\\\" --with-gas-price 20000000 --rpc-url <mantle_rpc_url> --broadcast\\n    ```\\n    \\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-node-operators/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-node-operators/faqs\",\n    \"loadedTime\": \"2025-02-15T20:32:28.277Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-node-operators/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/eCQuALzFX1SHg65FHmoP\"\n      }",
    "\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:26 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MmMzY2ZiOTAtMTMxMS00NDhiLWI1NzAtNDhjNjI5YjEwOTUx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.co",
    "m api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=mQzhITgFGk6qZ5dQN5N7dcyaGAyKIF2G5EFeCt%2BqEKVHQfXIwufNxjlsmyUI1dJtBHo21Sj%2FlkBNzPuoxZ3CvMbnfQvLNPxyjdpk2rPkkJmbVWnSUiJ9OYJAXiLiB91mImwB%2Byp6TwCNe2lG2yGi\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-mat",
    "ched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811301ca74d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nHow big is the current testnet state?​\\nYou can find details on this subject here: Approximate Disk Usage​\\nWhat does the error \\\"foundryup can't find command\\\" mean when installing Foundry on my server?​\\nThis error occurs when the foundryup script cannot locate the necessary system commands required to complete the installation process. One common solution is to upgrade the version of GNU C Library (glibc) installed on your server to version 2.29 or higher.\\nLast updated 3 months ago\",\n  \"markdown\": \"# FAQs | Network\\n\\n### \\n\\nHow big is the current testnet state?[​](https://docs-v2.mantle.xyz/nodes/faqs#how-big-is-the-current-testnet-state)\\n\\nYou can find details on this subject here: [Approximate Disk Usage​](https://docs.mantle.xyz/network/for-no",
    "de-operators/deployment-guides/mainnet-v1.0.0/deploying-a-rollup-verifier-replica-node-from-docker#approximate-disk-usage)\\n\\n### \\n\\nWhat does the error \\\"foundryup can't find command\\\" mean when installing Foundry on my server?[​](https://docs-v2.mantle.xyz/nodes/faqs#what-does-the-error-foundryup-cant-find-command-mean-when-installing-foundry-on-my-server)\\n\\nThis error occurs when the foundryup script cannot locate the necessary system commands required to complete the installation process. One common solution is to upgrade the version of GNU C Library (glibc) installed on your server to version 2.29 or higher.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts\",\n    \"loadedTime\": \"2025-02-15T20:32:28.174Z\",\n    \"referrerUr",
    "l\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts\",\n    \"title\": \"How to Verify Smart Contracts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Verify Smart Contracts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/Q44ZkgEuGLr40VtkqQXn\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:26 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, ",
    "Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MWNmNGI0YzItM2VkMS00NDRiLTk4NTUtNjNiMWU0ZDk1MzFj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\",
    "\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ZOfkPPalOhWm%2Fh%2Fhrol2u4tI8RMYDXWPIn9S35aUhIIDwDyg%2F14k6IkADwb36gPu6Fy8W0dcMLEHv7x6dPYolOsQqCq8G55PYVRRXpAuyGvSDi0b2l9sYoVghPAzNVjFTM3DsRFnFNkJto%2FTixuK\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281131fe574d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Verify Smart Contracts\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# H",
    "ow to Verify Smart Contracts\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/how-to-guides/how-to-verify-smart-contracts?fallback=true)[Mantle v1](https://docs.mantle.xyz/n",
    "etwork/network/for-developers/how-to-guides/how-to-verify-smart-contracts?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases\",\n    \"loadedTime\": \"2025-02-15T20:32:32.587Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases\",\n    \"title\": \"Common Use Cases | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n  ",
    "    {\n        \"property\": \"og:title\",\n        \"content\": \"Common Use Cases | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/zFmufzgvs1ssLIPU0Eb7\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Njc2MDI1ZWEtNzllZS00ZWJiLTg5MzMtZWY4Y2Q1NTUxY2Ix' 'strict-dynamic'",
    " 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dNA6uxyH0BF1IjCJCqrmT99YjFsUFdlpa3z%2B5ryfjtS3c6ITis0%2BmQyqNpKjG1%2FwkCK2ejY2fRzuElESlNuaarEmuMpn",
    "aXeeYF46TsnGQBichsPpAsg%2BQ3EUVstrBOoqv53QdPYTDzsbVLSCn5d9\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281159b87682e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Common Use Cases | Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Common Use Cases | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&w",
    "idth=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-developers/common-use-cases?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-developers/common-use-cases?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerM",
    "ode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/moving-assets-and-data\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/moving-assets-and-data\",\n    \"loadedTime\": \"2025-02-15T20:32:32.843Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/moving-assets-and-data\",\n    \"title\": \"Moving Assets and Data | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Moving Assets and Data | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/MYlSr58UAWGpozdYGZGG\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:32 GMT\",\n      \"content-type",
    "\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDUwYzdkMGMtZThlMS00MDlkLTlmY2ItOThkNTc4YjZkNmE1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.co",
    "m app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dE%2BqF0vk%2FlkvRNiJxVowWnNJG2i4opfp0bOzh3L2EUb%2BMqexDW1ow0xpzc7lf%2BlmxxpuCwJv8muCcOcF5mzVCh2lbZthNLw1I9illpnjYzZLdMY2qGzOw0KRYcnT0fSU5GXJrlKFBNBPTqFwv8bD\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",",
    "\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115a4ead2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Moving Assets and Data | Network\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\nSending Assets​\\nThe Mantle Bridge enables all functionality necessary for the most common use case, i.e., moving tokens between Mantle network and Ethereum. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\nSending Data​\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The Mantle Bridge has a simple API for triggering a cross-chain function c",
    "all.\\nHow does it work?​\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 asset bridging mechanism are L2StandardBridge on Mantle network, and L1StandardBridge on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standard bridge contracts.\\nFor instance, when a wallet sends a deposit request for 10 $MNT on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of 10 $MNT is minted on L2 and transferred to the wallet.\\nIn case a wallet makes a withdrawal of 10 $MNT on L2, these tokens are burned and the matching amount of 10 $MNT tokens locked on L1 get released and transferred to the wallet.\\nYou can connect your wallet to the Mantle Bridge to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the API page for more information and tutorials on how to call the a",
    "ppropriate SDK methods to bridge the various kinds of tokens that are currently supported.\\nUsing the Official Mantle Bridge​\\nTo move your $MNT tokens/Ether/other ERC-20 tokens between the Mantle and Ethereum chain, visit the Mantle Bridge. Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps here. ​\\nLast updated 3 months ago\",\n  \"markdown\": \"# Moving Assets and Data | Network\\n\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\n\\n## \\n\\nSending Assets[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#sending-assets)\\n\\nThe [Mantle Bridge](https://bridge.mantle.xyz/) enables all functionality necessary for the most common use case, i.e., moving token",
    "s between Mantle network and Ethereum. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\n\\n## \\n\\nSending Data[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#sending-data)\\n\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The [Mantle Bridge](https://bridge.mantle.xyz/) has a simple API for triggering a cross-chain function call.\\n\\n## \\n\\nHow does it work?[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#how-does-it-work)\\n\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 asset bridging mechanism are [`L2StandardBridge`](https://github.com/mantlenetworkio/mantle-v2/blob/develop/packages/contracts-bedrock/contracts/L2/L2StandardBridge.sol) on Mantle network, and [`L1StandardBridge`](https://github.com/mantlenetworkio/mantle-v2",
    "/blob/develop/packages/contracts-bedrock/contracts/L1/L1StandardBridge.sol) on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standard bridge contracts.\\n\\nFor instance, when a wallet sends a deposit request for `10 $MNT` on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of `10 $MNT` is minted on L2 and transferred to the wallet.\\n\\nIn case a wallet makes a withdrawal of `10 $MNT` on L2, these tokens are burned and the matching amount of `10 $MNT` tokens locked on L1 get released and transferred to the wallet.\\n\\nYou can connect your wallet to the [Mantle Bridge](https://bridge.mantle.xyz/) to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the [API page](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/mantle-api) for more information and tutorials on how to call the appropriate SDK methods to ",
    "bridge the various kinds of tokens that are currently supported.\\n\\n## \\n\\nUsing the Official Mantle Bridge[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/move-assets#using-the-official-mantle-bridge)\\n\\nTo move your `$MNT` tokens/Ether/other ERC-20 tokens between the Mantle and Ethereum chain, visit the [Mantle Bridge](https://bridge.mantle.xyz/). Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps [here](https://docs.mantle.xyz/network/for-users/how-to-guides/using-mantle-bridge). ​\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-to-a-cex\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-to-a-cex\",\n    \"loadedTime\": \"2025-02-15T20:32:32.876Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": ",
    "{\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-to-a-cex\",\n    \"title\": \"Adding Mantle to a CEX | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle to a CEX | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/jrpeS4pvzCV0ahHavLwr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:32 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, ",
    "Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YjVlYzc1ZjUtOWEwZC00YjI0LWI3NjUtZTM4ZmQ4ZGZlN2Zk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\",
    "\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ZGyXf9t5LeIYxZTXsg6Vn5jNskcL9Rel2IHDXyVj1zuhCP9%2FOMQAWddPAlTz36OJgq979hSgK2xM1%2FqXXg5xqG6fp1tL6oHJ0Qq02HpA7%2BuECusrUaYgZEh0XwZmEwW7Rb%2FvDON0I%2BbztYt9Acgs\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115ab9f8c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding Mantle to a CEX\\nConnecting to Mantle​\\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nThird-party endpoints from i",
    "nfrastructure providers.\\nFetching Token Balances​\\nCalculating ETH/ERC-20 Balance​\\nOn Mantle network, the ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address 0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111. The ERC-20 balance is stored in the ERC-20 contract, you can check it using the token list. Then you can still access it using the standard APIs.\\nCalculating $MNT Balance​\\nYou can use the same methods as querying the ERC-20 balance, but note that since MNT is the native token in L2, it will disable ERC-20 methods other than querying the balance.\\nTransaction Fees​\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum here.\\nDeposits and Withdrawals​\\nDeposits and Withdrawals on Mantle​\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\nDeposits a",
    "nd Withdrawals Across Chains​\\nAs a centralized exchange, there will be times that withdrawals of $ETH/$MNT token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network.\\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this tutorial for bridging ETH, or this tutorial for bridging ERC-20 tokens.\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\nWhen an ERC-20 token does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this tutorial for bridging standard ERC-20s. If you need to implement some kind of ",
    "custom logic, see this tutorial for bridging custom ERC-20s.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Adding Mantle to a CEX\\n\\n## \\n\\nConnecting to Mantle[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#connecting-to-mantle)\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to Mantle through any of the following means:\\n\\n2.  Third-party endpoints from infrastructure [providers](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n\\n## \\n\\nFetching Token Balances[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#fetching-token-balances)\\n\\n### \\n\\nCalculating ETH/ERC-20 Balance[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#calculating-etherc-20-balance)\\n\\nOn Mantle network, the ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address `0xdEAddEaDdeadDEadDEADDEAddE",
    "ADDEAddead1111`. The ERC-20 balance is stored in the ERC-20 contract, you can check it using the [token list](https://github.com/mantlenetworkio/mantle-token-lists/blob/main/mantle.tokenlist.json). Then you can still access it using the standard APIs.\\n\\n### \\n\\nCalculating $MNT Balance[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#calculating-mnt-balance)\\n\\nYou can use the same methods as querying the ERC-20 balance, but note that since MNT is the native token in L2, it will disable ERC-20 methods other than querying the balance.\\n\\n## \\n\\nTransaction Fees[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#transaction-fees)\\n\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum [here](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\n## \\n\\nDeposits and Withdrawals[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#deposits-and-withdrawals)\\n\\n### \\n\\nDeposits and Withdrawals on ",
    "Mantle[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#deposits-and-withdrawals-on-mantle)\\n\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\n\\n### \\n\\nDeposits and Withdrawals Across Chains[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/cex#deposits-and-withdrawals-across-chains)\\n\\nAs a centralized exchange, there will be times that withdrawals of `$ETH/$MNT` token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network.\\n\\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this [tutorial for bridging ETH](https://mantl",
    "enetworkio.github.io/mantle-tutorial/cross-dom-bridge-eth/), or this [tutorial for bridging ERC-20 tokens](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\n\\nWhen an ERC-20 token does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this [tutorial for bridging standard ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-standard-token/). If you need to implement some kind of custom logic, see this [tutorial for bridging custom ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-custom-token/).\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-wallet-support\",\n  \"crawl\": {\n    \"loadedU",
    "rl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-wallet-support\",\n    \"loadedTime\": \"2025-02-15T20:32:33.482Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-mantle-wallet-support\",\n    \"title\": \"Adding Mantle Wallet Support | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle Wallet Support | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/8oVJtG6l6fZlbDC07q31\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:33 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-sta",
    "tus\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzYzOWNiNjQtM2ZmZS00ZDczLTg2MDEtNGQwYWU0YjRlMDMz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'se",
    "lf' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=TpGsPTqtpAH152uXQD%2F3FdfsZAE19zzMdfYJqV4LMPsoa0lGQXow%2B1opT7wikpl6B6TjgeSYyxXUc0GIc3bz7mKrGbw0pCCzec5gelknue8YzrVcx6JXjHVIjXgIpLzx%2Fw8ZUwaumEwm1DqxBcco\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115aa8733b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screensh",
    "otUrl\": null,\n  \"text\": \"Adding Mantle Wallet Support | Network\\nMantle network uses $MNT as a native token, and creates an EVM-like code execution environment for transaction and state processing. This means a user on Layer 2 (L2) can use $MNT exactly like they would $ETH on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in this section. Any $MNT tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\nConnecting to Mantle​\\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nThird-party endpoints from infrastructure providers.\\nAdd Mantle Network to Metamask Quickly​\\nBased on the JSON-RPC API provided by Metamask, developers can implement the ability to add Mantle Network to Metamask with a single click.\\nawait window.ethereum.request({ \\",
    "\"method\\\": \\\"wallet_addEthereumChain\\\", \\\"params\\\": [ { \\\"blockExplorerUrls\\\": [ \\\"https://mantlescan.xyz/\\\" ], \\\"iconUrls\\\": [ \\\"https://drive.google.com/file/d/1qLqZu2vZSkZcKf46YERoa9cF0NfURvcc/view?usp=drive_link\\\" ], \\\"nativeCurrency\\\": { \\\"name\\\": \\\"MNT\\\", \\\"symbol\\\": \\\"MNT\\\", \\\"decimals\\\": 18 }, \\\"rpcUrls\\\": [ \\\"https://rpc.mantle.xyz\\\" ], \\\"chainId\\\": \\\"0x1388\\\", \\\"chainName\\\": \\\"Mantle\\\" } ] });\\nCanonical Token Addresses​\\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains a token list that includes known addresses for many popular tokens. For example, looking at the$MNT token, the Mantle token list returns the following addresses:\\n0x3c3a81e81dc49a522a592e7622a7e711c06bf354\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\nTransaction Status​\\nA transaction on Mantle network can be in one of these states:\\nSequencer Confirmed: The transaction has been accepted by the sequencer on Mantle (L2)\\",
    "nConfirmed On-Chain: The transaction has been written to Ethereum (L1)\\nIf a transaction is a withdrawal, it can be in one of the following states:\\nWaiting: Confirmed on L1, but still in the challenge period\\nReady to Prove: Transaction is ready to be proved on L1 to initiate the challenge period\\nReady for Relay: Transaction is out of the challenge period, and can be released by submitting a relay message\\nRelayed: A withdrawal is finalized, and the token is released from the bridge\\nYou can use the Mantle SDK to find out your transaction status.\\nTransaction Fees​\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum here.\\nEstimating Total Fees​\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it ro",
    "lls up to Ethereum.\\nIn fact, this fee is automatically deducted from the user's $MNT balance on Mantle when the transaction is executed.\\nMantle SDK provides an interface to get the total gas fee directly.\\nSending \\\"Max\\\" $MNT​\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's $MNT balance being sent.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Adding Mantle Wallet Support | Network\\n\\nMantle network uses `$MNT` as a native token, and creates an EVM-like code execution environment for transaction and state processing. This means a user on Layer 2 (L2) can use `$MNT` exactly like they would `$ETH` on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in this [section](https://docs.mantle.xyz/network/system-information/fee-mechanism). Any ",
    "`$MNT` tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\n\\n## \\n\\nConnecting to Mantle[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#connecting-to-mantle)\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to Mantle through any of the following means:\\n\\n2.  Third-party endpoints from infrastructure [providers](https://docs.mantle.xyz/network/for-developers/resources-and-tooling/node-endpoints-and-providers).\\n    \\n\\n### \\n\\nAdd Mantle Network to Metamask Quickly[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#add-mantle-network-to-metamask-quickly)\\n\\nBased on the [JSON-RPC API](https://docs.metamask.io/wallet/reference/wallet_addethereumchain/) provided by Metamask, developers can implement the ability to add Mantle Network to Metamask with a single click.\\n\\n```\\nawait window.ethereum.request({\\n  \\\"method\\\": \\\"w",
    "allet_addEthereumChain\\\",\\n  \\\"params\\\": [\\n    {\\n      \\\"blockExplorerUrls\\\": [\\n        \\\"https://mantlescan.xyz/\\\"\\n      ],\\n      \\\"iconUrls\\\": [\\n        \\\"https://drive.google.com/file/d/1qLqZu2vZSkZcKf46YERoa9cF0NfURvcc/view?usp=drive_link\\\"\\n      ],\\n      \\\"nativeCurrency\\\": {\\n        \\\"name\\\": \\\"MNT\\\",\\n        \\\"symbol\\\": \\\"MNT\\\",\\n        \\\"decimals\\\": 18\\n      },\\n      \\\"rpcUrls\\\": [\\n        \\\"https://rpc.mantle.xyz\\\"\\n      ],\\n      \\\"chainId\\\": \\\"0x1388\\\",\\n      \\\"chainName\\\": \\\"Mantle\\\"\\n    }\\n  ]\\n});\\n```\\n\\n## \\n\\nCanonical Token Addresses[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#canonical-token-addresses)\\n\\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains [a token list](https://github.com/mantlenetworkio/mantle-token-lists/blob/main/mantle.tokenlist.json) that includes known addresses for many popular tokens. For example, looking at the`$MNT` tok",
    "en, the Mantle token list returns the following addresses:\\n\\n0x3c3a81e81dc49a522a592e7622a7e711c06bf354\\n\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n\\n## \\n\\nTransaction Status[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#transaction-status)\\n\\nA transaction on Mantle network can be in one of these states:\\n\\n*   **Sequencer Confirmed:** The transaction has been accepted by the sequencer on Mantle (L2)\\n    \\n*   **Confirmed On-Chain:** The transaction has been written to Ethereum (L1)\\n    \\n\\nIf a transaction is a withdrawal, it can be in one of the following states:\\n\\n*   **Waiting:** Confirmed on L1, but still in the challenge period\\n    \\n*   **Ready to Prove:** Transaction is ready to be proved on L1 to initiate the challenge period\\n    \\n*   **Ready for Relay:** Transaction is out of the challenge period, and can be released by submitting a relay message\\n    \\n*   **Relayed:** A withdrawal is finalized, and the token is released from the bridge\\n    \\n\\nYou",
    " can use the [Mantle SDK](https://github.com/mantlenetworkio/mantle-v2/tree/develop/packages/sdk) to find out your transaction status.\\n\\n## \\n\\nTransaction Fees[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#transaction-fees)\\n\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum [here](https://docs.mantle.xyz/network/system-information/fee-mechanism).\\n\\n## \\n\\nEstimating Total Fees[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#estimating-total-fees)\\n\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it rolls up to Ethereum.\\n\\nIn fact, this fee is automatically deducted from the user's `$MNT` balance on Mantle when the transaction is executed.\\n\\nMantle SDK provides an int",
    "erface to get the total gas fee directly.\\n\\n## \\n\\nSending \\\"Max\\\" $MNT[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/wallet#sending-max-mnt)\\n\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's `$MNT` balance being sent.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-a-custom-bridge-to-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"loadedTime\": \"2025-02-15T20:32:33.998Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network\",\n    \"depth\": 1,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/for-developers/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"title",
    "\": \"Adding a Custom Bridge to Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding a Custom Bridge to Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/~gitbook/ogimage/cV2CIE5W2wkdKsyr6t6p\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:33 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTg1ZWJlZGQtZj",
    "k4OS00YjU1LTkwMTctMWQ3MDIyNGFhNzZh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=FoSdNQYTKMqSxn2sLbR%2FIattwkDoPOTt9XG6i80oPU",
    "f6okseY51SIvO2KZan%2B2A16%2BowWFQxUfD18KooSH71hyGwC2kJWgaAwWX3e%2Fvl0q857oaoqW5qjbMEpg%2BUJnFvmxsmS4fDfan9RJKdIEPD\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128115c7c254d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding a Custom Bridge to Mantle\\nUsing the Standard Bridge​\\nWe suggest considering using the Standard Bridge first before deciding to develop a custom bridge solution.\\nIn the standard bridge when ERC-20 is deposited on layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the layer 2 (L2) to",
    "ken. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\nBuilding a Custom Bridge​\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the Bridging basics article, and also the tutorial on depositing and withdrawing ERC-20 tokens between L1 and L2.\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are ",
    "bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the IL1ERC20Bridge interface in the L1 bridge contract and IL2ERC20Bridge interface in the L2 bridge contract. This ensures the Mantle Gateway can support token deposits and withdrawals via this custom bridge.\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle token list repository. Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\nLast updated 3 months ago\",\n  \"markdown\": \"# Adding a Custom Bridge to Mantle\\n\\n## \\n\\nUsing the Standard Bridge[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/bridge#using-the-standard-bridge)\\n\\nWe suggest conside",
    "ring using the [Standard Bridge](https://bridge.mantle.xyz/) first before deciding to develop a custom bridge solution.\\n\\nIn the standard bridge when ERC-20 is deposited on layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the layer 2 (L2) token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\n\\n## \\n\\nBuilding a Custom Bridge[​](https://docs-v2.mantle.xyz/devs/dev-guides/common/bridge#building-a-custom-bridge)\\n\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the [Bridging basics article](https://mantle",
    "networkio.github.io/mantle-tutorial/cross-dom-comm/), and also the [tutorial on depositing and withdrawing ERC-20 tokens between L1 and L2](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\n\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the IL1ERC20Bridge interface in the L1 bridge contract and IL2ERC20Bridge interface in the L2 bridge contract. This ensur",
    "es the Mantle Gateway can support token deposits and withdrawals via this custom bridge.\\n\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle [token list repository](https://github.com/mantlenetworkio/mantle-token-lists#mantle-token-list). Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\n\\nLast updated 3 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups\",\n    \"loadedTime\": \"2025-02-15T20:32:39.456Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups\",\n    \"title\": \"Optimistic Ro",
    "llups | Network\",\n    \"description\": \"Taking transaction processing off Ethereum to L2s\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Optimistic Rollups | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Taking transaction processing off Ethereum to L2s\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/vi5qIQH1GumsGDIqVRlh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-",
    "State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OWE2N2MyYjMtYWZlMi00YmUyLWFjMTgtNjUyYmVlY2EwMDQ3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"su",
    "ccess_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=9cEGo7%2B9hZb1UkPUx6DDZYKFWGpnux4cEy8DIEzv0jXq1Maf8RwQKaEMT3JjjBXMaE1AdLz4fMf9jm%2Bou%2FTb3wdlV1Ufje8yIzzEDNwNeoY7DGqieOTYU6t%2BSTzNcEbvizfTVeYMXJuq2p3Kq1n8\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811842df7059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Optimistic Rollups | Network\\nTaking transaction processing off Ethereum to L2s\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWhat are Optimistic Rollups?\\nOpti",
    "mistic Rollups (ORs) are Layer-2 (L2) protocols designed to increase the throughput of Ethereum. They reduce computation load on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches.\\nThere are a few different scaling solutions currently in use by various projects, such as:\\nSidechains: Independent blockchains that are linked to a main chain, but maintain block data separately and use their own consensus models. For example, Polygon.\\nPlasma chains: Analogous to child chains that also maintain their own block data validation process, except they're non-custodial in nature from the perspective of assets, which means users can exit with their funds in case of an anomaly. \\nUnlike the solutions stated above, ORs derive security from the Ethereum mainnet by publishing transaction results on-chain. \\nORs are considered “optimistic” because they assume off-chain transactions are valid and don't publish proofs of validity for transac",
    "tion batches posted on-chain. But how do they detect and deal with invalid states then? This is where Fraud Proofs come in.\\nNetwork actors submit fraud proofs if they spot invalid transactions. Smart contracts on the Ethereum mainnet then execute the individual transactions (or an entire block if necessary) to check their validity. If confirmed to be invalid, the batch submitter (the Sequencer) gets their stake (deposited as bond at the time of batch submission) slashed, setting a disincentive in place to discourage invalid submissions.\\nFor more details, we recommend reading: \\nLast updated 11 months ago\",\n  \"markdown\": \"# Optimistic Rollups | Network\\n\\nTaking transaction processing off Ethereum to L2s\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**What are** Optimistic Rollups?\\n\\nOptimistic Rollups (ORs) are Layer-2 (L2) protocols designed to increase the throughput of Ethereum. They reduce computation loa",
    "d on the main Ethereum chain by taking computation and state storage off-chain and processing transactions in batches.\\n\\nThere are a few different scaling solutions currently in use by various projects, such as:\\n\\n*   **Sidechains:** Independent blockchains that are linked to a main chain, but maintain block data separately and use their own consensus models. For example, Polygon.\\n    \\n*   **Plasma chains:** Analogous to child chains that also maintain their own block data validation process, except they're non-custodial in nature from the perspective of assets, which means users can exit with their funds in case of an anomaly.\\n    \\n\\nUnlike the solutions stated above, ORs derive security from the Ethereum mainnet by publishing transaction results on-chain.\\n\\nORs are considered “_optimistic_” because they assume off-chain transactions are valid and don't publish proofs of validity for transaction batches posted on-chain. But how do they detect and deal with invalid states then? ",
    "This is where Fraud Proofs come in.\\n\\nNetwork actors submit fraud proofs if they spot invalid transactions. Smart contracts on the Ethereum mainnet then execute the individual transactions (or an entire block if necessary) to check their validity. If confirmed to be invalid, the batch submitter (the _Sequencer_) gets their stake (deposited as bond at the time of batch submission) slashed, setting a disincentive in place to discourage invalid submissions.\\n\\n**For more details, we recommend reading:**\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge\",\n    \"loadedTime\": \"2025-02-15T20:32:39.493Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },",
    "\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge\",\n    \"title\": \"Bridging Custom ERC20 Tokens Using Standard Bridge | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging Custom ERC20 Tokens Using Standard Bridge | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/CCIFJ5Yq2sVYZaY98Da4\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-trans",
    "port-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzRhNzVjYjctZjg2ZS00YzcyLWJlNjAtYTE4ZjAyYTNkN2Ux' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https:",
    "//static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=IllJ0A7FOA1c1rb37c5bI2ELQQtfht8kTK2fnfEnsjKhQXo2V9J6onPp7ZrjZ7VIPgsGyLmnoZKPC8zXdP70ngI3RGQfF24HyaoNRYjY3i9mW8ANr9AWnNah8RVpgXXUBEylUWgsMhUuohEyCEL2\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811839ac42d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging Custom ERC20 Tokens Using Standard Bridge\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nFor",
    " an L1/L2 token pair to work on the Standard Bridge, there has to be a layer of original mint (where the minting and burning of tokens is controlled by the business logic), and a bridged layer where the Standard Bridge controls minting and burning. The most common configuration is to have L1 as the layer of original mint, and L2 as the bridged layer, this allows for ERC-20 contracts that were written with no knowledge of Mantle Mainnet to be bridged. The contract on the bridged layer has to implement the legacy IL2StandardERC20 interface (only if the bridged layer is L2).\\nFor this to be done securely, the only entity that is allowed to mint and burn tokens on the bridged layer has to be the Standard Bridge, to ensure that the tokens on the bridged layer are backed up by real tokens on the layer of original mint. It is also necessary that the ERC-20 token contract on the layer of original mint not implement either of the interfaces, to make sure the bridge contracts don't get confused ",
    "and think it is the bridged layer.\\nWarning: The standard bridge does not support certain ERC-20 configurations:\\nFor the purpose we import the L2StandardERC20 from the @mantleio/contracts package. This standard token implementation is based on the OpenZeppelin ERC20 contract and implements the required IL2StandardERC20 interface.\\nYou can import @mantleio/contracts to use the Mantle contracts within your own codebase. Install via npm or yarn:\\nnpm install @mantleio/contracts\\nWithin your contracts:\\nimport { L2StandardERC20 } from \\\"@mantleio/contracts/standards/L2StandardERC20.sol\\\";\\nDeploying the custom token\\nDownload the necessary packages.\\nCopy .env.example to .env.\\nEdit .env to set the deployment parameters:\\nPRIVATE_KEY, the hex private key for an account that has enough ETH for the deployment.\\nL1_RPC, Ethereum endpoint RPC URL.\\nL2_RPC, Mantle endpoint RPC URL.\\nL1_BRIDGE, L1 standard bridge contract address.\\nL2_BRIDGE, L2 standard bridge contract address.\\nL1_TOKEN_ADDRE",
    "SS, the address of the L1 ERC20 which you want to bridge. The default value, 0xeE7Bf96bFd25931976F45a16C4483d336169Bc0F is a test ERC-20 contract on Goerli that lets you call faucet to give yourself test tokens.\\nOpen the hardhat console.\\nyarn hardhat console --network mantle-network\\nDeploy the contract.\\nl2CustomERC20Factory = await ethers.getContractFactory(\\\"L2CustomERC20\\\") l2CustomERC20 = await l2CustomERC20Factory.deploy( \\\"0x4200000000000000000000000000000000000010\\\", process.env.L1_TOKEN_ADDRESS)\\nTransferring tokens\\nGet the token addresses.\\nl1Addr = process.env.L1_TOKEN_ADDRESS l2Addr = l2CustomERC20.address\\nGet setup for L1 (provider, wallet, tokens, etc)\\nGet the L1 wallet.\\nl1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC) const privateKey = process.env.PRIVATE_KEY l1Wallet = new ethers.Wallet(privateKey, l1RpcProvider)\\nGet the L1 contract.\\nl1Factory = await ethers.getContractFactory(\\\"MantleUselessToken\\\") l1Contract = new ethers.Contract(proc",
    "ess.env.L1_TOKEN_ADDRESS, l1Factory.interface, l1Wallet)\\nGet tokens on L1 (and verify the balance)\\ntx = await l1Contract.faucet() rcpt = await tx.wait() await l1Contract.balanceOf(l1Wallet.address)\\nTransfer tokens\\nCreate and use CrossDomainMessenger (the Mantle SDK object used to bridge assets).\\nImport the Mantle SDK.\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\")\\nCreate the cross domain messenger.\\nl1ChainId = (await l1RpcProvider.getNetwork()).chainId l2ChainId = (await ethers.provider.getNetwork()).chainId l2Wallet = await ethers.provider.getSigner() crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: l1ChainId, l2ChainId: l2ChainId, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet, })\\nDeposit (from Goerli to Mantle Testnet, or Ethereum to Mantle Mainnet)\\nGive the L2 bridge an allowance to use the user's token. The L2 address is necessary to know which bridge is responsible and needs the allowance.\\ndepositTx1 = await crossChainMessenger.approveERC2",
    "0(l1Contract.address, l2Addr, 1e9) await depositTx1.wait()\\nCheck your balances on L1 and L2.\\nawait l1Contract.balanceOf(l1Wallet.address) await l2CustomERC20.balanceOf(l1Wallet.address)\\nDo the actual deposit\\ndepositTx2 = await crossChainMessenger.depositERC20(l1Contract.address, l2Addr, 1e9) await depositTx2.wait()\\nWait for the deposit to be relayed.\\nawait crossChainMessenger.waitForMessageStatus(depositTx2.hash, mantleSDK.MessageStatus.RELAYED)\\nCheck your balances on L1 and L2.\\nawait l1Contract.balanceOf(l1Wallet.address) await l2CustomERC20.balanceOf(l1Wallet.address)\\nWithdrawal (from Mantle Mainnet to Ethereum, or Mantle Testnet to Goerli)\\nInitiate the withdrawal on L2\\nwithdrawalTx1 = await crossChainMessenger.withdrawERC20(l1Contract.address, l2Addr, 1e9) await withdrawalTx1.wait()\\nWait until the root state is published on L1, and then prove the withdrawal. This is likely to take within 30 minutes.\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mant",
    "leSDK.MessageStatus.READY_TO_PROVE) withdrawalTx2 = await crossChainMessenger.proveMessage(withdrawalTx1.hash) await withdrawalTx2.wait()\\nWait the fraud challenge period (a short period on Goerli, currently 7 days(but may be adjusted in the future which can be checked here) on the production network) and then finish the withdrawal.\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mantleSDK.MessageStatus.READY_FOR_RELAY) withdrawalTx3 = await crossChainMessenger.finalizeMessage(withdrawalTx1.hash) await withdrawalTx3.wait() \\nCheck your balances on L1 and L2. The balance on L2 should be back to zero.\\nawait l1Contract.balanceOf(l1Wallet.address) await l2CustomERC20.balanceOf(l1Wallet.address)\\nUse Factory Contract to Deploy L2StandardERC20\\nThe token contracts deployed using Factory contract are standard IL2StandardERC20 contracts and can only take the name \\\"L2StandardERC20\\\". If you want to use a different name and methods, you can inherit the L2StandardERC20 contr",
    "act and deploy is as a custom contract.\\nCall the createStandardL2Token method of the L2StandardTokenFactory contract by passing the l1Token, name, symbol, and decimal parameters. The mainnet factory contract is deployed at: 0x4200000000000000000000000000000000000012\\nThe corresponding contract address will be generated upon a successful call. The creation transaction can be found under the internal transaction tab on the Explorer. Examples:\\nInternal transactions on mainnet can take upto ~12 minutes before they show up on the Explorer.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Bridging Custom ERC20 Tokens Using Standard Bridge\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nFor an L1/L2 token pair to work on the Standard Bridge, there has to be a layer of original mint (where the minting and burning of tokens is controlled by the business logic), and a bridged layer where the Standard Bridge controls minting and bur",
    "ning. The most common configuration is to have L1 as the layer of original mint, and L2 as the bridged layer, this allows for ERC-20 contracts that were written with no knowledge of Mantle Mainnet to be bridged. The contract on the bridged layer has to implement the legacy [`IL2StandardERC20`](https://github.com/mantlenetworkio/mantle-erc20-bridge/blob/main/contracts/ERC20/IL2StandardERC20.sol) interface (only if the bridged layer is L2).\\n\\nFor this to be done securely, the _only_ entity that is allowed to mint and burn tokens on the bridged layer has to be the Standard Bridge, to ensure that the tokens on the bridged layer are backed up by real tokens on the layer of original mint. It is also necessary that the ERC-20 token contract on the layer of original mint _not_ implement either of the interfaces, to make sure the bridge contracts don't get confused and think it is the bridged layer.\\n\\n**Warning:** The standard bridge does _not_ support certain ERC-20 configurations:\\n\\nFor th",
    "e purpose we import the `L2StandardERC20` from the `@mantleio/contracts` package. This standard token implementation is based on the OpenZeppelin ERC20 contract and implements the required `IL2StandardERC20` interface.\\n\\nYou can import `@mantleio/contracts` to use the Mantle contracts within your own codebase. Install via `npm` or `yarn`:\\n\\n```\\nnpm install @mantleio/contracts\\n```\\n\\nWithin your contracts:\\n\\n```\\nimport { L2StandardERC20 } from \\\"@mantleio/contracts/standards/L2StandardERC20.sol\\\";\\n```\\n\\n## \\n\\nDeploying the custom token\\n\\n1.  Download the necessary packages.\\n    \\n\\n1.  Copy `.env.example` to `.env`.\\n    \\n\\n1.  Edit `.env` to set the deployment parameters:\\n    \\n\\n*   `PRIVATE_KEY`, the hex private key for an account that has enough ETH for the deployment.\\n    \\n*   `L1_RPC`, Ethereum endpoint RPC URL.\\n    \\n*   `L2_RPC`, Mantle endpoint RPC URL.\\n    \\n*   `L1_BRIDGE`, L1 standard bridge contract address.\\n    \\n*   `L2_BRIDGE`, L2 standard bridge contra",
    "ct address.\\n    \\n*   `L1_TOKEN_ADDRESS`, the address of the L1 ERC20 which you want to bridge. The default value, [`0xeE7Bf96bFd25931976F45a16C4483d336169Bc0F`](https://goerli.etherscan.io/address/0xee7bf96bfd25931976f45a16c4483d336169bc0f) is a test ERC-20 contract on Goerli that lets you call `faucet` to give yourself test tokens.\\n    \\n\\n1.  Open the hardhat console.\\n    \\n\\n```\\nyarn hardhat console --network mantle-network\\n```\\n\\n1.  Deploy the contract.\\n    \\n\\n```\\nl2CustomERC20Factory = await ethers.getContractFactory(\\\"L2CustomERC20\\\")   \\nl2CustomERC20 = await l2CustomERC20Factory.deploy(\\n   \\\"0x4200000000000000000000000000000000000010\\\",\\n   process.env.L1_TOKEN_ADDRESS)\\n```\\n\\n## \\n\\nTransferring tokens\\n\\n1.  Get the token addresses.\\n    \\n\\n```\\nl1Addr = process.env.L1_TOKEN_ADDRESS\\nl2Addr = l2CustomERC20.address\\n```\\n\\n### \\n\\nGet setup for L1 (provider, wallet, tokens, etc)\\n\\n1.  Get the L1 wallet.\\n    \\n\\n```\\nl1RpcProvider = new ethers.providers.JsonRpcPr",
    "ovider(process.env.L1_RPC)\\nconst privateKey = process.env.PRIVATE_KEY\\nl1Wallet = new ethers.Wallet(privateKey, l1RpcProvider)\\n```\\n\\n1.  Get the L1 contract.\\n    \\n\\n```\\nl1Factory = await ethers.getContractFactory(\\\"MantleUselessToken\\\")\\nl1Contract = new ethers.Contract(process.env.L1_TOKEN_ADDRESS, l1Factory.interface, l1Wallet)\\n```\\n\\n1.  Get tokens on L1 (and verify the balance)\\n    \\n\\n```\\ntx = await l1Contract.faucet()\\nrcpt = await tx.wait()\\nawait l1Contract.balanceOf(l1Wallet.address)\\n```\\n\\n### \\n\\nTransfer tokens\\n\\nCreate and use [`CrossDomainMessenger`](https://sdk.mantle.xyz/classes/CrossChainMessenger.html) (the Mantle SDK object used to bridge assets).\\n\\n1.  Import the Mantle SDK.\\n    \\n\\n```\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\")\\n```\\n\\n1.  Create the cross domain messenger.\\n    \\n\\n```\\nl1ChainId = (await l1RpcProvider.getNetwork()).chainId\\nl2ChainId = (await ethers.provider.getNetwork()).chainId\\nl2Wallet = await ethers.provider.getSigner()\\ncros",
    "sChainMessenger = new mantleSDK.CrossChainMessenger({\\n   l1ChainId: l1ChainId,\\n   l2ChainId: l2ChainId,\\n   l1SignerOrProvider: l1Wallet,\\n   l2SignerOrProvider: l2Wallet,\\n})\\n```\\n\\n#### \\n\\n**Deposit (from Goerli to Mantle Testnet, or Ethereum to Mantle Mainnet)**\\n\\n1.  Give the L2 bridge an allowance to use the user's token. The L2 address is necessary to know which bridge is responsible and needs the allowance.\\n    \\n\\n```\\ndepositTx1 = await crossChainMessenger.approveERC20(l1Contract.address, l2Addr, 1e9)\\nawait depositTx1.wait()\\n```\\n\\n1.  Check your balances on L1 and L2.\\n    \\n\\n```\\nawait l1Contract.balanceOf(l1Wallet.address) \\nawait l2CustomERC20.balanceOf(l1Wallet.address)\\n```\\n\\n1.  Do the actual deposit\\n    \\n\\n```\\ndepositTx2 = await crossChainMessenger.depositERC20(l1Contract.address, l2Addr, 1e9)\\nawait depositTx2.wait()\\n```\\n\\n1.  Wait for the deposit to be relayed.\\n    \\n\\n```\\nawait crossChainMessenger.waitForMessageStatus(depositTx2.hash, mantleSDK.Mess",
    "ageStatus.RELAYED)\\n```\\n\\n1.  Check your balances on L1 and L2.\\n    \\n\\n```\\nawait l1Contract.balanceOf(l1Wallet.address) \\nawait l2CustomERC20.balanceOf(l1Wallet.address)\\n```\\n\\n#### \\n\\nWithdrawal (from Mantle Mainnet to Ethereum, or Mantle Testnet to Goerli)\\n\\n1.  Initiate the withdrawal on L2\\n    \\n\\n```\\nwithdrawalTx1 = await crossChainMessenger.withdrawERC20(l1Contract.address, l2Addr, 1e9)\\nawait withdrawalTx1.wait()\\n```\\n\\n1.  Wait until the root state is published on L1, and then prove the withdrawal. This is likely to take within 30 minutes.\\n    \\n\\n```\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mantleSDK.MessageStatus.READY_TO_PROVE)\\nwithdrawalTx2 = await crossChainMessenger.proveMessage(withdrawalTx1.hash)\\nawait withdrawalTx2.wait()\\n```\\n\\n1.  Wait the fraud challenge period (a short period on Goerli, currently 7 days(but may be adjusted in the future which can be checked [here](https://etherscan.io/address/0x89E9D387555AF0cDE22cb98833Bae4",
    "0d640AD7fa#readContract#F1)) on the production network) and then finish the withdrawal.\\n    \\n\\n```\\nawait crossChainMessenger.waitForMessageStatus(withdrawalTx1.hash, mantleSDK.MessageStatus.READY_FOR_RELAY)\\nwithdrawalTx3 = await crossChainMessenger.finalizeMessage(withdrawalTx1.hash)\\nawait withdrawalTx3.wait()   \\n```\\n\\n1.  Check your balances on L1 and L2. The balance on L2 should be back to zero.\\n    \\n\\n```\\nawait l1Contract.balanceOf(l1Wallet.address) \\nawait l2CustomERC20.balanceOf(l1Wallet.address)\\n```\\n\\n## \\n\\nUse Factory Contract to Deploy L2StandardERC20\\n\\nThe token contracts deployed using Factory contract are standard `IL2StandardERC20` contracts and can only take the name \\\"L2StandardERC20\\\". If you want to use a different name and methods, you can inherit the L2StandardERC20 contract and deploy is as a custom contract.\\n\\n1.  Call the `createStandardL2Token` method of the `L2StandardTokenFactory` contract by passing the `l1Token`, `name`, `symbol`, and `decimal` ",
    "parameters. The mainnet factory contract is deployed at: [`0x4200000000000000000000000000000000000012`](https://explorer.mantle.xyz/address/0x4200000000000000000000000000000000000012)\\n    \\n\\n1.  The corresponding contract address will be generated upon a successful call. The creation transaction can be found under the internal transaction tab on the Explorer. Examples:\\n    \\n\\nInternal transactions on mainnet can take upto ~12 minutes before they show up on the Explorer.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-wallet-support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-wallet-support\",\n    \"loadedTime\": \"2025-02-15T20:32:39.865Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.",
    "xyz/network/network/for-devs/common-use-cases/adding-mantle-wallet-support\",\n    \"title\": \"Adding Mantle Wallet Support | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle Wallet Support | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/cO8szj2fDmZ34TmDdRBp\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding",
    "\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTQwMzMwZjUtMTg4Ni00NmNiLWExMWQtY2MxZWVkODU5MTcy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max",
    "_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=QDdRhSj5fmr369gfU%2FOj7Vt99sMyE4SwWkQlBUuIqYQiSp%2F6hfUbUnXfQHw3mQ0aOathnmVGzYL%2B01BqyUK4grNEBfJr%2BTzLywAmbr0o%2Bm7PuD9DIYeQG7bxd88%2FF%2Fxo1jG9L3B0D%2FEk8x0oNglS\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281185aac382e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding Mantle Wallet Support | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nOverview\\nMantle network uses $MNT as a native token, and creates an EVM-like code execution environment for transac",
    "tion and state processing. This means a user on Layer 2 (L2) can use $MNT exactly like they would $ETH on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in the section:Transaction Fees on L2. Any $MNT tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\nConnecting to Mantle\\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nCanonical Token Addresses \\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains a token list that includes known addresses for many popular tokens. \\nFor example, looking at the $MNT token, the Mantle token list returns the following addresses:\\n0x1A4b46696b2bB4794Eb3D4c26f1c55F9170fa4C5\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD00",
    "00\\n0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\nTransaction Status\\nA transaction on Mantle network can be in one of these states:\\nSequencer Confirmed: The transaction has been accepted by the sequencer on Mantle (L2) \\nConfirmed On-Chain: The transaction has been written to Ethereum (L1)\\nIf a transaction is a withdrawal, it can be in one of the following states:\\nWaiting: Confirmed on L1, but still in the challenge period \\nReady for Relay: Transaction is out of the challenge period, and can be released by submitting a relay message \\nRelayed: A withdrawal is finalized, and the token is released from the bridge\\nYou can use the Mantle SDK to find out your transaction status.\\nTransaction Fees\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum here.\\nEstimating Total Fees\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing ",
    "the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it rolls up to Ethereum. \\nIn fact, this fee is automatically deducted from the user's $MNT balance on Mantle when the transaction is executed.\\nThe total fee paid by a transaction will be a combination of the normal fee estimation formula (gasPrice * gasLimit) on L2 execution, and in addition to the estimated L1 fee for rollup.\\nYou can read more about this subject in Transaction Fees on L2. \\nSending \\\"Max\\\" $MNT\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's $MNT balance being sent. \\nYou MUST deduct both the L2 execution fee, and the L1 data rollup fee from the transaction sending amount. Otherwise, it will exceed the user's balance and the transaction will fail.",
    "\\nLast updated 11 months ago\",\n  \"markdown\": \"# Adding Mantle Wallet Support | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**Overview**\\n\\nMantle network uses $MNT as a native token, and creates an EVM-like code execution environment for transaction and state processing. This means a user on Layer 2 (L2) can use **$MNT** exactly like they would $ETH on Ethereum, namely to pay gas fees. For this reason, there are changes to how fees are calculated on Mantle network, which you can better understand in the section:[Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2). Any $MNT tokens collected on the L2 as transaction gas fee will be rewarded to validators or burned out on schedule.\\n\\n### \\n\\n**Connecting to Mantle**\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to M",
    "antle through any of the following means:\\n\\n### \\n\\n**Canonical Token Addresses**\\n\\nThe ERC-20 contract address for a token on Mantle network may be different from the address for the same token on Ethereum. Mantle maintains a [token list](https://github.com/mantlenetworkio/mantle-token-lists) that includes known addresses for many popular tokens.\\n\\nFor example, looking at the **$MNT** token, the Mantle token list returns the following addresses:\\n\\n0x1A4b46696b2bB4794Eb3D4c26f1c55F9170fa4C5\\n\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n\\n0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\n\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n\\n### \\n\\n**Transaction Status**\\n\\nA transaction on Mantle network can be in one of these states:\\n\\n*   **Sequencer Confirmed:** The transaction has been accepted by the sequencer on Mantle (L2)\\n    \\n*   **Confirmed On-Chain:** The transaction has been written to Ethereum (L1)\\n    \\n\\nIf a transaction is a withdrawal, it can be in one of the following st",
    "ates:\\n\\n*   **Waiting:** Confirmed on L1, but still in the challenge period\\n    \\n*   **Ready for Relay:** Transaction is out of the challenge period, and can be released by submitting a relay message\\n    \\n*   **Relayed:** A withdrawal is finalized, and the token is released from the bridge\\n    \\n\\nYou can use the [Mantle SDK](https://github.com/mantlenetworkio/mantle/tree/main/packages/sdk) to find out your transaction status.\\n\\n### \\n\\nTransaction Fees\\n\\nMantle network aims to be EVM-compatible, you can see a summary of the few differences between Mantle and Ethereum [here](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2).\\n\\n### \\n\\nEstimating Total Fees\\n\\nThe major portion of the total cost of a transaction on Mantle network comes from the cost of publishing the transaction to Ethereum. Unlike with L2 execution gas fees, users cannot specify a particular gas price or gas limit for this portion of their transaction cost when it rolls up to Ethereu",
    "m.\\n\\nIn fact, this fee is automatically deducted from the user's $MNT balance on Mantle when the transaction is executed.\\n\\nThe total fee paid by a transaction will be a combination of the normal fee estimation formula `**(gasPrice * gasLimit)**` on L2 execution, and in addition to the estimated L1 fee for rollup.\\n\\nYou can read more about this subject in [Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2).\\n\\n### \\n\\nSending \\\"Max\\\" $MNT\\n\\nMany wallets allow users to send the maximum amount of a token available in the user's balance. This requires the fee for this transaction to be calculated in advance, and then deducted from the user's $MNT balance being **sent**.\\n\\nYou **MUST** deduct **both** the **L2 execution fee,** and the **L1 data rollup fee** from the transaction sending amount. Otherwise, it will exceed the user's balance and the transaction will fail.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode",
    "\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains\",\n    \"loadedTime\": \"2025-02-15T20:32:40.170Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains\",\n    \"title\": \"Modular Blockchain | Network\",\n    \"description\": \"Taking a modular chain approach to offer hyper-scaled transaction throughput\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Modular Blockchain | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Taking a modular chain approach to offer hyper-scaled transaction throughput\"\n      },\n      {\n        \"property\": \"og:image\",\n ",
    "       \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/8V1H7kVgtwUQ3zzkPNbg\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2RiN2NjZjItYTA5NC00MWY4LTg1OTEtZDM3NmI1NGM0ZWI1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'sel",
    "f' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=aTL1pkwyzNwnSXFlFmFi0d5cfwpy7Pi60WjHGiEldFezaGXO2jpS0My4HgNig7WdJgf05hUXQovQo8MD%2FT88GGjZXqFhe44dKrUlc0UEnD9Rf17%2BitW%2FYmLrN343OEu6Yj50NF3MtY%2F3yPdS%2BrUZ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-typ",
    "e-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811844dd69c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Modular Blockchain | Network\\nTaking a modular chain approach to offer hyper-scaled transaction throughput\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nExisting systems\\nTraditional Optimistic Rollups (ORs) rely on Ethereum for data availability, final settlement, and as an execution layer for fraud proofs.\\nTo get a clearer idea on why we built Mantle network with a modular architecture, let's talk about the standard operations of a traditional OR.\\nA typical OR can be thought of as a blockchain that processes L2 transactions on a separate execution layer, but ultimately relies on Ethereum fo",
    "r final settlement. In order to maintain Ethereum-level security, an OR must also use Ethereum for data availability and as an execution layer for fraud proofs. This design improves Ethereum's scaling, but also introduces several downsides:\\nL2 users are exposed to expensive fees because the OR posts transaction data to Ethereum\\nUsing Ethereum as a data availability layer constrains throughput for L2 nodes\\nTraditional ORs must allow for a lengthy challenge period (typically 7 days) before finality is achieved and users can exit their funds from the L2 chain\\nIdeally, an L2 scaling solution should offer the benefits of an OR without the downsides of the current architecture.\\nModular Rollups\\nIn a Modular Blockchain, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on specialized layers. By applying this principle to a rollup, we are able to optimize the solution since each layer is now performing a specialized task. This l",
    "eads to lower costs and better overall performance.\\nMany popular blockchains like Ethereum, Binance Smart Chain, Solana, etc. handle processes such as execution, consensus, settlement, and data availability all at the node/network level (hence sometimes referred to as Monolithic blockchains). Modular blockchains essentially break these functions into separate layers that can be run by network actors at different levels. This translates to lower gas costs and better overall performance. \\nA system like this is also a potential solution to the popular Scalability, Security, and Decentralization blockchain trilemma. Here's how.\\nThe separation of resources results in increased network efficiency since each layer specializes at a particular task.\\nAll users operate at the same level of improved security, as opposed to only validators (full nodes) on L1.\\nTechnologies such as fraud proofs and ZK proofs that operate on separate layers reduce the overall execution and validation load on the ",
    "nodes since they don't need to execute all the transactions for checking validity anymore.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Modular Blockchain | Network\\n\\nTaking a modular chain approach to offer hyper-scaled transaction throughput\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nExisting systems\\n\\nTraditional Optimistic Rollups (ORs) rely on Ethereum for data availability, final settlement, and as an execution layer for fraud proofs.\\n\\nTo get a clearer idea on why we built Mantle network with a modular architecture, let's talk about the standard operations of a traditional OR.\\n\\nA typical OR can be thought of as a blockchain that processes L2 transactions on a separate execution layer, but ultimately relies on Ethereum for final settlement. In order to maintain Ethereum-level security, an OR must also use Ethereum for data availability and as an execution layer for fraud proofs. This design improv",
    "es Ethereum's scaling, but also introduces several downsides:\\n\\n1.  L2 users are exposed to expensive fees because the OR posts transaction data to Ethereum\\n    \\n2.  Using Ethereum as a data availability layer constrains throughput for L2 nodes\\n    \\n3.  Traditional ORs must allow for a lengthy challenge period (typically 7 days) before finality is achieved and users can exit their funds from the L2 chain\\n    \\n\\nIdeally, an L2 scaling solution should offer the benefits of an OR without the downsides of the current architecture.\\n\\n## \\n\\nModular Rollups\\n\\nIn a **Modular Blockchain**, the core functions of blockchain operation (execution, consensus, settlement, data availability) are performed on **specialized** layers. By applying this principle to a rollup, we are able to optimize the solution since each layer is now performing a specialized task. This leads to lower costs and better overall performance.\\n\\nMany popular blockchains like Ethereum, Binance Smart Chain, Solana, et",
    "c. handle processes such as execution, consensus, settlement, and data availability all at the node/network level (hence sometimes referred to as _Monolithic blockchains_). Modular blockchains essentially break these functions into separate layers that can be run by network actors at different levels. This translates to lower gas costs and better overall performance.\\n\\nA system like this is also a potential solution to the popular Scalability, Security, and Decentralization [blockchain trilemma](https://learn.bybit.com/deep-dive/blockchain-trilemma/). Here's how.\\n\\n1.  The separation of resources results in increased network efficiency since each layer specializes at a particular task.\\n    \\n2.  All users operate at the same level of improved security, as opposed to only validators (full nodes) on L1.\\n    \\n3.  Technologies such as fraud proofs and ZK proofs that operate on separate layers reduce the overall execution and validation load on the nodes since they don't need to execut",
    "e all the transactions for checking validity anymore.\\n    \\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees\",\n    \"loadedTime\": \"2025-02-15T20:32:40.872Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees\",\n    \"title\": \"Estimating Transaction Fees | Network\",\n    \"description\": \"A tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Estimating Transaction Fees | Netw",
    "ork\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"A tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/7N7iC4oV6TvObfaJmPvk\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https:/",
    "/static.gitbook.com; script-src 'self' 'nonce-OTFiODI3NzMtMjMzMC00MGQ5LWJmNDctNzNkZjlhOTlmYjli' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/",
    "report\\\\/v4?s=Xcw7Wm9KmYQ5g2hRoprP4FIBJbU24N05RyLw5dRx3nd%2FFCEZ4jZvI5ZF7NAy4EQfyJ3noly7RvSCNTgTnkPPfKfOIDyUXFL6RjOhNIa6QGt5hDVn4baplE45Tw%2BwCPiVvLas3u0pNS0vB%2BFxdSkJ\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128118b9f039c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Estimating Transaction Fees | Network\\nA tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nDescription\\nIn this tutorial, we'll be looking at an example that shows how to use the Mantle SDK to estimate the total gas fees for a transaction on Mantle Network, whic",
    "h is a combination of the layer-2 (L2) execution fee, and the layer-1 (L1) rollup fee.\\nIn SDK version @mantleio/sdk @0.2.2 , we're introducing the parameters required to make accurate estimations of the L1 rollup fee that will be incurred for sending a transaction at any given time. The calculation to obtain L1 rollup fee is as follows:\\nL1RollupFee = L1GasPrice * Overhead * Scalar * Ratio\\nThere are 4 interfaces available as part of the SDK, where:\\nL1GasPrice * Ratio can be fetched by calling the getL1GasPrice method. It invokes the l1basefee() function of the BVM_GasPriceOracle contract.\\noverhead, decimals, and scalar values can be fetched from the BVM_GasPriceOracle contract by calling the respective SDK methods with the same names.\\nThe decimals value in the contract is mainly used to control the precision of scalar, which helps ensure accurate L1 rollup fee calculation.\\nThe L2 execution fee, on the other hand, is calculated as follows:\\nL2TxnFee = L2GasPrice * L2GasUsed\\nL2 ga",
    "s price is fetched by calling the getGasPrice method\\nThe gas used to execute a transaction is fetched by calling the estimateGas method\\nThe total gas fee is thus calculated as:\\ntotalEstimatedGasFee = L1RollupFee + L2TxnFee\\nSDK Installation\\nBefore proceeding, please make sure you have npm installed and configured in your local environment.\\nStart by installing Mantle SDK and the necessary dependencies in your environment by running the following command:\\nnpm install @mantleio/sdk\\nIf you already have the SDK installed, please make sure you update to the latest version by running the command npm update @mantleio/sdk since the L1 rollup fee parameters are only available for version 0.2.2, or higher.\\nScript\\nYou can directly use the following JS code to estimate the total gas fees.\\nconst ethers = require(\\\"ethers\\\") const mantleSDK = require(\\\"@mantleio/sdk\\\"); async function estimateGasFee() { const l2RpcProvider = new ethers.providers.JsonRpcProvider(\\\"https://rpc.mantle.xyz\\\") t",
    "ry{ // Arbitrary tx object const tx = { to: '0x...', value: ethers.utils.parseEther(\\\"0.1\\\"), // Returns value in wei }; // By calling the BVM_GasPriceOracle contract method l1basefee() const gasPrice = await mantleSDK.getL1GasPrice(l2RpcProvider); const decimals = await mantleSDK.decimals(l2RpcProvider); const scalar = await mantleSDK.scalar(l2RpcProvider); const gasUsed = await mantleSDK.overhead(l2RpcProvider); // L1RollupFee const l1RollupFee = gasPrice.mul(gasUsed).mul(scalar).div(10**decimals) // L2TxnFee const l2Gas = await l2RpcProvider.estimateGas(tx) const l2GasPrice = await l2RpcProvider.getGasPrice() const l2TxnFee = l2GasPrice.mul(l2Gas); // Total estimated Gas Fee const totalEstimatedGasFee = l1RollupFee.add(l2TxnFee); console.log(`Total estimated Gas Fee: ${totalEstimatedGasFee.toString()}`); } catch (error) { console.error('Error estimating gas:', error); } } estimateGasFee();\\nResult\\ntotalEstimatedGasFee contains the final result of the calculation, as discussed in th",
    "e Description section.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Estimating Transaction Fees | Network\\n\\nA tutorial showing how to accurately estimate the total transaction fees for a transaction on Mantle Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nDescription\\n\\nIn this tutorial, we'll be looking at an example that shows how to use the Mantle SDK to estimate the total gas fees for a transaction on Mantle Network, which is a combination of the layer-2 (L2) execution fee, and the layer-1 (L1) rollup fee.\\n\\nIn SDK version [`@mantleio/sdk @0.2.2`](https://www.npmjs.com/package/@mantleio/sdk/v/0.2.2) , we're introducing the parameters required to make accurate estimations of the L1 rollup fee that will be incurred for sending a transaction at any given time. The calculation to obtain L1 rollup fee is as follows:\\n\\n```\\nL1RollupFee = L1GasPrice * Overhead * Scalar * Ratio\\n```\\n\\nThere are 4 interfa",
    "ces available as part of the SDK, where:\\n\\n*   `L1GasPrice * Ratio` can be fetched by calling the `getL1GasPrice` method. It invokes the `l1basefee()` function of the [`BVM_GasPriceOracle`](https://explorer.mantle.xyz/address/0x420000000000000000000000000000000000000F) contract.\\n    \\n*   `overhead`, `decimals`, and `scalar` values can be fetched from the [`BVM_GasPriceOracle`](https://explorer.mantle.xyz/address/0x420000000000000000000000000000000000000F) contract by calling the respective SDK methods with the same names.\\n    \\n\\nThe `decimals` value in the contract is mainly used to control the precision of `scalar`, which helps ensure accurate L1 rollup fee calculation.\\n\\nThe L2 execution fee, on the other hand, is calculated as follows:\\n\\n```\\nL2TxnFee = L2GasPrice * L2GasUsed\\n```\\n\\n*   L2 gas price is fetched by calling the `getGasPrice` method\\n    \\n*   The gas used to execute a transaction is fetched by calling the `estimateGas` method\\n    \\n\\nThe total gas fee is thus ",
    "calculated as:\\n\\n```\\ntotalEstimatedGasFee = L1RollupFee + L2TxnFee\\n```\\n\\n## \\n\\nSDK Installation\\n\\nBefore proceeding, please make sure you have `npm` installed and configured in your local environment.\\n\\nStart by installing Mantle SDK and the necessary dependencies in your environment by running the following command:\\n\\n```\\nnpm install @mantleio/sdk\\n```\\n\\nIf you already have the SDK installed, please make sure you update to the latest version by running the command `npm update @mantleio/sdk` since the L1 rollup fee parameters are only available for **version 0.2.2, or higher**.\\n\\n## \\n\\nScript\\n\\nYou can directly use the following JS code to estimate the total gas fees.\\n\\n```\\nconst ethers = require(\\\"ethers\\\")\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\");\\n\\nasync function estimateGasFee() {\\n    const l2RpcProvider = new ethers.providers.JsonRpcProvider(\\\"https://rpc.mantle.xyz\\\")    \\n\\n    try{\\n        \\n        // Arbitrary tx object\\n        const tx = {\\n          ",
    "  to: '0x...',\\n            value: ethers.utils.parseEther(\\\"0.1\\\"), // Returns value in wei\\n        };\\n    \\n        // By calling the BVM_GasPriceOracle contract method l1basefee()\\n        const gasPrice = await mantleSDK.getL1GasPrice(l2RpcProvider);\\n        const decimals = await mantleSDK.decimals(l2RpcProvider);\\n        const scalar = await mantleSDK.scalar(l2RpcProvider);\\n        const gasUsed = await mantleSDK.overhead(l2RpcProvider);\\n    \\n        // L1RollupFee\\n        const l1RollupFee = gasPrice.mul(gasUsed).mul(scalar).div(10**decimals)\\n        \\n        // L2TxnFee\\n        const l2Gas = await l2RpcProvider.estimateGas(tx)\\n        const l2GasPrice = await l2RpcProvider.getGasPrice()\\n        const l2TxnFee = l2GasPrice.mul(l2Gas);\\n        \\n        // Total estimated Gas Fee\\n        const totalEstimatedGasFee = l1RollupFee.add(l2TxnFee);\\n        console.log(`Total estimated Gas Fee: ${totalEstimatedGasFee.toString()}`);\\n\\n    } catch (error) {\\n        conso",
    "le.error('Error estimating gas:', error);\\n    }\\n\\n}\\n\\nestimateGasFee();\\n```\\n\\n## \\n\\nResult\\n\\n`totalEstimatedGasFee` contains the final result of the calculation, as discussed in the [Description](https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees#description) section.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts\",\n    \"loadedTime\": \"2025-02-15T20:32:40.778Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts\",\n    \"title\": \"Key Concepts | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n   ",
    "     \"property\": \"og:title\",\n        \"content\": \"Key Concepts | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/qiSK5IHzU2PiBzSkmRNS\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:39 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzI4ZmI1OGYtM2U4OC00Yzg5LTk1NmEtNmYzODliZDI4NjE4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' h",
    "ttps://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=nDDEjcXaCe8z9spWJYal%2FH1MJQ673hpJkaBpx0JjVtjo0EnhOlUM2vwXMpsfska1sII0g70Sd2SD72BZJZU50v5Wfs5l62mMdU%2BP08iF%2FPmc5d6wN7I5yDwPkrI01N8vefueRHknmbIDmJrBoLeq\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-op",
    "tions\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281184af264d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Key Concepts | Network\\nOptimistic RollupsModular BlockchainData AvailabilityThreshold Signature SchemeFraud ProofsBridging\\nPreviousOverviewNextOptimistic Rollups\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Key Concepts | Network\\n\\n[Optimistic Rollups](https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups)[Modular Blockchain](https://docs.mantle.xyz/network/network/introduction/concepts/modular-chains)[Data Availability](https://docs.mantle.xyz/network/network/introduction/concepts/data-availabilit",
    "y)[Threshold Signature Scheme](https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme)[Fraud Proofs](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs)[Bridging](https://docs.mantle.xyz/network/network/introduction/concepts/bridging)\\n\\n[PreviousOverview](https://docs.mantle.xyz/network/network)[NextOptimistic Rollups](https://docs.mantle.xyz/network/network/introduction/concepts/optimistic-rollups)\\n\\nLast updated 1 year ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/moving-assets-and-data\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/moving-assets-and-data\",\n    \"loadedTime\": \"2025-02-15T20:32:42.355Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"h",
    "ttps://docs.mantle.xyz/network/network/for-devs/common-use-cases/moving-assets-and-data\",\n    \"title\": \"Moving Assets and Data | Network\",\n    \"description\": \"Moving assets between Mantle and Ethereum\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Moving Assets and Data | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Moving assets between Mantle and Ethereum\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/nty7gT6AGIVrPkQQ3s39\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=315360",
    "00\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODg4ODA4NmMtNDhmNy00YTdlLTg4ZDAtYzg0ZGE0YTgxMTg2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0",
    ", \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=KoJmkcO7vPwrqJ8XYwkHsXsCzHkteXpF4%2BI7SZXaQzTH5WvO942lS3BIstb8rKMqJJvLNag%2BJ%2FqNTC93b8b3d%2ByrZnABLw5YAo45I0J1ZNrSm601ZOuEP7f%2B%2B1DGxMjL7A1xiKjkmmj6UGiXqz%2FN\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128118acbf74d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Moving Assets and Data | Network\\nMoving assets between Mantle and Ethereum\\nMantle v2 Tectonic has been released,",
    " please move to the new documentation!\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\nSending Assets\\nThe Mantle Bridge enables all functionality necessary for the most common use case, i.e., moving tokens between Mantle network and Ethereum. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\nSending Data\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The Mantle Bridge has a simple API for triggering a cross-chain function call.\\nHow does it work?\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 ass",
    "et bridging mechanism are L2StandardBridge on Mantle network, and L1StandardBridge on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standard bridge contracts. \\nFor instance, when a wallet sends a deposit request for 10 $MNT on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of 10 $MNT is minted on L2 and transferred to the wallet.\\nIn case a wallet makes a withdrawal of 10 $MNT on L2, these tokens are burned and the matching amount of 10 $MNT tokens locked on L1 get released and transferred to the wallet.\\nYou can connect your wallet to the Mantle Bridge UI to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the Mantle Bridge API page for more information and tutorials on how to call the appropriate SDK methods to bridge the various kinds of tokens that are currently supported.\\nUsing the Official Mantle Bridge\\nTo",
    " move your $MNT tokens/Ether/other ERC-20 tokens between the Mantle and Ethereum chain, visit the Mantle Bridge. Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps here: Using Mantle Bridge\\nLast updated 11 months ago\",\n  \"markdown\": \"# Moving Assets and Data | Network\\n\\nMoving assets between Mantle and Ethereum\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nThe process of moving assets or data between two blockchains is generally referred to as 'bridging'. Since Mantle network is a separate Layer 2 (L2) blockchain system, apps and wallets moving assets or any another arbitrary form of data between Ethereum and Mantle can use our official bridge to achieve that.\\n\\n## \\n\\nSending Assets\\n\\nThe [Mantle Bridge](https://bridge.mantle.xyz/) enables all functionality necessary for the most common use case, i.e., moving tokens between Mantle network and Ethereu",
    "m. It also allows you to easily create L2 representations of existing tokens on Ethereum.\\n\\n## \\n\\nSending Data\\n\\nIf you need to send arbitrary data between Ethereum & Mantle network, you can do so by having a contract on Ethereum trigger a contract function on Mantle and vice versa. The [Mantle Bridge](https://bridge.mantle.xyz/) has a simple API for triggering a cross-chain function call.\\n\\n## \\n\\nHow does it work?\\n\\nThe standard Mantle bridge is essentially a set of smart contracts. The two main contracts that implement the ERC-20 asset bridging mechanism are [`L2StandardBridge`](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L2/messaging/L2StandardBridge.sol) on Mantle network, and [`L1StandardBridge`](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol) on Ethereum. Deposit or withdrawal transactions sent to the bridge by a wallet on L2 or L1 trigger specific methods in the standar",
    "d bridge contracts.\\n\\nFor instance, when a wallet sends a deposit request for 10 $MNT on L1, these tokens get locked on L1 in the bridge contract, and the matching amount of 10 $MNT is minted on L2 and transferred to the wallet.\\n\\nIn case a wallet makes a withdrawal of 10 $MNT on L2, these tokens are burned and the matching amount of 10 $MNT tokens locked on L1 get released and transferred to the wallet.\\n\\nYou can connect your wallet to the [Mantle Bridge UI](https://bridge.mantle.xyz/) to make simple deposits and withdrawals directly. However, if you're looking to use the bridge API instead, refer to the [Mantle Bridge API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api) page for more information and tutorials on how to call the appropriate SDK methods to bridge the various kinds of tokens that are currently supported.\\n\\n## \\n\\nUsing the Official Mantle Bridge\\n\\nTo move your $MNT tokens/Ether/other ERC-20 tokens between the Mantle and Eth",
    "ereum chain, visit the [Mantle Bridge](https://bridge.mantle.xyz/). Feel free to try out the testnet bridge first to get yourself acquanted with the UI. You can find the detailed steps here: [Using Mantle Bridge](https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge)\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:41.955Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk\",\n    \"title\": \"Bridging $MNT using Mantle SDK | Network\",\n    \"description\": \"Dep",
    "osit and withdraw $MNT using the SDK\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging $MNT using Mantle SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Deposit and withdraw $MNT using the SDK\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/cFG57e8MwTyZ3Tf4MqOj\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:40 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": ",
    "\"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NDE2YjRmZjUtNGViNi00NjFlLWFjOWMtOTQ5ZjdmYTY2ZTVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:",
    "\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=iX49HRB0sIZnGuz9QrpPrhUJW7cBcmvLQsiMaL2wpp9vMMCtFGKqKldZbm%2B%2FN1%2FmKL7KjGUc52Cc6Hgs1S27fTmhgB78Oo%2FxAKc1t1voE6ykQGZG8P0%2BW4P2gjNxTVmiqT7WNrlINlwzfsyD9EdC\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281187b9a74d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging $MNT using Mantle SDK\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nThis tutorial demonstrates how to use the Mantle SDK to deposit and withdraw $MNT tokens between Mantle and Ethereum.\\nSet up local environment\\nMake sure you have the",
    " following tools installed in your local environment.\\nLet's start by fetching the example JS scripts that we’ll work with and use to make SDK invocations from the Mantle Github. Clone the repository containing the sample scripts by executing the following command in your project directory.\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git\\nNext, we can use yarn to download the SDK along with all the necessary dependencies, as shown below. All the dependencies are defined in the yarn.lock file, so we can just run yarn in the ./cross-dom-bridge-mnt directory.\\nWe'll need a .env file from where we can add and modify wallet and network settings. The main directory contains two .env files, where .env.local specifies the configuration for a local environment, while .env.testnet specifies the configuration to connect to testnet.\\nAll the necessary contracts addresses are already included in the respective .env files, so you can specify your preferred L1 RPC endpoint and your ",
    "wallet private key to start sending transactions.\\n# testnet ENV EXEC_ENV=testnet # rpc url L1_RPC= # L1 RPC Endpoint L2_RPC=https://rpc.testnet.mantle.xyz # chain id L1_CHAINID=5 L2_CHAINID=5001 # bridge address L1_BRIDGE=0xc92470D7Ffa21473611ab6c6e2FcFB8637c8f330 L2_BRIDGE=0x4200000000000000000000000000000000000010 # crossDomainMessenger address L1_CDM=0x7Bfe603647d5380ED3909F6f87580D0Af1B228B4 L2_CDM=0x4200000000000000000000000000000000000007 # token address L1_MNT=0xc1dC2d65A2243c22344E725677A3E3BEBD26E604 L2_MNT=0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000 L2_ETH=0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111 # local test key PRIV_KEY= # Wallet private key\\nLet's take a look at the main script.\\nAnalyzing and modifying the sample script\\nThe index.js script containing the code we need is located in the ./mantle-tutorial/cross-dom-bridge-eth directory. By default, it is configured to run on a local test environment. You can run L1 and L2 instances on your system and start deploying contr",
    "acts to test your applications. You can make a copy of the index.js file before we start modifying it if you want to try that out.\\nCheck out the tutorial here that demonstrates the same bridging functionality on a private network.\\nImporting necessary libraries\\nrequire('dotenv').config() const ethers = require(\\\"ethers\\\") const mantleSDK = require(\\\"@mantleio/sdk\\\") const fs = require(\\\"fs\\\")\\nThis code does not need to be changed. We import three libraries, and the .env configuration file we created earlier.\\ndotenv : The .env file containing wallet and network configuration\\nethers : The Ethers.js library comes handy with wallet and contract operations\\n@mantlenetwork/sdk : Mantle SDK instance\\nfs: File system module to read the contract ABI from a JSON file\\nGenerating contract bytecode from ABI\\nconst L1TestERC20 = JSON.parse(fs.readFileSync(\\\"TestERC20.json\\\"))\\nWe don't need to modify this either. The contents of the JSON file containing the contract ABI are stored in TestERC20",
    ".json which we will be using later.\\nNetwork configuration and wallet setup\\nconst l1MntAddr = process.env.L1_MNT const l2MntAddr = process.env.L2_MNT const key = process.env.PRIV_KEY const l1RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L1_RPC) const l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC) const l1Wallet = new ethers.Wallet(key, l1RpcProvider) const l2Wallet = new ethers.Wallet(key, l2RpcProvider)\\nWe fetch the specified network and wallet configurations from the .env file, and create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\nCrossChainMessenger object\\n//Global variables let crossChainMessenger let l1Mnt, l2Mnt let ourAddr const setup = async () => { ourAddr = l1Wallet.address // Assigning wallet address crossChainMessenger = new mantleSDK.CrossChainMessenger({ // CrossChainMessenger object instantiation l1ChainId: process.env.L1_CHAINID, // Assigning chain IDs from .env file l2ChainId: ",
    "process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, // Wallets that will sign transactions l2SignerOrProvider: l2Wallet }) l1Mnt = new ethers.Contract(l1MntAddr, L1TestERC20.abi, l1Wallet) // Contract objects l2Mnt = new ethers.Contract(l2MntAddr, L1TestERC20.abi, l2Wallet) }\\nThe CrossChainMessenger object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\nReporting balances\\nconst reportBalances = async () => { const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18) const l2Balance = (await l2Mnt.balanceOf(ourAddr)).toString().slice(0, -18) console.log(`Token on L1:${l1Balance} Token on L2:${l2Balance}`) }\\nThe reportBalances function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\nDeposit function\\nconst depositMNT = async () => { console.log(\\\"############",
    "######## Deposit MNT ####################\\\") await reportBalances() // 1. Print balance before deposit const start = new Date() const allowanceResponse = await crossChainMessenger.approveERC20( // 2. Approve deposit amount l1MntAddr, l2MntAddr, depositToken) await allowanceResponse.wait() console.log(`Time so far ${(new Date() - start) / 1000} seconds`) const response = await crossChainMessenger.depositERC20( // 3. Send deposit transaction l1MntAddr, l2MntAddr, depositToken) console.log(`Deposit transaction hash (on L1): ${response.hash}`) // 4. Print L1 deposit transaction hash await response.wait() console.log(\\\"Waiting for status to change to RELAYED\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response.hash, mantleSDK.MessageStatus.RELAYED) await reportBalances() // 5. Print updated balance after deposit console.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`) }\\nThe depositMNT function deposit",
    "s 1 $MNT token to L2 via the Mantle bridge. The deposit transaction is sent using the depositERC20 method, which is picked up by an off-chain service and relayed to L2. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated $MNT balance on L1 and L2.\\nWithdraw function\\nconst withdrawMNT = async () => { console.log(\\\"#################### Withdraw MNT ####################\\\") const start = new Date() await reportBalances() // 1. Print balance before withdraw const response = await crossChainMessenger.withdrawERC20( // 2. Send withdraw transaction l1MntAddr, l2MntAddr, withdrawToken) console.log(`Transaction hash (on L2): ${response.hash}`) // 3. Print L2 withdraw transaction hash await response.wait() console.log(\\\"Waiting for status to change to IN_CHALLENGE_PERIOD\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response.hash, // 4. Function wa",
    "its for transaction to enter challenge period mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD) console.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response.hash, mantleSDK.MessageStatus.READY_FOR_RELAY) // 5. Check whether transaction is ready for relay console.log(\\\"Ready for relay, finalizing message now\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.finalizeMessage(response) console.log(\\\"Waiting for status to change to RELAYED\\\") console.log(`Time so far ${(new Date() - start) / 1000} seconds`) await crossChainMessenger.waitForMessageStatus(response, mantleSDK.MessageStatus.RELAYED) // 6. Wait for transaction to get relayed await reportBalances() // 7. Print updated balance after withdraw console.log(`withdrawERC20 took ${(new Date() - start) / 1000} seconds\\\\n\\\\n\\\\n`) }\\nSimilarly, the withdrawMNT func",
    "tion withdraws 1 $MNT token from L2 via the Mantle bridge. The function prints out the transaction hash. The transaction then goes into a challenge period. Once it is ready for relay, it is picked up by an off-chain service to be relayed to L1. Finally, we display the updated $MNT balance on L1 and L2.\\nInvoking deposit and withdraw functions\\nconst main = async () => { await setup() await depositMNT() await withdrawMNT() } main().then(() => process.exit(0)) .catch((error) => { console.error(error) process.exit(1) })\\nWe write a main() where we call the functions to perform configuration, deposit, and withdraw operations.\\nRunning the script\\nOnce the configuration is ready, you can run the script using the yarn testnet command. The script will automatically select the testnet configuration to perform both deposit and withdraw operations in the index.js script. If you want to run the script locally, you can run yarn local.\\nConclusion\\nYou can use this code to test out the token bridgi",
    "ng mechanism via SDK on Mantle testnet and start integrating it to your applications.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Bridging $MNT using Mantle SDK\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nThis tutorial demonstrates how to use the Mantle SDK to deposit and withdraw $MNT tokens between Mantle and Ethereum.\\n\\n## \\n\\nSet up local environment\\n\\nMake sure you have the following tools installed in your local environment.\\n\\nLet's start by fetching the example JS scripts that we’ll work with and use to make SDK invocations from the Mantle Github. Clone the repository containing the sample scripts by executing the following command in your project directory.\\n\\n```\\ngit clone https://github.com/mantlenetworkio/mantle-tutorial.git\\n```\\n\\nNext, we can use `yarn` to download the SDK along with all the necessary dependencies, as shown below. All the dependencies are defined in the `yarn.lock` file, so we can",
    " just run `yarn` in the `./cross-dom-bridge-mnt` directory.\\n\\nWe'll need a `.env` file from where we can add and modify wallet and network settings. The main directory contains two `.env` files, where `.env.local` specifies the configuration for a local environment, while `.env.testnet` specifies the configuration to connect to testnet.\\n\\nAll the necessary contracts addresses are already included in the respective `.env` files, so you can specify your preferred L1 RPC endpoint and your wallet private key to start sending transactions.\\n\\n```\\n# testnet ENV\\nEXEC_ENV=testnet\\n# rpc url\\nL1_RPC= # L1 RPC Endpoint\\nL2_RPC=https://rpc.testnet.mantle.xyz\\n\\n# chain id\\nL1_CHAINID=5\\nL2_CHAINID=5001\\n\\n# bridge address\\nL1_BRIDGE=0xc92470D7Ffa21473611ab6c6e2FcFB8637c8f330\\nL2_BRIDGE=0x4200000000000000000000000000000000000010\\n\\n# crossDomainMessenger address \\nL1_CDM=0x7Bfe603647d5380ED3909F6f87580D0Af1B228B4\\nL2_CDM=0x4200000000000000000000000000000000000007\\n\\n# token address\\nL1_MNT=0xc",
    "1dC2d65A2243c22344E725677A3E3BEBD26E604\\nL2_MNT=0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\nL2_ETH=0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\n\\n# local test key \\nPRIV_KEY= # Wallet private key\\n```\\n\\nLet's take a look at the main script.\\n\\n## \\n\\nAnalyzing and modifying the sample script\\n\\nThe `index.js` script containing the code we need is located in the `./mantle-tutorial/cross-dom-bridge-eth` directory. By default, it is configured to run on a local test environment. You can run L1 and L2 instances on your system and start deploying contracts to test your applications. You can make a copy of the `index.js` file before we start modifying it if you want to try that out.\\n\\n> Check out the [tutorial here](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/cross-dom-bridge-mnt) that demonstrates the same bridging functionality on a private network.\\n\\n### \\n\\nImporting necessary libraries\\n\\n```\\nrequire('dotenv').config()\\nconst ethers = require(\\\"ethers\\\")\\nconst mantl",
    "eSDK = require(\\\"@mantleio/sdk\\\")\\nconst fs = require(\\\"fs\\\")\\n```\\n\\nThis code does not need to be changed. We import three libraries, and the `.env` configuration file we created earlier.\\n\\n*   `dotenv` : The `.env` file containing wallet and network configuration\\n    \\n*   `ethers` : The Ethers.js library comes handy with wallet and contract operations\\n    \\n*   `@mantlenetwork/sdk` : Mantle SDK instance\\n    \\n*   `fs`: File system module to read the contract ABI from a JSON file\\n    \\n\\n### \\n\\nGenerating contract bytecode from ABI\\n\\n```\\nconst L1TestERC20 = JSON.parse(fs.readFileSync(\\\"TestERC20.json\\\"))\\n```\\n\\nWe don't need to modify this either. The contents of the JSON file containing the contract ABI are stored in `TestERC20.json` which we will be using later.\\n\\n### \\n\\nNetwork configuration and wallet setup\\n\\n```\\nconst l1MntAddr = process.env.L1_MNT\\nconst l2MntAddr = process.env.L2_MNT\\nconst key = process.env.PRIV_KEY\\n\\nconst l1RpcProvider = new ethers.providers.",
    "JsonRpcProvider(process.env.L1_RPC)\\nconst l2RpcProvider = new ethers.providers.JsonRpcProvider(process.env.L2_RPC)\\nconst l1Wallet = new ethers.Wallet(key, l1RpcProvider)\\nconst l2Wallet = new ethers.Wallet(key, l2RpcProvider)\\n```\\n\\nWe fetch the specified network and wallet configurations from the `.env` file, and create wallet objects by passing the private key and RPC addresses as parameters for L1 and L2.\\n\\n### \\n\\nCrossChainMessenger object\\n\\n```\\n//Global variables\\nlet crossChainMessenger \\nlet l1Mnt, l2Mnt\\nlet ourAddr\\n\\nconst setup = async () => {\\n  ourAddr = l1Wallet.address // Assigning wallet address\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({ // CrossChainMessenger object instantiation\\n    l1ChainId: process.env.L1_CHAINID, // Assigning chain IDs from .env file\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet, // Wallets that will sign transactions\\n    l2SignerOrProvider: l2Wallet\\n  })\\n  l1Mnt = new ethers.Contract(l1MntA",
    "ddr, L1TestERC20.abi, l1Wallet) // Contract objects\\n  l2Mnt = new ethers.Contract(l2MntAddr, L1TestERC20.abi, l2Wallet)\\n}\\n```\\n\\nThe `CrossChainMessenger` object calls the cross chain messenger contracts on L1 and L2 to transfer assets. Here we instantiate the object with chain IDs, wallet objects, and contract objects.\\n\\n### \\n\\nReporting balances\\n\\n```\\nconst reportBalances = async () => {\\n  const l1Balance = (await l1Mnt.balanceOf(ourAddr)).toString().slice(0, -18)\\n  const l2Balance = (await l2Mnt.balanceOf(ourAddr)).toString().slice(0, -18)\\n  console.log(`Token on L1:${l1Balance}     Token on L2:${l2Balance}`)\\n}\\n```\\n\\nThe `reportBalances` function fetches L1 and L2 wallet balances and prints them out. We'll use this method to keep track balance change after deposit and withdraw operations.\\n\\n### \\n\\nDeposit function\\n\\n```\\nconst depositMNT = async () => {\\n  console.log(\\\"#################### Deposit MNT ####################\\\")\\n  await reportBalances() // 1. Print bal",
    "ance before deposit\\n  const start = new Date()\\n  \\n  const allowanceResponse = await crossChainMessenger.approveERC20( // 2. Approve deposit amount\\n    l1MntAddr, l2MntAddr, depositToken)\\n  await allowanceResponse.wait()\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n\\n  const response = await crossChainMessenger.depositERC20( // 3. Send deposit transaction\\n    l1MntAddr, l2MntAddr, depositToken)\\n  console.log(`Deposit transaction hash (on L1): ${response.hash}`) // 4. Print L1 deposit transaction hash\\n  await response.wait()\\n  console.log(\\\"Waiting for status to change to RELAYED\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageStatus(response.hash, mantleSDK.MessageStatus.RELAYED)\\n\\n  await reportBalances() // 5. Print updated balance after deposit\\n  console.log(`depositERC20 took ${(new Date() - start) / 1000} seconds\\\\n`)\\n}\\n```\\n\\nThe `depositMNT` function deposits 1 $MNT token to L",
    "2 via the Mantle bridge. The deposit transaction is sent using the `depositERC20` method, which is picked up by an off-chain service and relayed to L2. The asynchronous function prints out the transaction hash and waits for the message to get relayed. Finally, we display the updated $MNT balance on L1 and L2.\\n\\n### \\n\\nWithdraw function\\n\\n```\\nconst withdrawMNT = async () => {\\n  console.log(\\\"#################### Withdraw MNT ####################\\\")\\n  const start = new Date()\\n  await reportBalances() // 1. Print balance before withdraw\\n\\n  const response = await crossChainMessenger.withdrawERC20( // 2. Send withdraw transaction\\n    l1MntAddr, l2MntAddr, withdrawToken)\\n  console.log(`Transaction hash (on L2): ${response.hash}`) // 3. Print L2 withdraw transaction hash\\n  await response.wait()\\n\\n  console.log(\\\"Waiting for status to change to IN_CHALLENGE_PERIOD\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageSta",
    "tus(response.hash, // 4. Function waits for transaction to enter challenge period\\n    mantleSDK.MessageStatus.IN_CHALLENGE_PERIOD)\\n  console.log(\\\"In the challenge period, waiting for status READY_FOR_RELAY\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageStatus(response.hash,\\n    mantleSDK.MessageStatus.READY_FOR_RELAY)  // 5. Check whether transaction is ready for relay \\n  console.log(\\\"Ready for relay, finalizing message now\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.finalizeMessage(response)\\n  console.log(\\\"Waiting for status to change to RELAYED\\\")\\n  console.log(`Time so far ${(new Date() - start) / 1000} seconds`)\\n  await crossChainMessenger.waitForMessageStatus(response,\\n    mantleSDK.MessageStatus.RELAYED)  // 6. Wait for transaction to get relayed\\n  await reportBalances() // 7. Print updated balance after withdraw\\n  console.log(`withdrawERC20 to",
    "ok ${(new Date() - start) / 1000} seconds\\\\n\\\\n\\\\n`)\\n}\\n```\\n\\nSimilarly, the `withdrawMNT` function withdraws 1 $MNT token from L2 via the Mantle bridge. The function prints out the transaction hash. The transaction then goes into a challenge period. Once it is ready for relay, it is picked up by an off-chain service to be relayed to L1. Finally, we display the updated $MNT balance on L1 and L2.\\n\\n### \\n\\nInvoking deposit and withdraw functions\\n\\n```\\nconst main = async () => {\\n  await setup()\\n  await depositMNT()\\n  await withdrawMNT()\\n}\\n\\nmain().then(() => process.exit(0))\\n  .catch((error) => {\\n    console.error(error)\\n    process.exit(1)\\n  })\\n```\\n\\nWe write a `main()` where we call the functions to perform configuration, deposit, and withdraw operations.\\n\\n### \\n\\nRunning the script\\n\\nOnce the configuration is ready, you can run the script using the `yarn testnet` command. The script will automatically select the testnet configuration to perform both deposit and with",
    "draw operations in the `index.js` script. If you want to run the script locally, you can run `yarn local`.\\n\\n## \\n\\nConclusion\\n\\nYou can use this code to test out the token bridging mechanism via SDK on Mantle testnet and start integrating it to your applications.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-to-a-cex\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-to-a-cex\",\n    \"loadedTime\": \"2025-02-15T20:32:46.076Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-mantle-to-a-cex\",\n    \"title\": \"Adding Mantle to a CEX | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"ope",
    "nGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding Mantle to a CEX | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/rzxbwMP8sPBywexHVx0N\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWMyOTMxMjctMTRlNC00MzA1LTk2ZmEtYWFhNTJ",
    "mNTc2YWEx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=U3Rn8Mg3wewHKfY7ymEMQvo7WzqApJVaZwsMy7vcCKT4ofqQxU9UCumo%2FRGLXvDS0Eu0%",
    "2BjtBnipscx5E9X7NodOGykEUc8w2UIRauZqkvCDIyWbAY3fBfLvQWFTJAbUWcVXJzJQbYReYKXfcgh7l\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae2aa02d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding Mantle to a CEX\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nConnecting to Mantle \\nMantle network shares the Ethereum JSON-RPC API with almost no differences. You can choose to connect to Mantle through any of the following means:\\nCalculating $ETH Balance \\nOn Mantle network, the $ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address 0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111. You can ",
    "still access it using the standard APIs.\\nCalculating $MNT Balance\\nToken Addresses\\nThe ERC-20 contract address for a token on Mantle may be different from the address for the same token on Ethereum. The list of tokens and their addresses is here.\\nTo get the total ERC-20 token balance of a user for a specific token we listed, you need to:\\nConnect to a standard Ethereum endpoint and send a balanceOf query to the L1 token address. \\nConnect to a Mantle endpoint and send a balanceOf query to address.\\nDeposits and Withdrawals on Mantle\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\nTransaction Fees\\nMost of the cost of a Mantle transaction is not the gas consumed by the transaction itself (which is priced at a very low level), but the cost of writing the transaction in Ethereum. That cost is deducted automatically from the user's balance on Mantle. If you char",
    "ge your users the cost of withdrawals, you have to account for it.\\nYou can read more about this subject at Transaction Fees on L2. You can also find relevant code samples on our Mantle Tutorial page. \\nDeposits and Withdrawals Across Chains \\nAs a centralized exchange, there will be times that withdrawals of $ETH/$MNT token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network. \\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this tutorial for bridging ETH, or this tutorial for bridging ERC-20 tokens.\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\nWhen an ERC-20 toke",
    "n does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this tutorial for bridging standard ERC-20s. If you need to implement some kind of custom logic, see this tutorial for bridging custom ERC-20s.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Adding Mantle to a CEX\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**Connecting to Mantle**\\n\\nMantle network shares the [Ethereum JSON-RPC API](https://eth.wiki/json-rpc/API) with almost no differences. You can choose to connect to Mantle through any of the following means:\\n\\n### \\n\\n**Calculating $ETH Balance**\\n\\nOn Mantle network, the $ETH balance of an account is not stored as part of the account's state, but as an ERC-20 balance at address `0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111`. You can still access it using the standard APIs.\\n\\n### \\n\\n**Calculating $MNT Balance**\\n\\n### \\n\\n**To",
    "ken Addresses**\\n\\nThe ERC-20 contract address for a token on Mantle may be different from the address for the same token on Ethereum. The list of tokens and their addresses is [here](https://github.com/mantlenetworkio/mantle-token-lists#mantle-token-list).\\n\\nTo get the total ERC-20 token balance of a user for a specific token we listed, you need to:\\n\\n*   Connect to a standard Ethereum endpoint and send a `balanceOf` query to the L1 token address.\\n    \\n*   Connect to a Mantle endpoint and send a `balanceOf` query to address.\\n    \\n\\n### \\n\\n**Deposits and Withdrawals on Mantle**\\n\\nThe ERC-20 contracts on Mantle function the same way they do on Ethereum, so you can use your existing code for withdrawals and deposits. Just connect to a Mantle endpoint.\\n\\n### \\n\\n**Transaction Fees**\\n\\nMost of the cost of a Mantle transaction is not the gas consumed by the transaction itself (which is priced at a very low level), but the cost of writing the transaction in Ethereum. That cost is d",
    "educted automatically from the user's balance on Mantle. If you charge your users the cost of withdrawals, you have to account for it.\\n\\nYou can read more about this subject at [Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2). You can also find relevant code samples on our [Mantle Tutorial page](https://mantlenetworkio.github.io/mantle-tutorial/).\\n\\n### \\n\\n**Deposits and Withdrawals Across Chains**\\n\\nAs a centralized exchange, there will be times that withdrawals of $ETH/$MNT token or an ERC-20 token on either Mantle network or Ethereum exceed deposits and you need to transfer assets. To do that you use a bridge or a gateway. We have a standard bridge that receives assets on Ethereum mainnet, and mints the equivalent asset on Mantle network.\\n\\nWhen a user wants to withdraw the assets back to L1, the bridge burns the asset on L2 and releases it to the user on L1. If you want to use this gateway automatically, follow this [tutoria",
    "l for bridging ETH](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-eth/), or this [tutorial for bridging ERC-20 tokens](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nNote that while L1 to L2 transactions typically take minutes, L2 to L1 transactions on the gateway require a 7 day challenge period.\\n\\nWhen an ERC-20 token does not have a Mantle equivalent you can create one. If there is no need for custom business logic, you can follow the steps in this [tutorial for bridging standard ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-standard-token/). If you need to implement some kind of custom logic, see this [tutorial for bridging custom ERC-20s](https://mantlenetworkio.github.io/mantle-tutorial/standard-bridge-custom-token/).\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-a-custom-brid",
    "ge-to-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"loadedTime\": \"2025-02-15T20:32:46.179Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases/adding-a-custom-bridge-to-mantle\",\n    \"title\": \"Adding a Custom Bridge to Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Adding a Custom Bridge to Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/YWqrd9BpoClBDUlVGXkH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n ",
    "     \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZjI1Y2E1MDQtZTA2Yy00MTk0LThlZTMtOWM2YTJiZDQ3MzBl' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.co",
    "m srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=SLlLa4JbsUaiFK6Pn5biUe95wxRnKlRefc6SE5lylrfp%2BfGb1UNOnxlzd3sBe4bT03otpMSBS8m8yp8JSpNDqfOCHAI4i2OvHRwUuQ21UZkN18%2Fz3wilgaEfvioFFIYpsFbLFdVQm1XGLw2hiJny\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n     ",
    " \"cf-ray\": \"912811ae0d299c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Adding a Custom Bridge to Mantle\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nUsing the Standard Bridge\\nWe suggest considering using the Standard Bridge first before deciding to develop a custom bridge solution. \\nIn the standard bridge when ERC-20 is deposited on Layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the Layer 2 (L2) token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 tokens is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\nBuilding a Custom Bridge\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-do",
    "main infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the Bridging basics article, and also the tutorial on depositing and withdrawing ERC-20 tokens between L1 and L2.\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which requires custom logic. Another case might be when you are bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the IL1ERC20Bridge interface in the L1 bridge contract and IL2ERC20Bridge interface in the L2 bridge contract. This ensures the Ma",
    "ntle Gateway can support token deposits and withdrawals via this custom bridge.\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle token list repository. Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Adding a Custom Bridge to Mantle\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\n**Using the Standard Bridge**\\n\\nWe suggest considering using the [Standard Bridge](https://bridge.mantle.xyz/) first before deciding to develop a custom bridge solution.\\n\\nIn the standard bridge when ERC-20 is deposited on Layer 1 (L1) and transferred to the bridge contract, it remains \\\"locked\\\" there while the equivalent amount is minted in the Layer 2 (L2) token. For withdrawals the opposite happens, the L2 token amount is burned then the same amount of L1 toke",
    "ns is transferred to the recipient. This fund can be released after the challenge period. This implementation satisfies a wide range of requirements.\\n\\n### \\n\\n**Building a Custom Bridge**\\n\\nWhen the Mantle Standard bridge does not satisfy your requirements for bridging assets or data, you can deploy your custom bridge solution utilizing the same cross-domain infrastructure as the Standard bridge. For details on how cross-domain messaging works, see the [Bridging basics article](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-comm/), and also the tutorial on [depositing and withdrawing ERC-20 tokens between L1 and L2](https://mantlenetworkio.github.io/mantle-tutorial/cross-dom-bridge-erc20/).\\n\\nSome reasons why the standard bridge might not work for you is for example when you cannot limit the L2 token mint and burn functions to the bridge alone (something we require for security). Also, certain custom bridges implement their own logic for managing the token supply which",
    " requires custom logic. Another case might be when you are bridging non-ERC-20 tokens (e.g. NFTs). Yet another case is when you are pooling deposits for cheaper transfers to L2.\\n\\nNote that when you are building a custom bridge for ERC-20 tokens and planning to add these to the Mantle token list, we have specific requirements for the bridge contracts. These have to implement the `IL1ERC20Bridge` interface in the L1 bridge contract and `IL2ERC20Bridge` interface in the L2 bridge contract. This ensures the Mantle Gateway can support token deposits and withdrawals via this custom bridge.\\n\\nTo add your bridge and token to the token list, you must make a pull request against the Mantle [token list repository.](https://github.com/mantlenetworkio/mantle-token-lists#mantle-token-list) Due to the complexity of reviewing a custom bridge, you will need to deploy to Mantle testnet first, before going to production.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }",
    "\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata\",\n    \"loadedTime\": \"2025-02-15T20:32:46.274Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata\",\n    \"title\": \"How to Update the NFT Metadata | Network\",\n    \"description\": \"A tutorial showing how to update NFT metadata via Mantle Explorer\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How to Update the NFT Metadata | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"A tutorial showing how to update NFT metadata via Mantle Explorer\"\n      },\n      {\n     ",
    "   \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/KAfsgkVz8JQzMxd0RyEb\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTQ2MmE2ZDctNGM4Yi00YzI4LTgzN2MtYWYzNzk4Y2MwNWY1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://c",
    "dn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=rXebwLZUQ4DNyD78T0Jw0dSsZq0gppMeR9p90cECcLwevys3qHN76sKuseFDSpCYiZmpwKuCY53Rb6BvKex6t%2FcZv5oocGnym6OeXefTtqBfopXVM6nvSn4p3d%2BvIpnCCdFGNBJwGsqLR8ZvBvDP\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\"",
    ",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae2cbc059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How to Update the NFT Metadata\\nA tutorial showing how to update NFT metadata via Mantle Explorer\\nLast updated 11 months ago\",\n  \"markdown\": \"# How to Update the NFT Metadata\\n\\nA tutorial showing how to update NFT metadata via Mantle Explorer\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/data-availability\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/data-availability\",\n    \"loadedTime\": \"2025-02-15T20:32:46.454Z\",\n    \"referrerUrl\": \"https://",
    "docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/data-availability\",\n    \"title\": \"Data Availability | Network\",\n    \"description\": \"Unlocking hyper-scaled data availability on a Layer 2 rollup\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Data Availability | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Unlocking hyper-scaled data availability on a Layer 2 rollup\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/pCYk6oI41VP2CVjsK4Ml\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n    ",
    "  \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTQ3ZjY3M2ItYWFkMS00M2NiLTllMTgtYjU4ZDc5YWRjYmM2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.co",
    "m; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=V6xPRphOIun3qpMxBs17SGrS8pQcw%2FnRb%2FTBXm6bAZYi9Hr%2Fa9%2Fc9YydjOAcI4XiSUI5ZjhH0b%2BC6FicrnfquN009bmIsHWdjDl%2FWupoFgvt1jEjPBwP1bq2t%2F1GdKY3c1p301J8GOrE465a%2B57W\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae3f573b66-IAD\",\n      \"content-encoding\": \"b",
    "r\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Data Availability | Network\\nUnlocking hyper-scaled data availability on a Layer 2 rollup\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWhat is Data Availability?\\nBy \\\"Data Availability\\\" (DA) we are referring to the ability for any node in the Mantle network to access the transaction history posted by the Sequencer. Access to block data for all network participants is a major scalability issue that must be addressed, especially in the case of blockchains that operate on a rollup architecture to eliminate the possibility of block data being withheld, maliciously or otherwise. So the challenge of maintaining a trustless L2 network is distilled into ensuring that transaction data remains available!\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding here. \\nTrust Minimi",
    "zation\\nOne of the foundational pillars of blockchain design is trustlessness. When we say \\\"trustless\\\", we mean that a user on a blockchain should be able to accomplish their tasks without placing unnecessary trust in third-parties. \\nThis explains why blockchains use cryptography. Instead of relying on soft agreements and social contracts with other network participants (aka trust), blockchains use hard rules and code to enforce expected behavior. What this means practically is that blockchains are designed so that any user can verify whether a network participant has followed the rules. \\nOn a network like Ethereum, this means a certain reliance on full nodes. Full nodes will publicly store the entire history of blockchain data so that all other network participants can verify the state transition of the chain was correct.\\nIn the case of Mantle, transactions are submitted and executed on the L2 chain. This means that Mantle nodes need access to the L2 transaction data in order to ",
    "verify the state transition. This verification is enabled by having the Sequencer publish the full transaction data and cryptographic evidence of the state transition (a Merkle Proof) on Ethereum.\\nThe reliability of Ethereum's trust network is derived from its widespread validator network running a solid consensus algorithm, adoption that ensures security, combined with the value of the relatively well-distributed $ETH token. \\nEigenLayer\\nEigenLayer, a re-staking protocol, leverages Ethereum's existing trust network for enabling any rollup-based L2 to guarantee data availability to its execution layer, while maintaining the same level of security as the Ethereum mainnet. This is achieved through a re-staking mechanism, where L1 validators can opt in to provide data availability services being subjected to additional performance conditions using their staked $ETH as collateral.\\nThink of it as an Ethereum middleware platform.\\nJust as optimistic rollups use economic incentives to main",
    "tain system integrity, this mechanism also puts incentives in place for Ethereum validators to provide their services for additional yield opportunities. Read more on EigenLayer here. \\nMantle DA - Powered by EigenDA Technology\\nEigenLayer is a protocol built on Ethereum that introduces restaking, a new primitive in cryptoeconomic security. EigenDA (Data Availability), built by EigenLabs, is one core application on EigenLayer, which we have selected for Mantle Network's data availability module.\\nThe current version of MantleDA is powered by EigenDA technology and licensed by EigenLabs. The Mantle team has been working with the support of the EigenLayer team on this simplified solution until the canonical solution is ready for mainnet launch.\\nWe plan to migrate to EigenDA after EigenDA mainnet launches.\\nNote that: Mantle DA, allows permissioned nodes to provide data availability services to the Mantle network and requires $MNT staking.\\nSee the section on DA Nodes to find out more ab",
    "out how the different participating actors that are part of the Mantle DA module function.\\nMantle DA Characteristics\\nAllows decoupling of the data availability layer from the consensus layer\\nEmploys a unicast channel for data exchange between network participants to deliver efficiency gains both in terms of data transmission and storage\\nMaintaining an erasure rate ensures pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\nThis approach will provide the high throughput and low gas cost necessary for next-generation applications in blockchain gaming, decentralized social networks, and more.\\nMantle Explorer displays the transaction batch details for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Data Availability | Network\\n\\nUnlocking hyper-scaled data availability on a Layer 2 rollup\\n\\nMantle v2 Tectonic has bee",
    "n released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nWhat is Data Availability?\\n\\nBy \\\"Data Availability\\\" (DA) we are referring to the ability for any node in the Mantle network to access the transaction history posted by the Sequencer. Access to block data for all network participants is a major scalability issue that must be addressed, especially in the case of blockchains that operate on a rollup architecture to eliminate the possibility of block data being withheld, maliciously or otherwise. So the challenge of maintaining a _trustless_ L2 network is distilled into ensuring that transaction data remains available!\\n\\nIt turns out that guaranteeing data availability is a challenge in its own right. To understand how this is handled, you can read more about the data availability problem and erasure coding [here](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding).\\n\\n## \\n\\nTrust Minimization\\n\\nOne of the ",
    "foundational pillars of blockchain design is _trustlessness_. When we say \\\"trustless\\\", we mean that a user on a blockchain should be able to accomplish their tasks _without placing unnecessary trust_ in third-parties.\\n\\nThis explains why blockchains use cryptography. Instead of relying on soft agreements and social contracts with other network participants (aka trust), blockchains use hard rules and code to enforce expected behavior. What this means practically is that blockchains are designed so that any user can verify whether a network participant has followed the rules.\\n\\nOn a network like Ethereum, this means a certain reliance on **full nodes.** Full nodes will publicly store the entire history of blockchain data so that all other network participants can verify the state transition of the chain was correct.\\n\\nIn the case of Mantle, transactions are submitted and executed on the L2 chain. This means that Mantle nodes need access to the L2 transaction data in order to verify ",
    "the state transition. This verification is enabled by having the Sequencer **publish** the full transaction data and cryptographic evidence of the state transition (a Merkle Proof) on Ethereum.\\n\\nThe reliability of Ethereum's trust network is derived from its widespread validator network running a solid consensus algorithm, adoption that ensures security, combined with the value of the relatively well-distributed $ETH token.\\n\\n## \\n\\nEigenLayer\\n\\n[**EigenLayer**](https://www.eigenlayer.com/)**,** a re-staking protocol, leverages Ethereum's existing trust network for enabling **any** rollup-based L2 to guarantee data availability to its execution layer, while maintaining the same level of security as the Ethereum mainnet. This is achieved through a **re-staking** mechanism, where L1 validators can opt in to provide data availability services being subjected to additional performance conditions using their staked $ETH as collateral.\\n\\nThink of it as an Ethereum middleware platform.\\n",
    "\\nJust as optimistic rollups use economic incentives to maintain system integrity, this mechanism also puts incentives in place for Ethereum validators to provide their services for additional yield opportunities. Read more on EigenLayer [here](https://ethresear.ch/t/an-eigenlayer-centric-roadmap-or-cancel-sharding/14141#what-is-eigenlayer-1).\\n\\n## \\n\\nMantle DA - Powered by EigenDA Technology\\n\\n1.  [EigenLayer](https://www.eigenlayer.xyz/) is a protocol built on Ethereum that introduces restaking, a new primitive in cryptoeconomic security. EigenDA (Data Availability), built by EigenLabs, is one core application on EigenLayer, which we have selected for Mantle Network's data availability module.\\n    \\n2.  The current version of MantleDA is powered by EigenDA technology and licensed by EigenLabs. The Mantle team has been working with the support of the EigenLayer team on this simplified solution until the canonical solution is ready for mainnet launch.\\n    \\n\\n4.  We plan to migrat",
    "e to EigenDA after EigenDA mainnet launches.\\n    \\n\\nNote that: **Mantle DA**, allows permissioned nodes to provide data availability services to the Mantle network and requires $MNT staking.\\n\\nSee the section on [DA Nodes](https://docs.mantle.xyz/network/network/for-validators/network-roles#da-nodes) to find out more about how the different participating actors that are part of the **Mantle DA** module function.\\n\\n## \\n\\nMantle DA Characteristics\\n\\n*   Allows **decoupling** of the **data availability layer** from the **consensus layer**\\n    \\n*   Employs a **unicast channel** for **data exchange** between network participants to deliver efficiency gains both in terms of data transmission and storage\\n    \\n*   Maintaining an **erasure rate** ensures pieces of block data from L2 and L1 sources can be used by verifying actors to reconstruct complete block data\\n    \\n\\nThis approach will provide the **high throughput** and **low gas cost** necessary for next-generation applications",
    " in blockchain gaming, decentralized social networks, and more.\\n\\n**Mantle Explorer** displays the [transaction batch details](https://explorer.mantle.xyz/eigenda-batches) for the rollup data that has been stored on the DA layer, just as it does for the transactions taking place on L2.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme\",\n    \"loadedTime\": \"2025-02-15T20:32:46.566Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme\",\n    \"title\": \"Threshold Signature Scheme | Network\",\n    \"description\": \"Implementing TSS node modules on L2 to minimize the trust r",
    "isk of execution results\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Threshold Signature Scheme | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Implementing TSS node modules on L2 to minimize the trust risk of execution results\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/YNhyKLeWMlWp30JNJoHN\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:46 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Rout",
    "er-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODAxM2Q3ODItM2U1ZC00Y2FjLWFlODAtMDM3NGNhZmNlY2Nm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"",
    "report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=jlwkbpMdDXrSZruJdzKUB9jMF65ZVec7iezxe00QxMYjPkX5m0FNkyow%2FYDUpGUPMPTzIlRLr%2B39DxkhyZdsQPyO%2ByDBW8FNE2V02KgmRnmIfzmAhw3%2BUewM4WKQjNtdAecIFF9IHEvINW0A5Lf4\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ae1d1d82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Threshold Signature Scheme | Network\\nImplementing TSS node modules on L2 to minimize the trust risk of execution results\\nLast updated 11 months ago\",\n  \"markdown\": \"# Threshold Signature Scheme | Network\\n\\nImpl",
    "ementing TSS node modules on L2 to minimize the trust risk of execution results\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/troubleshooting\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/troubleshooting\",\n    \"loadedTime\": \"2025-02-15T20:32:47.088Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/troubleshooting\",\n    \"title\": \"Troubleshooting | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Troubleshooting | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/gZgi8yvsoz1BRgHs9veS\"\n      }\n    ],\n    \"jso",
    "nLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:47 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZGM3NGYwYWQtMTU3MS00YWYwLWE2ZjktY2E1MTQ0NWJhYTMw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https:",
    "//static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=5l10ZHWGjIIMnD2xeB9l6O%2FgjKfetUUB%2BnVfzX5UUCHdYFLvQsmYcXHHBqG%2BKxj4sQkq1Z1Z7ldL4h86HX411Tf5CvtGnqOYfEOSsHl9m6mPKIYtI2Bmh0iUnGg4NIBI8pPydcL2qSnT0fHBozee\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10",
    ".9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811b48bbb82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Troubleshooting | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nGeneral\\n- Status code: 429 { \\\"error\\\": \\\"API rate limit exceeded\\\" }\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: Node RPC Providers\\n- RPC call Error: timeout\\nWhile calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be ",
    "a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\nSo under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set hingher timeout parameter accordingly to solve the timeout issue.\\nSmart Contracts\\n- Contract deploy error: ProviderError: too many arguments, want at most 1\\nIf you run into this issue when deploying your contract, you're probably running a newer version of Hardhat. Try manually specifying the gas limit when deploying your contract, like so: \\nconst MyNFT = await hre.ethers.deployContract(\\\"ContractName\\\", { gasLimit: \\\"0x1000000\\\", });\\nIf the issue persists, we recommend initializing your project with an older version of \\bHardhat (v2.14) by running the following command:\\n- Contract verification error: Hardhat found multiple contracts in the proje",
    "ct (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode\\nIf you see this error, try verifying the contract again by specifying the name of the contract that you're looking to verify. You can do this using the --contract option. Here's an example:\\nnpx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\n- Contract invocation error: Bytecode does not match, please try again\\nIf you encounter this error, check the following:\\nWhether the compiler version is the same\\nWhether the optimization runs match (if you've enabled optimization)\\nWhether the contract name matches exactly as specified in the source code\\nStandard Bridge\\n- Error when withdrawing: no bridge found for token pair\\nTry switching to a different RPC provider. Available RPCs: Node RPC Providers\\nExplorer\\n- Error: Awaiting internal transactions for reason\\nYou may encount",
    "er this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Troubleshooting | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nGeneral\\n\\n### \\n\\n\\\\- Status code: 429 { \\\"error\\\": \\\"API rate limit exceeded\\\" }\\n\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. In case this happens, please consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers)\\n\\n###",
    " \\n\\n\\\\- RPC call Error: timeout\\n\\nWhile calling the methods of our rpc (e.g. debug trace / get logs) to sync data from blocks, you may encounter the 'Timeout' issue, that's because the output of certain calls may be a large amount of data(due to big size blocks or large amount of logs) which may needs more time to be synced.\\n\\nSo under such situations if the call lacks of timeout parameter or the default timeout settings is too low, it may result in an error of timeout. So it is recommended that you should add a timeout parameter with the call or set hingher timeout parameter accordingly to solve the timeout issue.\\n\\n## \\n\\nSmart Contracts\\n\\n### \\n\\n\\\\- Contract deploy error: **ProviderError: too many arguments, want at most 1**\\n\\nIf you run into this issue when deploying your contract, you're probably running a newer version of Hardhat. Try manually specifying the gas limit when deploying your contract, like so:\\n\\n```\\nconst MyNFT = await hre.ethers.deployContract(\\\"ContractNam",
    "e\\\", {\\n    gasLimit: \\\"0x1000000\\\",\\n  });\\n```\\n\\nIf the issue persists, we recommend initializing your project with an older version of \\bHardhat (v2.14) by running the following command:\\n\\n### \\n\\n\\\\- Contract verification error: Hardhat found multiple contracts in the project (your MyTokenContract and the imported @openzeppelin/contracts/token/ERC20/IERC20.sol), and it doesn't know against which one you want to verify the bytecode\\n\\nIf you see this error, try verifying the contract again by specifying the name of the contract that you're looking to verify. You can do this using the `--contract` option. Here's an example:\\n\\n```\\nnpx hardhat verify --contract \\\"contracts/MyTokenContract.sol:MyToken\\\" --network mantleTest 0x3A2b26...\\n```\\n\\n### \\n\\n\\\\- Contract invocation error: Bytecode does not match, please try again\\n\\nIf you encounter this error, check the following:\\n\\n*   Whether the compiler version is the same\\n    \\n*   Whether the optimization runs match (if you've ena",
    "bled optimization)\\n    \\n*   Whether the contract name matches exactly as specified in the source code\\n    \\n\\n## \\n\\nStandard Bridge\\n\\n### \\n\\n\\\\- Error when withdrawing: no bridge found for token pair\\n\\nTry switching to a different RPC provider. Available RPCs: [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers)\\n\\n## \\n\\nExplorer\\n\\n### \\n\\n\\\\- Error: Awaiting internal transactions for reason\\n\\nYou may encounter this error if you there are multiple internal transaction calls in the contract being invoked. This does not necessarily mean the transaction has failed, just that the explorer is yet to receive acknowledgements for all the internal transactions.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/fr",
    "aud-proofs\",\n    \"loadedTime\": \"2025-02-15T20:32:47.195Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs\",\n    \"title\": \"Fraud Proofs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fraud Proofs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/jzfxTGtICBgiOVnOt9Bq\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:47 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconn",
    "ect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWQwMmZjMmQtNmQ3Mi00M2QwLTk4MjktNGZmMmY1MTAwZTY5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://st",
    "atic.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=nLoAq47W%2BkX85td8pTGGCr2nI6SxOIZsyLOlaMNXii4KjK9Yd9OiG7M81dQoENk%2F%2FnWgMoettGwjxSsY8RruB4K2uT9YKA6RcASjOwyQIUn4W%2Fa7QUiQMpteXzY%2BjYOmt9OZdY%2BMLDZZ60tn4axp\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811b55efd3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fraud Proofs | Network\\nMantle v2 Tectonic has been released, please move to ",
    "the new documentation!\\nOptimistic Rollups assume state transition validity for all Layer-2 (L2) transactions, unless proven otherwise. Hence, they’re also called assertions, since their validity hasn’t been established per se. The verification logic takes evidence of an invalid state transition to initiate the validation process, and fraud proofs are the medium to provide that. The protocol allows for a dispute window during which a network actor can come forward and submit a fraud proof disputing a state they deem to be incorrect. This challenge period is roughly 7 days for most optimistic rollup protocols. Any transaction that isn’t disputed within this time frame is assumed to be valid by default.\\nTypes of Fraud Proofs\\nFraud proofs can be classified into two distinct categories: non-interactive and interactive. Let's go over the differences in these two types of proving mechanisms.\\nNon-interactive Fraud Proofs\\nNon-interactive fraud proofs use a method where no other parties are",
    " needed to prove the incorrectness of an assertion. They basically run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\nInteractive Fraud Proofs\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem to verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back and forth introduces a new level of complexity in the protocol, and can be harder to design safely. But it has the advantage of not placing any limit",
    "ations on L1, due to a much smaller volume of actual on-chain execution.\\nImproved Fraud Proofs on Mantle Network\\nFor Mainnet Alpha, fraud proofs are currently not enabled and are currently in development. Refer to our Testnet or Github for the latest progress.\\nIn the currently popular model for fraud proofs, the contract that settles disputes — the on-chain verifier — can only execute instructions in a lower-level virtual machine such as MIPS or WASM. This forces an Ethereum Virtual Machine (EVM) client to re-compile their fraud proof into the lower-level language to be interpretable to the on-chain verifier. This means that the content of a fraud proof is generated outside the scope of the EVM. \\nThe implication here is that because of the low-level transpiling, there is no way to guarantee that a fraud proof's contents are derived directly from a compliant EVM client. In other words, the on-chain verifier is blind to the producer of the fraud proof! This blind spot interferes with",
    " the trust-minimization that is imbued into the Ethereum client to begin with. It would be far better for a fraud proof to be evaluated using EVM instructions directly. \\nThis is precisely the sort of system that Mantle network implements. Mantle network establishes transaction validity using the interactive fraud proof mechanism, and by compiling and verifying fraud proofs with EVM-level instructions we register a number of benefits:\\nAllow all Ethereum clients to interact with a common proof system, permissionlessly.\\nReduce trust assumptions across verifiers, clients, and compilers.\\nThe particular fraud proof model that is employed by Mantle network (testnet) is akin to the one deployed by Specular Network. You can learn more about it here.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Fraud Proofs | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nOptimistic Rollups assume state transition validity for all La",
    "yer-2 (L2) transactions, unless proven otherwise. Hence, they’re also called assertions, since their validity hasn’t been established per se. The verification logic takes evidence of an invalid state transition to initiate the validation process, and fraud proofs are the medium to provide that. The protocol allows for a dispute window during which a network actor can come forward and submit a fraud proof disputing a state they deem to be incorrect. This challenge period is roughly 7 days for most optimistic rollup protocols. Any transaction that isn’t disputed within this time frame is assumed to be valid by default.\\n\\n## \\n\\nTypes of Fraud Proofs\\n\\nFraud proofs can be classified into two distinct categories: non-interactive and interactive. Let's go over the differences in these two types of proving mechanisms.\\n\\n### \\n\\nNon-interactive Fraud Proofs\\n\\nNon-interactive fraud proofs use a method where no other parties are needed to prove the incorrectness of an assertion. They basica",
    "lly run all the state transitions between two assertions to establish whether the resultant state is consistent or not. They are simpler to design and implement, but they place limitations on the size of assertions, since the assertions need to be small enough to run with the computational capabilities of the current EVM (Ethereum Virtual Machine) architecture.\\n\\n### \\n\\nInteractive Fraud Proofs\\n\\nInteractive fraud proofs, on the other hand, involve two or more parties that work in tandem to verify an assertion, i.e., a party claiming a fraudulent assertion, and a party defending the said assertion. The verifier narrows down the assertion to a single state transition by interacting with the challenger, and eventually only verifies that one transition to establish its validity. This back and forth introduces a new level of complexity in the protocol, and can be harder to design safely. But it has the advantage of not placing any limitations on L1, due to a much smaller volume of actua",
    "l on-chain execution.\\n\\n## \\n\\nImproved Fraud Proofs on Mantle Network\\n\\nFor Mainnet Alpha, fraud proofs are currently not enabled and are currently **in development**. Refer to our Testnet or Github for the latest progress.\\n\\nIn the currently popular model for fraud proofs, the contract that settles disputes — the **on-chain verifier** — can only execute instructions in a lower-level virtual machine such as MIPS or WASM. This forces an Ethereum Virtual Machine (EVM) client to re-compile their fraud proof into the lower-level language to be interpretable to the on-chain verifier. This means that the content of a fraud proof is generated _outside the scope of the EVM_.\\n\\nThe implication here is that because of the low-level transpiling, there is no way to guarantee that a fraud proof's contents are derived directly from a compliant EVM client. In other words, the on-chain verifier is blind to the producer of the fraud proof! This blind spot interferes with the trust-minimization tha",
    "t is imbued into the Ethereum client to begin with. It would be far better for a fraud proof to be evaluated using EVM instructions directly.\\n\\nThis is precisely the sort of system that Mantle network implements. Mantle network establishes transaction validity using the interactive fraud proof mechanism, and by compiling and verifying fraud proofs with EVM-level instructions we register a number of benefits:\\n\\n1.  Allow all Ethereum clients to interact with a common proof system, permissionlessly.\\n    \\n2.  Reduce trust assumptions across verifiers, clients, and compilers.\\n    \\n\\nThe particular fraud proof model that is employed by Mantle network (testnet) is akin to the one deployed by Specular Network. You can learn more about it [here](https://medium.com/@SpecularL2/towards-secure-trust-minimized-optimistic-rollups-18f32a767aed).\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/supp",
    "ort\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/support\",\n    \"loadedTime\": \"2025-02-15T20:32:48.359Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/support\",\n    \"title\": \"Support | Network\",\n    \"description\": \"Get in touch with us\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Support | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Get in touch with us\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VMr1DE9J3Dvyr7B4wh6h\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"c",
    "hunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTlmYzNkNmItZTI4NC00YTc3LWFiNjUtMTc0ZWNjNjFlZTEw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https:/",
    "/static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=v%2BdtLBdbC0wfmoeMIJDHlNNyp9%2Fd0KIM34zzQgyHZH9%2Fcv7MtpEhFLAakLZ18zSH9AZWGFcWc2dwb7t6Rqa9apfB0bpcXG1KfbXB4Bxof%2BYTylHwCjd7S07UXI%2BYISRJ4Ttr3CcI9xWxfuK3mffb\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811bc5c",
    "3882e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Support | Network\\nGet in touch with us\\nIn case you have any questions, or if you run into any issues during your development journey, feel free to reach out to us through any of the following channels.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Support | Network\\n\\nGet in touch with us\\n\\nIn case you have any questions, or if you run into any issues during your development journey, feel free to reach out to us through any of the following channels.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/concepts/bridging\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/concepts/bridging\",\n    \"loadedTime\": \"2025-02-15T20:32:48.384Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\"",
    ": \"https://docs.mantle.xyz/network/network/introduction/concepts/bridging\",\n    \"title\": \"Bridging | Network\",\n    \"description\": \"Enabling interactions and token transfers between chains\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Bridging | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Enabling interactions and token transfers between chains\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/7e4d57sFomMfsNsQLnqi\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorig",
    "in=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTFjMmI5MGMtOGQzMS00YWM3LTgwOGMtYWEzNWZhNmQ4YWI5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.c",
    "om; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=tEJKpjVGUMKMrB8Ny1VxUP4MVlZTixaeRnoHXiHlflog2b0cY3MvFNjKgpPt6Rgc7TxMRZpOecF83BWY%2BdgIrXF%2F0z9xZZbhBn6OkQ2H%2FQtTVf723JS37Ji6XhscWsLpgGKNACJ1DNmjcp8jRR%2Fl\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811babc693b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Bridging | Network\\nEnabling interactions and token transfers between chains\\nMantle v2 Tectoni",
    "c has been released, please move to the new documentation!\\nWhat is a \\\"Bridge\\\"?\\nApp developers and users commonly need to move data and assets between Layer 1 (L1) and Layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\". \\nHere is a good explanation of bridging from Ethereum Documentation:\\n\\\"Bridges work just like the bridges we know in the physical world. Just as a physical bridge connects two physical locations, a blockchain bridge connects two blockchain ecosystems. Bridges facilitate communication between blockchains through the transfer of information and assets.\\nLet's consider an example:\\nYou're from the USA and are planning a trip to Europe. You have USD, but you need EUR to spend. To exchange your USD for EUR you can use a currency exchange for a small fee.\\\"\\nWhy Do We Need a Bridge? \\nMantle (L2) is a separate blockchain system from Ethereum (L1). Similar to exchanging USD for EUR, we need a way to move $ETH and other tokens",
    " from Ethereum to Mantle so the blockchain system will recognize and accept it in a verifiable and secure way. \\nIn order to move assets into or out of Mantle network you can use the Mantle Bridge. \\nFor deeper explanations on bridging we encourage you to explore the following resources (external links):\\nLast updated 11 months ago\",\n  \"markdown\": \"# Bridging | Network\\n\\nEnabling interactions and token transfers between chains\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n### \\n\\nWhat is a \\\"Bridge\\\"?\\n\\nApp developers and users commonly need to move data and assets between Layer 1 (L1) and Layer 2 (L2). We call the process of moving data and assets between the two networks \\\"bridging\\\".\\n\\nHere is a good explanation of bridging from [Ethereum Documentation](https://ethereum.org/en/bridges/):\\n\\n`\\\"Bridges work just like the bridges we know in the physical world. Just as a physical bridge connects two physical location",
    "s, a blockchain bridge connects two blockchain ecosystems. Bridges facilitate communication between blockchains through the transfer of information and assets.`\\n\\n`Let's consider an example:`\\n\\n`You're from the USA and are planning a trip to Europe. You have USD, but you need EUR to spend. To exchange your USD for EUR you can use a currency exchange for a small fee.\\\"`\\n\\n### \\n\\n**Why Do We Need a Bridge?**\\n\\nMantle (L2) is a separate blockchain system from Ethereum (L1). Similar to exchanging USD for EUR, we need a way to move **$ETH** and other tokens from Ethereum to Mantle so the blockchain system will recognize and accept it in a verifiable and secure way.\\n\\nIn order to move assets into or out of Mantle network you can use the Mantle Bridge.\\n\\n**For deeper explanations on bridging we encourage you to explore the following resources (external links):**\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/netw",
    "ork/network/for-devs/solidity-support\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/solidity-support\",\n    \"loadedTime\": \"2025-02-15T20:32:48.758Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/solidity-support\",\n    \"title\": \"Solidity Support | Network\",\n    \"description\": \"Solidity support and EVM compatibility on Mantle network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Solidity Support | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Solidity support and EVM compatibility on Mantle network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JrwUSyhHhPFGfakETJ9j\"\n      }\n    ],\n    \"jsonLd\": null,\n ",
    "   \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWVhZjE2MzAtYjY5My00ODMwLTljOTItMzdhZTc3N2I5YTk1' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitb",
    "ook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=08anYDv2dZZS0%2BNgfplwM4hZSwMCrvySEqAtmepmnYob%2B1nJ0DfQGhNk9L2A77SjK%2F8VBc8rhGrJzUXtbHxeReH4q1sKwr9xKlvwa8cGS93DLmoTPdGqnwYH9BQfBMVE7tJqNmcZdUCJB3nKI%2FEX\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,sit",
    "e:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811befeeb82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Solidity Support | Network\\nSolidity support and EVM compatibility on Mantle network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nSince Mantle network is EVM compatible, you can deploy any contract written in Solidity, Vyper, or any other contract development language as long as it can be compiled to EVM bytecode.\\nThere are some key differences in Solidity opcode behavior on L1 Ethereum and L2 Mantle VM. This can impact certain operations and features when deploying your dApps on Mantle. The following table lists the opcodes that behave differently accompanied with a description.\\nOpcode Differences\\nOpcode\\nSolidity Equivalent\\nBehaviour\\nNot supported currently, and so Solidity version 0.8.20 and higher cannot be used with ",
    "the default shanghai EVM version. Configuring the EVM version: For Solc, refer here For Hardhat, refer here\\nReturns latest L2 block number\\nNot supported currently, will be available with EIP-1559 update\\nLast updated 11 months ago\",\n  \"markdown\": \"# Solidity Support | Network\\n\\nSolidity support and EVM compatibility on Mantle network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nSince Mantle network is EVM compatible, you can deploy any contract written in Solidity, Vyper, or any other contract development language as long as it can be compiled to EVM bytecode.\\n\\nThere are some key differences in Solidity opcode behavior on L1 Ethereum and L2 Mantle VM. This can impact certain operations and features when deploying your dApps on Mantle. The following table lists the opcodes that behave differently accompanied with a description.\\n\\n## \\n\\nOpcode Differences\\n\\nOpcode\\n\\nSolidity Equivalent\\n\\nBehaviour\\n\\nNot suppor",
    "ted currently, and so Solidity version `0.8.20` and higher cannot be used with the default `shanghai` EVM version. Configuring the EVM version: For Solc, [refer here](https://docs.soliditylang.org/en/v0.8.20/using-the-compiler.html#setting-the-evm-version-to-target) For Hardhat, [refer here](https://hardhat.org/hardhat-runner/docs/guides/compile-contracts#configuring-the-compiler)\\n\\nReturns latest L2 block number\\n\\nNot supported currently, will be available with EIP-1559 update\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/additional-documents/audits\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/audits\",\n    \"loadedTime\": \"2025-02-15T20:32:48.862Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/audits\"",
    ",\n    \"title\": \"Audits | Network\",\n    \"description\": \"Security audit reports on different Mantle Network components\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Audits | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Security audit reports on different Mantle Network components\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/b1WrC0clD2W8Kr3AL6Kz\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n   ",
    "   \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTFiZTE4OWMtODQxNC00NWY3LWFkM2EtMWFjYWYyODI0NjA4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors h",
    "ttps: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=1elpv7jswENTiyIuPcFBh0iHxvs9Qi7AtYrDDeslKATIQRhaT1cI9OMrQ4aJ%2FLANYbO4NJ115EZVufSPAoiFIPxNqWS%2F09TCHOJkQQhKdy%2BGpQiowltVP8nbxAgkfGF9ouJuZBuPvVe0lIyQK8ZG\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811bee8fe3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Audits | Network\\nSecurity audit reports on different Mantle Network components\\nComponent Definitions\\nMigrator: Refers to the migrator contract that migrates $BIT ",
    "to $MNT 1:1.\\nMantle Network: Refers to the code and the contracts that implement Mantle Network's core rollup protocol. Can be found on Github.\",\n  \"markdown\": \"# Audits | Network\\n\\nSecurity audit reports on different Mantle Network components\\n\\n## \\n\\nComponent Definitions\\n\\n*   **Migrator:** Refers to the [migrator contract](https://etherscan.io/address/0xffb94c81d9a283ab4373ab4ba3534dc4fb8d1295#code) that migrates $BIT to $MNT 1:1.\\n    \\n*   **Mantle Network:** Refers to the code and the contracts that implement Mantle Network's core rollup protocol. Can be found on [Github](https://github.com/mantlenetworkio/mantle#directory-structure).\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling\",\n    \"loadedTime\": \"2025-02-15T20:32:48.956Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/netw",
    "ork?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling\",\n    \"title\": \"Resources and Tooling | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Resources and Tooling | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/Btd852xtYsMad23PMAmh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Ne",
    "xt-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NmE4ODdjODgtZWU1Yy00MGIwLTliNWYtYTc1MGM2MjlhOGQz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"ne",
    "l\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=y2egE9KTmadh2RP4Q60vdCXcoARg2Tic7E4eqISIpEZz%2BXg08orjzgG4nN%2F5uPJ4wAAMZ6nuTJ867OSAjVeOJH86GRbWs4BwlsEyB47Bp8zIsrjWIhnROPJ4vWLBXnIL%2BfIQN93JWQfXkxtalIDf\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811bf0942059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Resources and Tooling | Network\\nMantle v1\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Resources and Tooling | Network\\n\\n[![",
    "Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network/network)\\n\\nMantle v1\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-devs/resources-and-tooling?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling?fallback=",
    "true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/additional-documents/official-links\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/official-links\",\n    \"loadedTime\": \"2025-02-15T20:32:49.355Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/additional-documents/official-links\",\n    \"title\": \"Official Links | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:",
    "title\",\n        \"content\": \"Official Links | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VMAyfI6A8YglCf5R8suD\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NTg1MmY3M2YtMWNhOC00OGRjLWI3MjktMDgwOTQ0OGUwZDRm' 'strict-dynamic' 'unsafe-inline' 'unsafe",
    "-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pZy41jKR2LGOYad%2BEBs1HI6M%2FFlXbMWU4c7BByt8fAlNxkxLKfdlc4cZ5JcQaco8QU1nBmnWYSrtkNxTolhG2kngbs9T1iIrGoODNaj2DXO4yMQuTUsLzv",
    "0Ooo68kiFDWPZ5ZITStL%2Bv5UB%2BHHkC\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c2fb5e82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Official Links | Network\\nCommunication and Socials\\nWebsite: https://mantle.xyz\\nTwitter: https://twitter.com/0xMantle\\nTelegram: https://t.me/mantlenetwork\\nDiscord: https://discord.com/invite/0xMantle\\nReddit: https://reddit.com/r/0xMantle/\\nBlog: https://www.mantle.xyz/blog\\nYouTube: https://www.youtube.com/@0xMantle\\nLinkedIn: https://www.linkedin.com/company/0xmantle/\\nGitHub: https://github.com/mantlenetworkio\",\n  \"markdown\": \"# Official Links | Network\\n\\n### \\n\\nCommunication and Socials\\n\\n**Website:** [https://mant",
    "le.xyz](https://mantle.xyz/)\\n\\n**Twitter:** [https://twitter.com/0xMantle](https://twitter.com/0xMantle)\\n\\n**Telegram:** [https://t.me/mantlenetwork](https://t.me/mantlenetwork)\\n\\n**Discord:** [https://discord.com/invite/0xMantle](https://discord.com/invite/0xMantle)\\n\\n**Reddit:** [https://reddit.com/r/0xMantle/](https://reddit.com/r/0xMantle/)\\n\\n**Blog:** [https://www.mantle.xyz/blog](https://www.mantle.xyz/blog)\\n\\n**YouTube:** [https://www.youtube.com/@0xMantle](https://www.youtube.com/@0xMantle)\\n\\n**LinkedIn:** [https://www.linkedin.com/company/0xmantle/](https://www.linkedin.com/company/0xmantle/)\\n\\n**GitHub:** [https://github.com/mantlenetworkio](https://github.com/mantlenetworkio)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers\",\n    \"loadedTim",
    "e\": \"2025-02-15T20:32:49.796Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers\",\n    \"title\": \"Node RPC Providers | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Node RPC Providers | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/21UGbEmteWFLOaTJfktn\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconn",
    "ect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2ZiODQ5M2ItMWQ5Ni00ZjhkLWIyMTUtMDBkNTQ3ZWEwNzBj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://st",
    "atic.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=HEzIhhveYqDLPHhqiEN32EQ%2F0HiDspjVlGhJAuGV9ivzaXrxnjR%2FtDBSftR45NvtyXakyf499CGSVBTaLHshV%2FbXem6AbwBah0oPJOvt8ACT96W4QDOwEu%2BN9pO51iVQaeePr1dNPey%2F7gRLxtRE\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c2ed383b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Node RPC Providers | Network\\nMantle v2 Tectonic has been released, please move",
    " to the new documentation!\\nWe're working with popular node providers that you can use to connect your dApps or games to Mantle network. They enable convenient and scalable API access to Mantle nodes so you can focus on building without having to worry about the underlying infrastructure.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Node RPC Providers | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nWe're working with popular node providers that you can use to connect your dApps or games to Mantle network. They enable convenient and scalable API access to Mantle nodes so you can focus on building without having to worry about the underlying infrastructure.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introductio",
    "n/security-model-and-roles\",\n    \"loadedTime\": \"2025-02-15T20:32:49.538Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"title\": \"Security Model and Roles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Security Model and Roles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/7WrNxL9H5OJw8Umndp4T\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\":",
    " \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Zjk4NTI2YjYtODAzMy00NmEzLThhY2UtZDFmMWJkYmYxMDFi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; ob",
    "ject-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=OlAlVIjEbODb2QAAJqBSRgPxEMGzUt3Hzo6yZPtrJ0VLFOB1VKlynqp0Zo559qIeVHw8WW2CUcray3xlZtRoM%2BLCPRCGxi15p0Dyx6miqcVVNJrLkQT8HztOTzTJLq%2FkRrgkxccnv%2BHS%2FrLyWv6%2B\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c23cec059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Security Model and Roles | Network\\n",
    "Last updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Security Model and Roles | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle\",\n    \"loadedTime\": \"2025-02-15T20:32:50.919Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle\",\n    \"title\": \"Transaction Lifecycle | Network\",\n    \"description\": \"A transaction's lifecycle on Mantle\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Transaction Lifecycle | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n",
    "        \"content\": \"A transaction's lifecycle on Mantle\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/soeRIMlX8RidUUIdTjkr\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:50 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZmE0MWNjYTAtOTFkYy00YjhiLWIxMWItMTQxNGY5MWRhZTIx' 'strict-dynamic' 'unsafe-inline' 'uns",
    "afe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=O351i5kXl726fZDjVGGkHi6VMvNhxTPAFsKD8%2ByEahfWYidMBTkfP%2BYTtD2QldvylPBExW5LVrsRu4AO1AF6dwkjfExaTOugYN%2BOxFjqHcW5760Ps",
    "z40fqVV%2FlUaEv9rkq0yk9gfmXlizfWvbwJI\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811cc1d3c82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Transaction Lifecycle | Network\\nA transaction's lifecycle on Mantle\\nMantle v2 Tectonic has been released, please move to the new documentation!\\n1. The Initiation\\nA wallet user, a dApp, or a script somewhere wants to use a blockchain based system to transfer funds, or perform a task. \\nIn the case of the user, they've already connected to the Mantle network by adding the RPC endpoint of a Sequencer node to their wallet. \\nThe dApp on the other hand has integrated the Mantle SDK and has already instantiated it to be able",
    " to talk to the Mantle network. They are both ready to send a request that contains a receiver's address and the amount they want to transfer.\\nJust like any service, this action requires a fee. And not just for making the transfer itself, but to also maintain a perpetual, immutable public record of it that can be verified by anybody. Their wallet, or dApp, must make sure they have enough balance to do this. \\nFor a wallet, things are simpler, since it's easier to calculate the fee required to be paid\\nA dApp needs to do more to carefully make that calculation. More details here.\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle network where a Sequencer is ready to process it. This is where the transaction first enters Mantle. More details here.\\n2. The Handling\\nThe transaction triggers a standard state verification process that is carried out by the Ethereum Virtual Machine (EVM) software running on these nodes. This is to make",
    " sure the transaction is valid in nature, has paid the necessary fees, and not doing something out of the ordinary.\\nThis transaction updates the local state (the ledger) and awaits further processing as part of a pending block. The process up until this point is particularly fast.\\nIn blockchain terms, this means instant transaction confirmations and state updates\\nMany such pending blocks are combined to form batches that will be sent to Ethereum to be finalized. The L2 chain achieves low transaction fees by spreading fixed costs over the multiple transactions in a batch. \\nThis block data is then verified for correctness by another module that's a part of the Sequencer network known as Threshold Signature Scheme (TSS) nodes. They verify the state roots submitted by the Sequencer as part of the blocks on L2. More details here.\\n3. The Storage\\nOnce signed off by TSS nodes, the batched block data is ready to be stored by Mantle DA nodes that use EigenDA technology, while the updated s",
    "tate root is published to L1 Ethereum. The state data is transmitted across the network by the Sequencer to be received by different actors on both L2 and L1. \\nOn L2, Rollup Verifiers are looking to sync this block data to make it accessible for other users and dApps. More details here.\\nOn Ethereum, there's an entire trust network ready to verify the updated state roots that are stored in a contract. Once the block goes through Ethereum's consensus mechanism, it is recorded on-chain where it's secure.\\nThe Data Availability nodes, or DA nodes, who will sync the block data and guarantee access to it at any given time in exchange for the $MNT rewards they're going to receive for providing this service. More details here.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Transaction Lifecycle | Network\\n\\nA transaction's lifecycle on Mantle\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\n1\\\\. The Initiation\\n\\nA wallet",
    " user, a dApp, or a script somewhere wants to use a blockchain based system to transfer funds, or perform a task.\\n\\n*   In the case of the user, they've already connected to the Mantle network by adding the RPC endpoint of a Sequencer node to their wallet.\\n    \\n*   The dApp on the other hand has integrated the [Mantle SDK](https://sdk.mantle.xyz/index.html) and has already instantiated it to be able to talk to the Mantle network. They are both ready to send a request that contains a receiver's address and the amount they want to transfer.\\n    \\n\\nJust like any service, this action requires a fee. And not just for making the transfer itself, but to also maintain a perpetual, immutable public record of it that can be verified by anybody. Their wallet, or dApp, must make sure they have enough balance to do this.\\n\\n*   For a wallet, things are simpler, since it's easier to calculate the fee required to be paid\\n    \\n*   A dApp needs to do more to carefully make that calculation. [**M",
    "ore details here.**](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2)\\n    \\n\\nThey use the tools at hand to compose a request, sign it using their private keys, and send it to Mantle network where a Sequencer is ready to process it. This is where the transaction first enters Mantle. [**More details here.**](https://docs.mantle.xyz/network/network/for-validators/network-roles#sequencers)\\n\\n## \\n\\n2\\\\. The Handling\\n\\nThe transaction triggers a standard state verification process that is carried out by the Ethereum Virtual Machine (EVM) software running on these nodes. This is to make sure the transaction is valid in nature, has paid the necessary fees, and not doing something out of the ordinary.\\n\\nThis transaction updates the local state (the ledger) and awaits further processing as part of a pending block. The process up until this point is particularly fast.\\n\\nIn blockchain terms, this means instant transaction confirmations and state updates\\n\\nMany s",
    "uch pending blocks are combined to form batches that will be sent to Ethereum to be finalized. The L2 chain achieves low transaction fees by spreading fixed costs over the multiple transactions in a batch.\\n\\nThis block data is then verified for correctness by another module that's a part of the Sequencer network known as Threshold Signature Scheme (TSS) nodes. They verify the state roots submitted by the Sequencer as part of the blocks on L2. [**More details here.**](https://docs.mantle.xyz/network/network/for-validators/network-roles#multi-party-computation-mpc-nodes)\\n\\n## \\n\\n3\\\\. The Storage\\n\\nOnce signed off by TSS nodes, the batched block data is ready to be stored by Mantle DA nodes that use EigenDA technology, while the updated state root is published to L1 Ethereum. The state data is transmitted across the network by the Sequencer to be received by different actors on both L2 and L1.\\n\\nOn L2, Rollup Verifiers are looking to sync this block data to make it accessible for oth",
    "er users and dApps. [**More details here.**](https://docs.mantle.xyz/network/network/for-validators/network-roles#rollup-verifiers)\\n\\nOn Ethereum, there's an entire trust network ready to verify the updated state roots that are stored in a contract. Once the block goes through Ethereum's consensus mechanism, it is recorded on-chain where it's secure.\\n\\nThe Data Availability nodes, or DA nodes, who will sync the block data and guarantee access to it at any given time in exchange for the $MNT rewards they're going to receive for providing this service. [**More details here.**](https://docs.mantle.xyz/network/network/introduction/concepts/data-availability#da-nodes)\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/network-faucet\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/network-faucet\",\n    \"loadedTime\": \"202",
    "5-02-15T20:32:50.973Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/network-faucet\",\n    \"title\": \"Network Faucet | Network\",\n    \"description\": \"Obtain testnet $MNT to get started\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Faucet | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Obtain testnet $MNT to get started\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/dIqZ5AotViRBtnxY2Zpv\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:50 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n    ",
    "  \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NGViZDI3MmItZjAwMS00MWNhLTgzZDQtZjYxNTAwZWQyZDRh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.co",
    "m; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=yKCeRsx8xmJXFGjmvAu5kAovutrfRvhMWKW5yMu1tZIHrUM4Tk6ofBPye%2Fcf7DnYLQRALtL4vB7sGOPw3spihYBmTrdYO9Pyd9iXZUvZA4YD9CDt5WpFHcBVO534glGx2r%2BrI%2BEOe78DSsllIU50\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ca1d853b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n ",
    " },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Faucet | Network\\nObtain testnet $MNT to get started\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nTestnet Faucets \\n$MNT Faucet\\nBefore moving forward please make sure your wallet has sufficient $gETH (Goerli ETH) to be used as gas for minting Goerli $MNT. \\nMantle Faucet is a simple faucet for Mantle testnet that drips $MNT. It requires the following steps:\\nAuthenticate with Twitter\\nEnter your wallet address\\nYou will automatically be sent $MNT to your wallet on testnet. \\nMake sure you import the $MNT token to your wallet using the contract address 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\n$gETH Faucet\\nYou can get $gETH (Goerli ETH) from any of the following faucets:\\nOnce you have some $gETH, you can use the Mantle bridge to transfer it to Mantle Goerli testnet.\\nMint Test $MNT on Etherscan\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\nNext, switch your ",
    "wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\nFind and click on the mint() function in the list on the Etherscan page. It's on no.9.\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Network Faucet | Network\\n\\nObtain testnet $MNT to get started\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nTestnet Faucets\\n\\n### \\n\\n$MNT Faucet\\n\\nBefore moving forward please make sure your wallet has sufficient **$gETH (Goerli ETH)** to be used as gas for minting Goerli $MNT.\\n\\n[Mantle Faucet](https://faucet.testnet.mantle.xyz/) is a simple faucet for Mantle testnet that drips $MNT. It requires the following steps:\\n\\n1.  Authenticate with **Twitter**\\n    \\n2.  Enter your wallet address\\n    \\n",
    "\\nYou will automatically be sent $MNT to your wallet on testnet.\\n\\nMake sure you import the $MNT token to your wallet using the contract address `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n\\n### \\n\\n$gETH Faucet\\n\\nYou can get $gETH (Goerli ETH) from any of the following faucets:\\n\\nOnce you have some $gETH, you can use the [Mantle bridge](https://bridge.testnet.mantle.xyz/) to transfer it to Mantle Goerli testnet.\\n\\n## \\n\\nMint Test $MNT on Etherscan\\n\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\n\\n1.  Next, switch your wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n    \\n\\n3.  Find and click on the `mint()` function in the list on the Etherscan page. It's on no.9.\\n    \\n\\n1.  Now you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\n    \\n\\nLast updated 1",
    "1 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2\",\n    \"loadedTime\": \"2025-02-15T20:32:51.162Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2\",\n    \"title\": \"Transaction Fees on L2 | Network\",\n    \"description\": \"How transaction fees are calculated on Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Transaction Fees on L2 | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"How transaction fees are calculated on Mantle Network\"\n      },\n      {\n        \"property\": \"og",
    ":image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/TyVs1vgKd0Ko03ZY0VIf\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWNhYTFjNjYtNWJiMS00NDMzLWE4YjUtODIxZDViMTIwODNj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; styl",
    "e-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=G84%2F304%2FqmvqaGw6m23d0eNkajOFR6WrwoOhWuMm8hmC%2FLpQvzfKLK1jux8FsUcxYQ9998%2BWmYe3kVWCjCBvB%2BJEdGv9Ir%2FNkOdro8fg%2BrFWiaNzZp5q0LQMQLYid1ocT39mRGZXFHLVcNBfW1cC\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      ",
    "\"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ce4fdc82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Transaction Fees on L2 | Network\\nHow transaction fees are calculated on Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nUnderstanding Fee Basics\\nTransaction fees on Mantle Network work similar to fees on Ethereum. As Mantle network is a Layer 2 (L2) blockchain, there are new paradigms in the fee structure that cause it to differ from Ethereum's fee. \\nSince Mantle Network is constantly perfecting EVM compatibility, dApps can conveniently handle any changes with minor modifications. Let's take a look at the two sources of transaction costs on Mantle.\\nThe L2 transact",
    "ion fee for Layer-2 execution\\nThe L1 rollup fee to cover the cost of publishing rollup state roots to L1 (divided equally among users whose transactions were included in the rollup batch)\\nThe estimateGas API currently only returns L2 gas cost. The L1 gas estimate needs to be calculated separately. We will support fetching the total L1+L2 gas estimate through the estimateGas interface in a future network update.\\nThe L2 Transaction Fee\\nJust like Ethereum, transactions on Mantle network have to pay gas for the amount of computation and storage that they use. Every L2 transaction will pay some execution fee, equal to the amount of gas used by the transaction multiplied by the gas price attached to the transaction.\\nHere's the (simple) math:\\nL2ExecutionFee = L2GasPrice * L2GasUsed\\nThe amount of L2 gas used depends on the particular transaction that you're trying to send. Thanks to EVM compatibility, transactions typically use approximately the same amount of gas on Mantle Network as t",
    "hey do on Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 gas price on the public Mantle dashboard. Also, since gas fees on L2 Mantle Network are charged in $MNT, it means at the same gas price the transaction cost incurred will still be significantly lower than other L2 networks that use $ETH as the gas token.\\nThe L1 Rollup Fee\\nAll the state roots that are generated on L2 as result of transaction execution are published to Ethereum. This step is crucial to the security properties of Mantle because it means that all of the most up-to-date block data from L2 Mantle Network that you need to sync a node is always publicly available on L1 Ethereum.\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited amount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same",
    " cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 transaction execution. As a result, for transactions with high complexity, this can even save upto ～70% of the cost compared to the original L1 rollup fee.\\nMantle publishes rollup states and some necessary transaction data to Ethereum by packaging transactions into batches, and the amount of $ETH spent during this process will be divided among the users whose transactions were included in the batch. The cost-per-user is significantly cheaper than it would be if the transactions were executed on L1. The L1 rollup fee is calculated from the following sub-factors:\\nThe current gas price on Ethereum.\\nA fixed overhead (auto-adjusted and set into gas oracle)\\nThe scaling factor (currently set to 1)\\nThe $ETH to $MNT conversion ratio\\nHere's the math:\\nL1RollupFee = L1GasPrice * Overhead * Ratio\\nThe transaction fees incurred by users is calculated and deducted as described below:\\",
    "nA connection is made to the RPC and the EstimateGas method is called to calculate the gas cost on L2 (if you use a wallet, such as MetaMask, this step will be executed automatically). This is the L2 Transaction Fee.\\nA transaction is signed and submitted\\nMantle node receives the transaction and checks if the account balance is sufficient, including the L2 Transaction Fee and L1 Rollup Fee*.\\nThe transaction is executed successfully, recording your interaction with Mantle Network.\\n*Note that there is currently no RPC interface that provides accurate estimates of L1 Rollup Fee, please ensure that wallets have sufficient balance, even though the amount needed is generally very small.\\nKeep in Mind\\nSending Transactions \\nSince Mantle supports Ethereum's JSON RPC interface, you can use the eth_gasPrice method to obtain recommended L2 gas price values. Similarly, you can use eth_estimateGas to estimate your L2 gas usage.\\nGas Price Updates\\nGas prices on L2 are set to 0.05 Gwei by defaul",
    "t, it will be updated every once in a while with reference to the recent blocks on Ethereum.\\nEIP-1559 Support\\nCurrently, Mantle Network does NOT support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in.\\nDisplaying Fees to Users\\nYou can use the RPC method eth_getTransactionReceipt to obtain the fees for a particular transaction, where the L1 Rollup Fee portion is listed as the field l1fee.\\nEstimating the Total Fee \\nYou can estimate the total fee by combining your estimates for the L2 execution fee and L1 data fee.\\nCommon RPC Errors\\nInsufficient Funds\\nError code: -32000\\nError message: invalid transaction: insufficient funds for l1Fee + l2Fee + value \\nYou'll get this error when the account's $MNT balance is not enough to cover the transaction fee and the transfer amount. Check the account balance to ensure that the minimum amount req",
    "uirements are met.\\nGas Price Too Low\\nError code: -32000 \\nError message: gas price too low: X wei, use at least tx.gasPrice = Y wei \\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too low. Currently, at least 0.05 Gwei is required, which can be obtained from the GasOracle contract 0x420000000000000000000000000000000000000F\\nGas Price Too High\\nError code: -32000 \\nError message: gas price too high: X wei, use at most tx.gasPrice = Y wei \\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too high. Currently limit is set at 200 Gwei.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Transaction Fees on L2 | Network\\n\\nHow transaction fees are calculated on Mantle Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\n**Understanding Fee Basics**\\n\\nTransaction fees on Mantle Network w",
    "ork similar to fees on Ethereum. As Mantle network is a Layer 2 (L2) blockchain, there are new paradigms in the fee structure that cause it to differ from Ethereum's fee.\\n\\nSince Mantle Network is constantly perfecting EVM compatibility, dApps can conveniently handle any changes with minor modifications. Let's take a look at the two sources of transaction costs on Mantle.\\n\\n1.  The L2 transaction fee for Layer-2 execution\\n    \\n2.  The L1 rollup fee to cover the cost of publishing rollup state roots to L1 (divided equally among users whose transactions were included in the rollup batch)\\n    \\n\\nThe `estimateGas` API currently only returns L2 gas cost. The L1 gas estimate needs to be calculated separately. We will support fetching the total L1+L2 gas estimate through the `estimateGas` interface in a future network update.\\n\\n### \\n\\n**The L2 Transaction Fee**\\n\\nJust like Ethereum, transactions on Mantle network have to pay gas for the amount of computation and storage that they use",
    ". Every L2 transaction will pay some **execution fee**, equal to the amount of gas used by the transaction multiplied by the gas price attached to the transaction.\\n\\nHere's the (simple) math:\\n\\n```\\nL2ExecutionFee = L2GasPrice * L2GasUsed\\n```\\n\\nThe amount of L2 gas used depends on the particular transaction that you're trying to send. Thanks to EVM compatibility, transactions typically use approximately the same amount of gas on Mantle Network as they do on Ethereum. Gas prices fluctuate with time and congestion, but you can always check the current estimated L2 gas price on the public Mantle dashboard. Also, since gas fees on L2 Mantle Network are charged in $MNT, it means at the same gas price the transaction cost incurred will still be significantly lower than other L2 networks that use $ETH as the gas token.\\n\\n### \\n\\n**The L1 Rollup Fee**\\n\\nAll the state roots that are generated on L2 as result of transaction execution are published to Ethereum. This step is crucial to the s",
    "ecurity properties of Mantle because it means that all of the most up-to-date block data from L2 Mantle Network that you need to sync a node is always publicly available on L1 Ethereum.\\n\\nWith the EigenDA-powered Mantle DA module online with Mantle Mainnet, only state roots and a limited amount of necessary transaction data are sent to L1, while the transaction batch data is posted to the DA network. For dApps with high gas consumption, they can be executed at the same cost as an ordinary transaction (like a transfer), and the L1 fee will not increase with the complexity of L2 transaction execution. As a result, for transactions with high complexity, this can even save upto ～70% of the cost compared to the original L1 rollup fee.\\n\\nMantle publishes rollup states and some necessary transaction data to Ethereum by packaging transactions into batches, and the amount of $ETH spent during this process will be divided among the users whose transactions were included in the batch. The cost-",
    "per-user is significantly cheaper than it would be if the transactions were executed on L1. The L1 rollup fee is calculated from the following sub-factors:\\n\\n1.  The current gas price on Ethereum.\\n    \\n2.  A fixed overhead (auto-adjusted and set into gas oracle)\\n    \\n3.  The scaling factor (currently set to 1)\\n    \\n4.  The $ETH to $MNT conversion ratio\\n    \\n\\nHere's the math:\\n\\n```\\nL1RollupFee = L1GasPrice * Overhead * Ratio\\n```\\n\\nThe transaction fees incurred by users is calculated and deducted as described below:\\n\\n1.  A connection is made to the RPC and the `EstimateGas` method is called to calculate the gas cost on L2 (if you use a wallet, such as MetaMask, this step will be executed automatically). This is the L2 Transaction Fee.\\n    \\n2.  A transaction is signed and submitted\\n    \\n3.  Mantle node receives the transaction and checks if the account balance is sufficient, including the L2 Transaction Fee and L1 Rollup Fee\\\\*.\\n    \\n4.  The transaction is executed s",
    "uccessfully, recording your interaction with Mantle Network.\\n    \\n\\n_\\\\*Note that there is currently no RPC interface that provides accurate estimates of L1 Rollup Fee, please ensure that wallets have sufficient balance, even though the amount needed is generally very small._\\n\\n## \\n\\nKeep in Mind\\n\\n### \\n\\n**Sending Transactions**\\n\\nSince Mantle supports Ethereum's JSON RPC interface, you can use the `eth_gasPrice` method to obtain recommended L2 gas price values. Similarly, you can use `eth_estimateGas` to estimate your L2 gas usage.\\n\\n### \\n\\n**Gas Price Updates**\\n\\nGas prices on L2 are set to **0.05 Gwei** by default, it will be updated every once in a while with reference to the recent blocks on Ethereum.\\n\\n### \\n\\nEIP-1559 Support\\n\\nCurrently, Mantle Network does **NOT** support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in",
    ".\\n\\n### \\n\\n**Displaying Fees to Users**\\n\\nYou can use the RPC method `eth_getTransactionReceipt` to obtain the fees for a particular transaction, where the L1 Rollup Fee portion is listed as the field `l1fee`.\\n\\n#### \\n\\n**Estimating the Total Fee**\\n\\nYou can estimate the total fee by combining your estimates for the L2 execution fee and L1 data fee.\\n\\n## \\n\\nCommon RPC Errors\\n\\n### \\n\\nInsufficient Funds\\n\\n**Error code:** -32000\\n\\n**Error message:** invalid transaction: insufficient funds for l1Fee + l2Fee + value\\n\\nYou'll get this error when the account's $MNT balance is not enough to cover the transaction fee and the transfer amount. Check the account balance to ensure that the minimum amount requirements are met.\\n\\n### \\n\\nGas Price Too Low\\n\\n**Error code:** -32000\\n\\n**Error message:** gas price too low: X wei, use at least tx.gasPrice = Y wei\\n\\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too low. ",
    "Currently, at least **0.05 Gwei** is required, which can be obtained from the `GasOracle` contract `0x420000000000000000000000000000000000000F`\\n\\n### \\n\\nGas Price Too High\\n\\nError code: -32000\\n\\nError message: gas price too high: X wei, use at most tx.gasPrice = Y wei\\n\\nThis is a custom RPC error that Mantle network returns when a transaction is rejected because the set gas price is too high. Currently limit is set at **200 Gwei.**\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-node-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-node-api\",\n    \"loadedTime\": \"2025-02-15T20:32:51.758Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/man",
    "tle-node-api\",\n    \"title\": \"Mantle Node API | Network\",\n    \"description\": \"RPC API Reference\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Node API | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"RPC API Reference\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JkNThJJrsyCURf0dpPcy\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Pref",
    "etch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWM4MDIzM2ItMDM5NS00YjIzLWFhZGItYWVmNDdkMWVmOTNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_",
    "to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=sJPrfeBEbH27Aro6p8%2BfYDHEHQruelokQt5CD1qyhmHW6ex%2FvizLNj96oasKKOs%2BHj9OWByBFCBZmlcozOUhwDWlfvTK8GbE7kpPpINAwhSrQVSMnKpuGWIQtYsFi%2FoxCOIB%2BU7zjxN6UC47K4hp\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ce9ae53b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Node API | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Net",
    "work shares the same JSON-RPC API implementation as Ethereum.\\nYou can refer to the common endpoints here. \\nWe've also introduced custom methods to simplify certain Mantle-specific interactions.\\nAll methods can be accessed via https and websocket.\\nThe websocket supports an access method equivalent to the https interface, along with event subscription and cancellation. See here for reference.\\nReturns block info for multiple blocks, takes a block range as parameter\\nReturns the current L1 and L2 gas prices that a Sequencer node would use to calculate gas fees \\nReturns the block info in the form of an array of block objects for multiple blocks within a specified range. (See eth_getBlockByHash for the structure of a block object) \\nNo.\\nParameter\\nType\\nDescription\\nIf true, returns full transaction objects If false, returns transaction hashes only\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n{ ",
    "\\\"jsonrpc\\\":\\\"2.0\\\", \\\"id\\\":1, \\\"result\\\":[ { \\\"difficulty\\\":\\\"0x2\\\", \\\"extraData\\\":\\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\", \\\"gasLimit\\\":\\\"0xe4e1c0\\\", \\\"gasUsed\\\":\\\"0x3183d\\\", \\\"hash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"logsBloom\\\":\\\"0xminer\\\":\\\"0x000000000000000000000000000000000",
    "0000000\\\", \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\":\\\"0x0000000000000000\\\", \\\"number\\\":\\\"0x1\\\", \\\"parentHash\\\":\\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\", \\\"receiptsRoot\\\":\\\"0xf4c97b1186b690ad3318f907c0cdaf46f4598f27f711a5609064b2690a767287\\\", \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\":\\\"0x30c\\\", \\\"stateRoot\\\":\\\"0xd3ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\", \\\"timestamp\\\":\\\"0x618d4769\\\", \\\"totalDifficulty\\\":\\\"0x3\\\", \\\"transactions\\\":[\\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\"], \\\"transactionsRoot\\\":\\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\", \\\"uncles\\\":[] }, { \\\"difficulty\\\":\\\"0x2\\\", \\\"extraData\\\":\\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a",
    "5e2910fe64b41801\\\", \\\"gasLimit\\\":\\\"0xe4e1c0\\\", \\\"gasUsed\\\":\\\"0x1c60d\\\", \\\"hash\\\":\\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\", \\\"logsBloom\\\":\\\"0xminer\\\":\\\"0x0000000000000000000000000000000000000000\\\", \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\", \\\"nonce\\\":\\\"0x0000000000000000\\\", \\\"number\\\":\\\"0x2\\\", \\\"parentHash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\", \\\"receiptsRoot\\\":\\\"0x2057c8fb7",
    "9c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\", \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\", \\\"size\\\":\\\"0x30c\\\", \\\"stateRoot\\\":\\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\", \\\"timestamp\\\":\\\"0x618d8837\\\", \\\"totalDifficulty\\\":\\\"0x5\\\", \\\"transactions\\\":[\\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\"], \\\"transactionsRoot\\\":\\\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f4c5ca6f56a7d9a45b9904ea1c69\\\", \\\"uncles\\\":[] } ] }\\nReturns various pieces of information in the form of an Object for a specified node. \\nNode's mode of operation - \\\"sequencer\\\" or \\\"verifier\\\"\\ntrue if the node is currently syncing false otherwise\\nNested object. Contains blockNumber and timestamp\\nBlock no. of the latest known L1 block\\nTimestamp of the latest known L1 block\\nNested object. Contains queueIndex, index, and verifiedIndex\\nIndex within the CTC of the last L1 to L2 message ingested\\nIndex of the last L2 transactio",
    "n processed\\nIndex of the last transaction that was ingested from a batch that was posted to L1\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\":\\\"2.0\\\", \\\"id\\\":1, \\\"result\\\":{ \\\"mode\\\":\\\"verifier\\\", \\\"syncing\\\":false, \\\"ethContext\\\":{ \\\"blockNumber\\\":10743302, \\\"timestamp\\\":1957082793 }, \\\"rollupContext\\\":{ \\\"index\\\":11287, \\\"queueIndex\\\":14362, \\\"verifiedIndex\\\":0 } } }\\nReturns an Object containing the L1 and L2 gas prices used by the Sequencer to calculate transaction gas fees.\\nL1 gas price in wei (used to estimate L1 calldata costs)\\nL2 gas price in wei (used to estimate L2 execution costs)\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_gasPrices\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n{ \\\"jsonrpc\\\":\\\"2.0\\\", \\\"id\\\":1, \\\"result\\\":{ \\\"l1GasPrice\\\":\\\"0x254aa66732\\\", \\\"l2GasPrice\\\":\\\"0xf3792\\\" } }\",\n  \"markdown\": \"# Mantle Node API | Network\\n\\nMantle v2 Tectonic has been released, please move t",
    "o the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nApplications need to connect to a node to fetch block data and send transactions to the Mantle network. Mantle Network shares the same **JSON-RPC API** implementation as Ethereum.\\n\\nYou can refer to the common endpoints [**here**](https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods).\\n\\nWe've also introduced custom methods to simplify certain Mantle-specific interactions.\\n\\nAll methods can be accessed via **https** and **websocket.**\\n\\nThe websocket supports an access method equivalent to the **https** interface, along with event subscription and cancellation. See [**here**](https://ethereum.org/en/developers/tutorials/using-websockets/) for reference.\\n\\nReturns block info for multiple blocks, takes a block range as parameter\\n\\nReturns the current L1 and L2 gas prices that a [Sequencer](https://docs.mantle.xyz/network/network/for-validators/network-roles#sequencers) node would use to calculate [gas fees",
    "](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2#understanding-fee-basics)\\n\\nReturns the block info in the form of an array of `block` objects for multiple blocks within a specified range. (See [`eth_getBlockByHash`](https://eth.wiki/json-rpc/API#eth_getblockbyhash) for the structure of a `block` object)\\n\\nNo.\\n\\nParameter\\n\\nType\\n\\nDescription\\n\\nIf `true`, returns full transaction objects If `false`, returns transaction hashes only\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"eth_getBlockRange\\\",\\\"params\\\":[\\\"0x1\\\", \\\"0x2\\\", false],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\":\\\"2.0\\\",\\n  \\\"id\\\":1,\\n  \\\"result\\\":[\\n    {\\n      \\\"difficulty\\\":\\\"0x2\\\",\\n      \\\"extraData\\\":\\\"0xd97735082a846765746889676f312e31352e3133856c696e75780000000000009c3827892825f0825a7e329b6913b84c9e4f89168350aff0939e0e6609629f2e7f07f2aeb62acbf4b16a739cab68866f4880ea406583a4b28a59d4f55dc2314e00\\\",\\n      \\\"gasLimit\\\":\\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\":\\\"0x31",
    "83d\\\",\\n      \\\"hash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000400000000000100000000000000200000000002000000000000001000000000000000000004000000000000000000000000000040000400000100400000000000000100000000000000000000000000000020000000000000000000000000000000000000000000000001000000000000000000000100000000000000000000000000000000000000000000000000000000000000088000000080000000000010000000000000000000000000000800008000120000000000000000000000000000000002000\\\",\\n      \\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\":\\\"0x0000000000000000\\\",\\n      \\\"number\\\":\\\"0x1\\\",\\n      \\\"parentHash\\\":\\\"0x7ca38a1916c42007829c55e69d3e9a73265554b586a499015373241b8a3fa48b\\\",\\n      \\\"receiptsRoot\\\":\\\"0xf4c97b1186b690ad33",
    "18f907c0cdaf46f4598f27f711a5609064b2690a767287\\\",\\n      \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\":\\\"0x30c\\\",\\n      \\\"stateRoot\\\":\\\"0xd3ac40854cd2ac17d8effeae6065cea990b04be714f7061544973feeb2f1c95f\\\",\\n      \\\"timestamp\\\":\\\"0x618d4769\\\",\\n      \\\"totalDifficulty\\\":\\\"0x3\\\",\\n      \\\"transactions\\\":[\\\"0x5e77a04531c7c107af1882d76cbff9486d0a9aa53701c30888509d4f5f2b003a\\\"],\\n      \\\"transactionsRoot\\\":\\\"0x19f5efd0d94386e72fcb3f296f1cb2936d017c37487982f76f09c591129f561f\\\",\\n      \\\"uncles\\\":[]\\n    },\\n    {\\n      \\\"difficulty\\\":\\\"0x2\\\",\\n      \\\"extraData\\\":\\\"0xd98301090a848932606889676f312e61742e3133856c696e757800000000000064a82cb66c7810b9619e7f14ab65c769a828b1616974987c530684eb3870b65e5b2400c1b61c6d340beef8c8e99127ac0de50e479d21f0833a5e2910fe64b41801\\\",\\n      \\\"gasLimit\\\":\\\"0xe4e1c0\\\",\\n      \\\"gasUsed\\\":\\\"0x1c60d\\\",\\n      \\\"hash\\\":\\\"0x45fd6ce41bb8ebb2bccdaa92dd1619e367404cb07722039901a7eba63dea1d13\\\",\\n      \\\"logsBloom\\\":",
    "\\\"0x00080000000200000000000000000008000000000000000000000100008000000000000000000000000000000000000000000000000000000000400000000000100000000000000000000000020000000000000000000000000000000000004000000000000000000000000000000000400000000400000000000000100000000000000000000000000000020000000000000000000000000000000000000000100000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008400000000000000000010000000000000000020000000020000000000000000000000000000000000000000000002000\\\",\\n      \\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\\n      \\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n      \\\"nonce\\\":\\\"0x0000000000000000\\\",\\n      \\\"number\\\":\\\"0x2\\\",\\n      \\\"parentHash\\\":\\\"0xbee7192e575af30420cae0c7776304ac196077ee72b048970549e4f08e875453\\\",\\n      \\\"receiptsRoot\\\":\\\"0x2057c8fb79c0f294062c1436aa56741134dc46d228a4f874929f8b791a7007a4\\\",\\n      \\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b",
    "948a7413f0a142fd40d49347\\\",\\n      \\\"size\\\":\\\"0x30c\\\",\\n      \\\"stateRoot\\\":\\\"0x87026f3a614318ae24bcef6bc8f7564479afbbbe2b1fb189bc133a5de5a2b0f8\\\",\\n      \\\"timestamp\\\":\\\"0x618d8837\\\",\\n      \\\"totalDifficulty\\\":\\\"0x5\\\",\\n      \\\"transactions\\\":[\\\"0xaf6ed8a6864d44989adc47c84f6fe0aeb1819817505c42cde6cbbcd5e14dd317\\\"],\\n      \\\"transactionsRoot\\\":\\\"0xa39c4d0d2397f8fcb1683ba833d4ab935cd2f4c5ca6f56a7d9a45b9904ea1c69\\\",\\n      \\\"uncles\\\":[]\\n    }\\n  ]\\n}\\n```\\n\\nReturns various pieces of information in the form of an `Object` for a specified node.\\n\\nNode's mode of operation - `\\\"sequencer\\\"` or `\\\"verifier\\\"`\\n\\n`true` if the node is currently syncing `false` otherwise\\n\\nNested object. Contains `blockNumber` and `timestamp`\\n\\nBlock no. of the latest known L1 block\\n\\nTimestamp of the latest known L1 block\\n\\nNested object. Contains `queueIndex`, `index`, and `verifiedIndex`\\n\\nIndex within the CTC of the last L1 to L2 message ingested\\n\\nIndex of the last L2 transaction processed\\n\\nInd",
    "ex of the last transaction that was ingested from a batch that was posted to L1\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_getInfo\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\":\\\"2.0\\\",\\n  \\\"id\\\":1,\\n  \\\"result\\\":{\\n    \\\"mode\\\":\\\"verifier\\\",\\n    \\\"syncing\\\":false,\\n    \\\"ethContext\\\":{\\n      \\\"blockNumber\\\":10743302,\\n      \\\"timestamp\\\":1957082793\\n    },\\n    \\\"rollupContext\\\":{\\n      \\\"index\\\":11287,\\n      \\\"queueIndex\\\":14362,\\n      \\\"verifiedIndex\\\":0\\n    }\\n  }\\n}\\n```\\n\\nReturns an `Object` containing the L1 and L2 gas prices used by the Sequencer to calculate transaction gas fees.\\n\\nL1 gas price in _wei_ (used to estimate L1 calldata costs)\\n\\nL2 gas price in _wei_ (used to estimate L2 execution costs)\\n\\n```\\ncurl -X POST --data '{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"rollup_gasPrices\\\",\\\"params\\\":[],\\\"id\\\":1}' <node url>\\n```\\n\\n```\\n{\\n  \\\"jsonrpc\\\":\\\"2.0\\\",\\n  \\\"id\\\":1,\\n  \\\"result\\\":{\\n    \\\"l1GasPrice\\\":\\\"0x254aa66732\\\",",
    "\\n    \\\"l2GasPrice\\\":\\\"0xf3792\\\"\\n  }\\n}\\n```\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides\",\n    \"loadedTime\": \"2025-02-15T20:32:51.854Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides\",\n    \"title\": \"How-to Guides | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"How-to Guides | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VUsLytKu6DCsOZQKU47s\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 2",
    "0:32:51 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDg4MzFkYTYtNTA2ZC00MjJhLWFjMzgtYzg5MjA2OTMzMGNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src",
    " * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=8cqtHQ141gbR36cwb%2B8pYqrD9bxS95I5MAQ7JlabKjaRgKB9qstDRV0FJQ401YqWyJ4A8WP19i6B4bG7ZmS0hirFwl5Uy9NeF6hYuWVpp%2BsnCJu2Vhn%2Fnw1fAXLujcwvQ1tgdtKDKM28P6hIAqwk\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\"",
    ",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811cf793a9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"How-to Guides | Network\\nMantle v1\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# How-to Guides | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%",
    "3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network/network)\\n\\nMantle v1\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/how-to-guides?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/how-to-guides?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap\",\n    \"loadedTime\": \"2025-02-15T20:32:50.176Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/",
    "network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap\",\n    \"title\": \"Architecture and Roadmap | Network\",\n    \"description\": \"Components and modules part of Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Architecture and Roadmap | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Components and modules part of Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/QFJbXoEhnBm6shI7iCJY\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:49 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<http",
    "s://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzFhM2M5NWQtN2IzMy00NGNjLWE2NGMtOTVkOGMzYTA4Njhm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; f",
    "orm-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=eZAuW31UwcpbY05%2FwLCGNjFTnF4aesd1g1Kn7urQlWTWvEb%2BIyR3I9lA%2FqTYtdi5qB66uQrkbCx1ZwWsE6atJKk7TXsF3QuRIXtBPEl0bRY5hxQzw5f8FWkBb6d%2B0f5nKcGhNNSIaN1twyPrazfJ\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811c24cde4d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Architectu",
    "re and Roadmap | Network\\nComponents and modules part of Mantle Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nNetwork Architecture\\nThis diagram illustrates how different network modules and components interact with each other going through transaction execution and eventually published updated state data to Ethereum L1, and storing the rollup data on the Mantle Data Availability (DA) powered by EigenDA technology. Let's go over the process of transaction handling to better understand how each module works.\\nUsers send signed transactions via an available RPC node.\\nThe Sequencer receives transactions and pack them into blocks. The DTL (Data Transport Layer) service syncs this block data. Verifiers sync the L2 block data from the DTL.\\nThe batch submitter fetches updated state roots and sends them to the Threshold Signature Scheme (TSS) module to be verified and signed. Verifiers can also fetch the state root data and confirm their validity.\\nOnc",
    "e TSS nodes establish the validity of the updated state roots and sign off on the rollup batches, the batch submitter publishes the state root data to the State Commitment Chain (SCC) contract on L1 Ethereum.\\nThe rollup transaction data is stored on Mantle DA. Verifiers can fetch this data at any point and verify its validity. This action is performed when issuing fraud proof challenges.\\nMantle DA nodes also post the validity certificates to L1 guaranteeing liveness and availability with each new batch.\\nIn case the state root validity is challenged with a fraud proof, L2 data is posted to the contract on L1 to perform the execution and check state transition validity.\\nFor more details on the role played by each network component, check out the Network Roles page.\\nRoadmap\\nThe following table tentatively summarizes our current approach to different network components and actions on L2 and L1 for our initial mainnet version, and other potential implementations that we're considering",
    " for future mainnet upgrades.\\nFailure Handling\\nL2 Sequencer Failure\\nIn the event of L2 Sequencing issues, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\nEnqueue via L1**: Users can submit transactions to an L1 queue, but can't force them. The sequencer can selectively skip transactions, but cannot stop processing the queue entirely. In other words, if the sequencer censors or is down, it affects everyone.\\nForce via L1: Users can force sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for X period, users can use the exit hatch to withdraw their funds.\\nSelf Sequence: In the event of sequencer failure, users can force transactions to be included on L2 by sending them to L1.\\n** denotes approach of the initial Mantle Network Mainnet version\\nL2 Batch Submitter / Proposer Failure\\nThe Batch Submitter, or Proposer, is responsible for submitting the L2 state and necessary transaction data t",
    "o L1. In the event it is offline, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\nPropose blocks: Anyone can become a Proposer after X period of inactivity from currently whitelisted Proposers.\\nEscape hatch: Users have the ability to withdraw their funds on L1 by submitting a Merkle proof or ZK proof of funds.\\nNo automated mechanism**: If whitelisted Proposers are offline, withdrawals cannot be processed. In such cases, a new Proposer has to be whitelisted by the L2 core contributor team, potentially involving a DAO governance process. The transition is controlled by the DevOps team with measures in place to minimize downtime.\\n** denotes approach of the initial Mantle Network Mainnet version\\nLast updated 11 months ago\",\n  \"markdown\": \"# Architecture and Roadmap | Network\\n\\nComponents and modules part of Mantle Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nNetwork Architecture\\n\\n![",
    "](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FFy6C3ovnOVcv0QvxrUsb%252Fupdated%2520architecture%281%29.jpg%3Falt%3Dmedia%26token%3D2a8c7381-f513-4df8-a500-f24d90dd9734&width=768&dpr=4&quality=100&sign=314d62ee&sv=2)\\n\\nThis diagram illustrates how different network modules and components interact with each other going through transaction execution and eventually published updated state data to Ethereum L1, and storing the rollup data on the Mantle Data Availability (DA) powered by EigenDA technology. Let's go over the process of transaction handling to better understand how each module works.\\n\\n1.  Users send signed transactions via an available RPC node.\\n    \\n2.  The Sequencer receives transactions and pack them into blocks. The DTL (Data Transport Layer) service syncs this block data. Verifiers sync the L2 block data from the DTL.\\n    ",
    "\\n3.  The batch submitter fetches updated state roots and sends them to the Threshold Signature Scheme (TSS) module to be verified and signed. Verifiers can also fetch the state root data and confirm their validity.\\n    \\n4.  Once TSS nodes establish the validity of the updated state roots and sign off on the rollup batches, the batch submitter publishes the state root data to the State Commitment Chain (SCC) contract on L1 Ethereum.\\n    \\n5.  The rollup transaction data is stored on Mantle DA. Verifiers can fetch this data at any point and verify its validity. This action is performed when issuing fraud proof challenges.\\n    \\n6.  Mantle DA nodes also post the validity certificates to L1 guaranteeing liveness and availability with each new batch.\\n    \\n7.  In case the state root validity is challenged with a fraud proof, L2 data is posted to the contract on L1 to perform the execution and check state transition validity.\\n    \\n\\nFor more details on the role played by each network",
    " component, check out the [Network Roles](https://docs.mantle.xyz/network/network/for-validators/network-roles) page.\\n\\n## \\n\\nRoadmap\\n\\nThe following table tentatively summarizes our current approach to different network components and actions on L2 and L1 for our initial mainnet version, and other potential implementations that we're considering for future mainnet upgrades.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FgzjikNwNgXcIczY5LQID%252Fimage.png%3Falt%3Dmedia%26token%3D8a2d4f63-c650-4fd3-b35d-07168668ef1f&width=768&dpr=4&quality=100&sign=ad7f177a&sv=2)\\n\\n## \\n\\nFailure Handling\\n\\n### \\n\\nL2 Sequencer Failure\\n\\nIn the event of L2 Sequencing issues, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\n\\n*   **Enqueue via L1\\\\*\\\\*:** Users can submit transactions to an L1 queue, but can't force them. The sequen",
    "cer can selectively skip transactions, but cannot stop processing the queue entirely. In other words, if the sequencer censors or is down, it affects everyone.\\n    \\n*   **Force via L1:** Users can force sequencer to include a trade or a withdrawal transaction by submitting a request through L1. If the sequencer censors or is down for X period, users can use the exit hatch to withdraw their funds.\\n    \\n*   **Self Sequence:** In the event of sequencer failure, users can force transactions to be included on L2 by sending them to L1.\\n    \\n\\n_\\\\*\\\\* denotes approach of the initial Mantle Network Mainnet version_\\n\\n### \\n\\n**L2 Batch Submitter / Proposer Failure**\\n\\nThe Batch Submitter, or Proposer, is responsible for submitting the L2 state and necessary transaction data to L1. In the event it is offline, common industry approaches to remain \\\"secured by Ethereum\\\" are:\\n\\n*   **Propose blocks:** Anyone can become a Proposer after X period of inactivity from currently whitelisted Pr",
    "oposers.\\n    \\n*   **Escape hatch:** Users have the ability to withdraw their funds on L1 by submitting a Merkle proof or ZK proof of funds.\\n    \\n*   **No automated mechanism\\\\*\\\\*:** If whitelisted Proposers are offline, withdrawals cannot be processed. In such cases, a new Proposer has to be whitelisted by the L2 core contributor team, potentially involving a DAO governance process. The transition is controlled by the DevOps team with measures in place to minimize downtime.\\n    \\n\\n_\\\\*\\\\* denotes approach of the initial Mantle Network Mainnet version_\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api\",\n    \"loadedTime\": \"2025-02-15T20:32:55.062Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n",
    "    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api\",\n    \"title\": \"Mantle Bridge API | Network\",\n    \"description\": \"A guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Bridge API | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"A guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/2q9co3CuKhNg0PZo5Zae\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection",
    "\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MzVkNDBiOWItOWUyMS00NTM1LThhNjktNDdjMmU5MmU2MjVh' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https:",
    "//ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=ldyiJxRBSE2HMEeJ4%2FGJZOWA4vqIJAz0c0oePtGYlmMlzQNr7uWT%2BJMJ6mc0oawh6ySfPLlyEYxoepY83uQqnTjd0INipSN2GJ9n7yQXioFZKYzIK4DzcZyCJ1NRijbnSgu1dHcYyJl%2FKHJnrImg\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e68b149c72-IAD\",\n      \"content-en",
    "coding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Bridge API | Network\\nA guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nThe Mantle SDK implements methods to make contract calls for both:\\nLocking $MNT/ERC20/ERC721 tokens on Layer 1 (L1) and minting equivalent tokens on Layer 2 (L2)\\nLocking $MNT/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\nUse this link to navigate to our SDK reference docs.\\nBridge Contracts\\nThe Mantle Bridge is composed of two main contracts:\\nSDK Tutorials\\nYou can follow the links below to refer step-by-step guides on how to use the Mantle SDK to bridge assets between Mantle network and Ethereum.\\nDeposits\\n$MNT/$ETH/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\nYou must first approve the Mantle Bridge to use the amount of $MNT/$ETH/ERC20/ERC72",
    "1 tokens that you are moving to L2, or the deposit will fail.\\n$ETH deposits can alternatively be triggered by sending $ETH directly to the L1StandardBridge. Your account will be funded with the corresponding amount once the transaction is detected and finalized.\\nWithdrawals\\n$MNT/$ETH/ERC20/ERC721 token withdrawals from L2 to the Ethereum mainnet can be triggered using the following SDK methods.\\nAll withdrawals use $MNT for gas fees. \\nToken Type\\nSDK Methods\\nL2 Token Address\\n0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000\\n0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111\\nThe Token List\\nThe Mantle Bridge allows a one-to-many mapping between L1 and L2 tokens, meaning that there can be multiple Mantle implementations of an L1 token. \\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on the Mantle token list. The token list is used as the source of truth for the Mantle Bridge which is the main portal for moving assets between Layer 1 and Layer 2.\\nAdding a Token t",
    "o the List\\nIf you want to have your token added to the token list, you'll need to make a pull request against the Mantle token list repository . You'll need the addresses for both the L1 and L2 tokens, as well as a logo for the token.\\nSending Messages\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Mantle Bridge API | Network\\n\\nA guide on using the Mantle Bridge API to move assets and data between Layer 1 and Layer 2\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nThe Mantle SDK implements methods to make contract calls for both:\\n\\n*   Locking $MNT/ERC20/ERC721 tokens on Layer 1 (L1) and minting equivalent tokens on Layer 2 (L2)\\n    \\n*   Locking $MNT/ERC20/ERC721 tokens on L2 and minting equivalent tokens on L1\\n    \\n\\nUse [this link](https://sdk.mantle.xyz/index.html",
    ") to navigate to our SDK reference docs.\\n\\n## \\n\\nBridge Contracts\\n\\nThe Mantle Bridge is composed of two main contracts:\\n\\n## \\n\\nSDK Tutorials\\n\\nYou can follow the links below to refer step-by-step guides on how to use the Mantle SDK to bridge assets between Mantle network and Ethereum.\\n\\n## \\n\\nDeposits\\n\\n$MNT/$ETH/ERC20/ERC721 token deposits into L2 from the Ethereum mainnet can be triggered using the following SDK methods.\\n\\nYou must first approve the Mantle Bridge to use the amount of $MNT/$ETH/ERC20/ERC721 tokens that you are moving to L2, or the deposit will fail.\\n\\n$ETH deposits can alternatively be triggered by sending $ETH directly to the [L1StandardBridge](https://github.com/mantlenetworkio/mantle/blob/main/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol). Your account will be funded with the corresponding amount once the transaction is detected and finalized.\\n\\n## \\n\\nWithdrawals\\n\\n$MNT/$ETH/ERC20/ERC721 token withdrawals from L2 to the Ethereum ma",
    "innet can be triggered using the following SDK methods.\\n\\nAll withdrawals use $MNT for gas fees.\\n\\nToken Type\\n\\nSDK Methods\\n\\nL2 Token Address\\n\\n`0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000`\\n\\n`0xdEAddEaDdeadDEadDEADDEAddEADDEAddead1111`\\n\\n## \\n\\nThe Token List\\n\\nThe Mantle Bridge allows a one-to-many mapping between L1 and L2 tokens, meaning that there can be multiple Mantle implementations of an L1 token.\\n\\nHowever, there is always a one-to-one mapping between L1 and L2 tokens listed on the [Mantle token list](https://token-list.mantle.xyz/mantle.tokenlist.json). The token list is used as the source of truth for the [Mantle Bridge](https://bridge.mantle.xyz/) which is the main portal for moving assets between Layer 1 and Layer 2.\\n\\n### \\n\\nAdding a Token to the List\\n\\nIf you want to have your token added to the token list, you'll need to make a pull request against the [Mantle token list repository](https://github.com/mantlenetworkio/mantle-token-lists) . You'll need the ad",
    "dresses for both the L1 and L2 tokens, as well as a logo for the token.\\n\\n## \\n\\nSending Messages\\n\\nContracts on Mantle can invoke contract functions on Ethereum, and vice versa. This enables dApps on Mantle and Ethereum to interact with each other.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:55.273Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk\",\n    \"title\": \"Thirdweb SDK | Network\",\n    \"description\": \"How to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\",\n    \"author\": null,\n    \"keywords\": n",
    "ull,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Thirdweb SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"How to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/ffPSYsAswSfw6iV5raRv\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...path",
    "name]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MGI1N2Y3NjEtYjg2NS00ZjcwLTgwZDYtMGNmMDdiNTZiN2Ux' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-ref",
    "errer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=1iHWP8xPNyz7iMySXhir59ttP8co2zg4TZ%2F7sIylPqjjzks0Qe7bjqPTvnlPKmQ7D4HwE%2FPfh3uqUXXEt0meTNetP1HTOfoVcEA5FRZzd2Z3O2SlEKhZzjJfcrJOVzCaFUgKm4nZNXoPBE1VGpiM\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e6bd2f2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Thirdweb SDK | Network\\nHow to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\\nLast updated 11 months ago\",\n  \"markdown\": \"# Thirdweb SDK | Network\\n\\nHow to use Thirdweb CLI to deploy contracts and connect your dApps to Mantle Network\\n\\nLast updated 11 months a",
    "go\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge\",\n    \"loadedTime\": \"2025-02-15T20:32:55.190Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/using-mantle-bridge\",\n    \"title\": \"Using Mantle Bridge | Network\",\n    \"description\": \"How to deposit and withdraw assets using official Mantle Bridge\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Using Mantle Bridge | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"How to deposit and withdraw assets using official Mantle Bridge\"\n   ",
    "   },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/1I5t3ta72w0xKeGiPgXz\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2I3NzNjZWEtMDFiMS00M2JmLWFiOWQtMTk1NjBhOWQwZmU3' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gi",
    "tbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=uOg8PUvkuYllD1mOckAMcnzt6wYjF7x7CQpC7tKfmaxuVgw4qb5ZNmsORai8CsX3lMJkwq4JwCpOWbUb438lT869Ny9Bhr1Ev89cMWgZTyfUZJqe8L%2FdXNPyEVFZIZoBCNL8GkGIwY8unojR44B4\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"m",
    "ax_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e6bb67a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Using Mantle Bridge | Network\\nHow to deposit and withdraw assets using official Mantle Bridge\\nLast updated 11 months ago\",\n  \"markdown\": \"# Using Mantle Bridge | Network\\n\\nHow to deposit and withdraw assets using official Mantle Bridge\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/fetching-test-tokens\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/fetching-test-tokens\",\n    \"loadedTime\": \"2025-02-15T20:32:55.299Z\",\n ",
    "   \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/fetching-test-tokens\",\n    \"title\": \"Fetching Test Tokens | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Fetching Test Tokens | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/kcfhkl8BW9sOWIyAGKVh\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"",
    "strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZTVmNGIwZjgtYmMzYy00ZWMyLThlYjgtZTVjM2E2ZmYwMzM4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action '",
    "self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=vyse0sUamAi8sAYG7Cs2XYN%2FsTHfyhEr7vP1Y8VDDslY6u8QAXkyh3zUnfQccJDZExwrkSngPbVKKu4lxltpuOb2zNpDfIwVP%2FiXOU4%2F4mtGMfkSl2VgoRlfWHa817tePlLnXzHdusEAz09P%2B0Te\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e68da5059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Fetching Test Tokens | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nFau",
    "cets\\nTo begin transacting on Mantle Testnet, you must acquire Goerli $ETH and testnet $MNT and bridge it across.\\nYou can obtain Goerli $ETH from the following faucets: \\nYou can receive testnet $MNT tokens from the Mantle faucet. \\nMake sure to import the $MNT token to your Goerli wallet to see the current balance. The contract address is 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\nDiscord\\nAlternatively, you can also acquire test $MNT on Goerli from our Discord server. Once you've joined the server, navigate to the #faucet channel and send the following message to receive your test $MNT. \\n$faucet [your erc20 address]\\nYou can make a claim to any ERC-20 address every 4 hours\\nMint $MNT on Goerli via Etherscan\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\nNext, switch your wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\\nFind and click on t",
    "he mint() function in the list on the Etherscan page. It's on no.9.\\nNow you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Fetching Test Tokens | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nFaucets\\n\\nTo begin transacting on Mantle Testnet, you must acquire Goerli $ETH and testnet $MNT and bridge it across.\\n\\nYou can obtain Goerli $ETH from the following faucets:\\n\\nYou can receive testnet $MNT tokens from the [Mantle faucet](https://faucet.testnet.mantle.xyz/).\\n\\nMake sure to import the $MNT token to your Goerli wallet to see the current balance. The contract address is `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n\\n## \\n\\nDiscord\\n\\nAlternatively, you can also acquire test $MNT on Goerli from our [Discord server](https://discord.gg/0xmantle). Once you've joined the server, ",
    "navigate to the **#faucet** channel and send the following message to receive your test $MNT.\\n\\n```\\n$faucet [your erc20 address]\\n```\\n\\nYou can make a claim to any ERC-20 address every 4 hours\\n\\n## \\n\\nMint $MNT on Goerli via Etherscan\\n\\nMake sure your wallet has enough $gETH to perform the mint action before moving forward.\\n\\n1.  Next, switch your wallet network to Goerli, and import (if you haven't already) the $MNT token using this contract address: `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\\n    \\n\\n3.  Find and click on the `mint()` function in the list on the Etherscan page. It's on no.9.\\n    \\n\\n1.  Now you can add a few zeroes at the back for a higher amount. For example, add three zeroes at the back to mint 1000 $MNT, and so on.\\n    \\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/faqs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduct",
    "ion/faqs\",\n    \"loadedTime\": \"2025-02-15T20:32:55.494Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/faqs\",\n    \"title\": \"FAQs | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"FAQs | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/1mY5ebLSu86Hd6Muduey\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"stri",
    "ct-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YjMzNmM2MTYtY2I3NC00ODQ1LWJhNTMtZWM3NGNiZWQzOTVm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self",
    "' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=0eycm%2Bj3LAD1c1anzIMxteErcdJUCKblWrOJtUft8ctMtIk%2Fc6u28ckwTvIDmp1DFSV8bj8iCdAEZDIxp8No5mQsX2k7NjOlZIEIJS0IIp5IlF0ll9TETRRdcamZB9myEceK38Jynk5LTpmG27JK\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e85d659c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"FAQs | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nGeneral\\nQ. Can I use Truff",
    "le, Hardhat, and Remix to deploy contracts on Mantle Network?\\nYes. All the EVM-compatible Web3 libraries, IDEs, developments frameworks can be used to deploy on and connect to Mantle Network. This includes, but isn't limited to, popular tools such as:\\nQ. What signature algorithm does Mantle Network use?\\nMantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\nQ. What is the block gas limit on Mantle Network?\\nThe block gas limit is currently set to 30,000,000, or 30M units.\\nQ. What's the average block time on Mantle Network?\\nNew blocks are generated on L2 every time a new transaction is received, and each block contains a single transaction. Thus, the block time on Mantle Network depends on the transaction volume at any given time.\\nQ. How does transaction finality work on Mantle Network?\\nTransaction/block finality on L2 is instantaneous\\nTransaction/block finality on L1 connects to the challenge period, which is currently set at 7 days \\nQ. A",
    "re fraud proofs online on Mantle Network?\\nAs of mainnet alpha release, fraud proofs are in development. For more details on Mantle Network's implementation, check out the page on Fraud Proofs\\nQ. How does modular data availability bring down transaction costs?\\nThe majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\nQ. Can I fetch DA transaction details with an API?\\nCurrently, the only way see DA transaction history is via the Explorer frontend. Here's the link: https://explorer.mantle.xyz/eigenda-batches\\nQ. Where can I find the brand resources for Mantle Network?\\nYou can access brand resources by following this link.\\nProtocol\\nQ. Do Rollup Verifier nodes verify every piece of block data processed by the Seque",
    "ncer?\\nYes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\nQ. Do Rollup Verifiers sync rollup data from the Sequencer?\\nNo. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1. \\nQ. Before fraud proofs are online on Mantle Network, what happens if a Rollup Verifier detects that L2 block data doesn't match with the data being submitted to L1?\\nIf Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling here: Failure Handling.\\nSmart Contracts\\nQ. Where can I find multicall contracts on Mantle Network?\\nMainnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\nTestnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\nQ. Does Mantle Network support ",
    "contract creation using CREATE2 and CREATE3 ?\\nWe currently support CREATE2, and are working on supporting CREATE3 in a future update. Check out the section on opcode differences to learn more.\\nQ. What's the $WMNT token contract address?\\nMainnet:\\n0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8 - Explorer link\\nTestnet:\\n0xa4c4cb2A072eE99f77212Fa18c2B7Ca26DA23905 - Explorer link\\nTransactions\\nQ. What's the transaction lifecycle like on Mantle Network?\\nA wallet or dApp initiates a transaction\\nSequencer executes transaction\\nTSS network signs state roots guaranteeing correctness\\nState root data is posted to L1 Ethereum, transaction data is posted to Mante DA\\nFor a detailed description, check out the page on Transaction Lifecycle\\nQ. I noticed unknown gas fee being deducted from my wallet when sending transactions. Why is that?\\nOur gas oracle API currently only supports fetching L2 gas fee. The extra fee being deducted is the L1 rollup fee. This will be fixed soon in a future update!\\n",
    "Q. Why does my transaction fail when I try to send a transaction with the \\\"Max\\\" amount from my wallet?\\nA transaction sent with the \\\"Max\\\" amount fails with an error stating that the transaction is underpriced because our gas oracle currently only supports fetching L2 gas fee estimation, which is why the wallet undercalculates the actual gas fee that needs to paid since it is not including the L1 rollup fee. This issue will be addressed with a future network update. In the meantime, we recommend leaving at least 0.5 $MNT in your wallet to pay for L1 rollup fees. \\nFor example, if you have 10 $MNT in your wallet, please limit the transaction amount to a maximum of 9.5 $MNT for a single transaction.\\nQ. Are there any limits set for batch transaction size?\\nThe maximum batch transaction size is derived from the target gas configuration. Mantle Network is the same as Ethereum in this regard.\\nQ. Are there any limits on the gas price that can be paid when sending transactions on Mantle N",
    "etwork?\\nCurrently, the gas range has been set to 0.05 - 200 Gwei in order to protect users from overpaying gas fees. This limit is active on Mantle Mainnet, and will soon be applied to testnet as well.\\nQ. Does Mantle Network support EIP-1559?\\nCurrently, Mantle Network does NOT support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in.\\nQ. Does Mantle Network support transactions that aren't signed with the chain ID?\\nNo, Mantle Network does not support pre-EIP155 transactions that aren't signed with the chain ID.\\nExplorer\\nQ. Does the RPC rate limit affect Explorer API usage too?\\nYes. Once the RPC rate limit is reached, access to Explorer API will also be limited.\\nNode operators\\nQ. How big is the current testnet state?\\nYou can find details on this subject here:\",\n  \"markdown\": \"# FAQs | Network\\n\\nMantle v2 Tectonic has been released,",
    " please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nGeneral\\n\\n### \\n\\nQ. Can I use Truffle, Hardhat, and Remix to deploy contracts on Mantle Network?\\n\\nYes. All the EVM-compatible Web3 libraries, IDEs, developments frameworks can be used to deploy on and connect to Mantle Network. This includes, but isn't limited to, popular tools such as:\\n\\n### \\n\\nQ. What signature algorithm does Mantle Network use?\\n\\nMantle Network uses the same signature algorithm as Ethereum. (ECDSA on the secp256k1 curve)\\n\\n### \\n\\nQ. What is the block gas limit on Mantle Network?\\n\\nThe block gas limit is currently set to 30,000,000, or 30M units.\\n\\n### \\n\\nQ. What's the average block time on Mantle Network?\\n\\nNew blocks are generated on L2 every time a new transaction is received, and each block contains a single transaction. Thus, the block time on Mantle Network depends on the transaction volume at any given time.\\n\\n### \\n\\nQ. How does transaction finality work on Mantle Ne",
    "twork?\\n\\n*   Transaction/block finality on L2 is instantaneous\\n    \\n*   Transaction/block finality on L1 connects to the challenge period, which is currently set at 7 days\\n    \\n\\n### \\n\\nQ. Are fraud proofs online on Mantle Network?\\n\\nAs of mainnet alpha release, fraud proofs are **in development**. For more details on Mantle Network's implementation, check out the page on [Fraud Proofs](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs)\\n\\n### \\n\\nQ. How does modular data availability bring down transaction costs?\\n\\nThe majority of L2 gas costs (>70%) are incurred as the cost to publish data on L1 Ethereum. With Mantle DA powered by EigenDA technology, only state root data (along with very limited transaction data) is posted to L1 contracts, while the rollup data is posted to Mantle DA, which helps bring down the overall cost significantly.\\n\\n### \\n\\nQ. Can I fetch DA transaction details with an API?\\n\\nCurrently, the only way see DA transaction histor",
    "y is via the Explorer frontend. Here's the link: [https://explorer.mantle.xyz/eigenda-batches](https://explorer.mantle.xyz/eigenda-batches)\\n\\n### \\n\\nQ. Where can I find the brand resources for Mantle Network?\\n\\nYou can access brand resources by following [this link](https://drive.google.com/drive/folders/1GGyOmob0i86mEUqBTPvZLAhgnzt3Oxaa).\\n\\n## \\n\\nProtocol\\n\\n### \\n\\nQ. Do Rollup Verifier nodes verify every piece of block data processed by the Sequencer?\\n\\nYes. All updated state roots are verified by Rollup Verifiers before they are submitted to L1 as a part of the rollup process.\\n\\n### \\n\\nQ. Do Rollup Verifiers sync rollup data from the Sequencer?\\n\\nNo. Rollup Verifiers sync rollup data from Mantle DA, which they use to generate state roots and verify the updated state roots generated by the Sequencer before they are published to L1.\\n\\n### \\n\\nQ. Before fraud proofs are online on Mantle Network, what happens if a Rollup Verifier detects that L2 block data doesn't match with ",
    "the data being submitted to L1?\\n\\nIf Rollup Verifiers detect a discrepancy when verifying the updated state roots, the rollup mechanism on L2 is temporarily halted. You can learn more about failure handling here: [Failure Handling](https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap#failure-handling).\\n\\n## \\n\\nSmart Contracts\\n\\n### \\n\\nQ. Where can I find multicall contracts on Mantle Network?\\n\\n*   Mainnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\n    \\n*   Testnet multicall address: 0xcA11bde05977b3631167028862bE2a173976CA11\\n    \\n\\n### \\n\\nQ. Does Mantle Network support contract creation using CREATE2 and CREATE3 ?\\n\\nWe currently support CREATE2, and are working on supporting CREATE3 in a future update. Check out the section on [opcode differences](https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle#opcode-differences-between-evm-and-mantle-vm) to learn more.\\n\\n### \\n\\nQ. What's the $WMNT token contract address?",
    "\\n\\n**Mainnet:**\\n\\n`0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8` - [Explorer link](https://explorer.mantle.xyz/address/0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8)\\n\\nTestnet:\\n\\n`0xa4c4cb2A072eE99f77212Fa18c2B7Ca26DA23905` - [Explorer link](https://explorer.testnet.mantle.xyz/address/0xa4c4cb2A072eE99f77212Fa18c2B7Ca26DA23905)\\n\\n## \\n\\nTransactions\\n\\n### \\n\\nQ. What's the transaction lifecycle like on Mantle Network?\\n\\n1.  A wallet or dApp initiates a transaction\\n    \\n2.  Sequencer executes transaction\\n    \\n3.  TSS network signs state roots guaranteeing correctness\\n    \\n4.  State root data is posted to L1 Ethereum, transaction data is posted to Mante DA\\n    \\n\\nFor a detailed description, check out the page on [Transaction Lifecycle](https://docs.mantle.xyz/network/network/introduction/transaction-lifecycle)\\n\\n### \\n\\nQ. I noticed unknown gas fee being deducted from my wallet when sending transactions. Why is that?\\n\\nOur gas oracle API currently only supports fetching L2 ga",
    "s fee. The extra fee being deducted is the L1 rollup fee. This will be fixed soon in a future update!\\n\\n### \\n\\nQ. Why does my transaction fail when I try to send a transaction with the \\\"Max\\\" amount from my wallet?\\n\\nA transaction sent with the \\\"Max\\\" amount fails with an error stating that the transaction is underpriced because our gas oracle currently only supports fetching L2 gas fee estimation, which is why the wallet undercalculates the actual gas fee that needs to paid since it is not including the L1 rollup fee. This issue will be addressed with a future network update. In the meantime, we recommend leaving at least 0.5 $MNT in your wallet to pay for L1 rollup fees.\\n\\nFor example, if you have 10 $MNT in your wallet, please limit the transaction amount to a maximum of 9.5 $MNT for a single transaction.\\n\\n### \\n\\nQ. Are there any limits set for batch transaction size?\\n\\nThe maximum batch transaction size is derived from the target gas configuration. Mantle Network is the s",
    "ame as Ethereum in this regard.\\n\\n### \\n\\nQ. Are there any limits on the gas price that can be paid when sending transactions on Mantle Network?\\n\\nCurrently, the gas range has been set to 0.05 - 200 Gwei in order to protect users from overpaying gas fees. This limit is active on Mantle Mainnet, and will soon be applied to testnet as well.\\n\\n### \\n\\nQ. Does Mantle Network support EIP-1559?\\n\\nCurrently, Mantle Network does **NOT** support EIP-1559, so we recommend using legacy structuring for your transactions. The order of transactions is FIFO, and it will be executed based on the sequence (time of receiving) they are received in.\\n\\n### \\n\\nQ. Does Mantle Network support transactions that aren't signed with the chain ID?\\n\\nNo, Mantle Network does not support pre-[EIP155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md) transactions that aren't signed with the chain ID.\\n\\n## \\n\\nExplorer\\n\\n### \\n\\nQ. Does the RPC rate limit affect Explorer API usage too?\\n\\nYes. Once",
    " the RPC rate limit is reached, access to Explorer API will also be limited.\\n\\n## \\n\\nNode operators\\n\\n### \\n\\nQ. How big is the current testnet state?\\n\\nYou can find details on this subject here:\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/connecting-wallet-to-mantle-network\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"loadedTime\": \"2025-02-15T20:32:55.379Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/introduction/how-to-guides/connecting-wallet-to-mantle-network\",\n    \"title\": \"Connecting Wallet to Mantle Network | Network\",\n    \"description\": \"Adding Mantle Network configuration and the $MNT token to your wallet\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languag",
    "eCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Connecting Wallet to Mantle Network | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Adding Mantle Network configuration and the $MNT token to your wallet\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/8SJzFIqbxB556MIDhtqf\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n",
    "      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGRkZWRmYWItYjQzZi00YjYwLWJhNDEtMzE2MTI5MDM2ZTU0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-whe",
    "n-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=lWJrJpsVY%2FYek5lGCYb3NqhbIJXSepMF19NNYr65DyMPkA0bvRGgfyoRhETBlGDWOEScGlCZRXeJL1lZFMpjrclWw5O%2BHPt9yin1A8MKkHgYx8kwDh9wvSwlPRYbmB%2FYmPCqulsKYV2qHwfQF9tb\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e6bce682e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Connecting Wallet to Mantle Network\\nAdding Mantle Network configuration and the $MNT token to your wallet\\nLast updated 11 months ago\",\n  \"markdown\": \"# Connecting Wallet to Mantle Network\\n\\nAdding Mantle Network configuration and the $MNT token to your wallet\\n\\nLast updated 11 months ago\",\n  \"deb",
    "ug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/multisig-wallet\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/multisig-wallet\",\n    \"loadedTime\": \"2025-02-15T20:32:55.573Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/multisig-wallet\",\n    \"title\": \"Multisig Wallet | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Multisig Wallet | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/VC98TX69DIsTfN2zBtbB\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 ",
    "Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzUyNGMxOWMtODA5YS00ZjEyLThhNzAtMmU3MDA1ZjcxMDg0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; c",
    "onnect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=TUUHPcRBFjbIT9IwN7sL6UY4%2FM%2FeBBi0RgPI3h0%2FvBXB%2FGKLbu418dzIknN8apHAsySRN%2BRn8Wkbozoq%2FZyxpWlAI2PeaqJjs1TSrJTVqR3AJWrVrEN%2BGM3RNyNVoKb6aaLw4Ipefo7cbBFzGp0q\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-v",
    "ersion\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e69e3d3b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Multisig Wallet | Network\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Multisig Wallet | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node\",\n    \"loadedTime\": \"2025-02-15T20:32:57.676Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node\",\n    \"title\": \"Deploy a Node | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openG",
    "raph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploy a Node | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/FZehKFHgP6PAb740kWBC\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDc5MzJkNWUtMTU4My00MjE3LWEyYjQtMDlmZDM4YzhjOWU2' ",
    "'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=d%2FWD7HrW72B%2BFVziwBISFU31K4%2B7hVIlTI8f97X%2FVmSTORQnLW9a1o9ATLNcrrXMEZEXb33aDJ",
    "1NuE6ojz4CezXCbMAN784djPjrQiW2srhzXKRfB2G9xo4zLo7YTEEVQayvplaBwGn5Tp7sq%2Bu1\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f719a5059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploy a Node | Network\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Deploy a Node | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-roles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-roles\",\n    \"loadedTime\": \"2025-02-15T20:32:57.967Z\",\n    \"referrerUrl\": \"https://docs.mantl",
    "e.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-roles\",\n    \"title\": \"Network Roles | Network\",\n    \"description\": \"Understanding the network protocol through its active participants\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Roles | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Understanding the network protocol through its active participants\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/78ck2OordEWylUgQSIZu\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:56 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-statu",
    "s\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTVmN2Y1NzItMWZlZi00Njc0LTgyYzktZjVkNjIzZmFkNzYw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self",
    "' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=PsFSnpFrYRXLSk8jy5OruuE6ico1XlCV8mg88%2B3zwwIzkDaQw6AndNAUCMOwF%2B29fvlkO7qYh2Fm2ovLeONtLGNHBdT9wBKdjW9akD6TKFqHmFJKQMNOCExZ%2FsmXs0F2S66X10ULFLeDEgafHNmn\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f2eb203b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshot",
    "Url\": null,\n  \"text\": \"Network Roles | Network\\nUnderstanding the network protocol through its active participants\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nDefining Network Roles\\nThere are currently four roles for nodes on Mantle network, namely Sequencers, Threshold Signature Scheme (TSS) nodes, Rollup Verifiers/Replica Nodes, and Data Availability (DA) nodes. Here's a simple description of their responsibilities.\\nSequencers\\nReceive and record transactions sent by users in real time\\nProduce blocks on L2\\nRollup transactions to generate batches with execution state roots\\nGet blocks validated by the TSS module\\nBroadcast block data across the network (L1 and L2)\\nIn the initial phases of release, Mantle core team will operate its own centralized Sequencer. However, as part of our roadmap we will be decentralizing the Sequencer eventually, creating another opportunity for nodes to contribute to Mantle.\\nThreshold Signature Scheme (TSS) Nodes\\n\\\"S",
    "ign off\\\" transaction batches produced by Sequencers to be sent to L1\\nBroadcast batches across the L2 network after verification\\nTSS nodes verify the state roots generated by Sequencers to determine their correctness. The state roots MUST be signed by a TSS node before they are sent to Ethereum to be recorded.\\nDuring the initial phases of release, TSS nodes are run by a group of reputable institutions, but will eventually be voted in via Mantle governance permissionlessly.\\nRollup Verifiers / Replica Nodes\\nSync rollup data from Mantle's trusted sequencer\\nVerify the state roots submitted by Sequencers on L2\\nInitiate fraud proofs when invalid state data is found\\nServe rollup data to users\\nFraud proofs are a part of our roadmap and the feature will be added eventually via a Mainnet upgrade.\\nDA Nodes\\nOpt into taking the responsibility of storing a copy of Mantle transaction data to have it ready for access whenever necessary\\nMake a commitment by signing the block data they provi",
    "de using the BLS signature scheme guaranteeing its usability. These signatures are verified by an EigenDA contract on Ethereum\\nMantle DA powered by EigenDA technology consists of a set of supported interactions between four major components as described below.\\nOperators\\nThe service providers of the DA network and need to confirm their commitment through digital signatures, which place staked assets as a collateral guarantee on their participation. An Operator carries out the following tasks:\\nRun nodes which store chunks of data for a pre-defined time period and serve these chunks upon request\\nDispersers\\nThey're the users of Mantle DA's data availability service, paying for its economic guarantees of data availability. This role may be played by a rollup Sequencer. A Disperser performs the following tasks:\\nEncodes its data into chunks, posts funds for making the data available for a fixed amount of time, and distributes the encoded chunks to Mantle DA operators\\nAggregates signat",
    "ures from the operators and posts an attestation to the blockchain, confirming availability of the data of interest for the specified time period\\nChallengers\\nThey're interested parties who play an important role in the Proof of Custody protocol. Challengers perform the following tasks:\\nMonitor certain verifiable operations of the protocol (which in the optimistic case are not verified or resolved on-chain) \\nPermissionlessly force problematic operations to be resolved on-chain, resulting in an operator’s stake being slashed\\nThe Proof of Custody protocol is in development stage and will go online with a future Mainnet upgrade.\\nMantleLayer and MantleDA Smart Contracts\\nThe collection of DA-related smart contracts running on Ethereum take care of the following:\\nEnsure that data is only accepted as available when a group of operators having a sufficient amount of stake has collectively signed\\nImplement the proof-of-custody protocol and provide mechanisms for a challenger to disclose",
    " data on chain\\nVerify the validity of data submitted by Challengers against a signed commitment, and enact slashing as dictated by the proof-of-custody protocol\\nThe data storage process on Mantle DA is as follows:\\nEncoding: Disperser encodes data chunks and generates KZG multireveal proofs which will allow Operators to verify the correctness of their chunk.\\nDispersal: Disperser sends data chunks to respective DA Operators\\nAttestation: Operators verify their chunks against the global commitment. If the verification is successful, the Operator proceeds to store their chunk of data for the duration specified by the Disperser and sends back an attestation\\nAggregation: If enough signatures are received, the Disperser aggregates the signatures and publishes them to L1 Ethereum.\\nWhy Run a Rollup Verifier Node?\\nThere are multiple advantages of running a Rollup Verifier node.\\nIt grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions loc",
    "ally without rate-limiting (public RPCs may face such limitations).\\nAllows anyone to verify the work performed by Sequencers by re-deriving output roots and comparing them against those submitted by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mainnet.\\ndApp builders are encouraged to consider the value addition of running a Rollup Verifier node given that the overhead costs tend to be low.\\nThe diagram below illustrates how the Sequencer and Rollup Verifier fit together. Note that actions in red are performed by a Sequencer, while actions in blue are performed by a Rollup Verifier:\\nLast updated 11 months ago\",\n  \"markdown\": \"# Network Roles | Network\\n\\nUnderstanding the network protocol through its active participants\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\n## \\n\\nDefining Network Roles\\n\\nThere are curr",
    "ently four roles for nodes on Mantle network, namely **Sequencers**, **Threshold Signature Scheme (TSS) nodes**, **Rollup Verifiers/Replica Nodes, and Data Availability (DA) nodes**. Here's a simple description of their responsibilities.\\n\\n### \\n\\nSequencers\\n\\n*   Receive and record transactions sent by users in real time\\n    \\n*   Produce blocks on L2\\n    \\n*   Rollup transactions to generate batches with execution state roots\\n    \\n*   Get blocks validated by the TSS module\\n    \\n*   Broadcast block data across the network (L1 and L2)\\n    \\n\\nIn the initial phases of release, Mantle core team will operate its own centralized Sequencer. However, as part of our roadmap we will be decentralizing the Sequencer eventually, creating another opportunity for nodes to contribute to Mantle.\\n\\n### \\n\\nThreshold Signature Scheme (TSS) Nodes\\n\\n*   \\\"Sign off\\\" transaction batches produced by Sequencers to be sent to L1\\n    \\n*   Broadcast batches across the L2 network after verification",
    "\\n    \\n\\nTSS nodes verify the state roots generated by Sequencers to determine their correctness. The state roots **MUST** be signed by a TSS node before they are sent to Ethereum to be recorded.\\n\\nDuring the initial phases of release, TSS nodes are run by a group of reputable institutions, but will eventually be voted in via Mantle governance permissionlessly.\\n\\n### \\n\\nRollup Verifiers / Replica Nodes\\n\\n*   Sync rollup data from Mantle's trusted sequencer\\n    \\n*   Verify the state roots submitted by Sequencers on L2\\n    \\n*   Initiate fraud proofs when invalid state data is found\\n    \\n*   Serve rollup data to users\\n    \\n\\nFraud proofs are a part of our [roadmap](https://docs.mantle.xyz/network/network/introduction/architecture-and-roadmap#roadmap) and the feature will be added eventually via a Mainnet upgrade.\\n\\n### \\n\\nDA Nodes\\n\\n*   Opt into taking the responsibility of storing a copy of Mantle transaction data to have it ready for access whenever necessary\\n    \\n*   ",
    "Make a commitment by signing the block data they provide using the [BLS signature scheme](https://en.wikipedia.org/wiki/BLS_digital_signature) guaranteeing its usability. These signatures are verified by an EigenDA contract on Ethereum\\n    \\n\\nMantle DA powered by EigenDA technology consists of a set of supported interactions between four major components as described below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FAsnGr1cXLy9Og1JIVxE8%252Fupdated%2520da%2520interaction.jpg%3Falt%3Dmedia%26token%3D1718a0e4-4941-4255-a886-c8c5af2fdfef&width=768&dpr=4&quality=100&sign=4935a0e1&sv=2)\\n\\n#### \\n\\nOperators\\n\\nThe service providers of the DA network and need to confirm their commitment through digital signatures, which place staked assets as a collateral guarantee on their participation. An Operator carries out the following tasks:\\n\\n",
    "*   Run nodes which store chunks of data for a pre-defined time period and serve these chunks upon request\\n    \\n\\n#### \\n\\nDispersers\\n\\nThey're the users of Mantle DA's data availability service, paying for its economic guarantees of data availability. This role may be played by a rollup [Sequencer](https://docs.mantle.xyz/network/network/for-validators/network-roles#sequencers). A Disperser performs the following tasks:\\n\\n*   Encodes its data into chunks, posts funds for making the data available for a fixed amount of time, and distributes the encoded chunks to Mantle DA operators\\n    \\n*   Aggregates signatures from the operators and posts an attestation to the blockchain, confirming availability of the data of interest for the specified time period\\n    \\n\\n#### \\n\\nChallengers\\n\\nThey're interested parties who play an important role in the Proof of Custody protocol. Challengers perform the following tasks:\\n\\n*   Monitor certain verifiable operations of the protocol (which in ",
    "the optimistic case are not verified or resolved on-chain)\\n    \\n*   Permissionlessly force problematic operations to be resolved on-chain, resulting in an operator’s stake being slashed\\n    \\n\\nThe Proof of Custody protocol is in development stage and will go online with a future Mainnet upgrade.\\n\\n#### \\n\\n`MantleLayer` and `MantleDA` Smart Contracts\\n\\nThe collection of DA-related smart contracts running on Ethereum take care of the following:\\n\\n*   Ensure that data is only accepted as available when a group of operators having a sufficient amount of stake has collectively signed\\n    \\n*   Implement the proof-of-custody protocol and provide mechanisms for a challenger to disclose data on chain\\n    \\n*   Verify the validity of data submitted by Challengers against a signed commitment, and enact slashing as dictated by the proof-of-custody protocol\\n    \\n\\nThe data storage process on Mantle DA is as follows:\\n\\n1.  Encoding: Disperser encodes data chunks and generates KZG multi",
    "reveal proofs which will allow Operators to verify the correctness of their chunk.\\n    \\n2.  Dispersal: Disperser sends data chunks to respective DA Operators\\n    \\n3.  Attestation: Operators verify their chunks against the global commitment. If the verification is successful, the Operator proceeds to store their chunk of data for the duration specified by the Disperser and sends back an attestation\\n    \\n4.  Aggregation: If enough signatures are received, the Disperser aggregates the signatures and publishes them to L1 Ethereum.\\n    \\n\\n## \\n\\n**Why Run a Rollup Verifier Node?**\\n\\nThere are multiple advantages of running a Rollup Verifier node.\\n\\n1.  It grants many of the benefits of running an Ethereum node, such as the ability to simulate L2 transactions locally **without rate-limiting** (public RPCs may face such limitations)**.**\\n    \\n2.  Allows anyone to verify the work performed by Sequencers by **re-deriving output roots** and **comparing** them against those submitted ",
    "by the Sequencer. In case of a mismatch, verifiers will be able to perform a fault check and claim rewards by submitting fraud proofs on future versions of Mainnet.\\n    \\n\\n**dApp builders** are encouraged to consider the value addition of running a Rollup Verifier node given that the overhead costs tend to be low.\\n\\nThe diagram below illustrates how the Sequencer and Rollup Verifier fit together. Note that actions in red are performed by a **Sequencer**, while actions in blue are performed by a **Rollup Verifier**:\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api\",\n    \"loadedTime\": \"2025-02-15T20:32:57.863Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"met",
    "adata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api\",\n    \"title\": \"Covalent Data Indexing API | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Covalent Data Indexing API | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/wZPzcTKJKBHAnj65yr7c\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router",
    "-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YmY0ZjIxZGYtMGY4YS00Mjk1LTkzZDAtOWM5ZThjNDViZjUz' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"s",
    "uccess_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=fk4JHh4yrH%2FlZPvLtkqgBh9V9Qtw8VlLvBjESyXh5RGEJywjqtzsg%2FrmUeqdmdGKkwKgzO0x8UX6PNqqq6H%2B9pE4uotl2C2dEA9dBhXjIW6vdChqceRRUXTcYOZdniND5nUnoWpCTtS0n0Hj3Y2Z\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f2fb5e82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Covalent Data Indexing API | Network\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Covalent Data Indexing API | Network\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n",
    "  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging\",\n    \"loadedTime\": \"2025-02-15T20:32:58.285Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging\",\n    \"title\": \"Cross-chain Messaging | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Cross-chain Messaging | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/W1ZRdv9KNQ9Hk1bCqXKq\"\n      }\n    ],\n    \"jsonLd\": null,\n    ",
    "\"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OWYyNjFhYzEtOTc5Mi00ZjE5LWJlMjktNjVhYWZjYWQ2ZTI0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook",
    ".com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=0d2BLR%2FZtN5KiVw5ML1FvcupocH2YiYwGRNpVCCcGaQcXjh5SKfoLLLLqQdIzUU6NEiGQdYHIu4BGn7mpcfMbcVlgAqUePK4T7ZgZAd4okd55RZt4YXdhP5rWvgE9N%2FXfMWh3dLeSULC%2FIltTEj8\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:sit",
    "e_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fa5b913b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Cross-chain Messaging | Network\\nLayerZero\\nLayerZero is an omnichain interoperability protocol that enables cross-chain messaging. Applications built on Mantle Network can use the LayerZero protocol to connect to 35+ supported blockchains seamlessly. \\nLayerZero Endpoint has been deployed on Mantle Network, and developers building on Mantle can leverage the LayerZero protocol to build cross-chain capabilities. LayerZero’s Endpoint ULNv2 validation library relies on two parties, the Oracle and Relayer, to transfer messages between on-chain endpoints. When LayerZero sends a message from Mantle to chain X, the message is routed through the endpoint on Mantle to the ULNv2 validation library. The ULNv2 library notifies the Oracle and Relayer of the message and its des",
    "tination chain X. The Oracle forwards the packet hash to the endpoint on chain X, and the Relayer submits the packet to be verified on-chain against the hash and delivers the message.\\nAs a developer, LayerZero Endpoint is the only interface for your User Application (UA). The Endpoint allows UAs to configure the Messaging Library for sending and receiving verified messages and guarantees the message-delivering ordering across all messaging libraries.\\nSend(): the message will be sent through the endpoint first and then redirected to the UA-configured Messaging Library.\\nReceive(): the message will be verified at the Messaging Library first then forwarded to the endpoint and eventually delivered to the UA. \\nLinks\\nFind examples on LayerZero's Github.\\nAxelar\\nAxelar is a decentralized cross-chain communication network that enables interoperability by connecting different heterogenous chains. It is secured by a Proof-of-Stake (PoS) consensus mechanism and can enable asset transfer and ",
    "message passing between chains by allowing contracts to interact with each other using General Message Passing (GMP).\\nSquid x Axelar\\nSquid is the cross-chain swap and liquidity routing protocol on Axelar Network. It supports canonically swapping and sending any native token between chains. Swaps are composable with Axelar's generalized message passing, so Squid can enable one-click transactions between any application and any user, using any asset. This can be done using Squid's TS SDK, the Squid web app, or the contracts directly.\\nLinks\\nAxelar\\nSee examples of how to use Axelar to implement common dApp use cases in an EVM environment in this GitHub repo.\\nYou can find more descriptive guides in the Axelar dev docs:\\nOther reference material can also be found in the Axelar dev docs:\\nIf you're looking for support:\\nSquid\",\n  \"markdown\": \"# Cross-chain Messaging | Network\\n\\n## \\n\\nLayerZero\\n\\n[LayerZero](https://layerzero.gitbook.io/docs/) is an omnichain interoperability protocol",
    " that enables cross-chain messaging. Applications built on Mantle Network can use the LayerZero protocol to connect to 35+ supported blockchains seamlessly.\\n\\nLayerZero Endpoint has been deployed on Mantle Network, and developers building on Mantle can leverage the LayerZero protocol to build cross-chain capabilities. LayerZero’s Endpoint ULNv2 validation library relies on two parties, the Oracle and Relayer, to transfer messages between on-chain endpoints. When LayerZero sends a message from Mantle to chain X, the message is routed through the endpoint on Mantle to the ULNv2 validation library. The ULNv2 library notifies the Oracle and Relayer of the message and its destination chain X. The Oracle forwards the packet hash to the endpoint on chain X, and the Relayer submits the packet to be verified on-chain against the hash and delivers the message.\\n\\nAs a developer, LayerZero Endpoint is the only interface for your User Application (UA). The Endpoint allows UAs to configure the Mes",
    "saging Library for sending and receiving verified messages and guarantees the message-delivering ordering across all messaging libraries.\\n\\n*   `Send()`: the message will be sent through the endpoint first and then redirected to the UA-configured Messaging Library.\\n    \\n*   `Receive()`: the message will be verified at the Messaging Library first then forwarded to the endpoint and eventually delivered to the UA.\\n    \\n\\n### \\n\\nLinks\\n\\n*   Find examples on LayerZero's [Github](https://github.com/LayerZero-Labs/solidity-examples).\\n    \\n\\n## \\n\\nAxelar\\n\\n[Axelar](https://docs.axelar.dev/) is a decentralized cross-chain communication network that enables interoperability by connecting different heterogenous chains. It is secured by a Proof-of-Stake (PoS) consensus mechanism and can enable asset transfer and message passing between chains by allowing contracts to interact with each other using [General Message Passing (GMP)](https://docs.axelar.dev/dev/general-message-passing/overvi",
    "ew).\\n\\n### \\n\\nSquid x Axelar\\n\\nSquid is the cross-chain swap and liquidity routing protocol on [Axelar Network](https://axelar.network/). It supports canonically swapping and sending any native token between chains. Swaps are composable with Axelar's generalized message passing, so Squid can enable _one-click_ transactions between any application and any user, using any asset. This can be done using [Squid's TS SDK](https://www.npmjs.com/package/@0xsquid/sdk), the [Squid web app](https://app.squidrouter.com/), or the contracts directly.\\n\\n### \\n\\nLinks\\n\\n#### \\n\\nAxelar\\n\\n*   See examples of how to use Axelar to implement common dApp use cases in an EVM environment in this [GitHub repo](https://github.com/axelarnetwork/axelar-examples/blob/main/examples/evm/README.md).\\n    \\n*   You can find more descriptive guides in the Axelar dev docs:\\n    \\n*   Other reference material can also be found in the Axelar dev docs:\\n    \\n\\n*   If you're looking for support:\\n    \\n\\n#### \\n\\nSq",
    "uid\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates\",\n    \"loadedTime\": \"2025-02-15T20:32:58.352Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates\",\n    \"title\": \"Network Updates | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Network Updates | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JLhGcGX5qnQrpzfea544\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"conte",
    "nt-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWUxNDM0MzktZTJkNi00MDViLWJlMDgtNTIxYzVhZmU5ZTdm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.git",
    "book.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=UG79%2BJnblkcKnnYrhslY6A3zaHI45YnFzqyAMzXu8E48bdu406xmWtC2RqV5%2BGH3hpWQWjpqzKinqmAkQMw%2FW1IaQkad6qUtwk%2BU7UNU9YzFfsucd%2ByQZYYK6z0IYG2OFuoI%2FHyYZFBtydydkF%2Fu\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-me",
    "thod\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fb5d0a82e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network Updates | Network\\nTestnet v0.4.3Testnet v0.4.0Testnet v0.3.2\\nPreviousDeploying a Rollup Verifier/Replica NodeNextTestnet v0.4.3\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Network Updates | Network\\n\\n[Testnet v0.4.3](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3)[Testnet v0.4.0](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0)[Testnet v0.3.2](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2)\\n\\n[PreviousDeploying a Rollup Verifier/Replica Node](https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node)[NextTestnet v0.4.3](https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3)\\n\\nLast updated 1 year ago",
    "\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node\",\n    \"loadedTime\": \"2025-02-15T20:32:58.235Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node\",\n    \"title\": \"Deploying a Rollup Verifier/Replica Node | Network\",\n    \"description\": \"Deploy a verifier node and sync rollup data as a part of Mantle network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying a Rollup Verifier/Replica Node | Network\"\n     ",
    " },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Deploy a verifier node and sync rollup data as a part of Mantle network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/JnSZfB8IQqS1sZmQ1oqi\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M",
    "2E0ZWVjN2UtZjQ2MC00YjNlLTllNGEtNTUwOWI5NGJhMjg5' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=m8aue8pekzPMTeq42AX5uo0BzypKgmg8z",
    "ap87rmFM9WzrXgXzDz8m3RohM%2B4W0rucjo6L0gPZd2zG686RiGxfjpoVIoLt3Ru7uGSE2HpsXqWb2M3dxjeGK8ff%2B%2BDT7Wm1U5aHctDsVPgGvdLGuDu\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811f8fbda059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying a Rollup Verifier/Replica Node\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nIn order to build an app on Mantle network, you'll need access to a Mantle node. There are multiple public Node RPC Providers that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\nRunning Your Own Node\\nIf you run a node, please keep a close eye on the latest update",
    " on our GitHub Release page\\nHardware Requirements\\nNodes need to store the transaction history of Mantle and run l2geth. \\nRecommended specs:\\nCPU - min. 4 cores, 8th Gen. or higher\\nRAM - min. 16 GB\\nStorage - min. 100 GB disk space free (HDD works for now, SSD is better)\\nBandwidth - 10mb/s+ download\\nApproximate Disk Usage\\nUsage as of 2022-09-21:\\nArchive node: ~800gb\\nFull node: ~60gb\\nSnapshot\\nWe recommend that you start the node with the latest snapshot, so that you don't need to wait a long time to sync data.\\nDeployment\\nThe recommended method to create a replica is to use Docker and the Docker images we provide. They include all the configuration settings. We use these images for our own systems, and as such they will be more thoroughly tested than any other configuration.\\nNode Configuration\\nYou can find instructions to build and operate your node on Mantle testnet and mainnet by following the links below:\\nTo compile a Mantle node locally and participate in the network a",
    "s a Verifier, follow these steps:\\n1. Install Go and C Compiler\\nMake sure Go (version 1.19) and a C compiler are installed on your system. You can use your preferred package manager (e.g., apt, yum, brew) to install them.\\n2. Clone the Mantle Repository\\nClone the Mantle GitHub repository using the following command:\\ngit clone https://github.com/mantlenetworkio/mantle.git\\n3. Navigate to the l2geth Directory\\nNavigate to the l2geth directory within the Mantle repository:\\n4. Compile the Mantle Geth Node\\nChoose a stable release here and compile the Mantle Geth node using the Makefile with the following command:\\ngit checkout v0.4.3-5 make geth\\n5. Setup the environment\\ngit clone https://github.com/mantlenetworkio/networks.git cd networks cd mainnet/envs set -a . ./geth.env set +a mkdir ~/mantle_l2geth_data cd ../.. export ETH1_HTTP=https://rpc.ankr.com/eth # change this export SEQUENCER_CLIENT_HTTP=https://rpc.mantle.xyz export ROLLUP_STATE_DUMP_PATH=https://mantlenetworkio.github.i",
    "o/networks/mainnet/genesis.json export ROLLUP_CLIENT_HTTP=https://dtl.mantle.xyz export ROLLUP_BACKEND='l2' export ETH1_CTC_DEPLOYMENT_HEIGHT=8 export RETRIES=60 export ROLLUP_VERIFIER_ENABLE='true' export DATADIR=~/mantle_l2geth_data cp ../mantle/l2geth/build/bin/geth . export PATH=$PATH:$(pwd)\\nYou need to change ETH1_HTTP to your own rpc\\nYou need to change DATADIR to where you want to store data\\nIf the sync speed is slow, try to change your DTL URL, you can check more details here.\\nStart as a Verifier\\nStart the node as a Verifier to join the Mantle network:\\nThis command launches a local node configured as a Verifier to participate in the validation process within Mantle network.\\nAppendix\\nNetwork DTL URL\\nYou can change the DTL service URL based on the network your node is going to connect to by updating the ROLLUP_CLIENT_HTTP value in the docker-compose.yml file for the Docker way and the ./mainnet/envs/geth.env for the binary way.\",\n  \"markdown\": \"# Deploying a Rollup Verifi",
    "er/Replica Node\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nIn order to build an app on Mantle network, you'll need access to a Mantle node. There are multiple public [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers) that you can choose from, or you can deploy your own depending on the requirements for your specific use cases.\\n\\n## \\n\\nRunning Your Own Node\\n\\nIf you run a node, please keep a close eye on the latest update on our [GitHub Release](https://github.com/mantlenetworkio/mantle/releases) page\\n\\n#### \\n\\n**Hardware Requirements**\\n\\nNodes need to store the transaction history of Mantle and run `l2geth`.\\n\\nRecommended specs:\\n\\n*   **CPU** \\\\- min. 4 cores, 8th Gen. or higher\\n    \\n*   **RAM** - min. 16 GB\\n    \\n*   **Storage** - min. 100 GB disk space free (HDD works for now, SSD is better)\\n    \\n*   **Bandwidth** - 10mb/s+ download\\n    \\n\\n",
    "#### \\n\\nApproximate Disk Usage\\n\\nUsage as of 2022-09-21:\\n\\n*   Archive node: ~800gb\\n    \\n*   Full node: ~60gb\\n    \\n\\n#### \\n\\nSnapshot\\n\\nWe recommend that you start the node with the latest [snapshot](https://github.com/mantlenetworkio/networks/blob/main/run-node-mainnet.md#download-latest-snapshot-from-mantle), so that you don't need to wait a long time to sync data.\\n\\n### \\n\\nDeployment\\n\\nThe recommended method to create a replica is to use [Docker](https://www.docker.com/) and the [Docker images we provide](https://hub.docker.com/u/mantlenetworkio). They include all the configuration settings. We use these images for our own systems, and as such they will be more thoroughly tested than any other configuration.\\n\\n#### \\n\\nNode Configuration\\n\\nYou can find instructions to build and operate your node on Mantle testnet and mainnet by following the links below:\\n\\nTo compile a Mantle node locally and participate in the network as a Verifier, follow these steps:\\n\\n#### \\n\\n1\\",
    "\\. Install Go and C Compiler\\n\\nMake sure Go (version 1.19) and a C compiler are installed on your system. You can use your preferred package manager (e.g., apt, yum, brew) to install them.\\n\\n#### \\n\\n2\\\\. Clone the Mantle Repository\\n\\nClone the Mantle GitHub repository using the following command:\\n\\n```\\ngit clone https://github.com/mantlenetworkio/mantle.git\\n```\\n\\n#### \\n\\n3\\\\. Navigate to the `l2geth` Directory\\n\\nNavigate to the `l2geth` directory within the Mantle repository:\\n\\n#### \\n\\n4\\\\. Compile the Mantle Geth Node\\n\\nChoose a stable release here and compile the Mantle Geth node using the Makefile with the following command:\\n\\n```\\ngit checkout v0.4.3-5\\nmake geth\\n```\\n\\n#### \\n\\n5\\\\. Setup the environment\\n\\n```\\ngit clone https://github.com/mantlenetworkio/networks.git\\ncd networks\\ncd mainnet/envs\\nset -a\\n. ./geth.env\\nset +a \\nmkdir ~/mantle_l2geth_data\\ncd ../..\\nexport ETH1_HTTP=https://rpc.ankr.com/eth # change this\\nexport SEQUENCER_CLIENT_HTTP=https://rpc.ma",
    "ntle.xyz\\nexport ROLLUP_STATE_DUMP_PATH=https://mantlenetworkio.github.io/networks/mainnet/genesis.json\\nexport ROLLUP_CLIENT_HTTP=https://dtl.mantle.xyz\\nexport ROLLUP_BACKEND='l2'\\nexport ETH1_CTC_DEPLOYMENT_HEIGHT=8\\nexport RETRIES=60\\nexport ROLLUP_VERIFIER_ENABLE='true'\\nexport DATADIR=~/mantle_l2geth_data\\n\\ncp ../mantle/l2geth/build/bin/geth .\\nexport PATH=$PATH:$(pwd)\\n```\\n\\n1.  You need to change `ETH1_HTTP` to your own rpc\\n    \\n2.  You need to change `DATADIR` to where you want to store data\\n    \\n3.  If the sync speed is slow, try to change your DTL URL, you can check more details [here](https://docs.mantle.xyz/network/network/for-validators/deploy-a-node/deploying-a-rollup-verifier-replica-node#network-dtl-url).\\n    \\n\\n1.  #### \\n    \\n    Start as a Verifier\\n    \\n\\nStart the node as a Verifier to join the Mantle network:\\n\\nThis command launches a local node configured as a Verifier to participate in the validation process within Mantle network.\\n\\n## \\n\\nAppendix\\",
    "n\\n### \\n\\nNetwork DTL URL\\n\\nYou can change the DTL service URL based on the network your node is going to connect to by updating the `ROLLUP_CLIENT_HTTP` value in the `docker-compose.yml` file for the Docker way and the `./mainnet/envs/geth.env` for the binary way.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/graph-endpoints\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/graph-endpoints\",\n    \"loadedTime\": \"2025-02-15T20:32:58.528Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/graph-endpoints\",\n    \"title\": \"Graph Endpoints | Network\",\n    \"description\": \"Graph service endpoint reference\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n    ",
    "  {\n        \"property\": \"og:title\",\n        \"content\": \"Graph Endpoints | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Graph service endpoint reference\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/XId80x4ZnYpLaZDSUkax\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:57 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"local-IAD\",\n      \"content-security-policy\": \"default-src 'self' https:",
    "//static.gitbook.com; script-src 'self' 'nonce-MmRlZWE2YWUtZDcwYi00MGZiLWI1OWYtMTk5MGQzZDVkZDJk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\",
    "/report\\\\/v4?s=Is0NGwYZhFLncapoNa5eZRxlvgYJ3PRG%2FPFscg4%2FcTmJnAIOq2sBtpiw5e0o3V9ktVCslOJvjKwWbkhPbaC1Iv%2BQZWUObABhV7NUW6VwN%2BNu5r2hkTcJo8YoU8lXeObYrx2u8PXkt9NONWETVEUY\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811ef9e7f9c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Graph Endpoints | Network\\nGraph service endpoint reference\\nLast updated 11 months ago\",\n  \"markdown\": \"# Graph Endpoints | Network\\n\\nGraph service endpoint reference\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/oracles\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.man",
    "tle.xyz/network/network/for-devs/resources-and-tooling/oracles\",\n    \"loadedTime\": \"2025-02-15T20:32:58.773Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/oracles\",\n    \"title\": \"Oracles | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Oracles | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/pCuweFib8QdTZ8ToCcfa\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"lin",
    "k\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzNlYWEyYWQtZWQ4Ny00ODEzLTg1MDYtOTEyZDE5NDUyYWRj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *;",
    " object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=YPMnsCMP0gSxF7UkD49DxfmINnSmqP7ei2i%2FYLUiuOSvIvE8PfAEc%2F8yHywH5O7hvCPlDRLJf6g4sVTOyhZYLDlK71UIJG0dvV9%2BkErfmyr1GR3tHWJz9RO%2Fe8S%2BxJdl9hzTvslCpPydv6OHCa8V\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fb6b522d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Oracles | Network\\nPreviousCross-",
    "chain MessagingNextParticle AA SDK\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Oracles | Network\\n\\n[PreviousCross-chain Messaging](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging)[NextParticle AA SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk)\\n\\nLast updated 1 year ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:59.960Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk\",\n    \"title\": \"Particle AA SDK | Network\",\n    \"descrip",
    "tion\": \"Particle Network Smart Wallet-as-a-Service Integration\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Particle AA SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Particle Network Smart Wallet-as-a-Service Integration\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/WKKXFqt1xSNNKYpUqmbw\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:59 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router",
    "-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YzFmNTFkNmEtYjBmOS00NzdmLWI0OTctZDM3YzhlZTY0MzNi' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"re",
    "port_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=uE7YCEqB4a1NLYUi2ggrfIVfh5C33Pfy106BbXrpfqIgedG5okR%2F785Pwo4CCtz8nHy6QxEWu8SbMVB%2F8Ej2r%2FKzloW9uzLh8LFWtz1v6w12PPZYI3QeKlzzLe5STNFTKykP7QPwEYgL7Os1WxkH\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281203bc6d2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Particle AA SDK | Network\\nParticle Network Smart Wallet-as-a-Service Integration\\nParticle Network is an intent-centric, modular access layer of web3 applications. With Particle's Smart Wallet-as-a-Service, developer",
    "s can curate an unparalleled user experience through modular and customizable EOA/AA embedded wallet components. Using MPC-TSS for key management, Particle can streamline user onboarding via familiar web2 accounts - such as Google accounts, email addresses, and phone numbers.\\nParticle supports Mantle Mainnet and Testnet through both EOA interactions and native ERC-4337 SimpleAccount implementations.\\nUsing Particle Network Wallet-as-a-Service for a secure, flexible embedded EOA wallet implementation on Mantle Mainnet and Testnet is quite simple and can be achieved through a mechanism like the one below.\\nCreate a ParticleNetwork instance.\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\"; import { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\"; import { SmartAccount } from \\\"@particle-network/aa\\\"; // Retrieved from https://dashboard.particle.network const config = { projectId: \\\"xx\\\", clientKey: \\\"xx\\\", appId: \\\"xx\\\", }; const particle = new ParticleNetwork({ ...",
    "config, chainName: Mantle.name, chainId: Mantle.id, }); await particle.auth.login() // Initiates social login\\nIntroducing ERC-4337 account abstraction into Particle instance. Instead facilitating interaction with Mantle through a smart account can be achieved through the following:\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\"; import { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\"; import { SmartAccount } \\\"@particle-network/aa\\\"; // Retrieved from https://dashboard.particle.network const config = { projectId: \\\"xx\\\", clientKey: \\\"xx\\\", appId: \\\"xx\\\", }; const particle = new ParticleNetwork({ ...config, chainName: Mantle.name, chainId: Mantle.id, }); // If using AA const smartAccount = new SmartAccount(new ParticleProvider(particle.auth), { ...config, aaOptions: { simple: [{ chainId: Mantle.id, version: '1.0.0' }] } }); particle.setERC4337({ name: 'SIMPLE', version: '1.0.0' }); await particle.auth.login() // Initiates social login\\nGet Started\",\n  \"markdown\"",
    ": \"# Particle AA SDK | Network\\n\\nParticle Network Smart Wallet-as-a-Service Integration\\n\\n[**Particle Network**](https://particle.network/) is an intent-centric, modular access layer of web3 applications. With Particle's Smart Wallet-as-a-Service, developers can curate an unparalleled user experience through modular and customizable EOA/AA embedded wallet components. Using MPC-TSS for key management, Particle can streamline user onboarding via familiar web2 accounts - such as Google accounts, email addresses, and phone numbers.\\n\\nParticle supports Mantle Mainnet and Testnet through both EOA interactions and native ERC-4337 SimpleAccount implementations.\\n\\nUsing Particle Network Wallet-as-a-Service for a secure, flexible embedded EOA wallet implementation on Mantle Mainnet and Testnet is quite simple and can be achieved through a mechanism like the one below.\\n\\n1.  **Create a ParticleNetwork instance.**\\n    \\n\\n```\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\";\\nimpo",
    "rt { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\";\\nimport { SmartAccount } from \\\"@particle-network/aa\\\";\\n\\n// Retrieved from https://dashboard.particle.network\\nconst config = {\\n\\tprojectId: \\\"xx\\\",\\n\\tclientKey: \\\"xx\\\",\\n\\tappId: \\\"xx\\\",\\n};\\n\\nconst particle = new ParticleNetwork({\\n\\t...config,\\n\\tchainName: Mantle.name,\\n\\tchainId: Mantle.id,\\n});\\n\\nawait particle.auth.login() // Initiates social login\\n```\\n\\n1.  **Introducing** [**ERC-4337**](https://eips.ethereum.org/EIPS/eip-4337) **account abstraction into Particle instance.** Instead facilitating interaction with Mantle through a smart account can be achieved through the following:\\n    \\n\\n```\\nimport { ParticleNetwork } from \\\"@particle-network/auth\\\";\\nimport { Mantle, MantleTestnet } from \\\"@particle-network/chains\\\";\\nimport { SmartAccount } \\\"@particle-network/aa\\\";\\n\\n// Retrieved from https://dashboard.particle.network\\nconst config = {\\n\\tprojectId: \\\"xx\\\",\\n\\tclientKey: \\\"xx\\\",\\n\\tappId: \\\"xx\\\",\\n}",
    ";\\n\\nconst particle = new ParticleNetwork({\\n\\t...config,\\n\\tchainName: Mantle.name,\\n\\tchainId: Mantle.id,\\n});\\n\\n\\n// If using AA\\nconst smartAccount = new SmartAccount(new ParticleProvider(particle.auth), {\\n\\t...config,\\n\\taaOptions: {\\n\\tsimple: [{ chainId: Mantle.id, version: '1.0.0' }]\\n\\t}\\n});\\n\\nparticle.setERC4337({\\n\\tname: 'SIMPLE',\\n\\tversion: '1.0.0'\\n});\\n\\nawait particle.auth.login() // Initiates social login\\n```\\n\\n### \\n\\nGet Started\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-client-sdk\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-client-sdk\",\n    \"loadedTime\": \"2025-02-15T20:32:56.186Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resour",
    "ces-and-tooling/mantle-client-sdk\",\n    \"title\": \"Mantle Client SDK | Network\",\n    \"description\": \"Helping devs familiarize with the available tools\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Mantle Client SDK | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Helping devs familiarize with the available tools\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/hnCW0tavsFwBELZTFmRO\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:55 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree,",
    " Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YTY3MTVmNGUtYjBkMS00M2JkLWJmNjQtMjI0YzJmN2MwNmY0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\"",
    ",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pKG9JztU7RaPLSmXWXIqklI6KPo4u%2FqYosro5g%2BMt616YwQv%2Bjq8WAuDy0WPMGB7dk1at3yW8vrfiL%2FpstA3pRsq%2BaFAFiL0NMWTcK15FP0p43dP4SUH4gI7jALmq5rQtxQGR3LQIVXXM%2FvA1GBG\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811e7f8ed4d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Mantle Client SDK | Network\\nHelping devs familiarize with the available tools\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nWe reco",
    "mmend reading the following sections prior to using the SDK.\\nTo understand the opcode behaviour differences between Mantle Network and Ethereum read Solidity Support\\nTo understand how gas fees are calculated read Transaction Fees on L2\\nJavascript SDK\\nUse the link below to navigate to our SDK reference docs.\\n@mantleio/sdk\\nSDK Tutorials\\nBridging $MNT using Mantle SDKViewing Transactions between Layers\\nPreviousMantle Bridge APINextThirdweb SDK\\nLast updated 11 months ago\\nWas this helpful?\",\n  \"markdown\": \"# Mantle Client SDK | Network\\n\\nHelping devs familiarize with the available tools\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nWe recommend reading the following sections prior to using the SDK.\\n\\n*   To understand the opcode behaviour differences between Mantle Network and Ethereum read [Solidity Support](https://docs.mantle.xyz/network/network/for-devs/solidity-support)\\n    \\n*   To understand how gas fees ",
    "are calculated read [Transaction Fees on L2](https://docs.mantle.xyz/network/network/introduction/transaction-fees-on-l2)\\n    \\n\\n## \\n\\nJavascript SDK\\n\\nUse the link below to navigate to our SDK reference docs.\\n\\n[@mantleio/sdk](https://sdk.mantle.xyz/)\\n\\n## \\n\\nSDK Tutorials\\n\\n[Bridging $MNT using Mantle SDK](https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk)[Viewing Transactions between Layers](https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers)\\n\\n[PreviousMantle Bridge API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-bridge-api)[NextThirdweb SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/thirdweb-sdk)\\n\\nLast updated 11 months ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3\",\n  \"crawl\": {\n    \"loade",
    "dUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3\",\n    \"loadedTime\": \"2025-02-15T20:33:04.542Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.3\",\n    \"title\": \"Testnet v0.4.3 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet v0.4.3 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/xvWTFUYRioCQJyPx0jaS\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYN",
    "AMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YzJiMTc0N2YtYjQ4Ni00NzhkLWIwODctZDFkMTA0MDA2MGNj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.",
    "gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=RNf6WKJE%2FvdldNCissuRvfkjl3MEUb%2BPAzB%2FntWovUrDWK7cKp211whRJJHeIwr83MdpW0MNEzcesnrbp%2B50E8Nvr6213D093hAiYT%2F9upAawZxUoNRxMTKMSinVMs6nzWEmc5dcnr4HlGOUxt1%2B\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912812203b7e2d06-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUr",
    "l\": null,\n  \"text\": \"Testnet v0.4.3 | Network\\nThis network update brings about the following changes:\\nOptimized layer-2 (L2) transaction fee, allowing users to customize transaction fees within a wider range to support Account Abstraction (AA)\\nOptimized rollup submission strategy to achieve lower gas fees in scenarios with higher TPS\\nOptimized gas oracle data update strategy to ensure that the L2 network has a more stable real-time adjustment ability for transaction fees.\\nAdded Mantle audit report files\\nFor more details on how the aforementioned features were included in the codebase, follow the links below to navigate to the Mantle GitHub repo. GitHub Links：\\nInstructions for Node Operators\\nPlease follow the steps below to upgrade your node：\\nStop current docker service\\nChange the image tag in the docker-compose.yml, Replace the current image from mantlenetworkio/l2geth:v0.4.0-1 to mantlenetworkio/l2geth:v0.4.3\\nStart new docker service\\nCheck logs to see status\",\n  \"markdown\"",
    ": \"# Testnet v0.4.3 | Network\\n\\nThis network update brings about the following changes:\\n\\n*   Optimized layer-2 (L2) transaction fee, allowing users to customize transaction fees within a wider range to support Account Abstraction (AA)\\n    \\n*   Optimized rollup submission strategy to achieve lower gas fees in scenarios with higher TPS\\n    \\n*   Optimized gas oracle data update strategy to ensure that the L2 network has a more stable real-time adjustment ability for transaction fees.\\n    \\n*   Added Mantle audit report files\\n    \\n\\nFor more details on how the aforementioned features were included in the codebase, follow the links below to navigate to the Mantle GitHub repo. **GitHub Links：**\\n\\n## \\n\\nInstructions for Node Operators\\n\\nPlease follow the steps below to upgrade your node：\\n\\n1.  Stop current docker service\\n    \\n2.  Change the image tag in the `docker-compose.yml`_,_ Replace the current image from `mantlenetworkio/l2geth:v0.4.0-1` to [`mantlenetworkio/l2geth:v0.4",
    ".3`](https://hub.docker.com/r/mantlenetworkio/l2geth/tags)\\n    \\n3.  Start new docker service\\n    \\n\\n1.  Check logs to see status\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials\",\n    \"loadedTime\": \"2025-02-15T20:33:04.405Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials\",\n    \"title\": \"Tutorials | Network\",\n    \"description\": \"Examples and walkthroughs to refer to and follow along\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Tutorials | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Examples and walkthroughs to refer to and follow al",
    "ong\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/GxnzFO4CpuEOWTCOFoNH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-MjRlZWE5MDktNDVkYy00NDZkLTg5OTgtYmFkMmE4ODM0YzY2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integra",
    "tions.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Ouqh%2FVIsmEtqytVZleBUjr9Q5MO4SDF%2FN2PF6ufgkW8WH%2Bsobn8NJrNAgP9xUw%2FbypLRW7Tqhj%2Boj%2FWEiImV9WBY4asrLuhmrm2Xb%2FPhf4ngjv237jgV2i0hxZ8pZfP8R%2Bv%2FcI%2BwMA8nAifJnJbH\\\"}",
    "],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128122099759c72-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Tutorials | Network\\nExamples and walkthroughs to refer to and follow along\\nDeploying ContractsVerifying ContractsDebugging Contracts with FoundryMigrating $BIT to $MNT on GoerliViewing Transactions between LayersBridging Custom ERC20 Tokens Using Standard BridgeBridging $MNT using Mantle SDKEstimating Transaction FeesHow to Update the NFT Metadata\\nPreviousParticle AA SDKNextDeploying Contracts\\nLast updated 1 year ago\\nWas this helpful?\",\n  \"markdown\": \"# Tutorials | Network\\n\\nExamples and walkthroughs to refer to and follow along\\n\\n[Deploying Contracts](ht",
    "tps://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts)[Verifying Contracts](https://docs.mantle.xyz/network/network/for-devs/tutorials/verifying-contracts)[Debugging Contracts with Foundry](https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry)[Migrating $BIT to $MNT on Goerli](https://docs.mantle.xyz/network/network/for-devs/tutorials/migrating-usdbit-to-usdmnt-on-goerli)[Viewing Transactions between Layers](https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers)[Bridging Custom ERC20 Tokens Using Standard Bridge](https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-custom-erc20-tokens-using-standard-bridge)[Bridging $MNT using Mantle SDK](https://docs.mantle.xyz/network/network/for-devs/tutorials/bridging-usdmnt-using-mantle-sdk)[Estimating Transaction Fees](https://docs.mantle.xyz/network/network/for-devs/tutorials/estimating-transaction-fees)[How to Update the NFT Met",
    "adata](https://docs.mantle.xyz/network/network/for-devs/tutorials/how-to-update-the-nft-metadata)\\n\\n[PreviousParticle AA SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/particle-aa-sdk)[NextDeploying Contracts](https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts)\\n\\nLast updated 1 year ago\\n\\nWas this helpful?\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2\",\n    \"loadedTime\": \"2025-02-15T20:33:04.830Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.3.2\",\n    \"title\": \"Testnet v0.3.2 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"",
    "keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet v0.3.2 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/bKVkBnm9TaXoJVLdqIVE\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'no",
    "nce-Mjk4NmI3NDktMDk0OC00NzI0LWE3NjItYjkyMjU5MmM2MzBj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Sm7VKB58IlePcLT7cN9tOUj3Wo0y",
    "b5%2FBXeRgFC7Ky5yrOo%2BWKeROn6nczcy9o6ZlkOMDLVZwvglvZUaMo9mkqZldE73xw6542jx54rCUyGmdU11cGj7vc6XyyaSuX8bfoG3eWL6hUiSr0kCfaCSl\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912812224f52e646-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Testnet v0.3.2 | Network\\nThis network update brings about the following changes:\\nReduces the amount of data published to L1 Ethereum using EigenLayer\\nLower transactions fees on L2\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\nGitHub Links\\nInstructions for Node Operators\\nThis update includes changes that will effect take once you sync",
    " your node using the updated Docker image. Follow the steps below to proceed.\\n1. Modify the DTL configuration in docker-compose.yaml\\nUpdate the image. You can do this by either adding DOCKER_TAG_DATA_TRANSPORT_LAYER = 0.3.2 in goerli/env/dtl.env, or updating image to mantlenetworkio/data-transport-layer: 0.3.2\\nAdd the following attributes: DATA_TRANSPORT_LAYER__EIGEN_UPGRADE_ENABLE: true and DATA_TRANSPORT_LAYER__SYNC_TO_DA: false\\nAdd a new element as shown below.\\nvolume: volumes: - ./data/db:/db\\n2. Modify the verifer or replica setting in docker-compose.yaml\\nSet image version to image: mantlenetworkio/l2geth: 0.3.2\\nAdd the following attribute: ROLLUP_EIGEN_DA_BLOCK: \\\"8280000\\\"\\n3. Check node height\\nIf your current node height happens to be higher than 8280000, which is the block height for this update, you'll need to download the backup data from the previous day and extract it, and then use it to replace your node's chaindata. For instance, if you're performing this action ",
    "on 2023-05-25, you download the data from 2023-05-24 using the following link:\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\nMake sure to update the date in the URL based on your current date before starting the download. Also, the data directory depends on your local configuration. It should be of the form ./data/verifier/chaindata\\n4. Sync node\\nRun the following command and wait for your node to complete the sync.\\ndocker-compose up --force-recreate -d\\nDeploying a New Node Instance\\nIf you encounter issues updating your node version with the process described above, you'll need to use the previous day's snapshot and deploy a new node instance. Follow the steps below to do that.\\n1. Configure DTL\\nIf you're going to run a new node instance, you can just use Mantle's public DTL service to sync chain data. Use the docker-compose.replica.yml file from this pull request.\\n2. Check node height\\nYou'll still need to download the backup ",
    "data from the previous day, extract it, and then use it to replace your node's chaindata. For instance, if you're performing this action on 2023-05-25, you download the data from 2023-05-24 using the following link:\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\nMake sure to update the date in the URL based on your current date before starting the download. Also, the data directory depends on your local configuration. It should be of the form ./data/verifier/chaindata\\n3. Run node\\nYou'll need to download the docker-compose.replica.yml file to spin your new node instance. Once you've download the file from here, run the following command to start your node and sync it.\\ndocker-compose -f docker-compose.replica.yml up -d\",\n  \"markdown\": \"# Testnet v0.3.2 | Network\\n\\nThis network update brings about the following changes:\\n\\n*   Reduces the amount of data published to L1 Ethereum using EigenLayer\\n    \\n*   Lower transactions fees on L",
    "2\\n    \\n\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\n\\n#### \\n\\nGitHub Links\\n\\n## \\n\\nInstructions for Node Operators\\n\\nThis update includes changes that will effect take once you sync your node using the updated Docker image. Follow the steps below to proceed.\\n\\n#### \\n\\n1\\\\. Modify the DTL configuration in `docker-compose.yaml`\\n\\n*   Update the image. You can do this by either adding `DOCKER_TAG_DATA_TRANSPORT_LAYER = 0.3.2` in `goerli/env/dtl.env`, or updating `image` to `mantlenetworkio/data-transport-layer: 0.3.2`\\n    \\n*   Add the following attributes: `DATA_TRANSPORT_LAYER__EIGEN_UPGRADE_ENABLE: true` and `DATA_TRANSPORT_LAYER__SYNC_TO_DA: false`\\n    \\n*   Add a new element as shown below.\\n    \\n\\n```\\nvolume:\\n  volumes:\\n    - ./data/db:/db\\n```\\n\\n#### \\n\\n2\\\\. Modify the `verifer` or `replica` setting in `docker-compose.yaml`\\n\\n*   Set image version to `image: mant",
    "lenetworkio/l2geth: 0.3.2`\\n    \\n*   Add the following attribute: `ROLLUP_EIGEN_DA_BLOCK: \\\"8280000\\\"`\\n    \\n\\n#### \\n\\n3\\\\. Check node height\\n\\nIf your current node height happens to be higher than 8280000, which is the block height for this update, you'll need to download the backup data from the previous day and extract it, and then use it to replace your node's `chaindata`. For instance, if you're performing this action on 2023-05-25, you download the data from 2023-05-24 using the following link:\\n\\n```\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\n```\\n\\nMake sure to update the date in the URL based on your current date before starting the download. Also, the data directory depends on your local configuration. It should be of the form `./data/verifier/chaindata`\\n\\n#### \\n\\n4\\\\. Sync node\\n\\nRun the following command and wait for your node to complete the sync.\\n\\n```\\ndocker-compose up --force-recreate -d\\n```\\n\\n## \\n\\nDep",
    "loying a New Node Instance\\n\\nIf you encounter issues updating your node version with the process described above, you'll need to use the previous day's snapshot and deploy a new node instance. Follow the steps below to do that.\\n\\n#### \\n\\n1\\\\. Configure DTL\\n\\nIf you're going to run a new node instance, you can just use Mantle's public DTL service to sync chain data. Use the `docker-compose.replica.yml` file from this [pull request](https://github.com/mantlenetworkio/networks/pull/7/files).\\n\\n#### \\n\\n2\\\\. Check node height\\n\\nYou'll still need to download the backup data from the previous day, extract it, and then use it to replace your node's `chaindata`. For instance, if you're performing this action on 2023-05-25, you download the data from 2023-05-24 using the following link:\\n\\n```\\nhttps://s3.ap-southeast-1.amazonaws.com/static.testnet.mantle.xyz/20230524-testnet-chaindata.tar\\n```\\n\\nMake sure to update the date in the URL based on your current date before starting the downl",
    "oad. Also, the data directory depends on your local configuration. It should be of the form `./data/verifier/chaindata`\\n\\n#### \\n\\n3\\\\. Run node\\n\\nYou'll need to download the `docker-compose.replica.yml` file to spin your new node instance. Once you've download the file from [here](https://github.com/mantlenetworkio/networks/pull/7/files), run the following command to start your node and sync it.\\n\\n```\\ndocker-compose -f docker-compose.replica.yml up -d\\n```\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases\",\n    \"loadedTime\": \"2025-02-15T20:33:04.558Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/common-use-cases\",\n    \"title\": \"Common Use Cases | Network\",\n    \"descr",
    "iption\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Common Use Cases | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/kmmo7eEdHvm2s2nWLsO9\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https:/",
    "/static.gitbook.com; script-src 'self' 'nonce-MzJlYjAwYjYtYzNiYy00OTMwLWI3NDEtNmJiZWJiMjlmNGQ0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/",
    "report\\\\/v4?s=KA5ga1GoDJvuLEzvA5ob2idDiMdajSdye28B4lpIcv7%2BuNBQihzvpJzon5VhO9KtxDPbemYzHndX9%2BN%2BIg4BS0ImP%2BgXq2ZXIdRDPMYcAeY7wtjDrFaCWf1Bvo%2BwH6cgC%2FNeTbO10t62yyO9z6kC\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221ccf1059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Common Use Cases | Network\\nMantle v1\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Common Use Cases | Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252F",
    "logo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network/network)\\n\\nMantle v1\\n\\n[Mantle v2](https://docs.mantle.xyz/network/for-devs/common-use-cases?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/for-devs/common-use-cases?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](ht",
    "tps://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/chain-data-and-monitoring\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/chain-data-and-monitoring\",\n    \"loadedTime\": \"2025-02-15T20:33:01.960Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/chain-data-and-monitoring\",\n    \"title\": \"Chain Data and Monitoring | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Chain Data and Monitoring | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"con",
    "tent\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/yhvTVOcfGXWXpqyIkTqV\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:32:58 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ODdlZTg3ZDUtZTZmOS00YTY5LWJhM2QtY2E3NDVlYjgyNTg2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.",
    "com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=zLTJ5yn27f3m8t2A49qOba41V%2BURxXZdD%2FH%2F9ivmdiV%2BbKJtNcZFI8U0TrAiN4WAA%2B5yQ1SmsJ9arh2HfF7TiQGI0gs%2BFFFvm82hSRWhHj2KHhACklIfOkEA%2FTO049h1eQS7%2BEViKDZowIyGOexE\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.",
    "1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912811fb4a734d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Chain Data and Monitoring | Network\\nBlock Explorers\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\nCovalent\\nCovalent collects and indexes historical data points from over a 100 different chain networks and makes them available via one unified API. This can come in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\nStructured and enhanced on-chain data well beyond what you get from RPC providers\\nBroad and deep multi-chain data at scale\\nEnterprise-grade performance\\nSign up here to start building on Mantle. Here's a guide to help you ",
    "get started:\\nCovalent Data Indexing API\\nCheck out their docs by following the link below.\\nUnmarshal\\nUnmarshal provides an API, TS and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics data available at a glance for multiple chain, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\nDefiLlama\\nDefiLlama is a multi-chain TVL stats dashboard, where data connectors contributed and maintained by a community. Follow the link below to see data for Mantle Network.\\nSubQuery\\nSubQuery is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across multiple chains, including Mantle Network. Follow the link below to get started.\\nDEXTools\\nDEXTools is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed",
    " to Mantle Network and other chains using different decentralized exchanges.\\nDEX Screener\\nDEX Screener is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\nDeBank\\nDeBank is a defi dashboard that enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\",\n  \"markdown\": \"# Chain Data and Monitoring | Network\\n\\n## \\n\\nBlock Explorers\\n\\nBlock explorers provide access to real-time and historical transaction data via a UI and API. Here's a list of all the Mantle block explorers.\\n\\n## \\n\\nCovalent\\n\\nCovalent collects and indexes historical data points from over a 100 different chain networks and makes them available via one unified API. This can com",
    "e in handy for developers working on multi-chain dApps. You can use Covalent if you need:\\n\\n*   Structured and enhanced on-chain data well beyond what you get from RPC providers\\n    \\n*   Broad and deep multi-chain data at scale\\n    \\n*   Enterprise-grade performance\\n    \\n\\n[**Sign up here to start building on Mantle**](https://www.covalenthq.com/platform/?utm_source=mantle&utm_medium=partner-docs)**.** Here's a guide to help you get started:\\n\\n[Covalent Data Indexing API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/covalent-data-indexing-api)\\n\\nCheck out their docs by following the link below.\\n\\n## \\n\\nUnmarshal\\n\\nUnmarshal provides an API, TS and Golang SDK, and a data parser to fetch indexed on-chain data and conveniently plug it into your dApps. You can also find analytics data available at a glance for multiple chain, including Mantle. Follow the link below to navigate to the Unmarshal console and get started.\\n\\n## \\n\\nDefiLlama\\n\\nDefiLlama is",
    " a multi-chain TVL stats dashboard, where data connectors contributed and maintained by a community. Follow the link below to see data for Mantle Network.\\n\\n## \\n\\nSubQuery\\n\\n[SubQuery](https://academy.subquery.network/) is a fast, flexible, and reliable open-source data indexer that provides custom APIs for dApps and web3 systems across [multiple chains](https://subquery.network/networks), including Mantle Network. Follow the link below to get started.\\n\\n## \\n\\nDEXTools\\n\\nDEXTools is a platform that provides users with a comprehensive set of tools and resources to navigate the DeFi ecosystem. It supports swapping and trading assets that are deployed to Mantle Network and other chains using different decentralized exchanges.\\n\\n## \\n\\nDEX Screener\\n\\nDEX Screener is an online tool that supports real-time blockchain analytics and allows users to filter through a variety of assets across decentralized exchanges to perform price analysis.\\n\\n## \\n\\nDeBank\\n\\nDeBank is a defi dashboard",
    " that enables users to track their portfolio, access data and analytics for decentralized lending protocols, stablecoins, margin trading platforms and DEXes. Developers can integrate API end-points including information about users, chains, protocols and tokens in their programmes.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry\",\n    \"loadedTime\": \"2025-02-15T20:33:05.365Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/debugging-contracts-with-foundry\",\n    \"title\": \"Debugging Contracts with Foundry | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n   ",
    " \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Debugging Contracts with Foundry | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/NIMwPef4sJQdhALtKZET\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2Y3YmMzOWMtZWZiMS00ZDQx",
    "LTgyYTktODI3NjFiMzM1YjU2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=2OKhz3%2BFtuCWwncZfNv6Jiva%2BvZMY6VQlKzYyuzZJ41A9XPwG50P",
    "pPQixIMGjyJebqap72Op3l2yPRIAWmwWCBM4oBYTre1bencXpdgKt4rEQusDZkg6woPDcUO2WbNb6zsyMu%2FAsS%2FKJSmnAoEy\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221cd69a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Debugging Contracts with Foundry | Network\\nWhat is Foundry\\nFoundry is a Solidity Framework for building, testing, fuzzing, debugging and deploying Solidity smart contracts. It can manage dependencies, compile your project, run tests, deploy contracts, and lets you interact with the chain from the command-line and via Solidity scripts.Foundry comes with the following tools that can be used to debugging:\\nAnvil: Used to deploy a local Ethereum node\\nCast: Used ",
    "to send RPC calls and interact with the chain\\nForge: Used to build, compile, and test smart contracts\\nYou can install Foundry by running the following commands:\\nLinux/Mac:\\ncurl -L https://foundry.paradigm.xyz | bash foundryup\\nWindows: (Requires Rust, install from https://rustup.rs/)\\ncargo install --git https://github.com/foundry-rs/foundry --bins --locked\\nDocker:\\ndocker pull ghcr.io/foundry-rs/foundry:latest\\nAnvil\\nAnvil deploys a local Ethereum node in your environment that can be used to deploy a node. Simply run anvil to deploy one. \\nIt has a few useful properties. It allows you to fork a network at the latest, or any specific height. You can run the following command to fork the Mantle mainnet environment for debugging your code:\\nexport RPC_URL=\\\"https://rpc.mantle.xyz\\\" anvil --fork-url $RPC_URL\\nCall traces are more detailed, i.e., we can see which functions are being executed in remote contracts, i.e., the functions that executed by every contract.\\nNote that it isn't",
    " necessary to use an Anvil node to use Foundry. You can use other local nodes like Hardhat, Ganache, etc. as well.\\nCast\\nYou can use the following cast commands to interact with the chain.\\nThe examples below are based on Anvil. If you have Anvil up and running, try invoking the following cases in another command line window. This will allow you to debug online contracts using the mantle mainnet.\\ncast call / cast send\\ncast send can be used to sign and publish a transaction on the chain.You can use it make an arbitrary contract method call, like so:\\ncast send $contract_address \\\"someFunc(unit256)\\\" 0x... \\\\--private-key $wallet_private_key\\ncast call on the other hand can be used to perform an account call without publishing it to the chain, and that's why you don't need to specify a private key.So for instance, you can make a contract method call, like so:\\ncast call $contract_address \\\"someFunc(uint, args[])\\\" $number \\\"[arg_1, ... , arg_n]\\\"\\nexport WMNT=0x78c1b0C915c4FAA5FffA6CA",
    "bf0219DA63d7f4cb8 cast call $WMNT \\\"balanceOf(address)\\\" 0x1858d52cf57c07A018171D7a1E68DC081F17144f //0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d cast --to-dec 0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d //8234949754837270014026605\\ncast run\\ncast run can be used to run a published transaction in a local environment and print the trace. For example:\\ncast run $TX_HASH\\ncast run 0xf500a3c8e08960aa28ccdd557730087b1d9b618a42b9595c7800ceeff53dddaa\\nYou can also replay transactions in the debugger using the --debug flag, like so:\\ncast run --debug $TX_HASH\\nTaking this deposit transaction as an example:\\ncast run 0x16a3d14f54fc36097184b2b774b0d30e35e03e033805eb3180a0ee8d4c5427ef --debug\\nLearn more about the debugger interface here: https://book.getfoundry.sh/forge/debugger\\ncast block / cast tx\\ncast block can be used to fetch block information from the chain. Running cast block returns block info for the latest block.\\ncast tx can be used to f",
    "etch transaction information from the chain using the transaction hash. The command structure is as follows:\\ncast tx $TX_HASH\\ncast rpc\\ncast rpc can be used to send a raw JSON-RPC request to a node.Since Mantle Network supports Ethereum's JSON-RPC interface, you can use the following command to call eth_getBlockByNumber and fetch information for the latest block:\\ncast rpc --rpc-url https://rpc.mantle.xyz/ eth_getBlockByNumber \\\"latest\\\" \\\"false\\\"\\ncast storage & cast index\\ncast storage can be used to fetch the raw value of a contract's storage slot. cast-index can compute the storage slot location for an entry in a mapping.The cast index calculates the storage location based on the KEY_TYPE, KEY, and SLOT_NUMBER.For example, to fetch the value of slot 0 for a contract:\\ncast storage $contract_address 0\\nWe'll take the balance of account 0x1858d52cf57c07A018171D7a1E68DC081F17144f about $WMNT as an example, which can be obtained in two ways:\\nConventional function call method This ha",
    "s already been implemented in the aforementioned cast call.\\nReading contract slot storage method First, based on the WMNT source code, it's determined that the balanceOf state variable is located at the 0th slot with KEY_TYPE being 'address'.\\ncontract WMANTLE is ERC20 { constructor() ERC20(\\\"Wrapped Mantle\\\", \\\"WMNT\\\") {} event Deposit(address indexed dst, uint256 wad); event Withdrawal(address indexed src, uint256 wad); ... contract ERC20 is Context, IERC20, IERC20Metadata { mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; ...\\n＃ For KEY 0x1858d52cf57c07A018171D7a1E68DC081F17144f and slot 0, the corresponding storage location. cast index address 0x1858d52cf57c07A018171D7a1E68DC081F17144f 0 //0x2edcadc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b ＃ Retrieve the raw data from the corresponding storage location, converting from addre",
    "ss to integer, address=>int cast storage $WMNT 0x2edcadc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b 0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\ncast abi-decode / cast abi-encode\\ncast abi-decode can be used to decode any ABI-encoded data. For example, to decode the output data for a balanceOf call:\\ncast abi-decode \\\"balanceOf(address)(uint256)\\\" \\\\0x000000000000000000000000000000000000000000000000000000000000000a\\ncast abi-encode can be used to ABI encode any given function arguments, excluding the selector. For example, to ABI-encode the arguments for a function call:\\ncast abi-encode \\\"someFunc(address,uint256)\\\" 0x... 1\\nforge\\n5.1 Initialize the project.-forge init\\nforge init <dir_name>forge init —template <template_path> <dir_name>\\nView the current directory structure.\\n(base) ➜ tree -L 2 . └── hello_foundry ├── foundry.toml ├── lib ├── script ├── src └── test\\n5.2 forge build\\nThe corresponding compile command is\\ncd hello_foundry forge bu",
    "ild forge build -w\\nTypically, two panes are opened in tmux. The first pane is used to view real-time coding status, monitoring in real-time with the -w option. In the second pane, code is written. After each code modification, once saved, the first pane will display in real-time whether the compilation has passed.\\n5.3 Automated testing-forge test\\n# You can print logs using the -v level, -vv level, and -vvv level. forge test -v /-vv / -vvv ＃ Use -w for watch mode. forge test -v /-vv / -vvv -w\\nFor more detailed procedures on testing, please refer to. https://book.getfoundry.sh/reference/forge/forge-test\\nForge debug\\nForge ships with an interactive debugger.\\nforge debug --debug $FILE --sig $FUNC\\nIn the newly initialized project, we can enter the following command to enable the interactive debugger.\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5\\nIf you want to debug on the forked mainnet, you can enter the following command.\\nforge debug --debug Counter --sig \\\"setNumb",
    "er(uint256)\\\" 5 -f http://127.0.0.1:8545\\nor\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5 --fork-url https://rpc.mantle.xyz\\nbreakpoint\\nPlaces a breakpoint to jump to in the debugger view.Calling vm.breakpoint('<char>, true) is equivalent to vm.breakpoint('<char>), but calling vm.breakpoint('<char, false) will erase the breakpoint at '<char.If the char is overwritten, only the last one that was visited in the execution steps is considered.\\nExample\\nfunction testBreakpoint() public { vm.breakpoint(\\\"a\\\"); }\\nOpening up the debugger in a test environment and pressing 'a will then place the debugger step at the place where the breakpoint cheatcode was called.\\nBy integrating Anvil and Cast, you can fork and test by interacting with contracts on the live network.\",\n  \"markdown\": \"# Debugging Contracts with Foundry | Network\\n\\n### \\n\\nWhat is Foundry\\n\\nFoundry is a Solidity Framework for building, testing, fuzzing, debugging and deploying Solidity smart contracts. It can ",
    "manage dependencies, compile your project, run tests, deploy contracts, and lets you interact with the chain from the command-line and via Solidity scripts.Foundry comes with the following tools that can be used to debugging:\\n\\n*   Anvil: Used to deploy a local Ethereum node\\n    \\n*   Cast: Used to send RPC calls and interact with the chain\\n    \\n*   Forge: Used to build, compile, and test smart contracts\\n    \\n\\nYou can install Foundry by running the following commands:\\n\\n**Linux/Mac**:\\n\\n```\\ncurl -L https://foundry.paradigm.xyz | bash\\nfoundryup\\n```\\n\\n**Windows**: (Requires Rust, install from [https://rustup.rs/](https://rustup.rs/))\\n\\n```\\ncargo install --git https://github.com/foundry-rs/foundry --bins --locked\\n```\\n\\n**Docker**:\\n\\n```\\ndocker pull ghcr.io/foundry-rs/foundry:latest\\n```\\n\\n#### \\n\\nAnvil\\n\\nAnvil deploys a local Ethereum node in your environment that can be used to deploy a node. Simply run anvil to deploy one.\\n\\nIt has a few useful properties. It allo",
    "ws you to fork a network at the latest, or any specific height. You can run the following command to fork the Mantle mainnet environment for debugging your code:\\n\\n```\\nexport RPC_URL=\\\"https://rpc.mantle.xyz\\\"\\nanvil --fork-url $RPC_URL\\n```\\n\\nCall traces are more detailed, i.e., we can see which functions are being executed in remote contracts, i.e., the functions that executed by every contract.\\n\\nNote that it isn't necessary to use an Anvil node to use Foundry. You can use other local nodes like Hardhat, Ganache, etc. as well.\\n\\n#### \\n\\nCast\\n\\nYou can use the following cast commands to interact with the chain.\\n\\nThe examples below are based on Anvil. If you have Anvil up and running, try invoking the following cases in another command line window. This will allow you to debug online contracts using the mantle mainnet.\\n\\n**cast call / cast send**\\n\\n[cast send](https://book.getfoundry.sh/reference/cast/cast-send) can be used to sign and publish a transaction on the chain.You",
    " can use it make an arbitrary contract method call, like so:\\n\\n> cast send $contract\\\\_address \\\"someFunc(unit256)\\\" 0x... \\\\\\\\--private-key $wallet\\\\_private\\\\_key\\n\\n[cast call](https://book.getfoundry.sh/reference/cast/cast-call) on the other hand can be used to perform an account call without publishing it to the chain, and that's why you don't need to specify a private key.So for instance, you can make a contract method call, like so:\\n\\n> cast call $contract\\\\_address \\\"someFunc(uint, args\\\\[\\\\])\\\" $number \\\"\\\\[arg\\\\_1, ... , arg\\\\_n\\\\]\\\"\\n\\n```\\nexport WMNT=0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8\\ncast call $WMNT \\\"balanceOf(address)\\\" 0x1858d52cf57c07A018171D7a1E68DC081F17144f\\n//0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\ncast --to-dec 0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\n//8234949754837270014026605\\n```\\n\\n**cast run**\\n\\n[cast run](https://book.getfoundry.sh/reference/cast/cast-run) can be used to run a published tra",
    "nsaction in a local environment and print the trace. For example:\\n\\n> cast run $TX\\\\_HASH\\n\\n```\\ncast run 0xf500a3c8e08960aa28ccdd557730087b1d9b618a42b9595c7800ceeff53dddaa\\n```\\n\\nYou can also replay transactions in the debugger using the `--debug` flag, like so:\\n\\n> cast run --debug $TX\\\\_HASH\\n\\nTaking this deposit transaction as an example:\\n\\n```\\ncast run 0x16a3d14f54fc36097184b2b774b0d30e35e03e033805eb3180a0ee8d4c5427ef --debug\\n```\\n\\nLearn more about the debugger interface here: [https://book.getfoundry.sh/forge/debugger](https://book.getfoundry.sh/forge/debugger)\\n\\n**cast block / cast tx**\\n\\n[`cast block`](https://book.getfoundry.sh/reference/cast/cast-block) can be used to fetch block information from the chain. Running `cast block` returns block info for the latest block.\\n\\n[`cast tx`](https://book.getfoundry.sh/reference/cast/cast-tx) can be used to fetch transaction information from the chain using the transaction hash. The command structure is as follows:\\n\\n> cast",
    " tx $TX\\\\_HASH\\n\\n**cast rpc**\\n\\n[`cast rpc`](https://book.getfoundry.sh/reference/cast/cast-rpc) can be used to send a raw JSON-RPC request to a node.Since Mantle Network supports Ethereum's JSON-RPC interface, you can use the following command to call `eth_getBlockByNumber` and fetch information for the latest block:\\n\\n> cast rpc --rpc-url https://rpc.mantle.xyz/ eth\\\\_getBlockByNumber \\\"latest\\\" \\\"false\\\"\\n\\n#### \\n\\ncast storage & cast index\\n\\n[`cast storage`](https://book.getfoundry.sh/reference/cast/cast-storage) can be used to fetch the raw value of a contract's storage slot. cast-index can compute the storage slot location for an entry in a mapping.The cast index calculates the storage location based on the KEY\\\\_TYPE, KEY, and SLOT\\\\_NUMBER.For example, to fetch the value of slot 0 for a contract:\\n\\n> cast storage $contract\\\\_address 0\\n\\nWe'll take the balance of account 0x1858d52cf57c07A018171D7a1E68DC081F17144f about $WMNT as an example, which can be obtained in two way",
    "s:\\n\\n*   **Conventional function call method** This has already been implemented in the aforementioned cast call.\\n    \\n*   **Reading contract slot storage method** First, based on the WMNT source code, it's determined that the balanceOf state variable is located at the 0th slot with KEY\\\\_TYPE being 'address'.\\n    \\n\\n```\\ncontract WMANTLE is ERC20  {\\n    constructor() ERC20(\\\"Wrapped Mantle\\\", \\\"WMNT\\\") {}\\n    event  Deposit(address indexed dst, uint256 wad);\\n    event  Withdrawal(address indexed src, uint256 wad);\\n...\\n\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n...\\n```\\n\\n```\\n＃ For KEY 0x1858d52cf57c07A018171D7a1E68DC081F17144f and slot 0, the corresponding storage location.\\ncast index address 0x1858d52cf57c07A018171D7a1E68DC081F17144f 0\\n//0x2edca",
    "dc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b\\n\\n＃　Retrieve the raw data from the corresponding storage location, converting from address to integer, address=>int\\ncast storage $WMNT 0x2edcadc9f197c279f92ccdbf8b108a59937d545e881935fccd2cb58923bc739b\\n0x00000000000000000000000000000000000000000006cfd1854e3ec57a5d636d\\n```\\n\\n**cast abi-decode / cast abi-encode**\\n\\n[`cast abi-decode`](https://book.getfoundry.sh/reference/cast/cast-abi-decode) can be used to decode any ABI-encoded data. For example, to decode the output data for a `balanceOf` call:\\n\\n> cast abi-decode \\\"balanceOf(address)(uint256)\\\" \\\\\\\\0x000000000000000000000000000000000000000000000000000000000000000a\\n\\n[`cast abi-encode`](https://book.getfoundry.sh/reference/cast/cast-abi-encode) can be used to ABI encode any given function arguments, excluding the selector. For example, to ABI-encode the arguments for a function call:\\n\\n> cast abi-encode \\\"someFunc(address,uint256)\\\" 0x... 1\\n\\n### \\n\\nforge\\n\\n#### \\",
    "n\\n5.1 Initialize the project.**\\\\-forge init**\\n\\n> forge init <dir\\\\_name>forge init —template <template\\\\_path> <dir\\\\_name>\\n\\nView the current directory structure.\\n\\n```\\n(base) ➜ tree -L 2\\n.\\n└── hello_foundry\\n    ├── foundry.toml\\n    ├── lib\\n    ├── script\\n    ├── src\\n    └── test\\n```\\n\\n#### \\n\\n5.2 **forge build**\\n\\nThe corresponding compile command is\\n\\n```\\ncd hello_foundry\\nforge build\\nforge build -w\\n```\\n\\nTypically, two panes are opened in tmux. The first pane is used to view real-time coding status, monitoring in real-time with the `-w` option. In the second pane, code is written. After each code modification, once saved, the first pane will display in real-time whether the compilation has passed.\\n\\n#### \\n\\n5.3 Automated testing**\\\\-forge test**\\n\\n```\\n# You can print logs using the -v level, -vv level, and -vvv level.\\nforge test -v /-vv / -vvv\\n\\n＃ Use -w for watch mode.\\nforge test -v /-vv / -vvv　-w\\n```\\n\\nFor more detailed procedures on testing, pleas",
    "e refer to. [https://book.getfoundry.sh/reference/forge/forge-test](https://book.getfoundry.sh/reference/forge/forge-test)\\n\\n#### \\n\\nForge debug\\n\\nForge ships with an interactive debugger.\\n\\n> forge debug --debug $FILE --sig $FUNC\\n\\nIn the newly initialized project, we can enter the following command to enable the interactive debugger.\\n\\n```\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5\\n```\\n\\nIf you want to debug on the forked mainnet, you can enter the following command.\\n\\n```\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5 -f http://127.0.0.1:8545\\n```\\n\\nor\\n\\n```\\nforge debug --debug Counter --sig \\\"setNumber(uint256)\\\" 5 --fork-url https://rpc.mantle.xyz\\n```\\n\\n**breakpoint**\\n\\nPlaces a breakpoint to jump to in the debugger view.Calling `vm.breakpoint('<char>, true)` is equivalent to `vm.breakpoint('<char>)`, but calling `vm.breakpoint('<char, false)` will erase the breakpoint at `'<char`.If the char is overwritten, only the last one that was v",
    "isited in the execution steps is considered.\\n\\n#### \\n\\nExample\\n\\n```\\nfunction testBreakpoint() public {\\n    vm.breakpoint(\\\"a\\\");\\n}\\n```\\n\\nOpening up the debugger in a test environment and pressing `'a` will then place the debugger step at the place where the breakpoint cheatcode was called.\\n\\nBy integrating Anvil and Cast, you can fork and test by interacting with contracts on the live network.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle\",\n    \"loadedTime\": \"2025-02-15T20:33:05.162Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle\",\n    \"title\": \"Developing on Mantle | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"key",
    "words\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Developing on Mantle | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/PIhaIiuLMKRHx68ohhb1\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' ",
    "'nonce-YzNjNDdiOTYtZjBhMC00ODNlLTljMDEtMmYwYjIzNzZiNTIw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=LlEKqm3qiJGZbyiSXWB8qTr7R",
    "%2F1TyFS4Z94J88Pyb2DvkYmyAJKCUUFwUFwI%2B4pjpbRkBEY6xnQ%2FsbcaVXC75gp7%2Fj%2BQANqkjR25kzoxn0QQw3tWADCwGnNORlmTrPS2Ihk2S%2BNKIYKFfb81651T\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128122278d905dd-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Developing on Mantle | Network\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nCheck out our repository of Mantle-specific tutorials on the Mantle GitHub!\\nNetwork Details\\nwss://ws.testnet.mantle.xyz\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise ",
    "due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: Node RPC Providers\\nContract Addresses\\nThe most updated list of addresses of the contracts deployed on Ethereum and Mantle Network are available on Github. Follow the links below to navigate to the respective address repos.\\nPlease note that there are some common ERC20 contract operations currently inactive for the native $MNT token, namely:\\ntransfer()\\napprove()\\ntransferFrom()\\nincreaseAllowance()\\ndecreaseAllowance()\\nIf your dApps use any of the above operations, we recommend using the wrapped token $WMNT instead. The L2 Mainnet contract address for $WMNT is 0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8 \\nConnecting to Mantle Testnet\\nUse the info listed in the Network Details table above to connect your wallets and apps to Mantle testnet.\\nTest $MNT Faucets\\nThe official Mantle Network faucet is deployed on Goerli, and so you'll need to b",
    "ridge the minted $MNT if you want to use it on L2. Also, make sure you have sufficient test Goerli $ETH in your wallet before minting tokens. You can use the Paradigm or Alchemy faucet to acquire test $ETH on Goerli.\\nGitHub\\nOur GitHub is a good place to familiarize yourself with the Mantle tech stack and find tools and usage examples for reference that'll help you set up a local development environment, integrate our SDK, invoke node RPC endpoints, and more.\\nTooling Quick Access\\nFind the complete list of tools that will help you develop and deploy your dApps on Mantle Network here: Resources and Tooling\\nChain Data and Monitoring\\nAxelar integration: Axelar\\nMantle SDK\\nYou can learn more about the Mantle SDK in Mantle Client SDK. The SDK provides support for the following:\\nInter-network message-passing\\nToken deposit and withdrawal between Layer 1 (L1) and Layer 2 (L2) networks\\nCreation of ERC-20 tokens on L2 mapping to L1 token\\nMonitoring of contract calls, emit messages, etc.",
    "\\nBy combining SDK modules, Mantle network can be easily connected to wallets, exchanges, and other application scenarios. Use the link below to navigate to our SDK docs.\\nThirdweb SDK\\nThe thirdweb web3 development framework supports deploying apps to Mantle Network. Learn more about how to use the thirdweb CLI to deploy contracts, and the thirdweb SDK to build your applications connecting to Mantle Network on the Thirdweb SDK page.\\nUsing Mantle Node API\\ndApps need access to nodes to fetch block data and send transactions. Mantle network supports Ethereum's JSON-RPC API implementation with some added custom methods and can be connected to using HTTPS and WebSocket. Find out more on the Mantle Node API page.\\nTutorials\\nInter-layer Message Passing\\nGraph Node\\nQuery subgraph using name\\nOpcode Differences Between EVM and Mantle VM\\n0x40 range - ‘BASEFEE’\\nIntroduced in EIP1559\\n// 0x40 range - block operations. \\nconst ( \\nBLOCKHASH OpCode = 0x40 \\nCOINBASE OpCode = 0x41 \\nTIMESTAMP ",
    "OpCode = 0x42 \\nNUMBER OpCode = 0x43 \\nDIFFICULTY OpCode = 0x44 \\nRANDOM OpCode = 0x44 // Same as DIFFICULTY \\nGASLIMIT OpCode = 0x45 \\nCHAINID OpCode = 0x46 \\nSELFBALANCE OpCode = 0x47 \\nBASEFEE OpCode = 0x48 \\n)\\nconst ( \\nBLOCKHASH OpCode = 0x40 + iota\\nCOINBASE \\nTIMESTAMP \\nNUMBER \\nDIFFICULTY \\nGASLIMIT \\nCHAINID = 0x46 \\nSELFBALANCE = 0x47\\nL1BLOCKNUMBER = 0x4B \\n)\\n0x50 range - ‘PUSH0’\\nIntroduced in EIP3855\\n// 0x50 range - 'storage' and execution.\\nconst ( \\nPOP OpCode = 0x50 \\nMLOAD OpCode = 0x51 \\nMSTORE OpCode = 0x52 \\nMSTORE8 OpCode = 0x53 \\nSLOAD OpCode = 0x54 \\nSSTORE OpCode = 0x55 \\nJUMP OpCode = 0x56 \\nJUMPI OpCode = 0x57 \\nPC OpCode = 0x58 \\nMSIZE OpCode = 0x59\\nGAS OpCode = 0x5a \\nJUMPDEST OpCode = 0x5b \\nPUSH0 OpCode = 0x5f \\n)\\n// 0x50 range - 'storage' and execution. const ( \\nPOP OpCode = 0x50 + iota \\nMLOAD \\nMSTORE \\nMSTORE8 \\nSLOAD \\nSSTORE \\nJUMP \\nJUMPI \\nPC \\nMSIZE \\nGAS \\nJUMPDEST \\n)\\n0xf0 range - ‘INVALID’\\nIntroduced in EIP141\\n// 0xf0 range - closures",
    ". \\nconst ( \\nCREATE OpCode = 0xf0 \\nCALL OpCode = 0xf1 \\nCALLCODE OpCode = 0xf2 \\nRETURN OpCode = 0xf3 \\nDELEGATECALL OpCode = 0xf4\\nCREATE2 OpCode = 0xf5\\nSTATICCALL OpCode = 0xfa \\nREVERT OpCode = 0xfd \\nINVALID OpCode = 0xfe \\nSELFDESTRUCT OpCode = 0xff \\n)\\n// 0xf0 range - closures. \\nconst ( \\nCREATE OpCode = 0xf0 + iota \\nCALL \\nCALLCODE \\nRETURN \\nDELEGATECALL \\nCREATE2 \\nSTATICCALL = 0xfa\\nREVERT = 0xfd \\nSELFDESTRUCT = 0xff \\n)\\nTroubleshooting\\nFollow the link below to see solutions and fixes for issues that hackers commonly encounter.\\nTroubleshooting\\nSupport\\nIf you’re a partner - Please get in touch with us by tagging any relevant team members in \\\"Mantle <> your org’s\\\" telegram chat\\nIf you’re a hacker building on Mantle Network - Please reach out to us via our official Discord channel or Mantle Devs telegram channel\\nIf you’re a developer just trying out the network - Please reach out to us via Discord in the #dev-discussions channel, or raise a ticket for fast respon",
    "se\\nLast updated 11 months ago\",\n  \"markdown\": \"# Developing on Mantle | Network\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nCheck out our repository of Mantle-specific tutorials on the [Mantle GitHub](https://github.com/mantlenetworkio/mantle-tutorial/)!\\n\\n## \\n\\nNetwork Details\\n\\nwss://ws.testnet.mantle.xyz\\n\\nThe official Mantle RPC employs rate limiting to ensure stability during traffic spikes. If your particular use case involves calling the Mantle API frequently, you might run into issues that arise due to rate limiting. For such use cases, consider connecting to third-party RPCs instead. You can find the list of available RPC providers here: [Node RPC Providers](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/node-rpc-providers)\\n\\n## \\n\\nContract Addresses\\n\\nThe most updated list of addresses of the contracts deployed on Ethereum and Mantle Network are available on Github. Follow the",
    " links below to navigate to the respective address repos.\\n\\nPlease note that there are some common ERC20 contract operations currently inactive for the native $MNT token, namely:\\n\\n*   `transfer()`\\n    \\n*   `approve()`\\n    \\n*   `transferFrom()`\\n    \\n*   `increaseAllowance()`\\n    \\n*   `decreaseAllowance()`\\n    \\n\\nIf your dApps use any of the above operations, we recommend using the wrapped token $WMNT instead. The L2 Mainnet contract address for $WMNT is [`0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8`](https://explorer.mantle.xyz/address/0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8)\\n\\n## \\n\\nConnecting to Mantle Testnet\\n\\nUse the info listed in the [Network Details](https://docs.mantle.xyz/network/network/for-devs/developing-on-mantle#network-details) table above to connect your wallets and apps to Mantle testnet.\\n\\n## \\n\\n**Test $MNT Faucets**\\n\\nThe official Mantle Network faucet is deployed on **Goerli**, and so you'll need to [bridge](https://bridge.testnet.mantle.xyz/) t",
    "he minted $MNT if you want to use it on L2. Also, make sure you have sufficient test Goerli $ETH in your wallet before minting tokens. You can use the [Paradigm](https://faucet.paradigm.xyz/) or [Alchemy](https://goerlifaucet.com/) faucet to acquire test $ETH on Goerli.\\n\\n## \\n\\nGitHub\\n\\nOur [GitHub](https://github.com/mantlenetworkio/mantle) is a good place to familiarize yourself with the Mantle tech stack and find tools and usage examples for reference that'll help you set up a local development environment, integrate our SDK, invoke node RPC endpoints, and more.\\n\\n## \\n\\nTooling Quick Access\\n\\nFind the complete list of tools that will help you develop and deploy your dApps on Mantle Network here: [Resources and Tooling](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling)\\n\\n**Chain Data and Monitoring**\\n\\n*   Axelar integration: [Axelar](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/cross-chain-messaging#axelar)\\n    \\n\\n## \\n\\n**Ma",
    "ntle SDK**\\n\\nYou can learn more about the Mantle SDK in [Mantle Client SDK](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-client-sdk). The SDK provides support for the following:\\n\\n*   Inter-network message-passing\\n    \\n*   Token deposit and withdrawal between Layer 1 (L1) and Layer 2 (L2) networks\\n    \\n*   Creation of ERC-20 tokens on L2 mapping to L1 token\\n    \\n*   Monitoring of contract calls, emit messages, etc.\\n    \\n\\nBy combining SDK modules, Mantle network can be easily connected to wallets, exchanges, and other application scenarios. Use the link below to navigate to our SDK docs.\\n\\n## \\n\\nThirdweb SDK\\n\\nThe [thirdweb](https://portal.thirdweb.com/sdk) web3 development framework supports deploying apps to Mantle Network. Learn more about how to use the thirdweb CLI to deploy contracts, and the thirdweb SDK to build your applications connecting to Mantle Network on the [Thirdweb SDK](https://docs.mantle.xyz/network/network/for-devs/reso",
    "urces-and-tooling/thirdweb-sdk) page.\\n\\n## \\n\\nUsing Mantle Node API\\n\\ndApps need access to nodes to fetch block data and send transactions. Mantle network supports Ethereum's JSON-RPC API implementation with some added custom methods and can be connected to using HTTPS and WebSocket. Find out more on the [Mantle Node API](https://docs.mantle.xyz/network/network/for-devs/resources-and-tooling/mantle-node-api) page.\\n\\n## \\n\\nTutorials\\n\\n**Inter-layer Message Passing**\\n\\n## \\n\\nGraph Node\\n\\nQuery subgraph using name\\n\\n## \\n\\nOpcode Differences Between EVM and Mantle VM\\n\\n### \\n\\n0x40 range - ‘`BASEFEE`’\\n\\nIntroduced in [EIP1559](https://eips.ethereum.org/EIPS/eip-1559)\\n\\n// 0x40 range - block operations.\\n\\nconst (\\n\\nBLOCKHASH OpCode = 0x40\\n\\nCOINBASE OpCode = 0x41\\n\\nTIMESTAMP OpCode = 0x42\\n\\nNUMBER OpCode = 0x43\\n\\nDIFFICULTY OpCode = 0x44\\n\\nRANDOM OpCode = 0x44 // Same as DIFFICULTY\\n\\nGASLIMIT OpCode = 0x45\\n\\nCHAINID OpCode = 0x46\\n\\nSELFBALANCE OpCode = 0x47\\n\\nBASEFE",
    "E OpCode = 0x48\\n\\n)\\n\\nconst (\\n\\nBLOCKHASH OpCode = 0x40 + iota\\n\\nCOINBASE\\n\\nTIMESTAMP\\n\\nNUMBER\\n\\nDIFFICULTY\\n\\nGASLIMIT\\n\\nCHAINID = 0x46\\n\\nSELFBALANCE = 0x47\\n\\nL1BLOCKNUMBER = 0x4B\\n\\n)\\n\\n### \\n\\n0x50 range - ‘`PUSH0`’\\n\\nIntroduced in [EIP3855](https://eips.ethereum.org/EIPS/eip-3855)\\n\\n// 0x50 range - 'storage' and execution.\\n\\nconst (\\n\\nPOP OpCode = 0x50\\n\\nMLOAD OpCode = 0x51\\n\\nMSTORE OpCode = 0x52\\n\\nMSTORE8 OpCode = 0x53\\n\\nSLOAD OpCode = 0x54\\n\\nSSTORE OpCode = 0x55\\n\\nJUMP OpCode = 0x56\\n\\nJUMPI OpCode = 0x57\\n\\nPC OpCode = 0x58\\n\\nMSIZE OpCode = 0x59\\n\\nGAS OpCode = 0x5a\\n\\nJUMPDEST OpCode = 0x5b\\n\\nPUSH0 OpCode = 0x5f\\n\\n)\\n\\n// 0x50 range - 'storage' and execution. const (\\n\\nPOP OpCode = 0x50 + iota\\n\\nMLOAD\\n\\nMSTORE\\n\\nMSTORE8\\n\\nSLOAD\\n\\nSSTORE\\n\\nJUMP\\n\\nJUMPI\\n\\nPC\\n\\nMSIZE\\n\\nGAS\\n\\nJUMPDEST\\n\\n)\\n\\n### \\n\\n0xf0 range - ‘`INVALID`’\\n\\nIntroduced in [EIP141](https://eips.ethereum.org/EIPS/eip-141)\\n\\n// 0xf0 range - closures.\\n\\nconst (\\n\\nCREATE OpCode ",
    "= 0xf0\\n\\nCALL OpCode = 0xf1\\n\\nCALLCODE OpCode = 0xf2\\n\\nRETURN OpCode = 0xf3\\n\\nDELEGATECALL OpCode = 0xf4\\n\\nCREATE2 OpCode = 0xf5\\n\\nSTATICCALL OpCode = 0xfa\\n\\nREVERT OpCode = 0xfd\\n\\nINVALID OpCode = 0xfe\\n\\nSELFDESTRUCT OpCode = 0xff\\n\\n)\\n\\n// 0xf0 range - closures.\\n\\nconst (\\n\\nCREATE OpCode = 0xf0 + iota\\n\\nCALL\\n\\nCALLCODE\\n\\nRETURN\\n\\nDELEGATECALL\\n\\nCREATE2\\n\\nSTATICCALL = 0xfa\\n\\nREVERT = 0xfd\\n\\nSELFDESTRUCT = 0xff\\n\\n)\\n\\n## \\n\\nTroubleshooting\\n\\nFollow the link below to see solutions and fixes for issues that hackers commonly encounter.\\n\\n[Troubleshooting](https://docs.mantle.xyz/network/network/for-devs/troubleshooting)\\n\\n## \\n\\nSupport\\n\\n*   If you’re a partner - Please get in touch with us by tagging any relevant team members in **\\\"Mantle <> your org’s\\\"** telegram chat\\n    \\n*   If you’re a hacker building on Mantle Network - Please reach out to us via our official Discord channel or Mantle Devs telegram channel\\n    \\n*   If you’re a developer just trying o",
    "ut the network - Please reach out to us via Discord in the **#dev-discussions** channel, or raise a ticket for fast response\\n    \\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0\",\n    \"loadedTime\": \"2025-02-15T20:33:05.256Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-validators/network-updates/testnet-v0.4.0\",\n    \"title\": \"Testnet v0.4.0 | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Testnet v0.4.0 | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"c",
    "ontent\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/AwK0UfcCfAiIRVraawqk\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-YzEzYWZhOTUtODEwNy00NzNkLTg4YjktYjRhZGQzNWFkZjgx' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https:",
    "//static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=VcLgyfUpDUpiKCgVYzErULGWBgNfOQ8Xn3LrTQAXUjRCpIBa3vqEKLnIHNfIHlfnqQJlmb%2FM6Sy9BoW4FEY3jllxMCaQdFgAGrW2gHu3Mecy7DbDwyNyGu7TmlRF0arkdaGQXF%2BqJaKBpKpXSk22\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"no",
    "sniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221ebd8c55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Testnet v0.4.0 | Network\\nThis network update brings about the following changes:\\nRebranding of the native $BIT token to $MNT\\nAdds fraud proof features\\nEnables delegation for fraud proof and TSS modules\\nOpens up the Mantle DA network for external parties\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\nGitHub Links\\nInstructions for Node Operators\\nThe testnet update is planned to go online at block height 11,000,000. Node operators need to update their node software before that block height to avoid unexpected node behavior.\\nYou can updat",
    "e your node version to v0.4.0 using Docker. The image tags are as follows:\\nFor L2 nodes - l2geth:v0.4.0-1\\nFor DTL service - dtl:v0.4.0\\nYou can also find the updated Docker images here:\\nIf your node continues to sync normally after the node version update, you're good to go! Please get in touch with us if you encounter any issues during the process.\",\n  \"markdown\": \"# Testnet v0.4.0 | Network\\n\\nThis network update brings about the following changes:\\n\\n*   Rebranding of the native $BIT token to $MNT\\n    \\n*   Adds fraud proof features\\n    \\n*   Enables delegation for fraud proof and TSS modules\\n    \\n*   Opens up the Mantle DA network for external parties\\n    \\n\\nFor more details on how the aforementioned features were included to the codebase, follow the links below to navigate to the Mantle GitHub repo.\\n\\n#### \\n\\nGitHub Links\\n\\n## \\n\\nInstructions for Node Operators\\n\\nThe testnet update is planned to go online at block height **11,000,000.** Node operators need to update ",
    "their node software before that block height to avoid unexpected node behavior.\\n\\nYou can update your node version to v0.4.0 using Docker. The image tags are as follows:\\n\\n*   **For L2 nodes** - `l2geth:v0.4.0-1`\\n    \\n*   **For DTL service** - `dtl:v0.4.0`\\n    \\n\\nYou can also find the updated Docker images here:\\n\\nIf your node continues to sync normally after the node version update, you're good to go! Please [get in touch with us](https://discord.com/invite/0xMantle) if you encounter any issues during the process.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/verifying-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/verifying-contracts\",\n    \"loadedTime\": \"2025-02-15T20:33:04.745Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/n",
    "etwork/for-devs/tutorials/verifying-contracts\",\n    \"title\": \"Verifying Contracts | Network\",\n    \"description\": \"Different ways to verify your contracts on Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Verifying Contracts | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Different ways to verify your contracts on Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/nsHkF0YYRFgCx0RCBugp\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\",
    "\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NWNiZDIwNjYtZTM5NC00OTgzLWE1ZTMtOTExYzQ0MjliYzc2' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; ",
    "form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=A2XmtKARiWY7kM7JU26IGBvJZHa98JDeCarfZnBA6zhYd%2FK8bMGnyQn6C3RBGsdHNVaqy5ax7pXdRewfft%2BRPGo6xKhg7ml1fp3LSMndSOt3wdfVrwxM3b864F77aV6a8ErZUPX%2F3QAZZYpPCWmr\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221891982e0-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Verifying Contracts | Network\\nDifferent ways to verify your contracts on Mantle Network\\nVerifying a",
    " contract means making its source code public, along with the compiler settings you used, which allows anyone to compile it and compare the generated bytecode with the one that is deployed on-chain.\\nUsing Hardhat\\nTo verify your contracts using Hardhat, you'll need an Etherscan API key and custom network configuration in your hardhat.config.ts file. Feel free to refer to the configuration from Mantle Hardhat Starter Kit.\\nYou'll need to modify the hardhat.config.ts configuration to include customChains before moving forward.\\nconst config: HardhatUserConfig = { solidity: \\\"0.8.19\\\", // solidity version defaultNetwork: \\\"mantleTest\\\", networks: { mantle: { url: \\\"https://rpc.mantle.xyz\\\", //mainnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''], }, mantleTest: { url: \\\"https://rpc.testnet.mantle.xyz\\\", // testnet accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''] } }, etherscan: { apiKey: process.env.API_KEY, customChains: [ { network: \\\"mantleTest\\\", chainId: 5001, urls: { apiURL: \\",
    "\"https://explorer.testnet.mantle.xyz/api\\\", browserURL: \\\"https://explorer.testnet.mantle.xyz\\\" } } ] }, };\\nRun the following command to verify the contract located in the \\\"contracts\\\" directory:\\nnpx hardhat verify --network <network> DEPLOYED_CONTRACT_ADDRESS \\\"Constructor arguments\\\"\\nHere's a sample request and the command line output it produces:\\nnpx hardhat verify --network mantleTest 0x4ECd62E55... Successfully submitted source code for contract contracts/Storage.sol:Storage at 0x4ECd62E55... for verification on the block explorer. Waiting for verification result... Successfully verified contract Storage on the block explorer. https://explorer.testnet.mantle.xyz/address/0x4ECd62E554dF15d3E9A69b97A127A89155E84E18#code\\nIf you see an error that says \\\"Hardhat found multiple contracts in the project...\\\", see the fix on the troubleshooting page.\\nUsing Foundry\\nUse the following forge command to verify the contract you've deployed on Mantle Testnet:\\nforge verify-contract --veri",
    "fier blockscout --watch \\\\ --verifier-url \\\"https://explorer.testnet.mantle.xyz/api?module=contract&action=verify\\\" \\\\ --compiler-version \\\"v0.8.19+commit.7dd6d404\\\" \\\\ --num-of-optimizations 200 \\\\ --constructor-args $(cast abi-encode <constructor> <param>) --chain 5001 \\\\ <your contract address> <path>:<contract>\\nUsing Remix IDE\\nStart by installing and activating the \\\"Etherscan - Contract Verification\\\" plugin in your Remix IDE from the plugin manager that can be accessed by clicking the icon\\nOnce activated, you can access the plugin by clicking on the icon. Enter your Etherscan API key and save the setting\\nSelect the \\\"Injected Provider - MetaMask\\\" environment to connect to Mantle Testnet under the \\\"Deploy and Run Transactions\\\" tab\\nNow navigate to the \\\"Etherscan - Contract Verification\\\" tab, select the contract you want to verify, and enter the constructor parameters (in hexadecimal), and the contract address. Then click the button\\nObtaining Constructor Parameters\\nConsi",
    "der the following sample contract code:\\n// SPDX-License-Identifier: GPL-3.0 pragma solidity >=0.7.0 <0.9.0; contract Name { constructor(string memory name) {} }\\nIn order to obtain the hex encoded constructor parameters, first you'll need to compile your code. Then, navigate to the \\\"Deploy and Run Transactions\\\" tab, enter the string parameter in the field next to the \\\"Deploy\\\" button, and then bring up the drop-down menu. \\nClick on the button to copy the hex encoded parameter value, and continue with the verification process.\\nUsing Explorer\\nThere are multiple methods of verification available via Mantle Explorer. \\nLet's go over the steps involved in using the most popular methods.\\nVia Flattened Source Code\\nYou can use Remix, or any other tool, to flatten your contract code.\\nFlatten Using Remix\\nIn Remix, right click on the contract file and click on \\\"Flatten\\\".\\nFlattening a contract with imports will generate a new Solidity file with the flattened code that you can copy, a",
    "s shown below.\\nFlatten Using Hardhat\\nIf you're using Hardhat to flatten your contract, you can use the following command:\\nnpx hardhat flatten contracts/Airdrop.sol > asAirdropFlatten.sol\\nYou can copy the flattened contract code from the newly generated file.\\nFlatten Using Foundry\\nIf you're using Foundry to flatten your contract, you can use the following command:\\nforge flatten --output src/Storage.flattened.sol src/Storage.sol\\nYou can copy the flattened contract code from the newly generated file.\\nPlugging Flattened Code Into Explorer\\nOnce you have obtained the flattened code, fill in the contract address, contract name, the flattened code, and other fields on Mantle Explorer and proceed with verifying your contract.\\nMake sure to select the correct EVM version\\nVia Standard Input JSON\\nYou can obtain the standard input JSON file by compiling your contract using any of the tools we've used so far. Let's see where the input value code can be found in each case.\\nCompiled Using",
    " Remix\\nThe file can be found under the \\\"Solidity Compiler\\\" tab that can be accessed by clicking on the button. Click on the button to bring up a menu from where you can copy the \\\"COMPILERINPUT\\\" code, as shown below.\\nYou can paste and save the copied JSON code in a separate file that can later be imported to the Explorer.\\nCompiled Using Hardhat\\nOnce you've successfully compiled your contract code, you'll be able to find a JSON file (with a long name in hexadecimal) in the \\\"../artifacts/build-info\\\" directory, as shown below. \\nWithin this JSON file, you'll need to copy the input field, as shown below, and then paste the copied code into a new empty JSON file. You can import this file to the Explorer later.\\nCompiled Using Foundry\\nWith Foundry, you'll need to run the following command to obtain the input and output information for your contract code.\\nYou'll then be able to find a JSON file (with a long name in hexadecimal) in the \\\"../out/build-info\\\" directory, as shown below",
    ". Copy the input field and paste it in a new empty JSON file, which you can then import to the Explorer.\\nImporting JSON File to Explorer\\nOnce you've obtained the standard input JSON values in a file, you can import it to the Explorer, as shown below.\",\n  \"markdown\": \"# Verifying Contracts | Network\\n\\nDifferent ways to verify your contracts on Mantle Network\\n\\nVerifying a contract means making its source code public, along with the compiler settings you used, which allows anyone to compile it and compare the generated bytecode with the one that is deployed on-chain.\\n\\n## \\n\\nUsing Hardhat\\n\\nTo verify your contracts using Hardhat, you'll need an [Etherscan API key](https://docs.etherscan.io/getting-started/viewing-api-usage-statistics) and custom network configuration in your `hardhat.config.ts` file. Feel free to refer to the configuration from [Mantle Hardhat Starter Kit](https://github.com/mantlenetworkio/mantle-tutorial/tree/main/mantle-hardhat-starter-kit).\\n\\nYou'll need to m",
    "odify the `hardhat.config.ts` configuration to include `customChains` before moving forward.\\n\\n```\\nconst config: HardhatUserConfig = {\\n    solidity: \\\"0.8.19\\\", // solidity version\\n    defaultNetwork: \\\"mantleTest\\\",\\n    networks: {\\n        mantle: {\\n        url: \\\"https://rpc.mantle.xyz\\\", //mainnet\\n        accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? ''],\\n        },\\n        mantleTest: {\\n        url: \\\"https://rpc.testnet.mantle.xyz\\\", // testnet\\n        accounts: [process.env.ACCOUNT_PRIVATE_KEY ?? '']\\n        }\\n    },\\n    etherscan: {\\n        apiKey: process.env.API_KEY,\\n        customChains: [\\n            {\\n                network: \\\"mantleTest\\\",\\n                chainId: 5001,\\n                urls: {\\n                apiURL: \\\"https://explorer.testnet.mantle.xyz/api\\\",\\n                browserURL: \\\"https://explorer.testnet.mantle.xyz\\\"\\n                }\\n            }\\n        ]\\n    },\\n};\\n```\\n\\nRun the following command to verify the contract located i",
    "n the **\\\"contracts\\\"** directory:\\n\\n```\\nnpx hardhat verify --network <network> DEPLOYED_CONTRACT_ADDRESS \\\"Constructor arguments\\\"\\n```\\n\\nHere's a sample request and the command line output it produces:\\n\\n```\\nnpx hardhat verify --network mantleTest 0x4ECd62E55...\\nSuccessfully submitted source code for contract\\ncontracts/Storage.sol:Storage at 0x4ECd62E55...\\nfor verification on the block explorer. Waiting for verification result...\\n\\nSuccessfully verified contract Storage on the block explorer.\\nhttps://explorer.testnet.mantle.xyz/address/0x4ECd62E554dF15d3E9A69b97A127A89155E84E18#code\\n```\\n\\nIf you see an error that says **\\\"Hardhat found multiple contracts in the project...\\\"**, see the fix on the [troubleshooting page](https://docs.mantle.xyz/network/network/for-devs/troubleshooting#contract-verification-error-hardhat-found-multiple-contracts-in-the-project-your-mytokencontract-and).\\n\\n## \\n\\nUsing Foundry\\n\\nUse the following `forge` command to verify the contract you've",
    " deployed on Mantle Testnet:\\n\\n```\\n   forge verify-contract --verifier blockscout --watch \\\\\\n   --verifier-url \\\"https://explorer.testnet.mantle.xyz/api?module=contract&action=verify\\\" \\\\\\n   --compiler-version \\\"v0.8.19+commit.7dd6d404\\\" \\\\\\n   --num-of-optimizations 200 \\\\\\n   --constructor-args $(cast abi-encode <constructor> <param>)\\n   --chain 5001 \\\\\\n   <your contract address> <path>:<contract>\\n```\\n\\n## \\n\\nUsing Remix IDE\\n\\n1.  Start by installing and activating the \\\"Etherscan - Contract Verification\\\" plugin in your Remix IDE from the plugin manager that can be accessed by clicking the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FsqEtM08KX0g8tuK6NXcL%252Fimage.png%3Falt%3Dmedia%26token%3Dfd868613-f800-475a-af4b-32bd3ba23e98&width=40&dpr=4&quality=100&sign=f86ab68&sv=2) icon\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/im",
    "age?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FsaKwZDthR67GjwaoIW4Q%252Fimage.png%3Falt%3Dmedia%26token%3D4cd1560e-932f-430a-85f2-459aafe1022b&width=768&dpr=4&quality=100&sign=c306883e&sv=2)\\n\\n1.  Once activated, you can access the plugin by clicking on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FS22UDsWa0j31ZC1SxgRS%252Fimage.png%3Falt%3Dmedia%26token%3D90ac3c9b-5b11-49a2-a3e4-30ace5429b97&width=40&dpr=4&quality=100&sign=d6edf163&sv=2) icon. Enter your Etherscan API key and save the setting\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FhQADI1bitVrfIDjwsIAV%252Fimage.png",
    "%3Falt%3Dmedia%26token%3De2d6cb0b-3066-4b73-9120-e5ef985914e4&width=768&dpr=4&quality=100&sign=81380630&sv=2)\\n\\n1.  Select the **\\\"Injected Provider - MetaMask\\\"** environment to connect to Mantle Testnet under the **\\\"Deploy and Run Transactions\\\"** tab\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FVl6K13qohzeXa0SEGNcK%252Fimage.png%3Falt%3Dmedia%26token%3Deef7eefd-dcb4-40d2-983a-ac304737815f&width=768&dpr=4&quality=100&sign=288479c6&sv=2)\\n\\n1.  Now navigate to the **\\\"Etherscan - Contract Verification\\\"** tab, select the contract you want to verify, and enter the constructor parameters (in hexadecimal), and the contract address. Then click the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fupl",
    "oads%252FN0dYm4J2aztj2WJtMRdd%252Fimage.png%3Falt%3Dmedia%26token%3D754dcd63-de71-4e4b-a1bc-841d1e60bf75&width=100&dpr=4&quality=100&sign=6e466488&sv=2) button\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FKn0jLekRLL76ycE1jjvU%252Fimage.png%3Falt%3Dmedia%26token%3Ded17602c-c9b9-43ec-91de-69502bf52b3b&width=768&dpr=4&quality=100&sign=eefe7441&sv=2)\\n\\n#### \\n\\nObtaining Constructor Parameters\\n\\nConsider the following sample contract code:\\n\\n```\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Name {\\n    constructor(string memory name) {}\\n}\\n```\\n\\nIn order to obtain the hex encoded constructor parameters, first you'll need to compile your code. Then, navigate to the **\\\"Deploy and Run Transactions\\\"** tab, enter the string parameter in the field next to the **\\\"Deploy\\\"** button, and then bring ",
    "up the drop-down menu.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252F6JcgSPbq3XvlTNHEGcXv%252Fimage.png%3Falt%3Dmedia%26token%3Dd3d85273-0f8f-4c1e-a47e-723dbdc50b95&width=768&dpr=4&quality=100&sign=b461cbe1&sv=2)\\n\\nClick on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FFRCefPUZFXeY5dak9fEs%252Fimage.png%3Falt%3Dmedia%26token%3D3560df9a-c737-44ff-b1e4-d03f9b140b5f&width=125&dpr=4&quality=100&sign=15f2cb82&sv=2) button to copy the hex encoded parameter value, and continue with the verification process.\\n\\n## \\n\\nUsing Explorer\\n\\nThere are multiple methods of verification available via Mantle Explorer.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbo",
    "ok.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FTQLxl58xUWI52AQd9A8O%252Fimage.png%3Falt%3Dmedia%26token%3D1a48d84a-e907-4c23-8c13-add5aa96530d&width=768&dpr=4&quality=100&sign=d09fb746&sv=2)\\n\\nLet's go over the steps involved in using the most popular methods.\\n\\n### \\n\\nVia Flattened Source Code\\n\\nYou can use Remix, or any other tool, to flatten your contract code.\\n\\n#### \\n\\nFlatten Using Remix\\n\\n1.  In Remix, right click on the contract file and click on **\\\"Flatten\\\"**.\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252Fu4qNlK5CKQGHijtq8AVM%252Fimage.png%3Falt%3Dmedia%26token%3D9a96e728-eb7b-4f8b-b99e-0bb0b8baf045&width=768&dpr=4&quality=100&sign=f9daa9fd&sv=2)\\n\\n1.  Flattening a contract with imports will generate a new Solidity file with the flattened code that",
    " you can copy, as shown below.\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252F96GV2wfbKEoNWkb28xnJ%252Fimage.png%3Falt%3Dmedia%26token%3D4af4100c-24ff-4289-934b-f9de872faac2&width=768&dpr=4&quality=100&sign=4c098a23&sv=2)\\n\\n#### \\n\\nFlatten Using Hardhat\\n\\nIf you're using Hardhat to flatten your contract, you can use the following command:\\n\\n```\\nnpx hardhat flatten contracts/Airdrop.sol > asAirdropFlatten.sol\\n```\\n\\nYou can copy the flattened contract code from the newly generated file.\\n\\n#### \\n\\nFlatten Using Foundry\\n\\nIf you're using Foundry to flatten your contract, you can use the following command:\\n\\n```\\nforge flatten --output src/Storage.flattened.sol src/Storage.sol\\n```\\n\\nYou can copy the flattened contract code from the newly generated file.\\n\\n#### \\n\\nPlugging Flattened Code Into Explorer\\n\\nOnce you have obta",
    "ined the flattened code, fill in the contract address, contract name, the flattened code, and other fields on Mantle Explorer and proceed with verifying your contract.\\n\\nMake sure to select the correct EVM version\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FtxkPqafhUDP4ZfbEPPgM%252Fimage.png%3Falt%3Dmedia%26token%3D0004d3b9-b89e-4ed7-93bd-0d34b1e00791&width=768&dpr=4&quality=100&sign=8205e122&sv=2)\\n\\n### \\n\\nVia Standard Input JSON\\n\\nYou can obtain the standard input JSON file by compiling your contract using any of the tools we've used so far. Let's see where the input value code can be found in each case.\\n\\n#### \\n\\nCompiled Using Remix\\n\\nThe file can be found under the **\\\"Solidity Compiler\\\"** tab that can be accessed by clicking on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2",
    "F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FboLEJb0dEHaNaEtZPuGK%252Fimage.png%3Falt%3Dmedia%26token%3D8497549c-e434-496b-81ef-82edc0750136&width=41&dpr=4&quality=100&sign=e8df46f4&sv=2) button. Click on the ![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252Fr8BSEYIOxpXRsZd1Qyks%252Fimage.png%3Falt%3Dmedia%26token%3D7bd4ea96-4e53-44ea-ac9a-210f8d6cc195&width=253&dpr=4&quality=100&sign=799074ef&sv=2) button to bring up a menu from where you can copy the **\\\"COMPILERINPUT\\\"** code, as shown below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FMPSn502a6RhgX64U4fAa%252Fimage.png%3Falt%3Dmedia%26token%3D7c6fa014-6804-483b-9d0b-2b3222ea0916&",
    "width=768&dpr=4&quality=100&sign=9c8e3d5c&sv=2)\\n\\nYou can paste and save the copied JSON code in a separate file that can later be imported to the Explorer.\\n\\n#### \\n\\nCompiled Using Hardhat\\n\\nOnce you've successfully compiled your contract code, you'll be able to find a JSON file (with a long name in hexadecimal) in the **\\\"../artifacts/build-info\\\"** directory, as shown below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FCIOcyVXuuMe5zZAI1M7v%252Fimage.png%3Falt%3Dmedia%26token%3D53e9025f-2fc6-465c-9fbd-c6824e40819f&width=768&dpr=4&quality=100&sign=49a87d35&sv=2)\\n\\nWithin this JSON file, you'll need to copy the `input` field, as shown below, and then paste the copied code into a **new** empty JSON file. You can import this file to the Explorer later.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.",
    "gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FufY8vd3kY8YfgZvgOPHI%252Fimage.png%3Falt%3Dmedia%26token%3D80c2bef0-a552-4b31-ba40-12f2895d1120&width=768&dpr=4&quality=100&sign=a27cc49c&sv=2)\\n\\n#### \\n\\nCompiled Using Foundry\\n\\nWith Foundry, you'll need to run the following command to obtain the input and output information for your contract code.\\n\\nYou'll then be able to find a JSON file (with a long name in hexadecimal) in the **\\\"../out/build-info\\\"** directory, as shown below. Copy the `input` field and paste it in a **new** empty JSON file, which you can then import to the Explorer.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FUz84HGkU3UIYsz7gwYZI%252Fimage.png%3Falt%3Dmedia%26token%3D7ab1fe90-f159-4a1a-bcb2-dd2c4c184718&width=768&dpr=4&quality=100&sign=b8d5fa",
    "be&sv=2)\\n\\n#### \\n\\nImporting JSON File to Explorer\\n\\nOnce you've obtained the standard input JSON values in a file, you can import it to the Explorer, as shown below.\\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3701411312-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNHXgeqhgrznnRobzznxl%252Fuploads%252FifGpVMK490RWMGicanp8%252Fimage.png%3Falt%3Dmedia%26token%3D54a0b22b-0f9d-4d92-b0b6-d2fcbba153bb&width=768&dpr=4&quality=100&sign=e5f85b5f&sv=2)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/deploying-contracts\",\n    \"loadedTime\": \"2025-02-15T20:33:04.635Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/",
    "tutorials/deploying-contracts\",\n    \"title\": \"Deploying Contracts | Network\",\n    \"description\": \"Different ways to deploy your contracts to Mantle Network\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Deploying Contracts | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Different ways to deploy your contracts to Mantle Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/ht4g839cqTNWNybYw8i7\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:04 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"str",
    "ict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-NzI0Mzk4YTktYmM1ZS00YzQ5LTgxOGEtY2VlOTJlNWU5ZjVj' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'sel",
    "f' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=pOkslZvRYfffLcQxEe0xzQz%2FHxyxMZNtuvC%2BtgLnpB2ze1M4dZnk%2Fc8CHeeXCIm5Xa5BH7YX6T2Oaf%2Bc4op2k%2B5sadvg7wwTQ1SDmn1OcG0WrjaZ0UUwb6Vy%2FkFgOlOa7Z075cM5qahZ%2FhX94EVX\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"91281221bf943b66-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Deploying Contracts | Network\\nDifferent ways to deploy your contracts to Mantle Network\\nLast updated 11 mon",
    "ths ago\",\n  \"markdown\": \"# Deploying Contracts | Network\\n\\nDifferent ways to deploy your contracts to Mantle Network\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers\",\n    \"loadedTime\": \"2025-02-15T20:33:08.560Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/viewing-transactions-between-layers\",\n    \"title\": \"Viewing Transactions between Layers | Network\",\n    \"description\": \"Look up transactions passed between Mantle and Ethereum\",\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\"",
    ": \"Viewing Transactions between Layers | Network\"\n      },\n      {\n        \"property\": \"og:description\",\n        \"content\": \"Look up transactions passed between Mantle and Ethereum\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/TdiWhufTWjMVR6zXGrHD\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:08 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.",
    "gitbook.com; script-src 'self' 'nonce-ZTMzMDk0MzktMGI5ZS00NGY4LWE2ZDktOTUwZWI1NDdjZGEy' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\",
    "/v4?s=XQK7kdOpT5lkccQgiRLlOA7lBGM6IWltcF8YYO2fHzs3TqsIPFc9GrO822iq40T98awDOqTX8UAbxTAjNXPA%2Flyuski5oj151mlsaj7%2FU%2B5oZmJbcfmT24CAJ4x5rtKwtTdrLFwLOnxft9J3cd3c\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128123a0ccbc55a-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Viewing Transactions between Layers | Network\\nLook up transactions passed between Mantle and Ethereum\\nMantle v2 Tectonic has been released, please move to the new documentation!\\nIn this tutorial, we'll be going over how to use the Mantle SDK to view transactions passed between Mantle network (L2) and Ethereum (L1). This function is particularly useful for dApps that make contract calls between L2 an",
    "d L1.\\nSet up local environment\\nBefore moving ahead, please make sure you have Node.js, Yarn, and Git installed and configured in your environment. We'll need to use them to download and run our example script.\\nLet's download the JS script that we'll be using to make SDK calls. The easiest way is to download the files from the Mantle GitHub repo using a Git command like so:\\ngit clone https://github.com/mantlenetworkio/mantle.git\\nWe need to configure the wallet that we're going to be using to send transactions. In the main directory, you'll see a .env.testnet file. You can specify your wallet private key in the PRIV_KEY field, and an L1_RPC URL for Goerli network. \\nNow, navigate to the ./sdk-view-tx directory and run the yarn command to download the necessary dependencies to your local environment, such as the ethers.js library, the SDK modules, and more. They can all be found in the node_modules directory once you successfully run Yarn.\\nLet's go over the files in the ./sdk-view-t",
    "x directory and see what purpose each of them serves.\\nindex.js: the main JS script that sends requests to node RPCs on L1 and L2 to query on-chain data\\npackage.json: specifies dependencies and commands for script automation\\nyarn.lock: specifies dependencies\\nScript Logic\\nWe can now start looking at the code in index.js. \\n#! /usr/local/bin/node const ethers = require(\\\"ethers\\\") const mantleSDK = require(\\\"@mantleio/sdk\\\") // Global variable because we need them almost everywhere let crossChainMessenger const setup = async () => { crossChainMessenger = new mantleSDK.CrossChainMessenger({ l1ChainId: process.env.L1_CHAINID, l2ChainId: process.env.L2_CHAINID, l1SignerOrProvider: l1Wallet, l2SignerOrProvider: l2Wallet }) }\\nWe first create a crossChainMessenger object that we'll use to fetch and view transaction information. This operation is limited to fetching public on-chain data using view functions, so we don't need signers to send these requests. However, we do need chain ID valu",
    "es to direct requests to the correct node RPC.\\n// Only the part of the ABI we need to get the symbol const ERC20ABI = [ { \\\"constant\\\": true, \\\"inputs\\\": [], \\\"name\\\": \\\"symbol\\\", \\\"outputs\\\": [ { \\\"name\\\": \\\"\\\", \\\"type\\\": \\\"string\\\" } ], \\\"payable\\\": false, \\\"stateMutability\\\": \\\"view\\\", \\\"type\\\": \\\"function\\\" } ] const getSymbol = async l1Addr => { if (l1Addr == '0x0000000000000000000000000000000000000000') return \\\"ETH\\\" if (l1Addr == '0xc1dC2d65A2243c22344E725677A3E3BEBD26E604') return \\\"MNT\\\"\\nIf the l1Addr field contains all zeroes, this implies the transferred token was $ETH. We also check the l1Addr for $MNT token's contract address.\\nconst l1Contract = new ethers.Contract(l1Addr, ERC20ABI, crossChainMessenger.l1SignerOrProvider) return await l1Contract.symbol() }\\nOtherwise, we fetch the token symbol from the contract. The same query logic can be used for both L1 and L2 contracts.\\n// Describe a cross domain transaction, either deposit or withdrawal const describeTx = async t",
    "x => { console.log(`tx:${tx.transactionHash}`) // Assume all tokens have decimals = 18 console.log(`\\\\tAmount: ${tx.amount / 1e18} ${await getSymbol(tx.l1Token)}`) console.log(`\\\\tRelayed: ${await crossChainMessenger.getMessageStatus(tx.transactionHash) == mantleSDK.MessageStatus.RELAYED}`) }\\nThe response of crossDomainMessenger.getMessageStatus()is a MessageStatus enumerated value. What we're checking for is whether the deposit/withdrawal transaction is completed or still in progress.\\nconst main = async () => { await setup() const deposits = await crossChainMessenger.getDepositsByAddress(l1Wallet.address) console.log(`Deposits by address ${addr}`) for (var i=0; i<deposits.length; i++) await describeTx(deposits[i]) const withdrawals = await crossChainMessenger.getWithdrawalsByAddress(l1Wallet.address) console.log(`\\\\n\\\\n\\\\nWithdrawals by address ${addr}`) for (var i=0; i<withdrawals.length; i++) await describeTx(withdrawals[i]) } \\nThe crossChainMessenger.getDepositsByAddress() funct",
    "ion call returns records of all deposit transactions made by an address, and crossChainMessenger.getWithdrawalsByAddress() returns records of all withdrawal transactions sent by an address. Finally, we print the deposit and withdraw records to the console.\\nRunning the Script\\nWith L1 and L2 RPC endpoints and the wallet private key configured, you can go ahead and run the index.js script by simply running the yarn testnet command. If you have a local L2 or L1 instance running in your environment, you can switch up the respective RPC URLs in the .env.local configuration file in the main directory and use the yarn local command to run the script locally.\\nResults\\nThe output would look something like:\\nDeposits by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f tx:0x3979f14c8e890aec790fa3743c2d7ae736b48aebfc9dc990e84b77cfaf744525 Amount: 1 L1EPT Relayed: true Withdrawals by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f tx:0xe650064362f163a394d3123e20029ed1b03846a6ae62e4cc8e962482",
    "c9cd4814 Amount: 1 L1EPT Relayed: false\\nConclusion\\nAt this point, you should be able to look up deposits and withdrawals performed by any specific address. There are some additional tracing functions in CrossChainMessenger, but they are very similar in terms of operation.\\nLast updated 11 months ago\",\n  \"markdown\": \"# Viewing Transactions between Layers | Network\\n\\nLook up transactions passed between Mantle and Ethereum\\n\\nMantle v2 Tectonic has been released, please move to the new [documentation](https://docs-v2.mantle.xyz/)!\\n\\nIn this tutorial, we'll be going over how to use the [Mantle SDK](https://sdk.mantle.xyz/) to view transactions passed between Mantle network (L2) and Ethereum (L1). This function is particularly useful for dApps that make contract calls between L2 and L1.\\n\\n## \\n\\nSet up local environment\\n\\nBefore moving ahead, please make sure you have [Node.js](https://nodejs.org/en/), [Yarn](https://classic.yarnpkg.com/lang/en/), and [Git](https://git-scm.com/) insta",
    "lled and configured in your environment. We'll need to use them to download and run our example script.\\n\\nLet's download the JS script that we'll be using to make SDK calls. The easiest way is to download the files from the Mantle GitHub repo using a Git command like so:\\n\\n```\\ngit clone https://github.com/mantlenetworkio/mantle.git\\n```\\n\\nWe need to configure the wallet that we're going to be using to send transactions. In the main directory, you'll see a `.env.testnet` file. You can specify your wallet private key in the `PRIV_KEY` field, and an `L1_RPC` URL for [Goerli network](https://chainlist.org/chain/5).\\n\\nNow, navigate to the `./sdk-view-tx` directory and run the `yarn` command to download the necessary dependencies to your local environment, such as the ethers.js library, the SDK modules, and more. They can all be found in the `node_modules` directory once you successfully run `Yarn`.\\n\\nLet's go over the files in the `./sdk-view-tx` directory and see what purpose each of",
    " them serves.\\n\\n*   `index.js`: the main JS script that sends requests to node RPCs on L1 and L2 to query on-chain data\\n    \\n*   `package.json`: specifies dependencies and commands for script automation\\n    \\n*   `yarn.lock`: specifies dependencies\\n    \\n\\n## \\n\\nScript Logic\\n\\nWe can now start looking at the code in `index.js`.\\n\\n```\\n#! /usr/local/bin/node\\n\\nconst ethers = require(\\\"ethers\\\")\\nconst mantleSDK = require(\\\"@mantleio/sdk\\\")\\n\\n// Global variable because we need them almost everywhere\\nlet crossChainMessenger\\n\\nconst setup = async () => {\\n  crossChainMessenger = new mantleSDK.CrossChainMessenger({\\n    l1ChainId: process.env.L1_CHAINID,\\n    l2ChainId: process.env.L2_CHAINID,\\n    l1SignerOrProvider: l1Wallet,\\n    l2SignerOrProvider: l2Wallet\\n  })\\n}\\n```\\n\\nWe first create a `crossChainMessenger` object that we'll use to fetch and view transaction information. This operation is limited to fetching public on-chain data using `view` functions, so we don't need",
    " signers to send these requests. However, we do need chain ID values to direct requests to the correct node RPC.\\n\\n```\\n// Only the part of the ABI we need to get the symbol\\nconst ERC20ABI = [\\n  {\\n    \\\"constant\\\": true,\\n    \\\"inputs\\\": [],\\n    \\\"name\\\": \\\"symbol\\\",\\n    \\\"outputs\\\": [\\n        {\\n            \\\"name\\\": \\\"\\\",\\n            \\\"type\\\": \\\"string\\\"\\n        }\\n    ],\\n    \\\"payable\\\": false,\\n    \\\"stateMutability\\\": \\\"view\\\",\\n    \\\"type\\\": \\\"function\\\"\\n  }\\n]\\n\\nconst getSymbol = async l1Addr => {\\n  if (l1Addr == '0x0000000000000000000000000000000000000000')\\n    return \\\"ETH\\\"\\n  if (l1Addr == '0xc1dC2d65A2243c22344E725677A3E3BEBD26E604')\\n    return \\\"MNT\\\"\\n```\\n\\nIf the `l1Addr` field contains all zeroes, this implies the transferred token was $ETH. We also check the `l1Addr` for $MNT token's contract address.\\n\\n```\\n const l1Contract = new ethers.Contract(l1Addr, ERC20ABI, crossChainMessenger.l1SignerOrProvider)\\n  return await l1Contract.symbol()\\n}\\n```\\n\\nO",
    "therwise, we fetch the token symbol from the contract. The same query logic can be used for both L1 and L2 contracts.\\n\\n```\\n// Describe a cross domain transaction, either deposit or withdrawal\\n\\nconst describeTx = async tx => {\\n  console.log(`tx:${tx.transactionHash}`)\\n  // Assume all tokens have decimals = 18\\n  console.log(`\\\\tAmount: ${tx.amount / 1e18} ${await getSymbol(tx.l1Token)}`)\\n  console.log(`\\\\tRelayed: ${await crossChainMessenger.getMessageStatus(tx.transactionHash)\\n    == mantleSDK.MessageStatus.RELAYED}`)\\n}\\n```\\n\\nThe response of `crossDomainMessenger.getMessageStatus()`is a `MessageStatus` enumerated value. What we're checking for is whether the deposit/withdrawal transaction is completed or still in progress.\\n\\n```\\nconst main = async () => {    \\n    await setup()\\n    const deposits = await crossChainMessenger.getDepositsByAddress(l1Wallet.address)\\n        console.log(`Deposits by address ${addr}`)\\n    for (var i=0; i<deposits.length; i++)\\n      await de",
    "scribeTx(deposits[i])\\n\\n    const withdrawals = await crossChainMessenger.getWithdrawalsByAddress(l1Wallet.address)\\n        console.log(`\\\\n\\\\n\\\\nWithdrawals by address ${addr}`)\\n    for (var i=0; i<withdrawals.length; i++)\\n      await describeTx(withdrawals[i])\\n} \\n```\\n\\nThe `crossChainMessenger.getDepositsByAddress()` function call returns records of all deposit transactions made by an address, and `crossChainMessenger.getWithdrawalsByAddress()` returns records of all withdrawal transactions sent by an address. Finally, we print the deposit and withdraw records to the console.\\n\\n## \\n\\nRunning the Script\\n\\nWith L1 and L2 RPC endpoints and the wallet private key configured, you can go ahead and run the `index.js` script by simply running the `yarn testnet` command. If you have a local L2 or L1 instance running in your environment, you can switch up the respective RPC URLs in the `.env.local` configuration file in the main directory and use the `yarn local` command to run the s",
    "cript locally.\\n\\n## \\n\\nResults\\n\\nThe output would look something like:\\n\\n```\\nDeposits by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f\\ntx:0x3979f14c8e890aec790fa3743c2d7ae736b48aebfc9dc990e84b77cfaf744525\\n        Amount: 1 L1EPT\\n        Relayed: true\\n\\nWithdrawals by address 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f\\ntx:0xe650064362f163a394d3123e20029ed1b03846a6ae62e4cc8e962482c9cd4814\\n        Amount: 1 L1EPT\\n        Relayed: false\\n```\\n\\n## \\n\\nConclusion\\n\\nAt this point, you should be able to look up deposits and withdrawals performed by any specific address. There are some additional tracing functions in [`CrossChainMessenger`](https://github.com/mantlenetworkio/mantle/blob/4e2e3fe64fc0ba62a473235ec617b4ac2fefd89c/packages/sdk/src/cross-chain-messenger.ts#L58), but they are very similar in terms of operation.\\n\\nLast updated 11 months ago\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/m",
    "igrating-usdbit-to-usdmnt-on-goerli\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/migrating-usdbit-to-usdmnt-on-goerli\",\n    \"loadedTime\": \"2025-02-15T20:33:12.454Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network?fallback=true\",\n    \"depth\": 2,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/network/for-devs/tutorials/migrating-usdbit-to-usdmnt-on-goerli\",\n    \"title\": \"Migrating $BIT to $MNT on Goerli | Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"openGraph\": [\n      {\n        \"property\": \"og:title\",\n        \"content\": \"Migrating $BIT to $MNT on Goerli | Network\"\n      },\n      {\n        \"property\": \"og:image\",\n        \"content\": \"https://docs.mantle.xyz/network/network/~gitbook/ogimage/vNnIUfUZwPG81dMToGjH\"\n      }\n    ],\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:33:09 GMT\",\n      \"",
    "content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZDA0OGQ0OTgtNDQzOS00NDVhLWFhYzUtODIwYjY2ZDU5NmZm' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-",
    "src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=qN%2Bjxb312cG2aHxYYDyItNhimk3Rsoaup7LxYzLNFW9dLk%2FVcQr3p9lneYXREhn7%2FBygmQssc7rP1aL0XxMaK%2Fn03pyzjONO6zI0MTgL4qfG5gC684orv0qcNFX494m6aIsbmkYUKCFsYkIC0XbI\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"9128123",
    "f6aef4d56-FRA\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Migrating $BIT to $MNT on Goerli\\nWith the v0.4.0 update on June 9, 2023, we have created a new $MNT token contract on Goerli, since $MNT will serve as the native token of the Mantle ecosystem moving forward. The $BIT contract remains unchanged.\\nHere’s a list of contract addresses on Goerli that we’ll interact with in this guide:\\nIn this short guide, we’ll go over how to migrate your test $BIT to $MNT on Goerli. This is to enable access to $MNT for developers and teams with existing dApps on Goerli testnet that utilize $BIT.\\nWe recommend users without developer experience to wait for the official migration tool to go live and use that to migrate tokens instead!\\nStep 1: Install Foundry and Cast\\nThe first step would be to install Foundry, since we’re going to be using a command line tool, which is part of the foundry developer toolkit, called cast to initiate $",
    "BIT approval transactions.\\nTo confirm cast is correctly installed, run this command:\\nIf cast was installed correctly, it will print out the current version, like this:\\ncast 0.2.0 (6cd6618 2022-08-11T00:05:44.416299Z)\\nStep 2: Get an API Key\\nOnce we've installed Foundry, we need to obtain an API key for a Goerli RPC node provider. For this guide, we'll use Infura.\\nCreate an API Key by clicking the “Create new API Key” button, then select “Web3 API” from the Network dropdown menu.\\nAfter entering the name of your key, move to the “Endpoints” tab where you’ll see your API Key!\\nCopy and save it somewhere! You'll need it for the next step.\\nStep 3: Approve $BIT Spending for Migration Contract\\nNow, use the following command to send a transaction to approve $BIT spending for the migration contract. You'll need to replace the arguments with your wallet address containing the $BIT tokens, private key, the amount of $BIT you want to approve, and your API key.\\nNote that the amount of $BIT",
    " needs to be specified in wei, which means 1 $BIT will need to be specified as 10^18, or 1 followed by 18 zeroes. You can use this tool for an accurate conversion. \\nThe amount you pass here is important because this is the maximum amount of $BIT the migration contract will be able to migrate. \\nMake sure your wallet has sufficient $gETH to send this transaction\\ncast send --from \\\"your address\\\" --private-key \\\"your private key\\\" 0x5a94dc6cc85fda49d8e9a8b85dde8629025c42be \\\"approve(address,uint256)\\\" 0x144D9B7F34a4e3133C6F347886fBe2700c4cb268 “amount” --rpc-url https://goerli.infura.io/v3/\\\"your api key\\\"\\nUpon running the command, you'll see a response like the following:\\nStep 4: Migrate $BIT to $MNT\\nWe can call the migration contract from Etherscan.\\nFollow the link below to navigate to the migration contract on Etherscan.\\nConnect your wallet to the webpage.\\nYou can now use the migrateAllBIT function is you've approved all the available $BIT in your wallet. To specify an amount,",
    " use the migrateBIT function and enter the amount in wei. This means 1 $BIT will be denoted as 10^18, or 1 followed by 18 zeroes. You can use this tool for an accurate conversion. Use the \\\"+\\\" button to select and enter an initial value automatically.\\nClick on the write button to send the transaction.\\nOnce the transaction is sent out successfully, you'll see the $MNT balance update in your wallet.\\nIf you don't see the balance updates, make sure you're connected to Goerli and have imported the $MNT token to your wallet. If you haven't, you can do so using the $MNT token contract address: 0xc1dC2d65A2243c22344E725677A3E3BEBD26E604\",\n  \"markdown\": \"# Migrating $BIT to $MNT on Goerli\\n\\nWith the v0.4.0 update on June 9, 2023, we have created a new $MNT token contract on Goerli, since $MNT will serve as the native token of the Mantle ecosystem moving forward. The $BIT contract remains unchanged.\\n\\nHere’s a list of contract addresses on Goerli that we’ll interact with in this guide:\\n\\n",
    "In this short guide, we’ll go over how to migrate your test $BIT to $MNT on Goerli. This is to enable access to $MNT for developers and teams with existing dApps on Goerli testnet that utilize $BIT.\\n\\nWe recommend users without developer experience to wait for the official migration tool to go live and use that to migrate tokens instead!\\n\\n## \\n\\nStep 1: Install Foundry and Cast\\n\\nThe first step would be to install Foundry, since we’re going to be using a command line tool, which is part of the foundry developer toolkit, called `cast` to initiate $BIT approval transactions.\\n\\n2.  To confirm `cast` is correctly installed, run this command:\\n    \\n\\nIf cast was installed correctly, it will print out the current version, like this:\\n\\n```\\ncast 0.2.0 (6cd6618 2022-08-11T00:05:44.416299Z)\\n```\\n\\n## \\n\\nStep 2: Get an API Key\\n\\nOnce we've installed Foundry, we need to obtain an API key for a Goerli RPC node provider. For this guide, we'll use Infura.\\n\\n2.  Create an API Key by clicki",
    "ng the “Create new API Key” button, then select “Web3 API” from the Network dropdown menu.\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Flh3.googleusercontent.com%2FXamXVurDlaoPj8zsh8f-0Zr2zrNk8D4Ay0L4FhcVjNtWFGE5ZQJDdtT2GZJdlZS_ZqZLn79e1cRFzquzRvbU_hxGHCAtzqJXe2rfD2-FmWwGyqNmr0PhHBCjGDqCaBEQf-0d1FcgTKW4Tk8SO2ctqc8&width=768&dpr=4&quality=100&sign=74d1a928&sv=2)\\n\\n1.  After entering the name of your key, move to the “Endpoints” tab where you’ll see your API Key!\\n    \\n\\n![](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2Flh4.googleusercontent.com%2FnC5d8mUDUlCq5XUpBsn0x-TrQdBIyXeJcK69Qssx0QXlfVQvsAYr69GWCASP_U1YBI9lQzCZpcZ2WgYXhyYPWDmiaG_eodTm4cT4oajvKI3CgkftJ4xqwUTzmWlvKnqoYSaFllpo32_LEvRnVls3YxU&width=768&dpr=4&quality=100&sign=39e05051&sv=2)\\n\\nCopy and save it somewhere! You'll need it for the next step.\\n\\n## \\n\\nStep 3: Approve $BIT Spending for Migration Contract\\n\\nNow, use the following command to send a transaction to approve $BIT spending f",
    "or the migration contract. You'll need to replace the arguments with your wallet address containing the $BIT tokens, private key, the amount of $BIT you want to approve, and your API key.\\n\\nNote that the amount of $BIT needs to be specified in _**wei**_, which means 1 $BIT will need to be specified as 10^18, or 1 followed by 18 zeroes. You can use [this tool](https://eth-converter.com/) for an accurate conversion.\\n\\nThe amount you pass here is important because this is the maximum amount of $BIT the migration contract will be able to migrate.\\n\\nMake sure your wallet has sufficient $gETH to send this transaction\\n\\n```\\ncast send --from \\\"your address\\\" --private-key \\\"your private key\\\" 0x5a94dc6cc85fda49d8e9a8b85dde8629025c42be \\\"approve(address,uint256)\\\" 0x144D9B7F34a4e3133C6F347886fBe2700c4cb268 “amount” --rpc-url https://goerli.infura.io/v3/\\\"your api key\\\"\\n```\\n\\nUpon running the command, you'll see a response like the following:\\n\\n![](https://docs.mantle.xyz/~gitbook/image?",
    "url=https%3A%2F%2Flh6.googleusercontent.com%2F6MnQtj-iY3y-_hW2O6xxt40NPkEFl9_HjjmjlpQHRXupH_OHJAoDzs2sSLZttmM6Pic-T1mvFRlbYs5RMUjb91RQoFirSJQx3o5wvsnT8a5_daWgDMiIyisYbhzNrJvK4xix6p5xLaW-ZPmV4JeJVJ4&width=768&dpr=4&quality=100&sign=11716ea0&sv=2)\\n\\n## \\n\\nStep 4: Migrate $BIT to $MNT\\n\\nWe can call the migration contract from Etherscan.\\n\\n1.  Follow the link below to navigate to the migration contract on Etherscan.\\n    \\n\\n1.  Connect your wallet to the webpage.\\n    \\n2.  You can now use the `migrateAllBIT` function is you've approved all the available $BIT in your wallet. To specify an amount, use the `migrateBIT` function and enter the amount in _**wei**__._ This means 1 $BIT will be denoted as 10^18, or 1 followed by 18 zeroes. You can use [this tool](https://eth-converter.com/) for an accurate conversion. Use the \\\"+\\\" button to select and enter an initial value automatically.\\n    \\n3.  Click on the write button to send the transaction.\\n    \\n\\nOnce the transaction is sent out",
    " successfully, you'll see the $MNT balance update in your wallet.\\n\\nIf you don't see the balance updates, make sure you're connected to Goerli and have imported the $MNT token to your wallet. If you haven't, you can do so using the $MNT token contract address: `0xc1dC2d65A2243c22344E725677A3E3BEBD26E604`\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs\",\n    \"loadedTime\": \"2025-02-15T20:34:42.368Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"depth\": 3\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2",
    "025 20:34:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-M2ZjN2Q2MGItOTFjNC00ZDA0LWExODAtMzY0ZjEwOTdmYjE4' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connec",
    "t-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=Y1ZqN5wvT8nu8KCjf6tQGs5RkA8ZPgngtjBTyYsceEW2oMfRmBBHiYdoapv%2FMRV68HD%2B9xflw6WuPSgOY25F7DGKFhOWkiJ554NsMYeFhFIahs%2B4WF2ih5UT9LORieMo%2FUsq82wQqOfihvYvWfgr\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3",
    "d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814830f47059b-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D4",
    "5731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/concepts/fraud-proofs?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/concepts/fraud-proofs?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme\",\n    \"loadedTime\": \"2025-02-15T20:34:42.657Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/int",
    "roduction/security-model-and-roles\",\n    \"depth\": 3\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:34:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-OGY2NzFmOWMtM",
    "GY5Ni00Nzg5LWI4YTYtYjc1ZmU0ZTc3NTQ0' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=h%2BaSIa%2F7KG4gyVrB21j1vQ3FkK%2BpQsvMf8scU9u",
    "2P7PfaGFzDYIapqp68MBSJ63feSH3avKVsD0VAqw6G6Un9a%2F%2FDfyuSI%2Fuhozdc6zXPubhOW%2BBii6ptLBpZ0xp8zHaHeVjhx9N00cbEIj3Dsc4\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814839a87a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGovernance\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cd",
    "c-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/concepts/threshold-signature-scheme?fallback=true)[Mantle v1](https://docs.mantle.xyz/network/network/introduction/concepts/threshold-signature-scheme?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mant",
    "le.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/additional-documents/audits\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/additional-documents/audits\",\n    \"loadedTime\": \"2025-02-15T20:34:43.782Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"depth\": 3,\n    \"httpStatusCode\": 200\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/additional-documents/audits\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:34:42 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=preconnect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"va",
    "ry\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-ZWVjNmMwOTItZGRjNy00MDczLWI1MjMtZDY1ODM1MzE2OTUw' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https://static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0, \\\"report_to\\",
    "\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=dCQc9Xi0eC5DIwwgo8D5QzpZn3C4MbHwyGQ9omiU76xBWx1gcASup3v8qc%2BFBEXexbvpueeebiHUMWuanhTr08xqOD%2BnE81K%2FRSApmo3R7YO63WK0tt7RQjuyKBw67EdAf953rYlvy2bmPSbdyvb\\\"}], \\\"group\\\":\\\"cf-nel\\\", \\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072, site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814830ee9b023-ATL\",\n      \"content-encoding\": \"br\",\n      \"x-firefox-spdy\": \"h2\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nPage not found\\nThe page you are looking for doesn't exist.\",\n  \"markdown\": \"# Network\\n\\n## Page not found\\n\\nThe page you are",
    " looking for doesn't exist.\",\n  \"debug\": {\n    \"requestHandlerMode\": \"browser\"\n  }\n},\n{\n  \"url\": \"https://docs.mantle.xyz/network/introduction/concepts/data-availability\",\n  \"crawl\": {\n    \"loadedUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/data-availability\",\n    \"loadedTime\": \"2025-02-15T20:34:48.562Z\",\n    \"referrerUrl\": \"https://docs.mantle.xyz/network/network/introduction/security-model-and-roles\",\n    \"depth\": 3\n  },\n  \"metadata\": {\n    \"canonicalUrl\": \"https://docs.mantle.xyz/network/introduction/concepts/data-availability\",\n    \"title\": \"Network\",\n    \"description\": null,\n    \"author\": null,\n    \"keywords\": null,\n    \"languageCode\": \"en\",\n    \"jsonLd\": null,\n    \"headers\": {\n      \"date\": \"Sat, 15 Feb 2025 20:34:48 GMT\",\n      \"content-type\": \"text/html; charset=utf-8\",\n      \"transfer-encoding\": \"chunked\",\n      \"connection\": \"keep-alive\",\n      \"cf-cache-status\": \"DYNAMIC\",\n      \"cache-control\": \"no-cache\",\n      \"link\": \"<https://static.gitbook.com>; rel=pre",
    "connect; crossorigin=\\\"\\\"\",\n      \"strict-transport-security\": \"max-age=31536000\",\n      \"vary\": \"RSC, Next-Router-State-Tree, Next-Router-Prefetch, Accept-Encoding\",\n      \"x-matched-path\": \"/middleware/[[...pathname]]\",\n      \"cf-placement\": \"remote-ORD\",\n      \"content-security-policy\": \"default-src 'self' https://static.gitbook.com; script-src 'self' 'nonce-Y2Q3OTgyNWUtNTJhZC00NWQ2LTg4MzEtOTM3Zjc1NGExYzJk' 'strict-dynamic' 'unsafe-inline' 'unsafe-eval' https://static.gitbook.com https://integrations.gitbook.com https://cdn.iframe.ly; style-src 'self' https://static.gitbook.com fonts.googleapis.com 'unsafe-inline'; img-src * 'self' blob: data: files.gitbook.com https://static.gitbook.com https://ka-p.fontawesome.com; connect-src * 'self' integrations.gitbook.com app.gitbook.com api.gitbook.com srv.buysellads.com https://static.gitbook.com https://ka-p.fontawesome.com; font-src 'self' fonts.gstatic.com https://static.gitbook.com; frame-src *; object-src 'none'; base-uri 'self' https:",
    "//static.gitbook.com; form-action 'self' https://static.gitbook.com; frame-ancestors https: ;\",\n      \"nel\": \"{\\\"success_fraction\\\":0,\\\"report_to\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"referrer-policy\": \"no-referrer-when-downgrade\",\n      \"report-to\": \"{\\\"endpoints\\\":[{\\\"url\\\":\\\"https:\\\\/\\\\/a.nel.cloudflare.com\\\\/report\\\\/v4?s=M649YA5p2JyOROb74G%2FM%2Fjb5%2FBhCpCxSpkzN%2Bm3Tvon4uc5z3CYJmHaB756ThFhAcFtDp8C1wi7XBSieOAiXtM2J%2FPR9p1%2FduRf6MI795cOU%2FR5aqc96oSog%2Fy%2BuRujCDPDTJ07Zmu8m82uP5LiV\\\"}],\\\"group\\\":\\\"cf-nel\\\",\\\"max_age\\\":604800}\",\n      \"x-content-type-options\": \"nosniff\",\n      \"x-edge-runtime\": \"1\",\n      \"x-gitbook-cache\": \"miss\",\n      \"x-gitbook-cache-tag\": \"release-10.9.1072,site:site_GuZBK\",\n      \"x-gitbook-version\": \"3d1eb53\",\n      \"x-http-method\": \"GET\",\n      \"server\": \"cloudflare\",\n      \"cf-ray\": \"912814aaddb5a5f2-IAD\",\n      \"content-encoding\": \"br\"\n    }\n  },\n  \"screenshotUrl\": null,\n  \"text\": \"Network\\nMantle v2\\nMantle v2Mantle v1\\nNetworkmETH ProtocolGoverna",
    "nce\\nNetworkmETH ProtocolGovernance\",\n  \"markdown\": \"# Network\\n\\n[![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FiSYKiak0bTp85fj4vIma%252F20250123-161739.png%3Falt%3Dmedia%26token%3Dd8d0d356-9c6a-4cdc-aa79-c596f900edfc&width=260&dpr=4&quality=100&sign=5ce71c81&sv=2)![Logo](https://docs.mantle.xyz/~gitbook/image?url=https%3A%2F%2F3174261684-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Forganizations%252Fjeligj1uRDI1sIBiNYW5%252Fsites%252Fsite_GuZBK%252Flogo%252FSpxsnWIhLEEq4fhK8cCO%252F20250123-155217.png%3Falt%3Dmedia%26token%3D45731ca2-1e09-42e1-a70a-2b60aa83fb49&width=260&dpr=4&quality=100&sign=4fa63a34&sv=2)](https://docs.mantle.xyz/network)\\n\\nMantle v2\\n\\n[Mantle v2](https://docs.mantle.xyz/network/introduction/concepts/data-availability?fallback=true)[Mantle v1](https://do",
    "cs.mantle.xyz/network/network/introduction/concepts/data-availability?fallback=true)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\\n\\n[Network](https://docs.mantle.xyz/network/network/)[mETH Protocol](https://docs.mantle.xyz/meth)[Governance](https://docs.mantle.xyz/governance/)\",\n  \"debug\": {\n    \"requestHandlerMode\": \"http\"\n  }\n}]"
  ]
}